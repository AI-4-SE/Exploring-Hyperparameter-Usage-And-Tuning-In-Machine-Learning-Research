{
    "ddpg.py": {
        "tensorflow": {
            "InteractiveSession_41": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_45": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_checkpoint_state_46": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "saved_networks",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SummaryWriter_54": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_63": {
                "variable": {
                    "value": "self.state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, state_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "state",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_73": {
                "variable": {
                    "value": "mean_q",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "networks.q_network(self.state, self.action_test, theta_q)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_74": {
                "variable": {
                    "value": "weight_decay_p",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[L2_POLICY * tf.nn.l2_loss(var) for var in theta_p]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_77": {
                "variable": {
                    "value": "optim_p",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "P_LEARNING_RATE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                }
            },
            "placeholder_84": {
                "variable": {
                    "value": "self.action_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, action_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "action_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_85": {
                "variable": {
                    "value": "self.reward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "reward",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_86": {
                "variable": {
                    "value": "self.next_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, state_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "next_state",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_87": {
                "variable": {
                    "value": "self.done",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "done",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stop_gradient_92": {
                "variable": {
                    "value": "q_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.select(self.done, self.reward, self.reward + GAMMA * next_q)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_95": {
                "variable": {
                    "value": "q_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(q_target - q_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_96": {
                "variable": {
                    "value": "weight_decay_q",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[L2_Q * tf.nn.l2_loss(var) for var in theta_q]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_99": {
                "variable": {
                    "value": "optim_q",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "Q_LEARNING_RATE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                }
            },
            "ExponentialMovingAverage_168": {
                "variable": {
                    "value": "ema",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "1 - tau",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "group_81": {
                "variable": {
                    "value": "self.train_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "target_update_p",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "group_103": {
                "variable": {
                    "value": "self.train_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "target_update_q",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "initialize_all_variables_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_80": {
                "control_inputs": {
                    "value": "[optimize_p]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "select_92": {
                "condlist": {
                    "value": "self.done",
                    "type": "Attribute",
                    "possible_values": []
                },
                "choicelist": {
                    "value": "self.reward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default": {
                    "value": "self.reward + GAMMA * next_q",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_95": {
                "x": {
                    "value": "q_target - q_train",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_102": {
                "control_inputs": {
                    "value": "[optimize_q]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_loss_74": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "l2_loss_96": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "gym_torcs.py": {
        "tensorflow": {}
    },
    "networks.py": {
        "tensorflow": {
            "identity_25": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "h0-state",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_26": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(h0, theta[0]) + theta[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "h1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_27": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(h1, theta[2]) + theta[3]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "h2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_28": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.matmul(h2, theta[4]) + theta[5]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "h3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_29": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(tf.matmul(h2, theta[4]) + theta[5], name='h3')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "h4-action",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_44": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "h0-state",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_45": {
                "variable": {
                    "value": "h0a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.tanh(h3, name='h4-action')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "h0-act",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_46": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(h0, theta[0]) + theta[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "h1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_47": {
                "variable": {
                    "value": "h1a",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[h1, action]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_48": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(h1a, theta[2]) + theta[3]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "h2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_50": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(h2, theta[4]) + theta[5]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "h3-q",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_15": {
                "name_or_scope": {
                    "value": "theta_p",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_34": {
                "name_or_scope": {
                    "value": "theta_q",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_16": {
                "initial_value": {
                    "value": "fanin_init([state_dim, l1])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "1w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_17": {
                "initial_value": {
                    "value": "fanin_init([l1], state_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "1b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_18": {
                "initial_value": {
                    "value": "fanin_init([l1, l2])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "2w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_19": {
                "initial_value": {
                    "value": "fanin_init([l2], l1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "2b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_20": {
                "initial_value": {
                    "value": "tf.random_uniform([l2, action_dim], -0.003, 0.003)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "3w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_21": {
                "initial_value": {
                    "value": "tf.random_uniform([action_dim], -0.003, 0.003)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "3b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_35": {
                "initial_value": {
                    "value": "fanin_init([state_dim, l1])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "1w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_36": {
                "initial_value": {
                    "value": "fanin_init([l1], state_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "1b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_37": {
                "initial_value": {
                    "value": "fanin_init([l1 + action_dim, l2])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "2w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_38": {
                "initial_value": {
                    "value": "fanin_init([l2], l1 + action_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "2b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_39": {
                "initial_value": {
                    "value": "tf.random_uniform([l2, 1], -0.003, 0.003)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "3w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_40": {
                "initial_value": {
                    "value": "tf.random_uniform([1], -0.003, 0.003)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "3b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_49": {
                "a": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(h1, theta[2]) + theta[3], name='h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.matmul(h1a, theta[2]) + theta[3], name='h2')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "theta[4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_26": {
                "a": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(state, name='h0-state')",
                            "Call"
                        ],
                        [
                            "tf.identity(state, name='h0-state')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "theta[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_27": {
                "a": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(h0, theta[0]) + theta[1], name='h1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.matmul(h0, theta[0]) + theta[1], name='h1')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "theta[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_28": {
                "a": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(h1, theta[2]) + theta[3], name='h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.matmul(h1a, theta[2]) + theta[3], name='h2')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "theta[4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_46": {
                "a": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(state, name='h0-state')",
                            "Call"
                        ],
                        [
                            "tf.identity(state, name='h0-state')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "theta[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_48": {
                "a": {
                    "value": "h1a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(1, [h1, action])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "theta[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "ou_noise.py": {
        "tensorflow": {
            "constant_16": {
                "variable": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_17": {
                "variable": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.15",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_18": {
                "variable": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "multiply_19": {
                "variable": {
                    "value": "self.state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones(self.action_dimension)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_23": {
                "variable": {
                    "value": "self.state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones(self.action_dimension)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_27": {
                "variable": {
                    "value": "dx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(self.theta, tf.sub(self.mu, x))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.multiply(self.sigma, tf.random_normal([tf.size(x)]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_28": {
                "variable": {
                    "value": "self.state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.state",
                            "Attribute"
                        ]
                    ]
                },
                "y": {
                    "value": "dx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.multiply(self.theta, tf.sub(self.mu, x)), tf.multiply(self.sigma, tf.random_normal([tf.size(x)])))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_19": {
                "shape": {
                    "value": "self.action_dimension",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_23": {
                "shape": {
                    "value": "self.action_dimension",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_27": {
                "x": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.random_normal([tf.size(x)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "size_27": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.state",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    }
}