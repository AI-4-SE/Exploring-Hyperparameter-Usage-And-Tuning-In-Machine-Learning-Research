{
    "ASL_search/autoloss_ppo_bezier.py": {
        "torch": {
            "cat_216": {
                "variable": {
                    "value": "theta_groups",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "theta_groups",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(theta_groups, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_217": {
                "variable": {
                    "value": "reward_groups",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "reward_groups",
                    "type": "Call",
                    "possible_values": [
                        [
                            "reward_groups - mean_reward",
                            "BinOp"
                        ],
                        [
                            "reward_groups.view(-1, 1).detach()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(reward_groups, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_271": {
                "variable": {
                    "value": "theta_group",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(torch.distributed.get_world_size() * self.num_models_per_gpu, self.num_theta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.cuda.current_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_311": {
                "variable": {
                    "value": "reward_group",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.distributed.get_world_size() * self.num_models_per_gpu",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.cuda.current_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_563": {
                "seed": {
                    "value": "torch.distributed.get_rank()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_123": {
                "variable": {
                    "value": "self.PolicyOptimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[self.mu_x]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.cfg.mu_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_278": {
                "tensor": {
                    "value": "theta_group",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros((torch.distributed.get_world_size() * self.num_models_per_gpu, self.num_theta), device=torch.cuda.current_device())",
                            "Call"
                        ],
                        [
                            "self.sampler.sample(torch.distributed.get_world_size() * self.num_models_per_gpu - 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([self.sampler.mu.clone().detach().view(1, -1), theta_group], dim=0)",
                            "Call"
                        ],
                        [
                            "self.sampler.sample(torch.distributed.get_world_size() * self.num_models_per_gpu)",
                            "Call"
                        ]
                    ]
                },
                "src": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_114": {
                "variable": {
                    "value": "self.sigma_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "cfg.sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.cuda.current_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_114": {
                "variable": {
                    "value": "self.sigma_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LambdaLR_128": {
                "variable": {
                    "value": "self.LR_Scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.PolicyOptimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lambda epoch: 1.0",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cat_275": {
                "variable": {
                    "value": "theta_group",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.sampler.mu.clone().detach().view(1, -1), theta_group]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_97": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LambdaLR_131": {
                "variable": {
                    "value": "self.LR_Scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.PolicyOptimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lambda epoch: 1 - float(epoch) / float(self.cfg.sample_times + 1)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "min_178": {
                "variable": {
                    "value": "policy_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "discount * reward_groups",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "current_device_271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_311": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_439": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_117": {
                "*size": {
                    "value": "self.num_theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.cuda.current_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_111": {
                "input": {
                    "value": "1.0 / torch.tensor(cfg.mu, dtype=torch.float, device=torch.cuda.current_device()) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_116": {
                "*size": {
                    "value": "self.num_theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.cuda.current_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "current_device_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_445": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_112": {
                "data": {
                    "value": "cfg.mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.cuda.current_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_421": {
                "input": {
                    "value": "m_c",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "current_device_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ASL_search/truncated_normal.py": {
        "torch": {
            "Normal_26": {
                "variable": {
                    "value": "self.normal_sampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros(self.n_params, device=torch.cuda.current_device())",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.ones(self.n_params, device=torch.cuda.current_device())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Uniform_27": {
                "variable": {
                    "value": "self.uniform_sampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "torch.zeros(self.n_params, device=torch.cuda.current_device())",
                    "type": "Call",
                    "possible_values": []
                },
                "high": {
                    "value": "torch.ones(self.n_params, device=torch.cuda.current_device())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_40": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * p - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-1 + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_43": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.mu.view(1, -1) + 2 ** 0.5 * torch.erfinv(v) * self.sigma.view(1, -1)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x, self.a, self.b)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_26": {
                "*size": {
                    "value": "self.n_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.cuda.current_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_26": {
                "*size": {
                    "value": "self.n_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.cuda.current_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_27": {
                "*size": {
                    "value": "self.n_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.cuda.current_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_27": {
                "*size": {
                    "value": "self.n_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.cuda.current_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "data": {
                    "value": "-np.inf",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.cuda.current_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "current_device_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "erfinv_42": {
                "input": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.clamp(2 * p - 1, -1 + epsilon, 1 - epsilon)",
                            "Call"
                        ]
                    ]
                }
            },
            "current_device_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/apis/inference.py": {
        "torch": {
            "no_grad_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/apis/test.py": {
        "torch": {
            "tensor_211": {
                "variable": {
                    "value": "part_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bytearray(pickle.dumps(result_part))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_214": {
                "variable": {
                    "value": "shape_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "part_tensor.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_218": {
                "variable": {
                    "value": "shape_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "shape_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[shape_tensor.clone() for _ in range(world_size)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "max_218": {
                "variable": {
                    "value": "shape_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_219": {
                "variable": {
                    "value": "part_send",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape_max",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(shape_list).max()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "full_171": {
                "variable": {
                    "value": "dir_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(MAX_LEN,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_177": {
                "variable": {
                    "value": "tmpdir",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bytearray(tmpdir.encode())",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "broadcast_180": {
                "tensor": {
                    "value": "dir_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.full((MAX_LEN,), 32, dtype=torch.uint8, device='cuda')",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/apis/train.py": {
        "torch": {
            "manual_seed_26": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_27": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "current_device_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/core/evaluation/eval_hooks.py": {
        "torch": {}
    },
    "mmseg/core/evaluation/metrics.py": {
        "torch": {
            "histc_59": {
                "variable": {
                    "value": "area_intersect",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "intersect.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "bins": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "histc_61": {
                "variable": {
                    "value": "area_pred_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_label.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "bins": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "histc_63": {
                "variable": {
                    "value": "area_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "bins": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_97": {
                "variable": {
                    "value": "total_area_intersect",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_classes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_98": {
                "variable": {
                    "value": "total_area_union",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_classes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_99": {
                "variable": {
                    "value": "total_area_pred_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_classes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_100": {
                "variable": {
                    "value": "total_area_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_classes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_36": {
                "variable": {
                    "value": "pred_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(pred_label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_38": {
                "variable": {
                    "value": "pred_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pred_label",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.load(pred_label))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pred_label)",
                            "Call"
                        ],
                        [
                            "pred_label[mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_41": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mmcv.imread(label, flag='unchanged', backend='pillow')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_44": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(mmcv.imread(label, flag='unchanged', backend='pillow'))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(label)",
                            "Call"
                        ],
                        [
                            "label - 1",
                            "BinOp"
                        ],
                        [
                            "label[mask]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "mmseg/core/evaluation/metrics_fast.py": {
        "torch": {
            "zeros_9": {
                "variable": {
                    "value": "self.confusion_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.num_class,) * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_10": {
                "variable": {
                    "value": "self.confusion_matrix_boundary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.num_class,) * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bincount_54": {
                "variable": {
                    "value": "count",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.from_numpy(gt_seg_maps[i])",
                            "Call"
                        ],
                        [
                            "label - 1",
                            "BinOp"
                        ],
                        [
                            "self.num_class * gt_image[mask].to(torch.long) + pre_image[mask]",
                            "BinOp"
                        ]
                    ]
                },
                "minlength": {
                    "value": "self.num_class ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_79": {
                "variable": {
                    "value": "self.confusion_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.num_class,) * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "variable": {
                    "value": "self.confusion_matrix_boundary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.num_class,) * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_94": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gt_seg_maps[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "diag_17": {
                "input": {
                    "value": "self.confusion_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_23": {
                "input": {
                    "value": "self.confusion_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_27": {
                "input": {
                    "value": "self.confusion_matrix_boundary",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_44": {
                "input": {
                    "value": "self.confusion_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_48": {
                "input": {
                    "value": "self.confusion_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "diag_19": {
                "input": {
                    "value": "self.confusion_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_29": {
                "input": {
                    "value": "self.confusion_matrix_boundary",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_102": {
                "ndarray": {
                    "value": "results[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_18": {
                "input": {
                    "value": "self.confusion_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_28": {
                "input": {
                    "value": "self.confusion_matrix_boundary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/core/evaluation/utils.py": {
        "torch": {
            "AvgPool2d_20": {
                "variable": {
                    "value": "avgpool",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_33": {
                "variable": {
                    "value": "maxpool",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2 * int(tol) + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "int(tol)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_68": {
                "variable": {
                    "value": "match_fg",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_69": {
                "variable": {
                    "value": "match_gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bincount_105": {
                "variable": {
                    "value": "count",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_class * target[mask].long() + output[mask]",
                            "BinOp"
                        ]
                    ]
                },
                "minlength": {
                    "value": "num_class ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_6": {
                "data": {
                    "value": "[num_class]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/core/seg/sampler/ohem_pixel_sampler.py": {
        "torch": {
            "no_grad_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_49": {
                "variable": {
                    "value": "seg_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/datasets/builder.py": {
        "torch": {
            "DistributedSampler_117": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ConcatDataset([build_dataset(c, default_args) for c in cfg])",
                            "Call"
                        ],
                        [
                            "RepeatDataset(build_dataset(cfg['dataset'], default_args), cfg['times'])",
                            "Call"
                        ],
                        [
                            "_concat_dataset(cfg, default_args)",
                            "Call"
                        ],
                        [
                            "build_from_cfg(cfg, DATASETS, default_args)",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "world_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "rank": {
                    "value": "rank",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "mmseg/datasets/custom.py": {
        "torch": {}
    },
    "mmseg/datasets/dataset_wrappers.py": {
        "torch": {}
    },
    "mmseg/datasets/pipelines/formating.py": {
        "torch": {
            "from_numpy_25": {
                "ndarray": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "tensor_27": {
                "data": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            }
        }
    },
    "mmseg/models/backbones/cgnet.py": {
        "torch": {
            "AdaptiveAvgPool2d_32": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(channel, channel // reduction)",
                    "type": null,
                    "possible_values": []
                }
            },
            "PReLU_129": {
                "variable": {
                    "value": "self.activate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "2 * channels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_175": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_247": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_265": {
                "variable": {
                    "value": "self.norm_prelu_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_norm_layer(norm_cfg, cur_channels)[1]",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_270": {
                "variable": {
                    "value": "self.level1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_285": {
                "variable": {
                    "value": "self.norm_prelu_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_norm_layer(norm_cfg, cur_channels)[1]",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_290": {
                "variable": {
                    "value": "self.level2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_305": {
                "variable": {
                    "value": "self.norm_prelu_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_norm_layer(norm_cfg, cur_channels)[1]",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "joi_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[loc, sur]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sigmoid_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PReLU_267": {
                "num_parameters": {
                    "value": "cur_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "num_channels[0]",
                            "Subscript"
                        ],
                        [
                            "cur_channels + in_channels",
                            "BinOp"
                        ],
                        [
                            "2 * num_channels[1] + in_channels",
                            "BinOp"
                        ],
                        [
                            "2 * num_channels[2]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "PReLU_287": {
                "num_parameters": {
                    "value": "cur_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "num_channels[0]",
                            "Subscript"
                        ],
                        [
                            "cur_channels + in_channels",
                            "BinOp"
                        ],
                        [
                            "2 * num_channels[1] + in_channels",
                            "BinOp"
                        ],
                        [
                            "2 * num_channels[2]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "PReLU_307": {
                "num_parameters": {
                    "value": "cur_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "num_channels[0]",
                            "Subscript"
                        ],
                        [
                            "cur_channels + in_channels",
                            "BinOp"
                        ],
                        [
                            "2 * num_channels[1] + in_channels",
                            "BinOp"
                        ],
                        [
                            "2 * num_channels[2]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_317": {
                "tensors": {
                    "value": "[x, inp_2x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_325": {
                "tensors": {
                    "value": "[x, down1, inp_4x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_333": {
                "tensors": {
                    "value": "[down2, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_177": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/backbones/fast_scnn.py": {
        "torch": {
            "cat_176": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, *self.ppm(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_233": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_170": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/backbones/hrnet.py": {
        "torch": {
            "ReLU_44": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_313": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, self.in_channels[branch_index], num_channels[branch_index] * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_107": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_117": {
                "modules": {
                    "value": "branches",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_183": {
                "modules": {
                    "value": "fuse_layers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_416": {
                "modules": {
                    "value": "transition_layers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_422": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_452": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_482": {
                "*args": {
                    "value": "*hr_modules",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_181": {
                "modules": {
                    "value": "fuse_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_414": {
                "*args": {
                    "value": "*conv_downsamples",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_133": {
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, in_channels[j], in_channels[i], kernel_size=1, stride=1, padding=0, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_382": {
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, num_channels_pre_layer[i], num_channels_cur_layer[i], kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_403": {
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, in_channels, out_channels, kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_180": {
                "*args": {
                    "value": "*conv_downsamples",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_393": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_413": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_155": {
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, in_channels[j], in_channels[i], kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_168": {
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, in_channels[j], in_channels[j], kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_179": {
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/backbones/mobilenet_v2.py": {
        "torch": {
            "Sequential_134": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/backbones/mobilenet_v3.py": {
        "torch": {}
    },
    "mmseg/models/backbones/resnest.py": {
        "torch": {
            "ReLU_97": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_129": {
                "variable": {
                    "value": "gap",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gap",
                    "type": "Call",
                    "possible_values": [
                        [
                            "splits.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "F.adaptive_avg_pool2d(gap, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(gap)",
                            "Call"
                        ],
                        [
                            "self.norm1(gap)",
                            "Call"
                        ],
                        [
                            "self.relu(gap)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_32": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.view(batch, self.groups, self.radix, -1).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch, -1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.norm0(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_35": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.view(batch, self.groups, self.radix, -1).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch, -1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.norm0(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_140": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attens * splits",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_216": {
                "variable": {
                    "value": "self.avd_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.conv2_stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/backbones/resnet.py": {
        "torch": {
            "ReLU_51": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_208": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_579": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_535": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, in_channels, stem_channels // 2, kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_578": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_545": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_555": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_565": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/backbones/unet.py": {
        "torch": {
            "Sequential_74": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convs",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_126": {
                "variable": {
                    "value": "deconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_channels * 2 ** i",
                            "BinOp"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "scale_factor",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(kernel_size - scale_factor) // 2",
                            "BinOp"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_135": {
                "variable": {
                    "value": "self.deconv_upsamping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_205": {
                "variable": {
                    "value": "upsample",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_334": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_335": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_207": {
                "variable": {
                    "value": "self.interp_upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_209": {
                "variable": {
                    "value": "self.interp_upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "upsample",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_373": {
                "*args": {
                    "value": "*enc_conv_block",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_341": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/builder.py": {
        "torch": {
            "Sequential_31": {
                "*args": {
                    "value": "*modules",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/ann_head.py": {
        "torch": {
            "cat_28": {
                "variable": {
                    "value": "concat_outs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ppm_outs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_103": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_128": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "priors",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[stage(high_feats, low_feats) for stage in self.stages]",
                            "ListComp"
                        ],
                        [
                            "[stage(feats, feats) for stage in self.stages]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_128": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_153": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_178": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "priors",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[stage(high_feats, low_feats) for stage in self.stages]",
                            "ListComp"
                        ],
                        [
                            "[stage(feats, feats) for stage in self.stages]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_178": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_57": {
                "variable": {
                    "value": "query_downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "query_scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query_scales",
                            "Name"
                        ],
                        [
                            "query_scales",
                            "Name"
                        ]
                    ]
                }
            },
            "cat_129": {
                "tensors": {
                    "value": "[context, high_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_179": {
                "tensors": {
                    "value": "[context, feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_20": {
                "output_size": {
                    "value": "pool_scale",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/apc_head.py": {
        "torch": {
            "Conv2d_59": {
                "variable": {
                    "value": "self.gla",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.pool_scale ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_80": {
                "variable": {
                    "value": "pooled_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.input_redu_conv(x)",
                            "Call"
                        ],
                        [
                            "self._transform_inputs(inputs)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "self.pool_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_94": {
                "variable": {
                    "value": "affinity_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "affinity_matrix",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.gla(x + resize(self.global_info(F.adaptive_avg_pool2d(x, 1)), size=x.shape[2:])).permute(0, 2, 3, 1).reshape(batch_size, -1, self.pool_scale ** 2)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(affinity_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_96": {
                "variable": {
                    "value": "z_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "affinity_matrix",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.gla(x + resize(self.global_info(F.adaptive_avg_pool2d(x, 1)), size=x.shape[2:])).permute(0, 2, 3, 1).reshape(batch_size, -1, self.pool_scale ** 2)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(affinity_matrix)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pooled_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.adaptive_avg_pool2d(x, self.pool_scale)",
                            "Call"
                        ],
                        [
                            "self.pooled_redu_conv(pooled_x)",
                            "Call"
                        ],
                        [
                            "pooled_x.view(batch_size, self.channels, -1).permute(0, 2, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_102": {
                "variable": {
                    "value": "z_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_out + x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_139": {
                "variable": {
                    "value": "self.acm_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "acm_modules",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_155": {
                "variable": {
                    "value": "acm_outs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "acm_outs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[x]",
                            "List"
                        ],
                        [
                            "torch.cat(acm_outs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_91": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.input_redu_conv(x)",
                            "Call"
                        ],
                        [
                            "self._transform_inputs(inputs)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/aspp_head.py": {
        "torch": {
            "Sequential_68": {
                "variable": {
                    "value": "self.image_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d(1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "aspp_outs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "aspp_outs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[resize(self.image_pool(x), size=x.size()[2:], mode='bilinear', align_corners=self.align_corners)]",
                            "List"
                        ],
                        [
                            "torch.cat(aspp_outs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_69": {
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/cc_head.py": {
        "torch": {
            "cat_40": {
                "tensors": {
                    "value": "[x, output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/da_head.py": {
        "torch": {
            "bmm_61": {
                "variable": {
                    "value": "energy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(batch_size, channels, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "proj_key",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(batch_size, channels, -1).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_64": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "energy_new",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.max(energy, -1, keepdim=True)[0].expand_as(energy) - energy",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_67": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(energy_new, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "proj_value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(batch_size, channels, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_105": {
                "variable": {
                    "value": "self.pam_conv_seg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_125": {
                "variable": {
                    "value": "self.cam_conv_seg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_62": {
                "input": {
                    "value": "energy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.bmm(proj_query, proj_key)",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/decode_head.py": {
        "torch": {
            "Conv2d_81": {
                "variable": {
                    "value": "self.conv_seg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout2d_83": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_ratio",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_156": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "upsampled_inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[resize(input=x, size=inputs[0].shape[2:], mode='bilinear', align_corners=self.align_corners) for x in inputs]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/dm_head.py": {
        "torch": {
            "Conv2d_34": {
                "variable": {
                    "value": "self.filter_gen_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_76": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.input_redu_conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(1, b * c, h, w)",
                            "Call"
                        ],
                        [
                            "F.pad(input=x, pad=p2d, mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "self._transform_inputs(inputs)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "p2d",
                    "type": "Tuple",
                    "possible_values": [
                        [
                            "(pad, pad, pad, pad)",
                            "Tuple"
                        ],
                        [
                            "(pad + 1, pad, pad + 1, pad)",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "constant",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_78": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.input_redu_conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(1, b * c, h, w)",
                            "Call"
                        ],
                        [
                            "F.pad(input=x, pad=p2d, mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "self._transform_inputs(inputs)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "generated_filter",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.filter_gen_conv(F.adaptive_avg_pool2d(x, self.filter_size))",
                            "Call"
                        ],
                        [
                            "generated_filter.view(b * c, 1, self.filter_size, self.filter_size)",
                            "Call"
                        ]
                    ]
                },
                "groups": {
                    "value": "b * c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_121": {
                "variable": {
                    "value": "self.dcm_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "dcm_modules",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_137": {
                "variable": {
                    "value": "dcm_outs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dcm_outs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[x]",
                            "List"
                        ],
                        [
                            "torch.cat(dcm_outs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_63": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.input_redu_conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(1, b * c, h, w)",
                            "Call"
                        ],
                        [
                            "F.pad(input=x, pad=p2d, mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "self._transform_inputs(inputs)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "self.filter_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/dnl_head.py": {
        "torch": {
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_25": {
                "variable": {
                    "value": "pairwise_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.view(n, self.in_channels, -1)",
                            "Call"
                        ],
                        [
                            "theta_x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.theta(x).view(n, self.inter_channels, -1, 1)",
                            "Call"
                        ],
                        [
                            "self.theta(x).view(n, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "theta_x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "theta_x - theta_x.mean(dim=-2, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "phi_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.phi(x).view(n, self.in_channels, -1)",
                            "Call"
                        ],
                        [
                            "x.view(n, self.in_channels, -1)",
                            "Call"
                        ],
                        [
                            "self.phi(x).view(n, self.inter_channels, 1, -1)",
                            "Call"
                        ],
                        [
                            "self.phi(x).view(n, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "phi_x - phi_x.mean(dim=-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_66": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pairwise_weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(theta_x, phi_x)",
                            "Call"
                        ],
                        [
                            "pairwise_weight / self.temperature",
                            "BinOp"
                        ],
                        [
                            "pairwise_weight.softmax(dim=-1)",
                            "Call"
                        ],
                        [
                            "pairwise_func(theta_x, phi_x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "g_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g(x).view(n, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "g_x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_76": {
                "variable": {
                    "value": "unary_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unary_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_mask(x)",
                            "Call"
                        ],
                        [
                            "unary_mask.view(n, 1, -1)",
                            "Call"
                        ],
                        [
                            "unary_mask.softmax(dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "g_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g(x).view(n, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "g_x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_129": {
                "tensors": {
                    "value": "[x, output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/ema_head.py": {
        "torch": {
            "zeros_38": {
                "variable": {
                    "value": "bases",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.num_bases",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_41": {
                "variable": {
                    "value": "bases",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(1, channels, self.num_bases)",
                            "Call"
                        ],
                        [
                            "F.normalize(bases, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "self.bases.repeat(batch_size, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.einsum('bcn,bnk->bck', feats, attention_normed)",
                            "Call"
                        ],
                        [
                            "F.normalize(bases, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "bases.mean(dim=0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "reduce_mean(bases)",
                            "Call"
                        ],
                        [
                            "F.normalize(bases, dim=1, p=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "einsum_64": {
                "variable": {
                    "value": "feats_recon",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bck,bnk->bcn",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "bases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(1, channels, self.num_bases)",
                            "Call"
                        ],
                        [
                            "F.normalize(bases, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "self.bases.repeat(batch_size, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.einsum('bcn,bnk->bck', feats, attention_normed)",
                            "Call"
                        ],
                        [
                            "F.normalize(bases, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "bases.mean(dim=0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "reduce_mean(bases)",
                            "Call"
                        ],
                        [
                            "F.normalize(bases, dim=1, p=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_161": {
                "variable": {
                    "value": "recon",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.ema_module(feats)",
                            "Call"
                        ],
                        [
                            "F.relu(recon, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.ema_out_conv(recon)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_163": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "identity + recon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_71": {
                "variable": {
                    "value": "bases",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(1, channels, self.num_bases)",
                            "Call"
                        ],
                        [
                            "F.normalize(bases, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "self.bases.repeat(batch_size, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.einsum('bcn,bnk->bck', feats, attention_normed)",
                            "Call"
                        ],
                        [
                            "F.normalize(bases, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "bases.mean(dim=0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "reduce_mean(bases)",
                            "Call"
                        ],
                        [
                            "F.normalize(bases, dim=1, p=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_55": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bcn,bck->bnk",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "feats",
                    "type": "Call",
                    "possible_values": [
                        [
                            "feats.view(batch_size, channels, height * width)",
                            "Call"
                        ],
                        [
                            "self.ema_in_conv(x)",
                            "Call"
                        ],
                        [
                            "self.ema_mid_conv(feats)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_56": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.einsum('bcn,bck->bnk', feats, bases)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_58": {
                "variable": {
                    "value": "attention_normed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.einsum('bcn,bck->bnk', feats, bases)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "einsum_60": {
                "variable": {
                    "value": "bases",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bcn,bnk->bck",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "feats",
                    "type": "Call",
                    "possible_values": [
                        [
                            "feats.view(batch_size, channels, height * width)",
                            "Call"
                        ],
                        [
                            "self.ema_in_conv(x)",
                            "Call"
                        ],
                        [
                            "self.ema_mid_conv(feats)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_62": {
                "variable": {
                    "value": "bases",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(1, channels, self.num_bases)",
                            "Call"
                        ],
                        [
                            "F.normalize(bases, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "self.bases.repeat(batch_size, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.einsum('bcn,bnk->bck', feats, attention_normed)",
                            "Call"
                        ],
                        [
                            "F.normalize(bases, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "bases.mean(dim=0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "reduce_mean(bases)",
                            "Call"
                        ],
                        [
                            "F.normalize(bases, dim=1, p=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_166": {
                "tensors": {
                    "value": "[x, output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/enc_head.py": {
        "torch": {
            "Sequential_43": {
                "variable": {
                    "value": "self.encoding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Encoding(channels=in_channels, num_codes=num_codes)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_channels, in_channels)",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu__57": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + x * y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_101": {
                "variable": {
                    "value": "self.lateral_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_127": {
                "variable": {
                    "value": "self.se_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "in_features": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.in_channels[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.in_channels[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Sigmoid_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_142": {
                "tensors": {
                    "value": "[feat, *laterals]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/fcn_head.py": {
        "torch": {
            "Identity_61": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convs",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_79": {
                "tensors": {
                    "value": "[x, output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/fpn_head.py": {
        "torch": {
            "ModuleList_30": {
                "variable": {
                    "value": "self.scale_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "*args": {
                    "value": "*scale_head",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_48": {
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "self.align_corners",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/gc_head.py": {
        "torch": {
            "cat_45": {
                "tensors": {
                    "value": "[x, output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/lraspp_head.py": {
        "torch": {
            "Sequential_33": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.conv_ups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "variable": {
                    "value": "self.conv_up_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.image_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(kernel_size=49, stride=(16, 20))",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_87": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, self.convs[i](inputs[i])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_60": {
                "kernel_size": {
                    "value": "49",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "(16, 20)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "self.in_channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "branch_channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/nl_head.py": {
        "torch": {
            "cat_47": {
                "tensors": {
                    "value": "[x, output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/ocr_head.py": {
        "torch": {
            "softmax_32": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scale * probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_34": {
                "variable": {
                    "value": "ocr_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "probs.view(batch_size, num_classes, -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.scale * probs, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "feats",
                    "type": "Call",
                    "possible_values": [
                        [
                            "feats.view(batch_size, channels, -1)",
                            "Call"
                        ],
                        [
                            "feats.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.bottleneck(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "MaxPool2d_45": {
                "variable": {
                    "value": "query_downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_77": {
                "tensors": {
                    "value": "[context, query_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/point_head.py": {
        "torch": {
            "ModuleList_79": {
                "variable": {
                    "value": "self.fcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_94": {
                "variable": {
                    "value": "self.fc_seg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fc_in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sum(self.in_channels) + self.num_classes",
                            "BinOp"
                        ],
                        [
                            "fc_channels",
                            "Name"
                        ],
                        [
                            "fc_in_channels + (self.num_classes if self.coarse_pred_each_layer else 0)",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_116": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fine_grained_point_feats, coarse_point_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_282": {
                "variable": {
                    "value": "point_coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "seg_logits.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "num_sampled",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(num_points * oversample_ratio)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "seg_logits.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_339": {
                "variable": {
                    "value": "point_coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "seg_logits.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "num_points",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "cfg.num_points",
                            "Attribute"
                        ],
                        [
                            "cfg.subdivision_num_points",
                            "Attribute"
                        ],
                        [
                            "min(height * width, num_points)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "seg_logits.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "topk_30": {
                "input": {
                    "value": "seg_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "k": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_101": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_ratio",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_141": {
                "variable": {
                    "value": "fine_grained_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fine_grained_feats_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[point_sample(_, points, align_corners=self.align_corners) for _ in x]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_305": {
                "variable": {
                    "value": "rand_point_coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "seg_logits.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "num_random_points",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_points - num_uncertain_points",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "seg_logits.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_307": {
                "variable": {
                    "value": "point_coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(point_coords, rand_point_coords)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, coarse_point_feats)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "topk_297": {
                "input": {
                    "value": "point_uncertainties[:, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "k": {
                    "value": "num_uncertain_points",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(importance_sample_ratio * num_points)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_299": {
                "start": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "seg_logits.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "seg_logits.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/psa_head.py": {
        "torch": {
            "Sequential_64": {
                "variable": {
                    "value": "self.attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvModule(self.channels, self.channels, kernel_size=1, conv_cfg=self.conv_cfg, norm_cfg=self.norm_cfg, act_cfg=self.act_cfg)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.attention_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvModule(self.channels, self.channels, kernel_size=1, conv_cfg=self.conv_cfg, norm_cfg=self.norm_cfg, act_cfg=self.act_cfg)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_col, x_dis]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mask_h * mask_w",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_143": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "self.psamask(y)",
                            "Call"
                        ],
                        [
                            "y.view(n, h * w, h * w).transpose(1, 2).view(n, h * w, h, w)",
                            "Call"
                        ],
                        [
                            "F.softmax(y, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_179": {
                "variable": {
                    "value": "y_col",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_col",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.attention(x_col)",
                            "Call"
                        ],
                        [
                            "self.psamask_collect(y_col)",
                            "Call"
                        ],
                        [
                            "F.softmax(y_col, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_180": {
                "variable": {
                    "value": "y_dis",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_dis",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.attention_p(x_dis)",
                            "Call"
                        ],
                        [
                            "y_dis.view(n, h * w, h * w).transpose(1, 2).view(n, h * w, h, w)",
                            "Call"
                        ],
                        [
                            "self.psamask_distribute(y_dis)",
                            "Call"
                        ],
                        [
                            "F.softmax(y_dis, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_194": {
                "tensors": {
                    "value": "(identity, out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "in_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mask_h * mask_w",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_144": {
                "input": {
                    "value": "out.view(n, c, h * w)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "y.view(n, h * w, h * w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_181": {
                "input": {
                    "value": "x_col.view(n, c, h * w)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "y_col.view(n, h * w, h * w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_184": {
                "input": {
                    "value": "x_dis.view(n, c, h * w)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "y_dis.view(n, h * w, h * w)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/psp_head.py": {
        "torch": {
            "cat_98": {
                "variable": {
                    "value": "psp_outs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "psp_outs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[x]",
                            "List"
                        ],
                        [
                            "torch.cat(psp_outs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d(pool_scale)",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_37": {
                "output_size": {
                    "value": "pool_scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pool_scales",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "mmseg/models/decode_heads/sep_aspp_head.py": {
        "torch": {
            "Sequential_62": {
                "variable": {
                    "value": "self.sep_bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "DepthwiseSeparableConvModule(self.channels + c1_channels, self.channels, 3, padding=1, norm_cfg=self.norm_cfg, act_cfg=self.act_cfg)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "aspp_outs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "aspp_outs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[resize(self.image_pool(x), size=x.size()[2:], mode='bilinear', align_corners=self.align_corners)]",
                            "List"
                        ],
                        [
                            "torch.cat(aspp_outs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output, c1_output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/uper_head.py": {
        "torch": {
            "ModuleList_44": {
                "variable": {
                    "value": "self.lateral_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_45": {
                "variable": {
                    "value": "self.fpn_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "psp_outs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "psp_outs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[x]",
                            "List"
                        ],
                        [
                            "torch.cat(psp_outs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "fpn_outs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fpn_outs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[self.fpn_convs[i](laterals[i]) for i in range(used_backbone_levels - 1)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(fpn_outs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/losses/accuracy.py": {
        "torch": {}
    },
    "mmseg/models/losses/auto_seg_loss.py": {
        "torch": {
            "sum_317": {
                "variable": {
                    "value": "match_fg",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_318": {
                "variable": {
                    "value": "match_gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Softmax_54": {
                "variable": {
                    "value": "self.input_softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "cp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[control_points, control_points.new_ones(2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_16": {
                "data": {
                    "value": "[num_class]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "variable": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.cuda.current_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConstantPad2d_284": {
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConstantPad2d_288": {
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_144": {
                "data": {
                    "value": "[self.num_class]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "label.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "label.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MaxPool2d_285": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_289": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "current_device_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_72": {
                "input": {
                    "value": "x1_new ** 2 + (1 - 2 * x1_new) * x_new",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/losses/cross_entropy_loss.py": {
        "torch": {
            "cross_entropy_19": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "class_weight",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "cls_score.new_tensor(self.class_weight)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "-100",
                            "MethodArgument"
                        ],
                        [
                            "255",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "nonzero_39": {
                "variable": {
                    "value": "inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(labels >= 0) & (labels != ignore_index)",
                            "BinOp"
                        ],
                        [
                            "valid_mask.unsqueeze(1).expand(target_shape).float()",
                            "Call"
                        ]
                    ]
                },
                "as_tuple": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_91": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "label.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "pos_weight": {
                    "value": "class_weight",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "cls_score.new_tensor(self.class_weight)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_132": {
                "variable": {
                    "value": "inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "num_rois",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pred.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "pred.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_134": {
                "input": {
                    "value": "pred_slice",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pred[inds, label].squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "class_weight",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "cls_score.new_tensor(self.class_weight)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/losses/dice_loss.py": {
        "torch": {
            "softmax_102": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pred.reshape(pred.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(pred, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "one_hot_104": {
                "variable": {
                    "value": "one_hot_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.clamp(target.long(), 0, num_classes - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "num_classes",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "pred.shape[1]",
                            "Subscript"
                        ],
                        [
                            "pred.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_44": {
                "input": {
                    "value": "pred.pow(exponent) + target.pow(exponent)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_43": {
                "input": {
                    "value": "torch.mul(pred, target) * valid_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_105": {
                "input": {
                    "value": "target.long()",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "num_classes - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_43": {
                "input": {
                    "value": "pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pred.reshape(pred.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(pred, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "target.reshape(target.shape[0], -1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmseg/models/losses/lovasz_loss.py": {
        "torch": {
            "sort_75": {
                "variable": {
                    "value": "(errors_sorted, perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "errors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 - logits * signs",
                            "BinOp"
                        ],
                        [
                            "(fg - class_pred).abs()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dot_79": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(errors_sorted)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lovasz_grad(gt_sorted)",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_161": {
                "variable": {
                    "value": "(errors_sorted, perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "errors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 - logits * signs",
                            "BinOp"
                        ],
                        [
                            "(fg - class_pred).abs()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dot_164": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "errors_sorted",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "lovasz_grad(fg_sorted)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_168": {
                "tensors": {
                    "value": "losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_79": {
                "input": {
                    "value": "errors_sorted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_292": {
                "variable": {
                    "value": "cls_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(cls_score, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_121": {
                "tensors": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.dot(F.relu(errors_sorted), grad)",
                            "Call"
                        ],
                        [
                            "[lovasz_hinge_flat(*flatten_binary_logits(logit.unsqueeze(0), label.unsqueeze(0), ignore_index)) for (logit, label) in zip(logits, labels)]",
                            "ListComp"
                        ],
                        [
                            "weight_reduce_loss(torch.stack(loss), None, reduction, avg_factor)",
                            "Call"
                        ],
                        [
                            "lovasz_hinge_flat(*flatten_binary_logits(logits, labels, ignore_index))",
                            "Call"
                        ],
                        [
                            "torch.dot(errors_sorted, lovasz_grad(fg_sorted))",
                            "Call"
                        ],
                        [
                            "loss * class_weight[c]",
                            "BinOp"
                        ],
                        [
                            "[lovasz_softmax_flat(*flatten_probs(prob.unsqueeze(0), label.unsqueeze(0), ignore_index), classes=classes, class_weight=class_weight) for (prob, label) in zip(probs, labels)]",
                            "ListComp"
                        ],
                        [
                            "weight_reduce_loss(torch.stack(loss), None, reduction, avg_factor)",
                            "Call"
                        ],
                        [
                            "lovasz_softmax_flat(*flatten_probs(probs, labels, ignore_index), classes=classes, class_weight=class_weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_215": {
                "tensors": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.dot(F.relu(errors_sorted), grad)",
                            "Call"
                        ],
                        [
                            "[lovasz_hinge_flat(*flatten_binary_logits(logit.unsqueeze(0), label.unsqueeze(0), ignore_index)) for (logit, label) in zip(logits, labels)]",
                            "ListComp"
                        ],
                        [
                            "weight_reduce_loss(torch.stack(loss), None, reduction, avg_factor)",
                            "Call"
                        ],
                        [
                            "lovasz_hinge_flat(*flatten_binary_logits(logits, labels, ignore_index))",
                            "Call"
                        ],
                        [
                            "torch.dot(errors_sorted, lovasz_grad(fg_sorted))",
                            "Call"
                        ],
                        [
                            "loss * class_weight[c]",
                            "BinOp"
                        ],
                        [
                            "[lovasz_softmax_flat(*flatten_probs(prob.unsqueeze(0), label.unsqueeze(0), ignore_index), classes=classes, class_weight=class_weight) for (prob, label) in zip(probs, labels)]",
                            "ListComp"
                        ],
                        [
                            "weight_reduce_loss(torch.stack(loss), None, reduction, avg_factor)",
                            "Call"
                        ],
                        [
                            "lovasz_softmax_flat(*flatten_probs(probs, labels, ignore_index), classes=classes, class_weight=class_weight)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmseg/models/losses/straight_loss.py": {
        "torch": {}
    },
    "mmseg/models/losses/utils.py": {
        "torch": {}
    },
    "mmseg/models/necks/fpn.py": {
        "torch": {
            "ModuleList_111": {
                "variable": {
                    "value": "self.lateral_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_112": {
                "variable": {
                    "value": "self.fpn_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_177": {
                "input": {
                    "value": "laterals[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "interpolate_181": {
                "input": {
                    "value": "laterals[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "prev_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "laterals[i - 1].shape[2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_pool2d_195": {
                "input": {
                    "value": "outs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_209": {
                "input": {
                    "value": "outs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/segmentors/base.py": {
        "torch": {
            "is_available_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/segmentors/cascade_encoder_decoder.py": {
        "torch": {
            "ModuleList_42": {
                "variable": {
                    "value": "self.decode_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/segmentors/encoder_decoder.py": {
        "torch": {
            "softmax_251": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_logit",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.encode_decode(img, None)",
                            "Call"
                        ],
                        [
                            "self.encode_decode(img, img_meta)",
                            "Call"
                        ],
                        [
                            "resize(seg_logit, size=img_meta[0]['ori_shape'][:2], mode='bilinear', align_corners=self.align_corners, warning=False)",
                            "Call"
                        ],
                        [
                            "self.slide_inference(img, img_meta, rescale)",
                            "Call"
                        ],
                        [
                            "self.whole_inference(img, img_meta, rescale)",
                            "Call"
                        ],
                        [
                            "self.inference(img, img_meta, rescale)",
                            "Call"
                        ],
                        [
                            "self.inference(imgs[0], img_metas[0], rescale)",
                            "Call"
                        ],
                        [
                            "seg_logit / len(imgs)",
                            "BinOp"
                        ],
                        [
                            "self.encode_decode(imgs[0], img_metas[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_202": {
                "variable": {
                    "value": "count_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "count_mat.cpu().detach().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_53": {
                "variable": {
                    "value": "self.auxiliary_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_194": {
                "input": {
                    "value": "crop_seg_logit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.encode_decode(crop_img, img_meta)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(int(x1), int(preds.shape[3] - x2), int(y1), int(preds.shape[2] - y2))",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/utils/inverted_residual.py": {
        "torch": {
            "Sequential_79": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/utils/res_layer.py": {
        "torch": {
            "Sequential_63": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*downsample",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_48": {
                "kernel_size": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/utils/se_layer.py": {
        "torch": {
            "AdaptiveAvgPool2d_37": {
                "variable": {
                    "value": "self.global_avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/utils/self_attention_block.py": {
        "torch": {
            "matmul_149": {
                "variable": {
                    "value": "sim_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.query_project(query_feats)",
                            "Call"
                        ],
                        [
                            "self.query_downsample(query)",
                            "Call"
                        ],
                        [
                            "query.reshape(*query.shape[:2], -1)",
                            "Call"
                        ],
                        [
                            "query.permute(0, 2, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.key_project(key_feats)",
                            "Call"
                        ],
                        [
                            "self.key_downsample(key)",
                            "Call"
                        ],
                        [
                            "key.reshape(*key.shape[:2], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_152": {
                "variable": {
                    "value": "sim_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_map",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(query, key)",
                            "Call"
                        ],
                        [
                            "self.channels ** (-0.5) * sim_map",
                            "BinOp"
                        ],
                        [
                            "F.softmax(sim_map, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_154": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_map",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(query, key)",
                            "Call"
                        ],
                        [
                            "self.channels ** (-0.5) * sim_map",
                            "BinOp"
                        ],
                        [
                            "F.softmax(sim_map, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.value_project(key_feats)",
                            "Call"
                        ],
                        [
                            "self.key_downsample(value)",
                            "Call"
                        ],
                        [
                            "value.reshape(*value.shape[:2], -1)",
                            "Call"
                        ],
                        [
                            "value.permute(0, 2, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_126": {
                "variable": {
                    "value": "convs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convs",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_122": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "in_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/utils/up_conv_block.py": {
        "torch": {
            "cat_98": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[skip, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/ops/encoding.py": {
        "torch": {
            "Parameter_23": {
                "variable": {
                    "value": "self.codewords",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(num_codes, channels, dtype=torch.float).uniform_(-std, std)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_28": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(num_codes, dtype=torch.float).uniform_(-1, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_64": {
                "variable": {
                    "value": "assignment_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scaled_l2(x, self.codewords, self.scale)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_24": {
                "*size": {
                    "value": "num_codes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_29": {
                "*size": {
                    "value": "num_codes",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/ops/wrappers.py": {
        "torch": {
            "interpolate_29": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "tuple((int(x) for x in size))",
                            "Call"
                        ],
                        [
                            "[int(t * self.scale_factor) for t in x.shape[-2:]]",
                            "ListComp"
                        ],
                        [
                            "self.size",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'nearest'",
                            "MethodArgument"
                        ],
                        [
                            "'nearest'",
                            "MethodArgument"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "tools/benchmark.py": {
        "torch": {
            "synchronize_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/publish_model.py": {
        "torch": {
            "load_17": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "in_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_23": {
                "obj": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load(in_file, map_location='cpu')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "out_file",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tools/pytorch2onnx.py": {
        "torch": {
            "manual_seed_16": {
                "seed": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "module_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "module.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "module.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "module.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "affine": {
                    "value": "module.affine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "module.track_running_stats",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/test.py": {
        "torch": {
            "current_device_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/train.py": {
        "torch": {}
    }
}