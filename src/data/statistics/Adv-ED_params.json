{
    "BERT/train.py": {
        "sklearn": {
            "precision_score_73": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(labels, 0)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(preds, 0)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "list(range(1, 34))",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_74": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(labels, 0)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(preds, 0)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "list(range(1, 34))",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "sigmoid_91": {
                "variable": {
                    "value": "nScores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "discriminator(nwords.cuda(), nMask.cuda(), nmaskL.cuda(), nmaskR.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_93": {
                "variable": {
                    "value": "nScores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nScores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(discriminator(nwords.cuda(), nMask.cuda(), nmaskL.cuda(), nmaskR.cuda()))",
                            "Call"
                        ],
                        [
                            "nScores[:, nonNAindex]",
                            "Subscript"
                        ],
                        [
                            "torch.mean(nScores, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_96": {
                "variable": {
                    "value": "uScores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "discriminator(uwords.cuda(), uMask.cuda(), umaskL.cuda(), umaskR.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "masked_select_98": {
                "variable": {
                    "value": "uScores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "uScores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(discriminator(uwords.cuda(), uMask.cuda(), umaskL.cuda(), umaskR.cuda()))",
                            "Call"
                        ],
                        [
                            "torch.masked_select(uScores, umask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "umask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "genMask(ulabel).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_102": {
                "variable": {
                    "value": "words",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(nwords, uwords)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "inMask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(nMask, uMask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "maskL",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(nmaskL, umaskL)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "maskR",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(nmaskR, umaskR)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_107": {
                "variable": {
                    "value": "cScores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cScores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "selector(words.cuda(), inMask.cuda(), maskL.cuda(), maskR.cuda())",
                            "Call"
                        ],
                        [
                            "torch.pow(cScores, alpha)",
                            "Call"
                        ],
                        [
                            "F.softmax(cScores, dim=0)",
                            "Call"
                        ],
                        [
                            "selector(words.cuda(), inMask.cuda(), maskL.cuda(), maskR.cuda())",
                            "Call"
                        ],
                        [
                            "torch.pow(cScores, alpha)",
                            "Call"
                        ],
                        [
                            "F.softmax(cScores, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_108": {
                "variable": {
                    "value": "cScores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cScores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "selector(words.cuda(), inMask.cuda(), maskL.cuda(), maskR.cuda())",
                            "Call"
                        ],
                        [
                            "torch.pow(cScores, alpha)",
                            "Call"
                        ],
                        [
                            "F.softmax(cScores, dim=0)",
                            "Call"
                        ],
                        [
                            "selector(words.cuda(), inMask.cuda(), maskL.cuda(), maskR.cuda())",
                            "Call"
                        ],
                        [
                            "torch.pow(cScores, alpha)",
                            "Call"
                        ],
                        [
                            "F.softmax(cScores, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_118": {
                "variable": {
                    "value": "dScores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "discriminator(words.cuda(), inMask.cuda(), maskL.cuda(), maskR.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "masked_select_120": {
                "variable": {
                    "value": "dScores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dScores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dscore_G(nwords, nMask, nmaskL, nmaskR, nlabel, uwords, uMask, umaskL, umaskR, ulabel)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(discriminator(words.cuda(), inMask.cuda(), maskL.cuda(), maskR.cuda()))",
                            "Call"
                        ],
                        [
                            "torch.masked_select(dScores, mask)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(discriminator(words.cuda(), inMask.cuda(), maskL.cuda(), maskR.cuda()))",
                            "Call"
                        ],
                        [
                            "torch.masked_select(dScores, mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "genMask(label).cuda()",
                            "Call"
                        ],
                        [
                            "genMask(label).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_124": {
                "variable": {
                    "value": "cScores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cScores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "selector(words.cuda(), inMask.cuda(), maskL.cuda(), maskR.cuda())",
                            "Call"
                        ],
                        [
                            "torch.pow(cScores, alpha)",
                            "Call"
                        ],
                        [
                            "F.softmax(cScores, dim=0)",
                            "Call"
                        ],
                        [
                            "selector(words.cuda(), inMask.cuda(), maskL.cuda(), maskR.cuda())",
                            "Call"
                        ],
                        [
                            "torch.pow(cScores, alpha)",
                            "Call"
                        ],
                        [
                            "F.softmax(cScores, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_125": {
                "variable": {
                    "value": "cScores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cScores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "selector(words.cuda(), inMask.cuda(), maskL.cuda(), maskR.cuda())",
                            "Call"
                        ],
                        [
                            "torch.pow(cScores, alpha)",
                            "Call"
                        ],
                        [
                            "F.softmax(cScores, dim=0)",
                            "Call"
                        ],
                        [
                            "selector(words.cuda(), inMask.cuda(), maskL.cuda(), maskR.cuda())",
                            "Call"
                        ],
                        [
                            "torch.pow(cScores, alpha)",
                            "Call"
                        ],
                        [
                            "F.softmax(cScores, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_126": {
                "variable": {
                    "value": "dScores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "discriminator(words.cuda(), inMask.cuda(), maskL.cuda(), maskR.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "masked_select_128": {
                "variable": {
                    "value": "dScores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dScores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dscore_G(nwords, nMask, nmaskL, nmaskR, nlabel, uwords, uMask, umaskL, umaskR, ulabel)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(discriminator(words.cuda(), inMask.cuda(), maskL.cuda(), maskR.cuda()))",
                            "Call"
                        ],
                        [
                            "torch.masked_select(dScores, mask)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(discriminator(words.cuda(), inMask.cuda(), maskL.cuda(), maskR.cuda()))",
                            "Call"
                        ],
                        [
                            "torch.masked_select(dScores, mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "genMask(label).cuda()",
                            "Call"
                        ],
                        [
                            "genMask(label).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_47": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(words.cuda(), inMask.cuda(), maskL.cuda(), maskR.cuda())",
                            "Call"
                        ],
                        [
                            "discriminator(words.cuda(), inMask.cuda(), maskL.cuda(), maskR.cuda())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_99": {
                "tensors": {
                    "value": "(nScores, uScores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_148": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(words.cuda(), inMask.cuda(), maskL.cuda(), maskR.cuda())",
                            "Call"
                        ],
                        [
                            "discriminator(words.cuda(), inMask.cuda(), maskL.cuda(), maskR.cuda())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_79": {
                "obj": {
                    "value": "discriminator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "Dmodel.tar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dot_109": {
                "input": {
                    "value": "cScores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "selector(words.cuda(), inMask.cuda(), maskL.cuda(), maskR.cuda())",
                            "Call"
                        ],
                        [
                            "torch.pow(cScores, alpha)",
                            "Call"
                        ],
                        [
                            "F.softmax(cScores, dim=0)",
                            "Call"
                        ],
                        [
                            "selector(words.cuda(), inMask.cuda(), maskL.cuda(), maskR.cuda())",
                            "Call"
                        ],
                        [
                            "torch.pow(cScores, alpha)",
                            "Call"
                        ],
                        [
                            "F.softmax(cScores, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.log(dScores)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_121": {
                "input": {
                    "value": "torch.log(dScores)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dot_129": {
                "input": {
                    "value": "cScores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "selector(words.cuda(), inMask.cuda(), maskL.cuda(), maskR.cuda())",
                            "Call"
                        ],
                        [
                            "torch.pow(cScores, alpha)",
                            "Call"
                        ],
                        [
                            "F.softmax(cScores, dim=0)",
                            "Call"
                        ],
                        [
                            "selector(words.cuda(), inMask.cuda(), maskL.cuda(), maskR.cuda())",
                            "Call"
                        ],
                        [
                            "torch.pow(cScores, alpha)",
                            "Call"
                        ],
                        [
                            "F.softmax(cScores, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.log(1.0 - dScores)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_164": {
                "f": {
                    "value": "model.tar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_165": {
                "f": {
                    "value": "encoder.tar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_109": {
                "input": {
                    "value": "dScores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dscore_G(nwords, nMask, nmaskL, nmaskR, nlabel, uwords, uMask, umaskL, umaskR, ulabel)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(discriminator(words.cuda(), inMask.cuda(), maskL.cuda(), maskR.cuda()))",
                            "Call"
                        ],
                        [
                            "torch.masked_select(dScores, mask)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(discriminator(words.cuda(), inMask.cuda(), maskL.cuda(), maskR.cuda()))",
                            "Call"
                        ],
                        [
                            "torch.masked_select(dScores, mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_121": {
                "input": {
                    "value": "dScores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dscore_G(nwords, nMask, nmaskL, nmaskR, nlabel, uwords, uMask, umaskL, umaskR, ulabel)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(discriminator(words.cuda(), inMask.cuda(), maskL.cuda(), maskR.cuda()))",
                            "Call"
                        ],
                        [
                            "torch.masked_select(dScores, mask)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(discriminator(words.cuda(), inMask.cuda(), maskL.cuda(), maskR.cuda()))",
                            "Call"
                        ],
                        [
                            "torch.masked_select(dScores, mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_129": {
                "input": {
                    "value": "1.0 - dScores",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "DMCNN/train.py": {
        "sklearn": {
            "precision_score_49": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(labels, 0)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(preds, 0)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "list(range(1, 34))",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_50": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(labels, 0)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(preds, 0)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "list(range(1, 34))",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Adadelta_17": {
                "variable": {
                    "value": "sOpt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "selector.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "sLr",
                    "type": "variable",
                    "possible_values": []
                },
                "rho": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adadelta_18": {
                "variable": {
                    "value": "dOpt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "dLr",
                    "type": "variable",
                    "possible_values": []
                },
                "rho": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sigmoid_68": {
                "variable": {
                    "value": "nScores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "discriminator(nwords.cuda(), npos.cuda(), nloc.cuda(), nmaskL.cuda(), nmaskR.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_70": {
                "variable": {
                    "value": "nScores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nScores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(discriminator(nwords.cuda(), npos.cuda(), nloc.cuda(), nmaskL.cuda(), nmaskR.cuda()))",
                            "Call"
                        ],
                        [
                            "nScores[:, nonNAindex]",
                            "Subscript"
                        ],
                        [
                            "torch.mean(nScores, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_73": {
                "variable": {
                    "value": "uScores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "discriminator(uwords.cuda(), upos.cuda(), uloc.cuda(), umaskL.cuda(), umaskR.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "masked_select_75": {
                "variable": {
                    "value": "uScores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "uScores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(discriminator(uwords.cuda(), upos.cuda(), uloc.cuda(), umaskL.cuda(), umaskR.cuda()))",
                            "Call"
                        ],
                        [
                            "torch.masked_select(uScores, umask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "umask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "genMask(ulabel).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_79": {
                "variable": {
                    "value": "words",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(nwords, uwords)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(npos, upos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(nloc, uloc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_82": {
                "variable": {
                    "value": "maskL",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(nmaskL, umaskL)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "maskR",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(nmaskR, umaskR)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_85": {
                "variable": {
                    "value": "cScores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cScores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "selector(words.cuda(), pos.cuda(), loc.cuda(), maskL.cuda(), maskR.cuda())",
                            "Call"
                        ],
                        [
                            "torch.pow(cScores, alpha)",
                            "Call"
                        ],
                        [
                            "F.softmax(cScores, dim=0)",
                            "Call"
                        ],
                        [
                            "selector(words.cuda(), pos.cuda(), loc.cuda(), maskL.cuda(), maskR.cuda())",
                            "Call"
                        ],
                        [
                            "torch.pow(cScores, alpha)",
                            "Call"
                        ],
                        [
                            "F.softmax(cScores, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_86": {
                "variable": {
                    "value": "cScores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cScores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "selector(words.cuda(), pos.cuda(), loc.cuda(), maskL.cuda(), maskR.cuda())",
                            "Call"
                        ],
                        [
                            "torch.pow(cScores, alpha)",
                            "Call"
                        ],
                        [
                            "F.softmax(cScores, dim=0)",
                            "Call"
                        ],
                        [
                            "selector(words.cuda(), pos.cuda(), loc.cuda(), maskL.cuda(), maskR.cuda())",
                            "Call"
                        ],
                        [
                            "torch.pow(cScores, alpha)",
                            "Call"
                        ],
                        [
                            "F.softmax(cScores, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_96": {
                "variable": {
                    "value": "dScores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "discriminator(words.cuda(), pos.cuda(), loc.cuda(), maskL.cuda(), maskR.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "masked_select_98": {
                "variable": {
                    "value": "dScores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dScores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dscore_G(nwords, npos, nloc, nmaskL, nmaskR, nlabel, uwords, upos, uloc, umaskL, umaskR, ulabel)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(discriminator(words.cuda(), pos.cuda(), loc.cuda(), maskL.cuda(), maskR.cuda()))",
                            "Call"
                        ],
                        [
                            "torch.masked_select(dScores, mask)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(discriminator(words.cuda(), pos.cuda(), loc.cuda(), maskL.cuda(), maskR.cuda()))",
                            "Call"
                        ],
                        [
                            "torch.masked_select(dScores, mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "genMask(label).cuda()",
                            "Call"
                        ],
                        [
                            "genMask(label).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_102": {
                "variable": {
                    "value": "cScores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cScores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "selector(words.cuda(), pos.cuda(), loc.cuda(), maskL.cuda(), maskR.cuda())",
                            "Call"
                        ],
                        [
                            "torch.pow(cScores, alpha)",
                            "Call"
                        ],
                        [
                            "F.softmax(cScores, dim=0)",
                            "Call"
                        ],
                        [
                            "selector(words.cuda(), pos.cuda(), loc.cuda(), maskL.cuda(), maskR.cuda())",
                            "Call"
                        ],
                        [
                            "torch.pow(cScores, alpha)",
                            "Call"
                        ],
                        [
                            "F.softmax(cScores, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_103": {
                "variable": {
                    "value": "cScores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cScores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "selector(words.cuda(), pos.cuda(), loc.cuda(), maskL.cuda(), maskR.cuda())",
                            "Call"
                        ],
                        [
                            "torch.pow(cScores, alpha)",
                            "Call"
                        ],
                        [
                            "F.softmax(cScores, dim=0)",
                            "Call"
                        ],
                        [
                            "selector(words.cuda(), pos.cuda(), loc.cuda(), maskL.cuda(), maskR.cuda())",
                            "Call"
                        ],
                        [
                            "torch.pow(cScores, alpha)",
                            "Call"
                        ],
                        [
                            "F.softmax(cScores, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_104": {
                "variable": {
                    "value": "dScores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "discriminator(words.cuda(), pos.cuda(), loc.cuda(), maskL.cuda(), maskR.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "masked_select_106": {
                "variable": {
                    "value": "dScores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dScores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dscore_G(nwords, npos, nloc, nmaskL, nmaskR, nlabel, uwords, upos, uloc, umaskL, umaskR, ulabel)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(discriminator(words.cuda(), pos.cuda(), loc.cuda(), maskL.cuda(), maskR.cuda()))",
                            "Call"
                        ],
                        [
                            "torch.masked_select(dScores, mask)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(discriminator(words.cuda(), pos.cuda(), loc.cuda(), maskL.cuda(), maskR.cuda()))",
                            "Call"
                        ],
                        [
                            "torch.masked_select(dScores, mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "genMask(label).cuda()",
                            "Call"
                        ],
                        [
                            "genMask(label).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_28": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(words.cuda(), pos.cuda(), loc.cuda(), maskL.cuda(), maskR.cuda())",
                            "Call"
                        ],
                        [
                            "discriminator(words.cuda(), pos.cuda(), loc.cuda(), maskL.cuda(), maskR.cuda())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_76": {
                "tensors": {
                    "value": "(nScores, uScores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_125": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(words.cuda(), pos.cuda(), loc.cuda(), maskL.cuda(), maskR.cuda())",
                            "Call"
                        ],
                        [
                            "discriminator(words.cuda(), pos.cuda(), loc.cuda(), maskL.cuda(), maskR.cuda())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_55": {
                "obj": {
                    "value": "discriminator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "Dmodel.tar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dot_87": {
                "input": {
                    "value": "cScores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "selector(words.cuda(), pos.cuda(), loc.cuda(), maskL.cuda(), maskR.cuda())",
                            "Call"
                        ],
                        [
                            "torch.pow(cScores, alpha)",
                            "Call"
                        ],
                        [
                            "F.softmax(cScores, dim=0)",
                            "Call"
                        ],
                        [
                            "selector(words.cuda(), pos.cuda(), loc.cuda(), maskL.cuda(), maskR.cuda())",
                            "Call"
                        ],
                        [
                            "torch.pow(cScores, alpha)",
                            "Call"
                        ],
                        [
                            "F.softmax(cScores, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.log(dScores)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_99": {
                "input": {
                    "value": "torch.log(dScores)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dot_107": {
                "input": {
                    "value": "cScores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "selector(words.cuda(), pos.cuda(), loc.cuda(), maskL.cuda(), maskR.cuda())",
                            "Call"
                        ],
                        [
                            "torch.pow(cScores, alpha)",
                            "Call"
                        ],
                        [
                            "F.softmax(cScores, dim=0)",
                            "Call"
                        ],
                        [
                            "selector(words.cuda(), pos.cuda(), loc.cuda(), maskL.cuda(), maskR.cuda())",
                            "Call"
                        ],
                        [
                            "torch.pow(cScores, alpha)",
                            "Call"
                        ],
                        [
                            "F.softmax(cScores, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.log(1.0 - dScores)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_140": {
                "f": {
                    "value": "model.tar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_141": {
                "f": {
                    "value": "encoder.tar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_87": {
                "input": {
                    "value": "dScores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dscore_G(nwords, npos, nloc, nmaskL, nmaskR, nlabel, uwords, upos, uloc, umaskL, umaskR, ulabel)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(discriminator(words.cuda(), pos.cuda(), loc.cuda(), maskL.cuda(), maskR.cuda()))",
                            "Call"
                        ],
                        [
                            "torch.masked_select(dScores, mask)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(discriminator(words.cuda(), pos.cuda(), loc.cuda(), maskL.cuda(), maskR.cuda()))",
                            "Call"
                        ],
                        [
                            "torch.masked_select(dScores, mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_99": {
                "input": {
                    "value": "dScores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dscore_G(nwords, npos, nloc, nmaskL, nmaskR, nlabel, uwords, upos, uloc, umaskL, umaskR, ulabel)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(discriminator(words.cuda(), pos.cuda(), loc.cuda(), maskL.cuda(), maskR.cuda()))",
                            "Call"
                        ],
                        [
                            "torch.masked_select(dScores, mask)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(discriminator(words.cuda(), pos.cuda(), loc.cuda(), maskL.cuda(), maskR.cuda()))",
                            "Call"
                        ],
                        [
                            "torch.masked_select(dScores, mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_107": {
                "input": {
                    "value": "1.0 - dScores",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "BERT/dataset.py": {
        "torch": {}
    },
    "BERT/models.py": {
        "torch": {
            "Dropout_14": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "keepProb",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MaxPool1d_16": {
                "variable": {
                    "value": "self.maxpooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "SenLen",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_28": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pooledL, pooledR)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "EncodedDim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "variable": {
                    "value": "self.M",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "EncodedDim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dimE",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_49": {
                "input": {
                    "value": "self.M(reps)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_24": {
                "input": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(conved * maskL).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "L + torch.ones_like(L)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_25": {
                "input": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(conved * maskR).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "R + torch.ones_like(R)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_29": {
                "input": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((pooledL, pooledR), 1)",
                            "Call"
                        ],
                        [
                            "pooled - torch.ones_like(pooled)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "DMCNN/dataset.py": {
        "torch": {}
    },
    "DMCNN/models.py": {
        "torch": {
            "Embedding_11": {
                "variable": {
                    "value": "self.word_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(wordVec)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "dimWE",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_13": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "wordVec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((embeds, pos_embeds), 2).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_18": {
                "variable": {
                    "value": "self.pos_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "MaxPos",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "dimPE",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv1d_19": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dimWE + dimPE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dimC",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "filter_size",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_20": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "keepProb",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MaxPool1d_22": {
                "variable": {
                    "value": "self.maxpooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "SenLen",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_29": {
                "variable": {
                    "value": "wordVec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embeds, pos_embeds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_29": {
                "variable": {
                    "value": "wordVec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_42": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pooledL, pooledR)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_46": {
                "variable": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pooled, loc_embeds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_47": {
                "variable": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dropout(rep)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "EncodedDim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.M",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "EncodedDim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dimE",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_64": {
                "input": {
                    "value": "self.M(reps)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_34": {
                "input": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(conved * maskL).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "L + torch.ones_like(L)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_35": {
                "input": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(conved * maskR).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "R + torch.ones_like(R)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_43": {
                "input": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((pooledL, pooledR), 1)",
                            "Call"
                        ],
                        [
                            "pooled - torch.ones_like(pooled)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}