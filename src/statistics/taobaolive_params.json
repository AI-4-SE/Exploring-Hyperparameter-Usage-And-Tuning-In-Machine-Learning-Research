{
    "default_tools/train/train_flow.py": {
        "torch": {}
    },
    "demo/webcam_demo.py": {
        "torch": {
            "device_26": {
                "type": {
                    "value": "cuda",
                    "possible_values": []
                },
                "index": {
                    "value": "args.device",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/apis/inference.py": {
        "torch": {
            "set_grad_enabled_113": {
                "mode": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/apis/inference_jiuye.py": {
        "torch": {
            "no_grad_29": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/apis/train.py": {
        "torch": {
            "manual_seed_28": {
                "seed": {
                    "value": "seed",
                    "possible_values": []
                }
            },
            "manual_seed_all_29": {
                "seed": {
                    "value": "seed",
                    "possible_values": []
                }
            },
            "is_available_51": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_initialized_51": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "current_device_221": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/anchor/anchor_generator.py": {
        "torch": {
            "Tensor_19": {
                "variable": {
                    "value": "self.scales",
                    "possible_values": []
                }
            },
            "Tensor_20": {
                "variable": {
                    "value": "self.ratios",
                    "possible_values": []
                }
            },
            "sqrt_38": {
                "variable": {
                    "value": "h_ratios",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ratios",
                    "possible_values": []
                }
            },
            "stack_48": {
                "variable": {
                    "value": "base_anchors",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_ctr - 0.5 * (ws - 1), y_ctr - 0.5 * (hs - 1), x_ctr + 0.5 * (ws - 1), y_ctr + 0.5 * (hs - 1)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "round_48": {
                "variable": {
                    "value": "base_anchors",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "stack_73": {
                "variable": {
                    "value": "shifts",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[shift_xx, shift_yy, shift_xx, shift_yy]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "variable": {
                    "value": "valid_x",
                    "possible_values": []
                },
                "*size": {
                    "value": "feat_w",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_90": {
                "variable": {
                    "value": "valid_y",
                    "possible_values": []
                },
                "*size": {
                    "value": "feat_h",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_70": {
                "start": {
                    "value": "0",
                    "possible_values": []
                },
                "end": {
                    "value": "feat_w",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_71": {
                "start": {
                    "value": "0",
                    "possible_values": []
                },
                "end": {
                    "value": "feat_h",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/core/anchor/anchor_target.py": {
        "torch": {
            "stack_84": {
                "variable": {
                    "value": "target",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target",
                    "possible_values": [
                        [
                            "torch.stack(target, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "zeros_like_126": {
                "variable": {
                    "value": "bbox_targets",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors",
                    "possible_values": [
                        [
                            "flat_anchors[inside_flags, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_127": {
                "variable": {
                    "value": "bbox_weights",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors",
                    "possible_values": [
                        [
                            "flat_anchors[inside_flags, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_41": {
                "variable": {
                    "value": "anchor_list[i]",
                    "possible_values": []
                },
                "tensors": {
                    "value": "anchor_list[i]",
                    "possible_values": []
                }
            },
            "cat_42": {
                "variable": {
                    "value": "valid_flag_list[i]",
                    "possible_values": []
                },
                "tensors": {
                    "value": "valid_flag_list[i]",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/anchor/guided_anchor_target.py": {
        "torch": {
            "round_20": {
                "variable": {
                    "value": "x1",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - ratio) * bbox[0] + ratio * bbox[2]",
                    "possible_values": []
                }
            },
            "round_21": {
                "variable": {
                    "value": "y1",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - ratio) * bbox[1] + ratio * bbox[3]",
                    "possible_values": []
                }
            },
            "round_22": {
                "variable": {
                    "value": "x2",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio * bbox[0] + (1 - ratio) * bbox[2]",
                    "possible_values": []
                }
            },
            "round_23": {
                "variable": {
                    "value": "y2",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio * bbox[1] + (1 - ratio) * bbox[3]",
                    "possible_values": []
                }
            },
            "stack_210": {
                "variable": {
                    "value": "target",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target",
                    "possible_values": [
                        [
                            "torch.stack(target, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "zeros_like_269": {
                "variable": {
                    "value": "bbox_anchors",
                    "possible_values": []
                },
                "input": {
                    "value": "squares",
                    "possible_values": [
                        [
                            "flat_squares[inside_flags, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_270": {
                "variable": {
                    "value": "bbox_gts",
                    "possible_values": []
                },
                "input": {
                    "value": "squares",
                    "possible_values": [
                        [
                            "flat_squares[inside_flags, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_271": {
                "variable": {
                    "value": "bbox_weights",
                    "possible_values": []
                },
                "input": {
                    "value": "squares",
                    "possible_values": [
                        [
                            "flat_squares[inside_flags, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_65": {
                "variable": {
                    "value": "loc_targets",
                    "possible_values": []
                },
                "*size": {
                    "value": "img_per_gpu",
                    "possible_values": [
                        [
                            "len(gt_bboxes_list)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "possible_values": []
                },
                "device": {
                    "value": "gt_bboxes_list[0].device",
                    "possible_values": []
                }
            },
            "full_like_72": {
                "variable": {
                    "value": "loc_weights",
                    "possible_values": []
                },
                "input": {
                    "value": "loc_targets",
                    "possible_values": [
                        [
                            "torch.zeros(img_per_gpu, 1, h, w, device=gt_bboxes_list[0].device, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "zeros_like_73": {
                "variable": {
                    "value": "ignore_map",
                    "possible_values": []
                },
                "input": {
                    "value": "loc_targets",
                    "possible_values": [
                        [
                            "torch.zeros(img_per_gpu, 1, h, w, device=gt_bboxes_list[0].device, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_79": {
                "variable": {
                    "value": "scale",
                    "possible_values": []
                },
                "input": {
                    "value": "(gt_bboxes[:, 2] - gt_bboxes[:, 0] + 1) * (gt_bboxes[:, 3] - gt_bboxes[:, 1] + 1)",
                    "possible_values": []
                }
            },
            "floor_84": {
                "variable": {
                    "value": "target_lvls",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log2(scale) - torch.log2(min_anchor_size) + 0.5",
                    "possible_values": []
                }
            },
            "cat_171": {
                "tensors": {
                    "value": "inside_flag_list[i]",
                    "possible_values": []
                }
            },
            "cat_172": {
                "tensors": {
                    "value": "approx_list[i]",
                    "possible_values": []
                }
            },
            "cat_173": {
                "tensors": {
                    "value": "square_list[i]",
                    "possible_values": []
                }
            },
            "log2_85": {
                "input": {
                    "value": "min_anchor_size",
                    "possible_values": [
                        [
                            "scale.new_full((1,), float(anchor_scale * anchor_strides[0]))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/core/anchor/point_generator.py": {
        "torch": {
            "stack_20": {
                "variable": {
                    "value": "shifts",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[shift_xx, shift_yy, stride]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "zeros_28": {
                "variable": {
                    "value": "valid_x",
                    "possible_values": []
                },
                "*size": {
                    "value": "feat_w",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_29": {
                "variable": {
                    "value": "valid_y",
                    "possible_values": []
                },
                "*size": {
                    "value": "feat_h",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_16": {
                "start": {
                    "value": "0.0",
                    "possible_values": []
                },
                "end": {
                    "value": "feat_w",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_17": {
                "start": {
                    "value": "0.0",
                    "possible_values": []
                },
                "end": {
                    "value": "feat_h",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/core/anchor/point_target.py": {
        "torch": {
            "stack_80": {
                "variable": {
                    "value": "target",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target",
                    "possible_values": [
                        [
                            "torch.stack(target, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "zeros_like_118": {
                "variable": {
                    "value": "pos_proposals",
                    "possible_values": []
                },
                "input": {
                    "value": "proposals",
                    "possible_values": [
                        [
                            "flat_proposals[inside_flags, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_38": {
                "variable": {
                    "value": "proposals_list[i]",
                    "possible_values": []
                },
                "tensors": {
                    "value": "proposals_list[i]",
                    "possible_values": []
                }
            },
            "cat_39": {
                "variable": {
                    "value": "valid_flag_list[i]",
                    "possible_values": []
                },
                "tensors": {
                    "value": "valid_flag_list[i]",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/assigners/approx_max_iou_assigner.py": {
        "torch": {
            "transpose_99": {
                "variable": {
                    "value": "approxs",
                    "possible_values": []
                },
                "input": {
                    "value": "approxs.view(num_squares, approxs_per_octave, 4)",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "transpose_117": {
                "variable": {
                    "value": "overlaps",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps",
                    "possible_values": [
                        [
                            "approxs.new(num_gts, num_squares)",
                            "Call"
                        ],
                        [
                            "torch.transpose(overlaps, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/assigners/assign_result.py": {
        "torch": {
            "arange_184": {
                "variable": {
                    "value": "self_inds",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "possible_values": []
                },
                "end": {
                    "value": "len(gt_labels) + 1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "gt_labels.device",
                    "possible_values": []
                }
            },
            "cat_186": {
                "variable": {
                    "value": "self.gt_inds",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self_inds, self.gt_inds]",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "self.max_overlaps",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.max_overlaps.new_ones(len(gt_labels)), self.max_overlaps]",
                    "possible_values": []
                }
            },
            "zeros_130": {
                "variable": {
                    "value": "max_overlaps",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_preds",
                    "possible_values": [
                        [
                            "kwargs.get('num_preds', None)",
                            "Call"
                        ],
                        [
                            "rng.randint(0, 16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "zeros_131": {
                "variable": {
                    "value": "gt_inds",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_preds",
                    "possible_values": [
                        [
                            "kwargs.get('num_preds', None)",
                            "Call"
                        ],
                        [
                            "rng.randint(0, 16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "possible_values": []
                }
            },
            "from_numpy_139": {
                "variable": {
                    "value": "max_overlaps",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rng.rand(num_preds)",
                    "possible_values": []
                }
            },
            "from_numpy_142": {
                "variable": {
                    "value": "is_assigned",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rng.rand(num_preds) < p_assigned",
                    "possible_values": []
                }
            },
            "zeros_157": {
                "variable": {
                    "value": "gt_inds",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_preds",
                    "possible_values": [
                        [
                            "kwargs.get('num_preds', None)",
                            "Call"
                        ],
                        [
                            "rng.randint(0, 16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "possible_values": []
                }
            },
            "from_numpy_161": {
                "variable": {
                    "value": "true_idxs",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "true_idxs",
                    "possible_values": [
                        [
                            "np.arange(num_gts)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(true_idxs)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_164": {
                "variable": {
                    "value": "gt_inds",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rng.randint(1, num_gts + 1, size=num_preds)",
                    "possible_values": []
                }
            },
            "cat_192": {
                "variable": {
                    "value": "self.labels",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gt_labels, self.labels]",
                    "possible_values": []
                }
            },
            "zeros_133": {
                "variable": {
                    "value": "labels",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_preds",
                    "possible_values": [
                        [
                            "kwargs.get('num_preds', None)",
                            "Call"
                        ],
                        [
                            "rng.randint(0, 16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "possible_values": []
                }
            },
            "from_numpy_154": {
                "ndarray": {
                    "value": "rng.rand(num_preds) < p_ignore",
                    "possible_values": []
                }
            },
            "zeros_172": {
                "variable": {
                    "value": "labels",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_preds",
                    "possible_values": [
                        [
                            "kwargs.get('num_preds', None)",
                            "Call"
                        ],
                        [
                            "rng.randint(0, 16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "possible_values": []
                }
            },
            "from_numpy_174": {
                "variable": {
                    "value": "labels",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rng.randint(1, num_classes + 1, size=num_preds)",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/assigners/atss_assigner.py": {
        "torch": {
            "stack_88": {
                "variable": {
                    "value": "gt_points",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(gt_cx, gt_cy)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "stack_92": {
                "variable": {
                    "value": "bboxes_points",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bboxes_cx, bboxes_cy)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "candidate_idxs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "candidate_idxs",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(candidate_idxs, dim=0)",
                            "Call"
                        ],
                        [
                            "candidate_idxs.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "full_like_140": {
                "variable": {
                    "value": "overlaps_inf",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps",
                    "possible_values": [
                        [
                            "bbox_overlaps(bboxes, gt_bboxes)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "-INF",
                    "possible_values": []
                }
            },
            "t_140": {
                "variable": {
                    "value": "overlaps_inf",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "nonzero_152": {
                "variable": {
                    "value": "pos_inds",
                    "possible_values": []
                },
                "input": {
                    "value": "assigned_gt_inds > 0",
                    "possible_values": []
                }
            },
            "squeeze_152": {
                "variable": {
                    "value": "pos_inds",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "arange_113": {
                "start": {
                    "value": "num_gt",
                    "possible_values": []
                }
            },
            "stack_135": {
                "tensors": {
                    "value": "[l_, t_, r_, b_]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "min_135": {
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/assigners/max_iou_assigner.py": {
        "torch": {
            "nonzero_187": {
                "variable": {
                    "value": "pos_inds",
                    "possible_values": []
                },
                "input": {
                    "value": "assigned_gt_inds > 0",
                    "possible_values": []
                }
            },
            "squeeze_187": {
                "variable": {
                    "value": "pos_inds",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/assigners/max_iou_instance_assigner.py": {
        "torch": {
            "where_89": {
                "variable": {
                    "value": "gt_labels",
                    "possible_values": []
                },
                "condition": {
                    "value": "gt_instances == 0",
                    "possible_values": []
                },
                "x": {
                    "value": "gt_instances.new_full(gt_instances.size(), 666)",
                    "possible_values": []
                },
                "y": {
                    "value": "gt_instances",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/core/bbox/assigners/point_assigner.py": {
        "torch": {
            "log2_67": {
                "variable": {
                    "value": "points_lvl",
                    "possible_values": []
                },
                "input": {
                    "value": "points_stride",
                    "possible_values": [
                        [
                            "points[:, 2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_77": {
                "variable": {
                    "value": "gt_bboxes_lvl",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_bboxes_lvl",
                    "possible_values": [
                        [
                            "((torch.log2(gt_bboxes_wh[:, 0] / scale) + torch.log2(gt_bboxes_wh[:, 1] / scale)) / 2).int()",
                            "Call"
                        ],
                        [
                            "torch.clamp(gt_bboxes_lvl, min=lvl_min, max=lvl_max)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "lvl_min",
                    "possible_values": []
                },
                "max": {
                    "value": "lvl_max",
                    "possible_values": []
                }
            },
            "arange_83": {
                "variable": {
                    "value": "points_range",
                    "possible_values": []
                },
                "start": {
                    "value": "points.shape[0]",
                    "possible_values": []
                }
            },
            "topk_100": {
                "variable": {
                    "value": "(min_dist, min_dist_index)",
                    "possible_values": []
                },
                "input": {
                    "value": "points_gt_dist",
                    "possible_values": [
                        [
                            "((lvl_points - gt_point) / gt_wh).norm(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.pos_num",
                    "possible_values": []
                },
                "largest": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "nonzero_122": {
                "variable": {
                    "value": "pos_inds",
                    "possible_values": []
                },
                "input": {
                    "value": "assigned_gt_inds > 0",
                    "possible_values": []
                }
            },
            "squeeze_122": {
                "variable": {
                    "value": "pos_inds",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "log2_75": {
                "input": {
                    "value": "gt_bboxes_wh[:, 0] / scale",
                    "possible_values": []
                }
            },
            "log2_76": {
                "input": {
                    "value": "gt_bboxes_wh[:, 1] / scale",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/bbox_target.py": {
        "torch": {
            "cat_28": {
                "variable": {
                    "value": "labels",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "torch.cat(labels, 0)",
                            "Call"
                        ],
                        [
                            "pos_bboxes.new_zeros(num_samples, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_29": {
                "variable": {
                    "value": "label_weights",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_weights",
                    "possible_values": [
                        [
                            "torch.cat(label_weights, 0)",
                            "Call"
                        ],
                        [
                            "pos_bboxes.new_zeros(num_samples)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_30": {
                "variable": {
                    "value": "bbox_targets",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_targets",
                    "possible_values": [
                        [
                            "torch.cat(bbox_targets, 0)",
                            "Call"
                        ],
                        [
                            "pos_bboxes.new_zeros(num_samples, 4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_31": {
                "variable": {
                    "value": "bbox_weights",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_weights",
                    "possible_values": [
                        [
                            "torch.cat(bbox_weights, 0)",
                            "Call"
                        ],
                        [
                            "pos_bboxes.new_zeros(num_samples, 4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "nonzero_69": {
                "input": {
                    "value": "labels > 0",
                    "possible_values": []
                }
            },
            "squeeze_69": {
                "input": {
                    "value": "-1",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/demodata.py": {
        "torch": {
            "from_numpy_64": {
                "variable": {
                    "value": "boxes",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "tlbr",
                    "possible_values": [
                        [
                            "rng.rand(num, 4).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/core/bbox/geometry.py": {
        "torch": {
            "max_58": {
                "variable": {
                    "value": "lt",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes1[:, :2]",
                    "possible_values": []
                }
            },
            "min_59": {
                "variable": {
                    "value": "rb",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes1[:, 2:]",
                    "possible_values": []
                }
            },
            "max_73": {
                "variable": {
                    "value": "lt",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes1[:, None, :2]",
                    "possible_values": []
                }
            },
            "min_74": {
                "variable": {
                    "value": "rb",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes1[:, None, 2:]",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/samplers/base_sampler.py": {
        "torch": {
            "cat_76": {
                "variable": {
                    "value": "bboxes",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gt_bboxes, bboxes]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "gt_flags",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gt_ones, gt_flags]",
                    "possible_values": []
                }
            },
            "cat_134": {
                "variable": {
                    "value": "bboxes_train",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gt_bboxes, bboxes_train]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "gt_flags_train",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gt_ones, gt_flags_train]",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/samplers/instance_balanced_pos_sampler.py": {
        "torch": {
            "nonzero_10": {
                "variable": {
                    "value": "pos_inds",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds > 0",
                    "possible_values": []
                }
            },
            "cat_29": {
                "variable": {
                    "value": "sampled_inds",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sampled_inds",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(sampled_inds)",
                            "Call"
                        ],
                        [
                            "torch.cat([sampled_inds, extra_inds])",
                            "Call"
                        ],
                        [
                            "self.random_choice(sampled_inds, num_expected)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_21": {
                "variable": {
                    "value": "inds",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds == i.item()",
                    "possible_values": []
                }
            },
            "from_numpy_36": {
                "variable": {
                    "value": "extra_inds",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "extra_inds",
                    "possible_values": [
                        [
                            "np.array(list(set(pos_inds.cpu()) - set(sampled_inds.cpu())))",
                            "Call"
                        ],
                        [
                            "self.random_choice(extra_inds, num_extra)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(extra_inds).to(assign_result.gt_inds.device).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_38": {
                "variable": {
                    "value": "sampled_inds",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sampled_inds, extra_inds]",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/samplers/iou_balanced_neg_sampler.py": {
        "torch": {
            "nonzero_76": {
                "variable": {
                    "value": "neg_inds",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds == 0",
                    "possible_values": []
                }
            },
            "from_numpy_133": {
                "variable": {
                    "value": "sampled_inds",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sampled_inds",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(sampled_inds)",
                            "Call"
                        ],
                        [
                            "np.concatenate([sampled_inds, extra_inds])",
                            "Call"
                        ],
                        [
                            "np.concatenate((sampled_floor_inds, iou_sampled_inds))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sampled_inds).long().to(assign_result.gt_inds.device)",
                            "Call"
                        ],
                        [
                            "np.concatenate((sampled_inds, extra_inds))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/core/bbox/samplers/ohem_sampler.py": {
        "torch": {
            "nonzero_56": {
                "variable": {
                    "value": "pos_inds",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds > 0",
                    "possible_values": []
                }
            },
            "nonzero_72": {
                "variable": {
                    "value": "neg_inds",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds == 0",
                    "possible_values": []
                }
            },
            "nonzero_130": {
                "variable": {
                    "value": "pos_inds",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds > 0",
                    "possible_values": []
                }
            },
            "nonzero_149": {
                "variable": {
                    "value": "neg_inds_train",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result_train.gt_inds == 0",
                    "possible_values": []
                }
            },
            "nonzero_150": {
                "variable": {
                    "value": "neg_inds_normal",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result_normal.gt_inds == 0",
                    "possible_values": []
                }
            },
            "no_grad_33": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_83": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/samplers/pseudo_sampler.py": {
        "torch": {
            "nonzero_19": {
                "variable": {
                    "value": "pos_inds",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds > 0",
                    "possible_values": []
                }
            },
            "squeeze_19": {
                "variable": {
                    "value": "pos_inds",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "unique_19": {
                "variable": {
                    "value": "pos_inds",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "nonzero_21": {
                "variable": {
                    "value": "neg_inds",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds == 0",
                    "possible_values": []
                }
            },
            "squeeze_21": {
                "variable": {
                    "value": "neg_inds",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "unique_21": {
                "variable": {
                    "value": "neg_inds",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/samplers/random_sampler.py": {
        "torch": {
            "nonzero_47": {
                "variable": {
                    "value": "pos_inds",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds > 0",
                    "possible_values": []
                }
            },
            "nonzero_57": {
                "variable": {
                    "value": "neg_inds",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds == 0",
                    "possible_values": []
                }
            },
            "nonzero_104": {
                "variable": {
                    "value": "pos_inds",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds > 0",
                    "possible_values": []
                }
            },
            "nonzero_117": {
                "variable": {
                    "value": "neg_inds_train",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result_train.gt_inds == 0",
                    "possible_values": []
                }
            },
            "nonzero_118": {
                "variable": {
                    "value": "neg_inds_normal",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result_normal.gt_inds == 0",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "variable": {
                    "value": "gallery",
                    "possible_values": []
                },
                "data": {
                    "value": "gallery",
                    "possible_values": [
                        [
                            "torch.tensor(gallery, dtype=torch.long, device=torch.cuda.current_device())",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.cuda.current_device()",
                    "possible_values": []
                }
            },
            "tensor_76": {
                "variable": {
                    "value": "gallery_1",
                    "possible_values": []
                },
                "data": {
                    "value": "gallery_1",
                    "possible_values": [
                        [
                            "torch.tensor(gallery_1, dtype=torch.long, device=torch.cuda.current_device())",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.cuda.current_device()",
                    "possible_values": []
                }
            },
            "tensor_81": {
                "variable": {
                    "value": "gallery_2",
                    "possible_values": []
                },
                "data": {
                    "value": "gallery_2",
                    "possible_values": [
                        [
                            "torch.tensor(gallery_2, dtype=torch.long, device=torch.cuda.current_device())",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.cuda.current_device()",
                    "possible_values": []
                }
            },
            "randperm_39": {
                "n": {
                    "value": "gallery.numel()",
                    "possible_values": []
                },
                "device": {
                    "value": "gallery.device",
                    "possible_values": []
                }
            },
            "randperm_86": {
                "n": {
                    "value": "gallery_1.numel()",
                    "possible_values": []
                },
                "device": {
                    "value": "gallery_1.device",
                    "possible_values": []
                }
            },
            "randperm_93": {
                "n": {
                    "value": "gallery_2.numel()",
                    "possible_values": []
                },
                "device": {
                    "value": "gallery_2.device",
                    "possible_values": []
                }
            },
            "current_device_38": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "current_device_77": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "current_device_82": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/samplers/sampling_result.py": {
        "torch": {
            "Tensor_32": {
                "variable": {
                    "value": "self.pos_bboxes",
                    "possible_values": []
                }
            },
            "empty_like_40": {
                "variable": {
                    "value": "self.pos_gt_bboxes",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_bboxes",
                    "possible_values": [
                        [
                            "gt_bboxes.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "demodata.random_boxes(assign_result.num_gts, rng=rng)",
                            "Call"
                        ],
                        [
                            "gt_bboxes.squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_54": {
                "tensors": {
                    "value": "[self.pos_bboxes, self.neg_bboxes]",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/samplers/triplet_sampler.py": {
        "torch": {
            "nonzero_54": {
                "variable": {
                    "value": "normal_inds",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result_lst[0][i].labels == sampler_instance",
                    "possible_values": []
                }
            },
            "Tensor_55": {
                "variable": {
                    "value": "normal_pre_sample",
                    "possible_values": []
                }
            },
            "squeeze_55": {
                "variable": {
                    "value": "normal_pre_sample",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "nonzero_57": {
                "variable": {
                    "value": "plus_inds",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result_lst[2][i].labels == sampler_instance",
                    "possible_values": []
                }
            },
            "Tensor_58": {
                "variable": {
                    "value": "plus_pre_sample",
                    "possible_values": []
                }
            },
            "squeeze_58": {
                "variable": {
                    "value": "plus_pre_sample",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "nonzero_60": {
                "variable": {
                    "value": "minus_inds",
                    "possible_values": []
                },
                "input": {
                    "value": "(assign_result_lst[1][i].labels != sampler_instance) & (assign_result_lst[1][i].labels != 0)",
                    "possible_values": []
                }
            },
            "Tensor_62": {
                "variable": {
                    "value": "minus_pre_sample",
                    "possible_values": []
                }
            },
            "squeeze_62": {
                "variable": {
                    "value": "minus_pre_sample",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "bboxes_lst[j][i]",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gt_bboxes_lst[j][i], bboxes_lst[j][i]]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/transforms.py": {
        "torch": {
            "log_23": {
                "variable": {
                    "value": "dw",
                    "possible_values": []
                },
                "input": {
                    "value": "gw / pw",
                    "possible_values": []
                }
            },
            "log_24": {
                "variable": {
                    "value": "dh",
                    "possible_values": []
                },
                "input": {
                    "value": "gh / ph",
                    "possible_values": []
                }
            },
            "stack_25": {
                "variable": {
                    "value": "deltas",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dx, dy, dw, dh]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "addcmul_98": {
                "variable": {
                    "value": "gx",
                    "possible_values": []
                },
                "input": {
                    "value": "px",
                    "possible_values": [
                        [
                            "(proposals[..., 0] + proposals[..., 2]) * 0.5",
                            "BinOp"
                        ],
                        [
                            "((rois[:, 0] + rois[:, 2]) * 0.5).unsqueeze(1).expand_as(dx)",
                            "Call"
                        ]
                    ]
                },
                "tensor1": {
                    "value": "1",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "pw",
                    "possible_values": [
                        [
                            "proposals[..., 2] - proposals[..., 0] + 1.0",
                            "BinOp"
                        ],
                        [
                            "(rois[:, 2] - rois[:, 0] + 1.0).unsqueeze(1).expand_as(dw)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "dx",
                    "possible_values": [
                        [
                            "(gx - px) / pw",
                            "BinOp"
                        ],
                        [
                            "denorm_deltas[:, 0::4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "addcmul_99": {
                "variable": {
                    "value": "gy",
                    "possible_values": []
                },
                "input": {
                    "value": "py",
                    "possible_values": [
                        [
                            "(proposals[..., 1] + proposals[..., 3]) * 0.5",
                            "BinOp"
                        ],
                        [
                            "((rois[:, 1] + rois[:, 3]) * 0.5).unsqueeze(1).expand_as(dy)",
                            "Call"
                        ]
                    ]
                },
                "tensor1": {
                    "value": "1",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "ph",
                    "possible_values": [
                        [
                            "proposals[..., 3] - proposals[..., 1] + 1.0",
                            "BinOp"
                        ],
                        [
                            "(rois[:, 3] - rois[:, 1] + 1.0).unsqueeze(1).expand_as(dh)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "dy",
                    "possible_values": [
                        [
                            "(gy - py) / ph",
                            "BinOp"
                        ],
                        [
                            "denorm_deltas[:, 1::4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_110": {
                "variable": {
                    "value": "bboxes",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, y1, x2, y2]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "rois",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rois_list",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "unique_194": {
                "variable": {
                    "value": "img_ids",
                    "possible_values": []
                },
                "input": {
                    "value": "rois[:, 0].cpu()",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "stack_254": {
                "tensors": {
                    "value": "[x1, y1, x2, y2]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "rois",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img_inds, bboxes[:, :4]]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_186": {
                "variable": {
                    "value": "roi",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img_inds, bbox[:4]]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/evaluation/eval_hooks.py": {
        "torch": {
            "no_grad_41": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "current_device_38": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/fp16/decorators.py": {
        "torch": {}
    },
    "mmdet/core/fp16/hooks.py": {
        "torch": {}
    },
    "mmdet/core/fp16/utils.py": {
        "torch": {}
    },
    "mmdet/core/mask/mask_target.py": {
        "torch": {
            "cat_12": {
                "variable": {
                    "value": "mask_targets",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(mask_targets)",
                    "possible_values": []
                }
            },
            "from_numpy_37": {
                "variable": {
                    "value": "mask_targets",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(mask_targets)",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/post_processing/bbox_nms.py": {
        "torch": {
            "cat_49": {
                "variable": {
                    "value": "cls_dets",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_bboxes, _scores[:, None]]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "bboxes",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bboxes",
                    "possible_values": [
                        [
                            "torch.cat(bboxes)",
                            "Call"
                        ],
                        [
                            "multi_bboxes.new_zeros((0, 5))",
                            "Call"
                        ],
                        [
                            "bboxes[inds]",
                            "Subscript"
                        ],
                        [
                            "torch.cat(bboxes)",
                            "Call"
                        ],
                        [
                            "multi_bboxes.new_zeros((0, 5))",
                            "Call"
                        ],
                        [
                            "bboxes[inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_60": {
                "variable": {
                    "value": "labels",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "torch.cat(labels)",
                            "Call"
                        ],
                        [
                            "multi_bboxes.new_zeros((0,), dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "labels[inds]",
                            "Subscript"
                        ],
                        [
                            "torch.cat(labels)",
                            "Call"
                        ],
                        [
                            "multi_bboxes.new_zeros((0,), dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "labels[inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_61": {
                "variable": {
                    "value": "embeddings",
                    "possible_values": []
                },
                "tensors": {
                    "value": "embeddings",
                    "possible_values": [
                        [
                            "torch.cat(embeddings)",
                            "Call"
                        ],
                        [
                            "multi_bboxes.new_zeros(0, embedding.size(1))",
                            "Call"
                        ],
                        [
                            "embeddings[inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_117": {
                "variable": {
                    "value": "cls_dets",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_bboxes, _scores[:, None]]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_125": {
                "variable": {
                    "value": "bboxes",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bboxes",
                    "possible_values": [
                        [
                            "torch.cat(bboxes)",
                            "Call"
                        ],
                        [
                            "multi_bboxes.new_zeros((0, 5))",
                            "Call"
                        ],
                        [
                            "bboxes[inds]",
                            "Subscript"
                        ],
                        [
                            "torch.cat(bboxes)",
                            "Call"
                        ],
                        [
                            "multi_bboxes.new_zeros((0, 5))",
                            "Call"
                        ],
                        [
                            "bboxes[inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_126": {
                "variable": {
                    "value": "labels",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "torch.cat(labels)",
                            "Call"
                        ],
                        [
                            "multi_bboxes.new_zeros((0,), dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "labels[inds]",
                            "Subscript"
                        ],
                        [
                            "torch.cat(labels)",
                            "Call"
                        ],
                        [
                            "multi_bboxes.new_zeros((0,), dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "labels[inds]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/core/post_processing/merge_augs.py": {
        "torch": {
            "cat_36": {
                "variable": {
                    "value": "aug_proposals",
                    "possible_values": []
                },
                "tensors": {
                    "value": "recovered_proposals",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "stack_65": {
                "variable": {
                    "value": "bboxes",
                    "possible_values": []
                },
                "tensors": {
                    "value": "recovered_bboxes",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_65": {
                "variable": {
                    "value": "bboxes",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "stack_69": {
                "variable": {
                    "value": "scores",
                    "possible_values": []
                },
                "tensors": {
                    "value": "aug_scores",
                    "possible_values": []
                }
            },
            "mean_69": {
                "variable": {
                    "value": "scores",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "mean_76": {
                "input": {
                    "value": "torch.stack(aug_scores)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "stack_76": {
                "tensors": {
                    "value": "aug_scores",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/utils/dist_utils.py": {
        "torch": {}
    },
    "mmdet/datasets/coco_pair.py": {
        "torch": {
            "cat_71": {
                "tensors": {
                    "value": "(results['img'].data, results_normal['img'].data)",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/datasets/custom.py": {
        "torch": {
            "CustomDataset_13": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.ann_file": {
                    "value": "ann_file",
                    "possible_values": []
                },
                "self.data_root": {
                    "value": "data_root",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.img_prefix": {
                    "value": "img_prefix",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.seg_prefix": {
                    "value": "seg_prefix",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.proposal_file": {
                    "value": "proposal_file",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.test_mode": {
                    "value": "test_mode",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.filter_empty_gt": {
                    "value": "filter_empty_gt",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/datasets/dataset_wrappers.py": {
        "torch": {}
    },
    "mmdet/datasets/loader/build_loader.py": {
        "torch": {
            "DataLoader_64": {
                "variable": {
                    "value": "data_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "num_gpus * imgs_per_gpu",
                            "BinOp"
                        ],
                        [
                            "imgs_per_gpu",
                            "Name"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "possible_values": [
                        [
                            "GroupSampler(dataset, imgs_per_gpu) if shuffle else None",
                            "IfExp"
                        ],
                        [
                            "DistributedGroupSampler(dataset, imgs_per_gpu, world_size, rank)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(dataset, world_size, rank, shuffle=False)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "possible_values": [
                        [
                            "num_gpus * workers_per_gpu",
                            "BinOp"
                        ],
                        [
                            "workers_per_gpu",
                            "Name"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "partial(collate, samples_per_gpu=imgs_per_gpu)",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn if seed is not None else None",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/datasets/loader/sampler.py": {
        "torch": {
            "GroupSampler_37": {
                "base_class_0": {
                    "value": "torch.utils.data.Sampler",
                    "possible_values": []
                },
                "self.dataset": {
                    "value": "dataset",
                    "possible_values": []
                },
                "self.samples_per_gpu": {
                    "value": "samples_per_gpu",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DistributedGroupSampler_78": {
                "base_class_0": {
                    "value": "torch.utils.data.Sampler",
                    "possible_values": []
                },
                "self.dataset": {
                    "value": "dataset",
                    "possible_values": []
                },
                "self.samples_per_gpu": {
                    "value": "samples_per_gpu",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.num_replicas": {
                    "value": "num_replicas",
                    "possible_values": [
                        [
                            "_num_replicas",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.rank": {
                    "value": "rank",
                    "possible_values": [
                        [
                            "_rank",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Generator_122": {
                "variable": {
                    "value": "g",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Generator_20": {
                "variable": {
                    "value": "g",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "randperm_22": {
                "variable": {
                    "value": "indices",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.dataset)",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ],
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_24": {
                "variable": {
                    "value": "indices",
                    "possible_values": []
                },
                "start": {
                    "value": "len(self.dataset)",
                    "possible_values": []
                }
            },
            "randperm_147": {
                "n": {
                    "value": "len(indices) // self.samples_per_gpu",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ],
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_130": {
                "n": {
                    "value": "int(size)",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ],
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/datasets/pipelines/formating.py": {
        "torch": {
            "from_numpy_20": {
                "ndarray": {
                    "value": "data",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "tensor_22": {
                "data": {
                    "value": "data",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/anchor_heads/anchor_head.py": {
        "torch": {
            "AnchorHead_15": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "self.num_classes": {
                    "value": "num_classes",
                    "possible_values": []
                },
                "self.feat_channels": {
                    "value": "feat_channels",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.anchor_scales": {
                    "value": "anchor_scales",
                    "possible_values": [
                        [
                            "[8",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.anchor_ratios": {
                    "value": "anchor_ratios",
                    "possible_values": [
                        [
                            "[0.5",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.anchor_strides": {
                    "value": "anchor_strides",
                    "possible_values": [
                        [
                            "[4",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.target_means": {
                    "value": "target_means",
                    "possible_values": [
                        [
                            "(0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.target_stds": {
                    "value": "target_stds",
                    "possible_values": [
                        [
                            "(1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_84": {
                "variable": {
                    "value": "self.conv_cls",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * self.cls_out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "variable": {
                    "value": "self.conv_reg",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * 4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_319": {
                "variable": {
                    "value": "mlvl_bboxes",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_bboxes",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_bboxes)",
                            "Call"
                        ],
                        [
                            "mlvl_bboxes / mlvl_bboxes.new_tensor(scale_factor)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_322": {
                "variable": {
                    "value": "mlvl_scores",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_scores",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_scores)",
                            "Call"
                        ],
                        [
                            "torch.cat([padding, mlvl_scores], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_326": {
                "variable": {
                    "value": "mlvl_scores",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[padding, mlvl_scores]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/anchor_heads/atss_head.py": {
        "torch": {
            "ReLU_64": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ModuleList_65": {
                "variable": {
                    "value": "self.cls_convs",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ModuleList_66": {
                "variable": {
                    "value": "self.reg_convs",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "variable": {
                    "value": "self.atss_cls",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * self.cls_out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "variable": {
                    "value": "self.atss_reg",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * 4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_94": {
                "variable": {
                    "value": "self.atss_centerness",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * 1",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ModuleList_96": {
                "variable": {
                    "value": "self.scales",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Scale(1.0) for _ in self.anchor_strides]",
                    "possible_values": []
                }
            },
            "nonzero_140": {
                "variable": {
                    "value": "pos_inds",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "labels.reshape(-1)",
                            "Call"
                        ],
                        [
                            "anchors.new_zeros(num_valid_anchors, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "unmap(labels, num_total_anchors, inside_flags)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_140": {
                "variable": {
                    "value": "pos_inds",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "stack_247": {
                "variable": {
                    "value": "left_right",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[l_, r_]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "stack_248": {
                "variable": {
                    "value": "top_bottom",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t_, b_]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sqrt_249": {
                "variable": {
                    "value": "centerness",
                    "possible_values": []
                },
                "input": {
                    "value": "left_right.min(dim=-1)[0] / left_right.max(dim=-1)[0] * (top_bottom.min(dim=-1)[0] / top_bottom.max(dim=-1)[0])",
                    "possible_values": []
                }
            },
            "cat_331": {
                "variable": {
                    "value": "mlvl_bboxes",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_bboxes",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_bboxes)",
                            "Call"
                        ],
                        [
                            "mlvl_bboxes / mlvl_bboxes.new_tensor(scale_factor)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_335": {
                "variable": {
                    "value": "mlvl_scores",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_scores",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_scores)",
                            "Call"
                        ],
                        [
                            "torch.cat([padding, mlvl_scores], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_337": {
                "variable": {
                    "value": "mlvl_scores",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[padding, mlvl_scores]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_338": {
                "variable": {
                    "value": "mlvl_centerness",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_centerness",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_centerness)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_444": {
                "variable": {
                    "value": "bbox_targets",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors",
                    "possible_values": [
                        [
                            "anchors.reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "anchors[topk_inds, :]",
                            "Subscript"
                        ],
                        [
                            "flat_anchors[inside_flags, :]",
                            "Subscript"
                        ],
                        [
                            "unmap(anchors, num_total_anchors, inside_flags)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_445": {
                "variable": {
                    "value": "bbox_weights",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors",
                    "possible_values": [
                        [
                            "anchors.reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "anchors[topk_inds, :]",
                            "Subscript"
                        ],
                        [
                            "flat_anchors[inside_flags, :]",
                            "Subscript"
                        ],
                        [
                            "unmap(anchors, num_total_anchors, inside_flags)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_483": {
                "variable": {
                    "value": "split_inside_flags",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inside_flags",
                    "possible_values": [
                        [
                            "anchor_inside_flags(flat_anchors, valid_flags, img_meta['img_shape'][:2], cfg.allowed_border)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "num_level_anchors",
                    "possible_values": [
                        [
                            "[anchors.size(0) for anchors in anchor_list[0]]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_173": {
                "variable": {
                    "value": "centerness_targets",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_373": {
                "variable": {
                    "value": "anchor_list[i]",
                    "possible_values": []
                },
                "tensors": {
                    "value": "anchor_list[i]",
                    "possible_values": []
                }
            },
            "cat_374": {
                "variable": {
                    "value": "valid_flag_list[i]",
                    "possible_values": []
                },
                "tensors": {
                    "value": "valid_flag_list[i]",
                    "possible_values": []
                }
            },
            "is_available_17": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_initialized_17": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "isnan_252": {
                "input": {
                    "value": "centerness",
                    "possible_values": [
                        [
                            "self.atss_centerness(reg_feat)",
                            "Call"
                        ],
                        [
                            "centerness.permute(0, 2, 3, 1).reshape(-1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(left_right.min(dim=-1)[0] / left_right.max(dim=-1)[0] * (top_bottom.min(dim=-1)[0] / top_bottom.max(dim=-1)[0]))",
                            "Call"
                        ],
                        [
                            "centerness.permute(1, 2, 0).reshape(-1).sigmoid()",
                            "Call"
                        ],
                        [
                            "centerness[topk_inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "any_252": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tensor_212": {
                "data": {
                    "value": "num_total_pos",
                    "possible_values": [
                        [
                            "sum([max(inds.numel(), 1) for inds in pos_inds_list])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/anchor_heads/fcos_head.py": {
        "torch": {
            "FCOSHead_14": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.num_classes": {
                    "value": "num_classes",
                    "possible_values": []
                },
                "self.in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "self.feat_channels": {
                    "value": "feat_channels",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stacked_convs": {
                    "value": "stacked_convs",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.strides": {
                    "value": "strides",
                    "possible_values": [
                        [
                            "(4",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.regress_ranges": {
                    "value": "regress_ranges",
                    "possible_values": [
                        [
                            "regress_ranges[:, None, :].expand(num_points, num_gts, 2)",
                            "Call"
                        ],
                        [
                            "((-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.conv_cfg": {
                    "value": "conv_cfg",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.norm_cfg": {
                    "value": "norm_cfg",
                    "possible_values": []
                }
            },
            "ModuleList_72": {
                "variable": {
                    "value": "self.cls_convs",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ModuleList_73": {
                "variable": {
                    "value": "self.reg_convs",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "variable": {
                    "value": "self.fcos_cls",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.cls_out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "variable": {
                    "value": "self.fcos_reg",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "variable": {
                    "value": "self.fcos_centerness",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ModuleList_101": {
                "variable": {
                    "value": "self.scales",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Scale(1.0) for _ in self.strides]",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "flatten_cls_scores",
                    "possible_values": []
                },
                "tensors": {
                    "value": "flatten_cls_scores",
                    "possible_values": [
                        [
                            "[cls_score.permute(0, 2, 3, 1).reshape(-1, self.cls_out_channels) for cls_score in cls_scores]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(flatten_cls_scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_164": {
                "variable": {
                    "value": "flatten_bbox_preds",
                    "possible_values": []
                },
                "tensors": {
                    "value": "flatten_bbox_preds",
                    "possible_values": [
                        [
                            "[bbox_pred.permute(0, 2, 3, 1).reshape(-1, 4) for bbox_pred in bbox_preds]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(flatten_bbox_preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_165": {
                "variable": {
                    "value": "flatten_centerness",
                    "possible_values": []
                },
                "tensors": {
                    "value": "flatten_centerness",
                    "possible_values": [
                        [
                            "[centerness.permute(0, 2, 3, 1).reshape(-1) for centerness in centernesses]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(flatten_centerness)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_166": {
                "variable": {
                    "value": "flatten_labels",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "gt_labels[min_area_inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_167": {
                "variable": {
                    "value": "flatten_bbox_targets",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_targets",
                    "possible_values": [
                        [
                            "torch.stack((left, top, right, bottom), -1)",
                            "Call"
                        ],
                        [
                            "bbox_targets[range(num_points), min_area_inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_169": {
                "variable": {
                    "value": "flatten_points",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[points.repeat(num_imgs, 1) for points in all_level_points]",
                    "possible_values": []
                }
            },
            "cat_272": {
                "variable": {
                    "value": "mlvl_bboxes",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_bboxes",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_bboxes)",
                            "Call"
                        ],
                        [
                            "mlvl_bboxes / mlvl_bboxes.new_tensor(scale_factor)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_275": {
                "variable": {
                    "value": "mlvl_scores",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_scores",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_scores)",
                            "Call"
                        ],
                        [
                            "torch.cat([padding, mlvl_scores], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_277": {
                "variable": {
                    "value": "mlvl_scores",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[padding, mlvl_scores]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_278": {
                "variable": {
                    "value": "mlvl_centerness",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_centerness",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_centerness)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_308": {
                "variable": {
                    "value": "x_range",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "possible_values": []
                },
                "end": {
                    "value": "w * stride",
                    "possible_values": []
                },
                "step": {
                    "value": "stride",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "arange_310": {
                "variable": {
                    "value": "y_range",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "possible_values": []
                },
                "end": {
                    "value": "h * stride",
                    "possible_values": []
                },
                "step": {
                    "value": "stride",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "meshgrid_312": {
                "variable": {
                    "value": "(y, x)",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "y_range",
                    "possible_values": [
                        [
                            "torch.arange(0, h * stride, stride, dtype=dtype, device=device)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "x_range",
                    "possible_values": [
                        [
                            "torch.arange(0, w * stride, stride, dtype=dtype, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_326": {
                "variable": {
                    "value": "concat_regress_ranges",
                    "possible_values": []
                },
                "tensors": {
                    "value": "expanded_regress_ranges",
                    "possible_values": [
                        [
                            "[points[i].new_tensor(self.regress_ranges[i])[None].expand_as(points[i]) for i in range(num_levels)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_327": {
                "variable": {
                    "value": "concat_points",
                    "possible_values": []
                },
                "tensors": {
                    "value": "points",
                    "possible_values": [
                        [
                            "points[topk_inds, :]",
                            "Subscript"
                        ],
                        [
                            "torch.stack((x.reshape(-1), y.reshape(-1)), dim=-1) + stride // 2",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "stack_378": {
                "variable": {
                    "value": "bbox_targets",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(left, top, right, bottom)",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "sqrt_408": {
                "input": {
                    "value": "centerness_targets",
                    "possible_values": [
                        [
                            "left_right.min(dim=-1)[0] / left_right.max(dim=-1)[0] * (top_bottom.min(dim=-1)[0] / top_bottom.max(dim=-1)[0])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_313": {
                "tensors": {
                    "value": "(x.reshape(-1), y.reshape(-1))",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_349": {
                "tensors": {
                    "value": "[labels[i] for labels in labels_list]",
                    "possible_values": []
                }
            },
            "cat_351": {
                "tensors": {
                    "value": "[bbox_targets[i] for bbox_targets in bbox_targets_list]",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/anchor_heads/fovea_head.py": {
        "torch": {
            "FeatureAlign_14": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_23": {
                    "variable": {
                        "value": "self.conv_offset",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "4",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "deformable_groups * offset_channels",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "ReLU_31": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                }
            },
            "FoveaHead_44": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.num_classes": {
                    "value": "num_classes",
                    "possible_values": []
                },
                "self.in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "self.feat_channels": {
                    "value": "feat_channels",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stacked_convs": {
                    "value": "stacked_convs",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.strides": {
                    "value": "strides",
                    "possible_values": [
                        [
                            "(4",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.base_edge_list": {
                    "value": "base_edge_list",
                    "possible_values": [
                        [
                            "(16",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.scale_ranges": {
                    "value": "scale_ranges",
                    "possible_values": [
                        [
                            "((8",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.sigma": {
                    "value": "sigma",
                    "possible_values": [
                        [
                            "0.4",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.with_deform": {
                    "value": "with_deform",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.deformable_groups": {
                    "value": "deformable_groups",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.conv_cfg": {
                    "value": "conv_cfg",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.norm_cfg": {
                    "value": "norm_cfg",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_84": {
                "variable": {
                    "value": "self.cls_convs",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ModuleList_85": {
                "variable": {
                    "value": "self.reg_convs",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "variable": {
                    "value": "self.fovea_reg",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_208": {
                "variable": {
                    "value": "flatten_cls_scores",
                    "possible_values": []
                },
                "tensors": {
                    "value": "flatten_cls_scores",
                    "possible_values": [
                        [
                            "[cls_score.permute(0, 2, 3, 1).reshape(-1, self.cls_out_channels) for cls_score in cls_scores]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(flatten_cls_scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_209": {
                "variable": {
                    "value": "flatten_bbox_preds",
                    "possible_values": []
                },
                "tensors": {
                    "value": "flatten_bbox_preds",
                    "possible_values": [
                        [
                            "[bbox_pred.permute(0, 2, 3, 1).reshape(-1, 4) for bbox_pred in bbox_preds]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(flatten_bbox_preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_250": {
                "variable": {
                    "value": "flatten_labels",
                    "possible_values": []
                },
                "tensors": {
                    "value": "flatten_labels",
                    "possible_values": [
                        [
                            "[torch.cat([labels_level_img.flatten() for labels_level_img in labels_level]) for labels_level in zip(*label_list)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(flatten_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_251": {
                "variable": {
                    "value": "flatten_bbox_targets",
                    "possible_values": []
                },
                "tensors": {
                    "value": "flatten_bbox_targets",
                    "possible_values": [
                        [
                            "[torch.cat([bbox_targets_level_img.reshape(-1, 4) for bbox_targets_level_img in bbox_targets_level]) for bbox_targets_level in zip(*bbox_target_list)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(flatten_bbox_targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_260": {
                "variable": {
                    "value": "gt_areas",
                    "possible_values": []
                },
                "input": {
                    "value": "(gt_bboxes_raw[:, 2] - gt_bboxes_raw[:, 0]) * (gt_bboxes_raw[:, 3] - gt_bboxes_raw[:, 1])",
                    "possible_values": []
                }
            },
            "cat_378": {
                "variable": {
                    "value": "det_bboxes",
                    "possible_values": []
                },
                "tensors": {
                    "value": "det_bboxes",
                    "possible_values": [
                        [
                            "self.get_bboxes_single(cls_score_list, bbox_pred_list, featmap_sizes, points, img_shape, scale_factor, cfg, rescale)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(det_bboxes)",
                            "Call"
                        ],
                        [
                            "det_bboxes / det_bboxes.new_tensor(scale_factor)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_381": {
                "variable": {
                    "value": "det_scores",
                    "possible_values": []
                },
                "tensors": {
                    "value": "det_scores",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(det_scores)",
                            "Call"
                        ],
                        [
                            "torch.cat([padding, det_scores], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_383": {
                "variable": {
                    "value": "det_scores",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[padding, det_scores]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_114": {
                "variable": {
                    "value": "self.fovea_cls",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.cls_out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_139": {
                "variable": {
                    "value": "self.fovea_cls",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(self.feat_channels * 4)",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.cls_out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "meshgrid_179": {
                "variable": {
                    "value": "(y, x)",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "y_range",
                    "possible_values": [
                        [
                            "torch.arange(featmap_size[0], dtype=dtype, device=device) + 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "indexing": {
                    "value": "x_range",
                    "possible_values": [
                        [
                            "torch.arange(featmap_size[1], dtype=dtype, device=device) + 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_227": {
                "variable": {
                    "value": "loss_bbox",
                    "possible_values": []
                },
                "data": {
                    "value": "[0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "flatten_bbox_preds.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "flatten_bbox_preds.device",
                    "possible_values": []
                }
            },
            "sort_278": {
                "variable": {
                    "value": "(_, hit_index_order)",
                    "possible_values": []
                },
                "input": {
                    "value": "-gt_areas[hit_indices]",
                    "possible_values": []
                }
            },
            "ceil_285": {
                "variable": {
                    "value": "pos_left",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_bboxes[:, 0] + (1 - self.sigma) * half_w - 0.5",
                    "possible_values": []
                }
            },
            "clamp_285": {
                "variable": {
                    "value": "pos_left",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "min": {
                    "value": "featmap_size[1] - 1",
                    "possible_values": []
                }
            },
            "floor_288": {
                "variable": {
                    "value": "pos_right",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_bboxes[:, 0] + (1 + self.sigma) * half_w - 0.5",
                    "possible_values": []
                }
            },
            "clamp_288": {
                "variable": {
                    "value": "pos_right",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "min": {
                    "value": "featmap_size[1] - 1",
                    "possible_values": []
                }
            },
            "ceil_291": {
                "variable": {
                    "value": "pos_top",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_bboxes[:, 1] + (1 - self.sigma) * half_h - 0.5",
                    "possible_values": []
                }
            },
            "clamp_291": {
                "variable": {
                    "value": "pos_top",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "min": {
                    "value": "featmap_size[0] - 1",
                    "possible_values": []
                }
            },
            "floor_294": {
                "variable": {
                    "value": "pos_down",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_bboxes[:, 1] + (1 + self.sigma) * half_h - 0.5",
                    "possible_values": []
                }
            },
            "clamp_294": {
                "variable": {
                    "value": "pos_down",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "min": {
                    "value": "featmap_size[0] - 1",
                    "possible_values": []
                }
            },
            "stack_375": {
                "variable": {
                    "value": "bboxes",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, y1, x2, y2]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_240": {
                "tensors": {
                    "value": "[labels_level_img.flatten() for labels_level_img in labels_level]",
                    "possible_values": []
                }
            },
            "cat_245": {
                "tensors": {
                    "value": "[bbox_targets_level_img.reshape(-1, 4) for bbox_targets_level_img in bbox_targets_level]",
                    "possible_values": []
                }
            },
            "arange_175": {
                "start": {
                    "value": "featmap_size[1]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "arange_177": {
                "start": {
                    "value": "featmap_size[0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "log_311": {
                "input": {
                    "value": "bbox_targets",
                    "possible_values": [
                        [
                            "gt_bboxes_raw.new(featmap_size[0], featmap_size[1], 4) + 1",
                            "BinOp"
                        ],
                        [
                            "bbox_targets.clamp(min=1.0 / 16, max=16.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_276": {
                "input": {
                    "value": "bbox_targets",
                    "possible_values": [
                        [
                            "gt_bboxes_raw.new(featmap_size[0], featmap_size[1], 4) + 1",
                            "BinOp"
                        ],
                        [
                            "bbox_targets.clamp(min=1.0 / 16, max=16.0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/anchor_heads/free_anchor_retina_head.py": {
        "torch": {
            "cat_59": {
                "variable": {
                    "value": "cls_scores",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cls_scores",
                    "possible_values": [
                        [
                            "[cls.permute(0, 2, 3, 1).reshape(cls.size(0), -1, self.cls_out_channels) for cls in cls_scores]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(cls_scores, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_60": {
                "variable": {
                    "value": "bbox_preds",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_preds",
                    "possible_values": [
                        [
                            "[bbox_pred.permute(0, 2, 3, 1).reshape(bbox_pred.size(0), -1, 4) for bbox_pred in bbox_preds]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(bbox_preds, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sigmoid_62": {
                "variable": {
                    "value": "cls_prob",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_scores",
                    "possible_values": [
                        [
                            "[cls.permute(0, 2, 3, 1).reshape(cls.size(0), -1, self.cls_out_channels) for cls in cls_scores]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(cls_scores, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_161": {
                "variable": {
                    "value": "box_prob",
                    "possible_values": []
                },
                "tensors": {
                    "value": "box_prob",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(box_prob, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "topk_129": {
                "variable": {
                    "value": "(_, matched)",
                    "possible_values": []
                },
                "input": {
                    "value": "match_quality_matrix",
                    "possible_values": [
                        [
                            "bbox_overlaps(gt_bboxes_, anchors_)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.pre_anchor_topk",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "gather_137": {
                "variable": {
                    "value": "matched_cls_prob",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_prob_[matched]",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                },
                "index": {
                    "value": "gt_labels_.view(-1, 1, 1).repeat(1, self.pre_anchor_topk, 1)",
                    "possible_values": []
                }
            },
            "squeeze_137": {
                "variable": {
                    "value": "matched_cls_prob",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "exp_152": {
                "variable": {
                    "value": "matched_box_prob",
                    "possible_values": []
                },
                "input": {
                    "value": "-loss_bbox",
                    "possible_values": []
                }
            },
            "cat_47": {
                "tensors": {
                    "value": "anchor",
                    "possible_values": []
                }
            },
            "stack_88": {
                "variable": {
                    "value": "indices",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.arange(num_obj).type_as(gt_labels_), gt_labels_]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_91": {
                "variable": {
                    "value": "object_cls_box_prob",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "possible_values": [
                        [
                            "torch.stack([torch.arange(num_obj).type_as(gt_labels_), gt_labels_], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.nonzero(box_cls_prob).t_()",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "object_box_prob",
                    "possible_values": [
                        [
                            "((object_box_iou - t1) / (t2 - t1)).clamp(min=0, max=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_102": {
                "variable": {
                    "value": "box_cls_prob",
                    "possible_values": []
                },
                "input": {
                    "value": "object_cls_box_prob",
                    "possible_values": [
                        [
                            "torch.sparse_coo_tensor(indices, object_box_prob)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "nonzero_105": {
                "variable": {
                    "value": "indices",
                    "possible_values": []
                },
                "input": {
                    "value": "box_cls_prob",
                    "possible_values": [
                        [
                            "torch.sparse.sum(object_cls_box_prob, dim=0).to_dense()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_158": {
                "tensors": {
                    "value": "positive_losses",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "sum_158": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "clamp_177": {
                "input": {
                    "value": "1 - matched_prob",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-12",
                    "possible_values": []
                },
                "max": {
                    "value": "None",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_181": {
                "input": {
                    "value": "bag_prob",
                    "possible_values": [
                        [
                            "(weight * matched_prob).sum(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.ones_like(bag_prob)",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_186": {
                "input": {
                    "value": "prob",
                    "possible_values": [
                        [
                            "cls_prob * (1 - box_prob)",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.zeros_like(prob)",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "possible_values": []
                }
            },
            "no_grad_71": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "zeros_107": {
                "variable": {
                    "value": "image_box_prob",
                    "possible_values": []
                },
                "*size": {
                    "value": "anchors_.size(0)",
                    "possible_values": []
                },
                "out": {
                    "value": "self.cls_out_channels",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_118": {
                "variable": {
                    "value": "image_box_prob",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices.flip([0])",
                    "possible_values": []
                },
                "values": {
                    "value": "nonzero_box_prob",
                    "possible_values": [
                        [
                            "torch.where(gt_labels_.unsqueeze(dim=-1) == indices[0], object_box_prob[:, indices[1]], torch.tensor([0]).type_as(object_box_prob)).max(dim=0).values",
                            "Attribute"
                        ]
                    ]
                },
                "size": {
                    "value": "(anchors_.size(0), self.cls_out_channels)",
                    "possible_values": []
                }
            },
            "ones_like_182": {
                "input": {
                    "value": "bag_prob",
                    "possible_values": [
                        [
                            "(weight * matched_prob).sum(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_187": {
                "input": {
                    "value": "prob",
                    "possible_values": [
                        [
                            "cls_prob * (1 - box_prob)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "arange_89": {
                "start": {
                    "value": "num_obj",
                    "possible_values": [
                        [
                            "gt_labels_.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_111": {
                "condition": {
                    "value": "gt_labels_.unsqueeze(dim=-1) == indices[0]",
                    "possible_values": []
                },
                "x": {
                    "value": "object_box_prob[:, indices[1]]",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.tensor([0]).type_as(object_box_prob)",
                    "possible_values": []
                }
            },
            "max_111": {
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "tensor_114": {
                "data": {
                    "value": "[0]",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/anchor_heads/ga_retina_head.py": {
        "torch": {
            "ReLU_27": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ModuleList_28": {
                "variable": {
                    "value": "self.cls_convs",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ModuleList_29": {
                "variable": {
                    "value": "self.reg_convs",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "variable": {
                    "value": "self.conv_loc",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "variable": {
                    "value": "self.conv_shape",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/anchor_heads/ga_rpn_head.py": {
        "torch": {
            "Conv2d_20": {
                "variable": {
                    "value": "self.rpn_conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.feat_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "relu_30": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.rpn_conv(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_117": {
                "variable": {
                    "value": "proposals",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_proposals",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "proposals",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[proposals, scores.unsqueeze(-1)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "nonzero_108": {
                "variable": {
                    "value": "valid_inds",
                    "possible_values": []
                },
                "input": {
                    "value": "(w >= cfg.min_bbox_size) & (h >= cfg.min_bbox_size)",
                    "possible_values": []
                }
            },
            "squeeze_108": {
                "variable": {
                    "value": "valid_inds",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/anchor_heads/guided_anchor_head.py": {
        "torch": {
            "FeatureAdaption_18": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_39": {
                    "variable": {
                        "value": "self.conv_offset",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "2",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "deformable_groups * offset_channels",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "ReLU_47": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                }
            },
            "ReLU_173": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_174": {
                "variable": {
                    "value": "self.conv_loc",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_175": {
                "variable": {
                    "value": "self.conv_shape",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "nonzero_373": {
                "variable": {
                    "value": "inds",
                    "possible_values": []
                },
                "input": {
                    "value": "anchor_weights[:, 0] > 0",
                    "possible_values": []
                }
            },
            "squeeze_373": {
                "variable": {
                    "value": "inds",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_610": {
                "variable": {
                    "value": "mlvl_bboxes",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_bboxes",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_bboxes)",
                            "Call"
                        ],
                        [
                            "mlvl_bboxes / mlvl_bboxes.new_tensor(scale_factor)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_613": {
                "variable": {
                    "value": "mlvl_scores",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_scores",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_scores)",
                            "Call"
                        ],
                        [
                            "torch.cat([padding, mlvl_scores], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_616": {
                "variable": {
                    "value": "mlvl_scores",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[padding, mlvl_scores]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "stack_266": {
                "tensors": {
                    "value": "inside_flags_list",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "sum_266": {
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/anchor_heads/reppoints_head.py": {
        "torch": {
            "RepPointsHead_17": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "self.num_classes": {
                    "value": "num_classes",
                    "possible_values": []
                },
                "self.feat_channels": {
                    "value": "feat_channels",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.point_feat_channels": {
                    "value": "point_feat_channels",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stacked_convs": {
                    "value": "stacked_convs",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.num_points": {
                    "value": "num_points",
                    "possible_values": [
                        [
                            "9",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.gradient_mul": {
                    "value": "gradient_mul",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.point_base_scale": {
                    "value": "point_base_scale",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.point_strides": {
                    "value": "point_strides",
                    "possible_values": [
                        [
                            "[8",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.conv_cfg": {
                    "value": "conv_cfg",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.norm_cfg": {
                    "value": "norm_cfg",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.use_grid_points": {
                    "value": "use_grid_points",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.center_init": {
                    "value": "center_init",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.transform_method": {
                    "value": "transform_method",
                    "possible_values": [
                        [
                            "'moment'",
                            "MethodArgument"
                        ]
                    ]
                },
                "tensor_106": {
                    "variable": {
                        "value": "self.dcn_base_offset",
                        "possible_values": []
                    },
                    "data": {
                        "value": "dcn_base_offset",
                        "possible_values": [
                            [
                                "np.stack([dcn_base_y, dcn_base_x], axis=1).reshape(-1)",
                                "Call"
                            ],
                            [
                                "self.dcn_base_offset.type_as(x)",
                                "Call"
                            ]
                        ]
                    }
                }
            },
            "ReLU_110": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ModuleList_111": {
                "variable": {
                    "value": "self.cls_convs",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ModuleList_112": {
                "variable": {
                    "value": "self.reg_convs",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_137": {
                "variable": {
                    "value": "self.reppoints_cls_out",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.point_feat_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.cls_out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Conv2d_139": {
                "variable": {
                    "value": "self.reppoints_pts_init_conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.point_feat_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_142": {
                "variable": {
                    "value": "self.reppoints_pts_init_out",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.point_feat_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "pts_out_dim",
                    "possible_values": [
                        [
                            "4 if self.use_grid_points else 2 * self.num_points",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Conv2d_148": {
                "variable": {
                    "value": "self.reppoints_pts_refine_out",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.point_feat_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "pts_out_dim",
                    "possible_values": [
                        [
                            "4 if self.use_grid_points else 2 * self.num_points",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "linspace_234": {
                "variable": {
                    "value": "intervel",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "possible_values": []
                },
                "steps": {
                    "value": "self.dcn_kernel",
                    "possible_values": []
                }
            },
            "stack_242": {
                "variable": {
                    "value": "grid_yx",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grid_y, grid_x]",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "regressed_bbox",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grid_left, grid_top, grid_left + grid_width, grid_top + grid_height]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_583": {
                "variable": {
                    "value": "mlvl_bboxes",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_bboxes",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_bboxes)",
                            "Call"
                        ],
                        [
                            "mlvl_bboxes / mlvl_bboxes.new_tensor(scale_factor)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_586": {
                "variable": {
                    "value": "mlvl_scores",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_scores",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_scores)",
                            "Call"
                        ],
                        [
                            "torch.cat([padding, mlvl_scores], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_85": {
                "variable": {
                    "value": "self.moment_transfer",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(2)",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_184": {
                "variable": {
                    "value": "bbox",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bbox_left, bbox_up, bbox_right, bbox_bottom]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "stack_367": {
                "variable": {
                    "value": "pts_lvl",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pts_lvl",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(pts_lvl, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_574": {
                "variable": {
                    "value": "bbox_pos_center",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[points[:, :2], points[:, :2]]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "stack_580": {
                "variable": {
                    "value": "bboxes",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, y1, x2, y2]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_589": {
                "variable": {
                    "value": "mlvl_scores",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[padding, mlvl_scores]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_193": {
                "variable": {
                    "value": "bbox",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bbox_left, bbox_up, bbox_right, bbox_bottom]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "exp_229": {
                "input": {
                    "value": "reg[:, 2:, ...]",
                    "possible_values": []
                }
            },
            "Tensor_341": {
                "variable": {
                    "value": "bbox_shift",
                    "possible_values": []
                }
            },
            "cat_343": {
                "variable": {
                    "value": "bbox_center",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[point[i_lvl][:, :2], point[i_lvl][:, :2]]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "stack_363": {
                "variable": {
                    "value": "xy_pts_shift",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_pts_shift, y_pts_shift]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_462": {
                "variable": {
                    "value": "bbox_center",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[center[i_lvl][:, :2], center[i_lvl][:, :2]]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "std_198": {
                "variable": {
                    "value": "pts_y_std",
                    "possible_values": []
                },
                "input": {
                    "value": "pts_y - pts_y_mean",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "std_199": {
                "variable": {
                    "value": "pts_x_std",
                    "possible_values": []
                },
                "input": {
                    "value": "pts_x - pts_x_mean",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_206": {
                "variable": {
                    "value": "bbox",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pts_x_mean - half_width, pts_y_mean - half_height, pts_x_mean + half_width, pts_y_mean + half_height]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "exp_227": {
                "input": {
                    "value": "reg[:, 2:, ...]",
                    "possible_values": []
                }
            },
            "zeros_86": {
                "*size": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "exp_204": {
                "input": {
                    "value": "moment_width_transfer",
                    "possible_values": [
                        [
                            "moment_transfer[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_205": {
                "input": {
                    "value": "moment_height_transfer",
                    "possible_values": [
                        [
                            "moment_transfer[1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/anchor_heads/retina_head.py": {
        "torch": {
            "ReLU_54": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ModuleList_55": {
                "variable": {
                    "value": "self.cls_convs",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ModuleList_56": {
                "variable": {
                    "value": "self.reg_convs",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "variable": {
                    "value": "self.retina_cls",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * self.cls_out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_82": {
                "variable": {
                    "value": "self.retina_reg",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * 4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/anchor_heads/retina_sepbn_head.py": {
        "torch": {
            "ReLU_42": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ModuleList_43": {
                "variable": {
                    "value": "self.cls_convs",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ModuleList_44": {
                "variable": {
                    "value": "self.reg_convs",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "variable": {
                    "value": "self.retina_cls",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * self.cls_out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "variable": {
                    "value": "self.retina_reg",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * 4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ModuleList_46": {
                "variable": {
                    "value": "cls_convs",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ModuleList_47": {
                "variable": {
                    "value": "reg_convs",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/anchor_heads/rpn_head.py": {
        "torch": {
            "Conv2d_19": {
                "variable": {
                    "value": "self.rpn_conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.feat_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.rpn_cls",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * self.cls_out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.rpn_reg",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * 4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "relu_32": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.rpn_conv(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "proposals",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_proposals",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "proposals",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[proposals, scores.unsqueeze(-1)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "nonzero_87": {
                "variable": {
                    "value": "valid_inds",
                    "possible_values": []
                },
                "input": {
                    "value": "(w >= cfg.min_bbox_size) & (h >= cfg.min_bbox_size)",
                    "possible_values": []
                }
            },
            "squeeze_87": {
                "variable": {
                    "value": "valid_inds",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/anchor_heads/ssd_head.py": {
        "torch": {
            "ModuleList_47": {
                "variable": {
                    "value": "self.reg_convs",
                    "possible_values": []
                },
                "modules": {
                    "value": "reg_convs",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_48": {
                "variable": {
                    "value": "self.cls_convs",
                    "possible_values": []
                },
                "modules": {
                    "value": "cls_convs",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_169": {
                "variable": {
                    "value": "all_cls_scores",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s.permute(0, 2, 3, 1).reshape(num_images, -1, self.cls_out_channels) for s in cls_scores]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "all_labels",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels_list",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_174": {
                "variable": {
                    "value": "all_label_weights",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_weights_list",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_176": {
                "variable": {
                    "value": "all_bbox_preds",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b.permute(0, 2, 3, 1).reshape(num_images, -1, 4) for b in bbox_preds]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "all_bbox_targets",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_targets_list",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "possible_values": []
                }
            },
            "cat_182": {
                "variable": {
                    "value": "all_bbox_weights",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_weights_list",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "possible_values": []
                }
            },
            "index_select_87": {
                "variable": {
                    "value": "anchor_generator.base_anchors",
                    "possible_values": []
                },
                "input": {
                    "value": "anchor_generator.base_anchors",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.LongTensor(indices)",
                    "possible_values": []
                }
            },
            "isfinite_186": {
                "input": {
                    "value": "all_cls_scores",
                    "possible_values": [
                        [
                            "torch.cat([s.permute(0, 2, 3, 1).reshape(num_images, -1, self.cls_out_channels) for s in cls_scores], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_186": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "isfinite_188": {
                "input": {
                    "value": "all_bbox_preds",
                    "possible_values": [
                        [
                            "torch.cat([b.permute(0, 2, 3, 1).reshape(num_images, -1, 4) for b in bbox_preds], -2)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_188": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cross_entropy_113": {
                "input": {
                    "value": "cls_score",
                    "possible_values": []
                },
                "target": {
                    "value": "labels",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "in_channels[i]",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_anchors[i] * 4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "in_channels[i]",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_anchors[i] * num_classes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/backbones/efficientnet.py": {
        "torch": {
            "MBConvBlock_25": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self._block_args": {
                    "value": "block_args",
                    "possible_values": [
                        [
                            "block_args._replace(input_filters=round_filters(block_args.input_filters, self._global_params), output_filters=round_filters(block_args.output_filters, self._global_params), num_repeat=round_repeats(block_args.num_repeat, self._global_params))",
                            "Call"
                        ],
                        [
                            "block_args._replace(input_filters=block_args.output_filters, stride=1)",
                            "Call"
                        ]
                    ]
                },
                "BatchNorm2d_61": {
                    "variable": {
                        "value": "self._bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "oup",
                        "possible_values": [
                            [
                                "self._block_args.input_filters * self._block_args.expand_ratio",
                                "BinOp"
                            ]
                        ]
                    },
                    "momentum": {
                        "value": "self._bn_mom",
                        "possible_values": []
                    },
                    "eps": {
                        "value": "self._bn_eps",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_72": {
                    "variable": {
                        "value": "self._bn2",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "final_oup",
                        "possible_values": [
                            [
                                "self._block_args.output_filters",
                                "Attribute"
                            ]
                        ]
                    },
                    "momentum": {
                        "value": "self._bn_mom",
                        "possible_values": []
                    },
                    "eps": {
                        "value": "self._bn_eps",
                        "possible_values": []
                    }
                }
            },
            "EfficientNet_110": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self._model_name": {
                    "value": "modelname",
                    "possible_values": [
                        [
                            "'efficientnet-b7'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._global_params": {
                    "value": "global_params",
                    "possible_values": []
                },
                "self._blocks_args": {
                    "value": "blocks_args",
                    "possible_values": []
                },
                "self.frozen_stages": {
                    "value": "frozen_stages",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "BatchNorm2d_151": {
                    "variable": {
                        "value": "self._bn0",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "out_channels",
                        "possible_values": [
                            [
                                "round_filters(32, self._global_params)",
                                "Call"
                            ],
                            [
                                "round_filters(1280, self._global_params)",
                                "Call"
                            ]
                        ]
                    },
                    "momentum": {
                        "value": "bn_mom",
                        "possible_values": [
                            [
                                "1 - self._global_params.batch_norm_momentum",
                                "BinOp"
                            ]
                        ]
                    },
                    "eps": {
                        "value": "bn_eps",
                        "possible_values": [
                            [
                                "self._global_params.batch_norm_epsilon",
                                "Attribute"
                            ]
                        ]
                    }
                },
                "ModuleList_154": {
                    "variable": {
                        "value": "self._stages",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "[]",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_177": {
                    "variable": {
                        "value": "self._bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "out_channels",
                        "possible_values": [
                            [
                                "round_filters(32, self._global_params)",
                                "Call"
                            ],
                            [
                                "round_filters(1280, self._global_params)",
                                "Call"
                            ]
                        ]
                    },
                    "momentum": {
                        "value": "bn_mom",
                        "possible_values": [
                            [
                                "1 - self._global_params.batch_norm_momentum",
                                "BinOp"
                            ]
                        ]
                    },
                    "eps": {
                        "value": "bn_eps",
                        "possible_values": [
                            [
                                "self._global_params.batch_norm_epsilon",
                                "Attribute"
                            ]
                        ]
                    }
                },
                "AdaptiveAvgPool2d_180": {
                    "variable": {
                        "value": "self._avg_pooling",
                        "possible_values": []
                    },
                    "output_size": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Dropout_181": {
                    "variable": {
                        "value": "self._dropout",
                        "possible_values": []
                    },
                    "p": {
                        "value": "self._global_params.dropout_rate",
                        "possible_values": []
                    }
                },
                "Linear_182": {
                    "variable": {
                        "value": "self._fc",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "out_channels",
                        "possible_values": [
                            [
                                "round_filters(32, self._global_params)",
                                "Call"
                            ],
                            [
                                "round_filters(1280, self._global_params)",
                                "Call"
                            ]
                        ]
                    },
                    "out_features": {
                        "value": "self.num_classes",
                        "possible_values": []
                    }
                }
            },
            "BatchNorm2d_53": {
                "variable": {
                    "value": "self._bn0",
                    "possible_values": []
                },
                "num_features": {
                    "value": "oup",
                    "possible_values": [
                        [
                            "self._block_args.input_filters * self._block_args.expand_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "self._bn_mom",
                    "possible_values": []
                },
                "eps": {
                    "value": "self._bn_eps",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_90": {
                "variable": {
                    "value": "x_squeezed",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self._swish(self._bn0(self._expand_conv(inputs)))",
                            "Call"
                        ],
                        [
                            "self._swish(self._bn1(self._depthwise_conv(x)))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x_squeezed) * x",
                            "BinOp"
                        ],
                        [
                            "self._bn2(self._project_conv(x))",
                            "Call"
                        ],
                        [
                            "drop_connect(x, p=drop_connect_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x + inputs",
                            "BinOp"
                        ],
                        [
                            "self._swish(self._bn0(self._conv_stem(inputs)))",
                            "Call"
                        ],
                        [
                            "stage(x)",
                            "Call"
                        ],
                        [
                            "self.extract_features(inputs)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Sequential_156": {
                "variable": {
                    "value": "_blocks",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "sigmoid_92": {
                "input": {
                    "value": "x_squeezed",
                    "possible_values": [
                        [
                            "F.adaptive_avg_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "self._se_expand(self._swish(self._se_reduce(x_squeezed)))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/backbones/hrnet.py": {
        "torch": {
            "HRModule_12": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.in_channels": {
                    "value": "in_channels",
                    "possible_values": [
                        [
                            "self.in_channels",
                            "Attribute"
                        ],
                        [
                            "num_channels_pre_layer[-1]",
                            "Subscript"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.num_branches": {
                    "value": "num_branches",
                    "possible_values": [
                        [
                            "self.num_branches",
                            "Attribute"
                        ],
                        [
                            "layer_config['num_branches']",
                            "Subscript"
                        ]
                    ]
                },
                "self.multiscale_output": {
                    "value": "multiscale_output",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.norm_cfg": {
                    "value": "norm_cfg",
                    "possible_values": []
                },
                "self.conv_cfg": {
                    "value": "conv_cfg",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.with_cp": {
                    "value": "with_cp",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "ReLU_41": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "False",
                        "possible_values": []
                    }
                }
            },
            "HRNet_195": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.extra": {
                    "value": "extra",
                    "possible_values": []
                },
                "self.conv_cfg": {
                    "value": "conv_cfg",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.norm_cfg": {
                    "value": "norm_cfg",
                    "possible_values": []
                },
                "self.norm_eval": {
                    "value": "norm_eval",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.with_cp": {
                    "value": "with_cp",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.zero_init_residual": {
                    "value": "zero_init_residual",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "ReLU_296": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, self.in_channels[branch_index], num_channels[branch_index] * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "ModuleList_111": {
                "modules": {
                    "value": "branches",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_173": {
                "modules": {
                    "value": "fuse_layers",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_396": {
                "modules": {
                    "value": "transition_layers",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_401": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_431": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "Sequential_460": {
                "*args": {
                    "value": "*hr_modules",
                    "possible_values": []
                }
            },
            "ModuleList_171": {
                "modules": {
                    "value": "fuse_layer",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_394": {
                "*args": {
                    "value": "*conv_downsamples",
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, in_channels[j], in_channels[i], kernel_size=1, stride=1, padding=0, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_362": {
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, num_channels_pre_layer[i], num_channels_cur_layer[i], kernel_size=3, stride=1, padding=1, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_383": {
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, in_channels, out_channels, kernel_size=3, stride=2, padding=1, bias=False)",
                    "possible_values": []
                }
            },
            "Upsample_136": {
                "scale_factor": {
                    "value": "2 ** (j - i)",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "Sequential_170": {
                "*args": {
                    "value": "*conv_downsamples",
                    "possible_values": []
                }
            },
            "ReLU_373": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_393": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Sequential_145": {
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, in_channels[j], in_channels[i], kernel_size=3, stride=2, padding=1, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_158": {
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, in_channels[j], in_channels[j], kernel_size=3, stride=2, padding=1, bias=False)",
                    "possible_values": []
                }
            },
            "ReLU_169": {
                "inplace": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/backbones/resnet.py": {
        "torch": {
            "BasicBlock_14": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ReLU_52": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "self.downsample": {
                    "value": "downsample",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "nn.Sequential(build_conv_layer(conv_cfg, inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False), build_norm_layer(norm_cfg, planes * block.expansion)[1])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "strides[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "dilations[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Bottleneck_85": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.inplanes": {
                    "value": "inplanes",
                    "possible_values": [
                        [
                            "planes * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "self.planes": {
                    "value": "planes",
                    "possible_values": [
                        [
                            "64 * 2 ** i",
                            "BinOp"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "strides[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "dilations[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.style": {
                    "value": "style",
                    "possible_values": [
                        [
                            "'pytorch'",
                            "MethodArgument"
                        ],
                        [
                            "'pytorch'",
                            "MethodArgument"
                        ],
                        [
                            "'pytorch'",
                            "MethodArgument"
                        ],
                        [
                            "'pytorch'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.with_cp": {
                    "value": "with_cp",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.conv_cfg": {
                    "value": "conv_cfg",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.norm_cfg": {
                    "value": "norm_cfg",
                    "possible_values": []
                },
                "self.dcn": {
                    "value": "dcn",
                    "possible_values": [
                        [
                            "self.dcn if self.stage_with_dcn[i] else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.gcb": {
                    "value": "gcb",
                    "possible_values": [
                        [
                            "self.gcb if self.stage_with_gcb[i] else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.gen_attention": {
                    "value": "gen_attention",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ReLU_180": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "self.downsample": {
                    "value": "downsample",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "nn.Sequential(build_conv_layer(conv_cfg, inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False), build_norm_layer(norm_cfg, planes * block.expansion)[1])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ResNet_307": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.depth": {
                    "value": "depth",
                    "possible_values": []
                },
                "self.num_stages": {
                    "value": "num_stages",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.strides": {
                    "value": "strides",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.dilations": {
                    "value": "dilations",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.out_indices": {
                    "value": "out_indices",
                    "possible_values": [
                        [
                            "(0",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.style": {
                    "value": "style",
                    "possible_values": [
                        [
                            "'pytorch'",
                            "MethodArgument"
                        ],
                        [
                            "'pytorch'",
                            "MethodArgument"
                        ],
                        [
                            "'pytorch'",
                            "MethodArgument"
                        ],
                        [
                            "'pytorch'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.frozen_stages": {
                    "value": "frozen_stages",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.conv_cfg": {
                    "value": "conv_cfg",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.norm_cfg": {
                    "value": "norm_cfg",
                    "possible_values": []
                },
                "self.with_cp": {
                    "value": "with_cp",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.norm_eval": {
                    "value": "norm_eval",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.dcn": {
                    "value": "dcn",
                    "possible_values": [
                        [
                            "self.dcn if self.stage_with_dcn[i] else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stage_with_dcn": {
                    "value": "stage_with_dcn",
                    "possible_values": [
                        [
                            "(False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.gen_attention": {
                    "value": "gen_attention",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.gcb": {
                    "value": "gcb",
                    "possible_values": [
                        [
                            "self.gcb if self.stage_with_gcb[i] else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stage_with_gcb": {
                    "value": "stage_with_gcb",
                    "possible_values": [
                        [
                            "(False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.zero_init_residual": {
                    "value": "zero_init_residual",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_259": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_conv_layer(conv_cfg, inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_303": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "ReLU_454": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "MaxPool2d_455": {
                "variable": {
                    "value": "self.maxpool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/backbones/resnet_cq.py": {
        "torch": {
            "BasicBlock_15": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ReLU_53": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "self.downsample": {
                    "value": "downsample",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "nn.Sequential(build_conv_layer(conv_cfg, inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False), build_norm_layer(norm_cfg, planes * block.expansion)[1])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "strides[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "dilations[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Bottleneck_86": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.inplanes": {
                    "value": "inplanes",
                    "possible_values": [
                        [
                            "planes * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "self.planes": {
                    "value": "planes",
                    "possible_values": [
                        [
                            "64 * 2 ** i",
                            "BinOp"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "strides[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "dilations[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.style": {
                    "value": "style",
                    "possible_values": [
                        [
                            "'pytorch'",
                            "MethodArgument"
                        ],
                        [
                            "'pytorch'",
                            "MethodArgument"
                        ],
                        [
                            "'pytorch'",
                            "MethodArgument"
                        ],
                        [
                            "'pytorch'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.with_cp": {
                    "value": "with_cp",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.conv_cfg": {
                    "value": "conv_cfg",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.norm_cfg": {
                    "value": "norm_cfg",
                    "possible_values": []
                },
                "self.dcn": {
                    "value": "dcn",
                    "possible_values": [
                        [
                            "self.dcn if self.stage_with_dcn[i] else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.gcb": {
                    "value": "gcb",
                    "possible_values": [
                        [
                            "self.gcb if self.stage_with_gcb[i] else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.gen_attention": {
                    "value": "gen_attention",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ReLU_181": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "self.downsample": {
                    "value": "downsample",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "nn.Sequential(build_conv_layer(conv_cfg, inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False), build_norm_layer(norm_cfg, planes * block.expansion)[1])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ResNet_CQ_308": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.depth": {
                    "value": "depth",
                    "possible_values": []
                },
                "self.num_stages": {
                    "value": "num_stages",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.strides": {
                    "value": "strides",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.dilations": {
                    "value": "dilations",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.out_indices": {
                    "value": "out_indices",
                    "possible_values": [
                        [
                            "(0",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.style": {
                    "value": "style",
                    "possible_values": [
                        [
                            "'pytorch'",
                            "MethodArgument"
                        ],
                        [
                            "'pytorch'",
                            "MethodArgument"
                        ],
                        [
                            "'pytorch'",
                            "MethodArgument"
                        ],
                        [
                            "'pytorch'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.frozen_stages": {
                    "value": "frozen_stages",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.conv_cfg": {
                    "value": "conv_cfg",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.norm_cfg": {
                    "value": "norm_cfg",
                    "possible_values": []
                },
                "self.with_cp": {
                    "value": "with_cp",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.norm_eval": {
                    "value": "norm_eval",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.dcn": {
                    "value": "dcn",
                    "possible_values": [
                        [
                            "self.dcn if self.stage_with_dcn[i] else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stage_with_dcn": {
                    "value": "stage_with_dcn",
                    "possible_values": [
                        [
                            "(False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.gen_attention": {
                    "value": "gen_attention",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.gcb": {
                    "value": "gcb",
                    "possible_values": [
                        [
                            "self.gcb if self.stage_with_gcb[i] else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stage_with_gcb": {
                    "value": "stage_with_gcb",
                    "possible_values": [
                        [
                            "(False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.zero_init_residual": {
                    "value": "zero_init_residual",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.dropblock_indices": {
                    "value": "dropblock_indices",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_260": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_conv_layer(conv_cfg, inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_304": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "ReLU_460": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "MaxPool2d_462": {
                "variable": {
                    "value": "self.maxpool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/backbones/resnext.py": {
        "torch": {
            "Sequential_94": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_conv_layer(conv_cfg, inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_138": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/backbones/senet.py": {
        "torch": {
            "SEModule_31": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "AdaptiveAvgPool2d_35": {
                    "variable": {
                        "value": "self.avg_pool",
                        "possible_values": []
                    },
                    "output_size": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Conv2d_36": {
                    "variable": {
                        "value": "self.fc1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "channels",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "channels // reduction",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "0",
                        "possible_values": []
                    }
                },
                "ReLU_38": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "Conv2d_39": {
                    "variable": {
                        "value": "self.fc2",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "channels // reduction",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "channels",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "0",
                        "possible_values": []
                    }
                },
                "Sigmoid_41": {
                    "variable": {
                        "value": "self.sigmoid",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "Bottleneck_53": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "SENet_161": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.inplanes": {
                    "value": "inplanes",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.norm_eval": {
                    "value": "norm_eval",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.frozen_stages": {
                    "value": "frozen_stages",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "Sequential_241": {
                    "variable": {
                        "value": "self.layer0",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "OrderedDict(layer0_modules)",
                        "possible_values": []
                    }
                }
            },
            "Conv2d_89": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_90": {
                "variable": {
                    "value": "self.bn1",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 2",
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "variable": {
                    "value": "self.conv2",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes * 2",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_94": {
                "variable": {
                    "value": "self.bn2",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "possible_values": []
                }
            },
            "Conv2d_95": {
                "variable": {
                    "value": "self.conv3",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes * 4",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_97": {
                "variable": {
                    "value": "self.bn3",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "possible_values": []
                }
            },
            "ReLU_98": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_115": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_117": {
                "variable": {
                    "value": "self.bn1",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "variable": {
                    "value": "self.conv2",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_120": {
                "variable": {
                    "value": "self.bn2",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "possible_values": []
                }
            },
            "Conv2d_121": {
                "variable": {
                    "value": "self.conv3",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_122": {
                "variable": {
                    "value": "self.bn3",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "possible_values": []
                }
            },
            "ReLU_123": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_139": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "width",
                    "possible_values": [
                        [
                            "math.floor(planes * (base_width / 64)) * groups",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm2d_141": {
                "variable": {
                    "value": "self.bn1",
                    "possible_values": []
                },
                "num_features": {
                    "value": "width",
                    "possible_values": [
                        [
                            "math.floor(planes * (base_width / 64)) * groups",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_142": {
                "variable": {
                    "value": "self.conv2",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "width",
                    "possible_values": [
                        [
                            "math.floor(planes * (base_width / 64)) * groups",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "width",
                    "possible_values": [
                        [
                            "math.floor(planes * (base_width / 64)) * groups",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_144": {
                "variable": {
                    "value": "self.bn2",
                    "possible_values": []
                },
                "num_features": {
                    "value": "width",
                    "possible_values": [
                        [
                            "math.floor(planes * (base_width / 64)) * groups",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_145": {
                "variable": {
                    "value": "self.conv3",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "width",
                    "possible_values": [
                        [
                            "math.floor(planes * (base_width / 64)) * groups",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_146": {
                "variable": {
                    "value": "self.bn3",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "possible_values": []
                }
            },
            "ReLU_147": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Sequential_316": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=downsample_kernel_size, stride=stride, padding=downsample_padding, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_330": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "MaxPool2d_239": {
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_317": {
                "in_channels": {
                    "value": "self.inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "downsample_kernel_size",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "downsample_padding",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_320": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                }
            },
            "Conv2d_217": {
                "in_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_219": {
                "num_features": {
                    "value": "64",
                    "possible_values": []
                }
            },
            "ReLU_220": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_221": {
                "in_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_223": {
                "num_features": {
                    "value": "64",
                    "possible_values": []
                }
            },
            "ReLU_224": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_225": {
                "in_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inplanes",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_227": {
                "num_features": {
                    "value": "inplanes",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_228": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_232": {
                "in_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inplanes",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_234": {
                "num_features": {
                    "value": "inplanes",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_235": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/backbones/ssd_vgg.py": {
        "torch": {
            "L2Norm_139": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.n_dims": {
                    "value": "n_dims",
                    "possible_values": []
                },
                "Parameter_144": {
                    "variable": {
                        "value": "self.weight",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.Tensor(self.n_dims)",
                        "possible_values": []
                    }
                },
                "self.eps": {
                    "value": "eps",
                    "possible_values": [
                        [
                            "1e-10",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.scale": {
                    "value": "scale",
                    "possible_values": [
                        [
                            "20.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_103": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "layer(x)",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Sequential_136": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "MaxPool2d_57": {
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "512",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "6",
                    "possible_values": []
                },
                "dilation": {
                    "value": "6",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "in_channels": {
                    "value": "1024",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_66": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "variable": {
                    "value": "conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outplane",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "outplanes[i + 1]",
                            "Subscript"
                        ],
                        [
                            "outplanes[i]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k",
                    "possible_values": [
                        [
                            "kernel_sizes[num_layers % 2]",
                            "Subscript"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_128": {
                "variable": {
                    "value": "conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outplane",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "outplanes[i + 1]",
                            "Subscript"
                        ],
                        [
                            "outplanes[i]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k",
                    "possible_values": [
                        [
                            "kernel_sizes[num_layers % 2]",
                            "Subscript"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Conv2d_134": {
                "in_channels": {
                    "value": "self.inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/backbones/utils.py": {
        "torch": {
            "SwishImplementation_36": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                }
            },
            "MemoryEfficientSwish_50": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "Swish_54": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "Conv2dDynamicSamePadding_103": {
                "base_class_0": {
                    "value": "torch.nn.Conv2d",
                    "possible_values": []
                }
            },
            "Conv2dStaticSamePadding_123": {
                "base_class_0": {
                    "value": "torch.nn.Conv2d",
                    "possible_values": []
                }
            },
            "Identity_149": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "floor_89": {
                "variable": {
                    "value": "binary_tensor",
                    "possible_values": []
                },
                "input": {
                    "value": "random_tensor",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Name"
                        ],
                        [
                            "random_tensor + torch.rand([batch_size, 1, 1, 1], dtype=inputs.dtype, device=inputs.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_46": {
                "variable": {
                    "value": "sigmoid_i",
                    "possible_values": []
                },
                "input": {
                    "value": "i",
                    "possible_values": [
                        [
                            "ctx.saved_variables[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "rand_88": {
                "*size": {
                    "value": "[batch_size, 1, 1, 1]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "possible_values": []
                }
            },
            "conv2d_145": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "possible_values": []
                }
            },
            "pad_119": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2]",
                    "possible_values": []
                }
            },
            "conv2d_120": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "possible_values": []
                }
            },
            "ZeroPad2d_139": {
                "variable": {
                    "value": "self.static_padding",
                    "possible_values": []
                },
                "padding": {
                    "value": "(pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2)",
                    "possible_values": []
                }
            },
            "sigmoid_39": {
                "input": {
                    "value": "i",
                    "possible_values": [
                        [
                            "ctx.saved_variables[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_56": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/bbox_heads/bbox_head.py": {
        "torch": {
            "BBoxHead_14": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.with_avg_pool": {
                    "value": "with_avg_pool",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.with_cls": {
                    "value": "with_cls",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.with_reg": {
                    "value": "with_reg",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.in_channels": {
                    "value": "in_channels",
                    "possible_values": [
                        [
                            "self.in_channels",
                            "Attribute"
                        ],
                        [
                            "in_channels * self.roi_feat_area",
                            "BinOp"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.num_classes": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "81",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.target_means": {
                    "value": "target_means",
                    "possible_values": [
                        [
                            "[0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.target_stds": {
                    "value": "target_stds",
                    "possible_values": [
                        [
                            "[0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.reg_class_agnostic": {
                    "value": "reg_class_agnostic",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AvgPool2d_53": {
                "variable": {
                    "value": "self.avg_pool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.roi_feat_size",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.fc_cls",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "possible_values": [
                        [
                            "self.in_channels",
                            "Attribute"
                        ],
                        [
                            "in_channels * self.roi_feat_area",
                            "BinOp"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "81",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.fc_reg",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "possible_values": [
                        [
                            "self.in_channels",
                            "Attribute"
                        ],
                        [
                            "in_channels * self.roi_feat_area",
                            "BinOp"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim_reg",
                    "possible_values": [
                        [
                            "4 if reg_class_agnostic else 4 * num_classes",
                            "IfExp"
                        ]
                    ]
                }
            },
            "nonzero_273": {
                "variable": {
                    "value": "inds",
                    "possible_values": []
                },
                "input": {
                    "value": "rois[:, 0] == i",
                    "possible_values": []
                }
            },
            "squeeze_273": {
                "variable": {
                    "value": "inds",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "stack_311": {
                "variable": {
                    "value": "inds",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(label, label + 1, label + 2, label + 3)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "gather_312": {
                "variable": {
                    "value": "bbox_pred",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox_pred",
                    "possible_values": [
                        [
                            "self.fc_reg(x) if self.with_reg else None",
                            "IfExp"
                        ],
                        [
                            "torch.gather(bbox_pred, 1, inds)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "inds",
                    "possible_values": [
                        [
                            "torch.nonzero(rois[:, 0] == i).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack((label, label + 1, label + 2, label + 3), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_321": {
                "variable": {
                    "value": "new_rois",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rois[:, [0]], bboxes)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "softmax_147": {
                "input": {
                    "value": "cls_score",
                    "possible_values": [
                        [
                            "self.fc_cls(x) if self.with_cls else None",
                            "IfExp"
                        ],
                        [
                            "sum(cls_score) / float(len(cls_score))",
                            "BinOp"
                        ],
                        [
                            "sum(cls_score) / float(len(cls_score))",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "from_numpy_162": {
                "variable": {
                    "value": "scale_factor",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "scale_factor",
                    "possible_values": [
                        [
                            "torch.from_numpy(scale_factor).to(bboxes.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(scale_factor).to(bboxes.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_188": {
                "input": {
                    "value": "cls_score",
                    "possible_values": [
                        [
                            "self.fc_cls(x) if self.with_cls else None",
                            "IfExp"
                        ],
                        [
                            "sum(cls_score) / float(len(cls_score))",
                            "BinOp"
                        ],
                        [
                            "sum(cls_score) / float(len(cls_score))",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "from_numpy_203": {
                "variable": {
                    "value": "scale_factor",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "scale_factor",
                    "possible_values": [
                        [
                            "torch.from_numpy(scale_factor).to(bboxes.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(scale_factor).to(bboxes.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_109": {
                "input": {
                    "value": "label_weights > 0",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/bbox_heads/convfc_bbox_head.py": {
        "torch": {
            "ReLU_74": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ModuleList_94": {
                "variable": {
                    "value": "branch_convs",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ModuleList_109": {
                "variable": {
                    "value": "branch_fcs",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_77": {
                "variable": {
                    "value": "self.fc_cls",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.cls_last_dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "self.fc_reg",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.reg_last_dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim_reg",
                    "possible_values": [
                        [
                            "4 if self.reg_class_agnostic else 4 * self.num_classes",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Linear_120": {
                "in_features": {
                    "value": "fc_in_channels",
                    "possible_values": [
                        [
                            "last_layer_dim if i == 0 else self.fc_out_channels",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.fc_out_channels",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/bbox_heads/double_bbox_head.py": {
        "torch": {
            "BasicResBlock_10": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ReLU_57": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                }
            },
            "Linear_115": {
                "variable": {
                    "value": "self.fc_reg",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.conv_out_channels",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim_reg",
                    "possible_values": [
                        [
                            "4 if self.reg_class_agnostic else 4 * self.num_classes",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Linear_117": {
                "variable": {
                    "value": "self.fc_cls",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.fc_out_channels",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "possible_values": []
                }
            },
            "ReLU_118": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ModuleList_122": {
                "variable": {
                    "value": "branch_convs",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ModuleList_134": {
                "variable": {
                    "value": "branch_fcs",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_139": {
                "in_features": {
                    "value": "fc_in_channels",
                    "possible_values": [
                        [
                            "self.in_channels * self.roi_feat_area if i == 0 else self.fc_out_channels",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.fc_out_channels",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/bbox_heads/triplet_head.py": {
        "torch": {
            "TripletHead_17": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.with_avg_pool": {
                    "value": "with_avg_pool",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.feat_dim": {
                    "value": "feat_dim",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.embed_dim": {
                    "value": "embed_dim",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "Linear_38": {
                    "variable": {
                        "value": "self.fc1",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "in_",
                        "possible_values": [
                            [
                                "roi_channels",
                                "Name"
                            ],
                            [
                                "roi_channels * self.roi_feat_size[0] * self.roi_feat_size[1]",
                                "BinOp"
                            ]
                        ]
                    },
                    "out_features": {
                        "value": "feat_dim",
                        "possible_values": [
                            [
                                "1024",
                                "MethodArgument"
                            ]
                        ]
                    }
                },
                "Linear_39": {
                    "variable": {
                        "value": "self.fc2",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "feat_dim",
                        "possible_values": [
                            [
                                "1024",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "out_features": {
                        "value": "embed_dim",
                        "possible_values": [
                            [
                                "256",
                                "MethodArgument"
                            ]
                        ]
                    }
                }
            },
            "pairwise_distance_71": {
                "variable": {
                    "value": "dan",
                    "possible_values": []
                },
                "x1": {
                    "value": "a_feat",
                    "possible_values": [
                        [
                            "self.embedding(a)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "n_feat",
                    "possible_values": [
                        [
                            "self.embedding(n)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "pairwise_distance_72": {
                "variable": {
                    "value": "dap",
                    "possible_values": []
                },
                "x1": {
                    "value": "a_feat",
                    "possible_values": [
                        [
                            "self.embedding(a)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "p_feat",
                    "possible_values": [
                        [
                            "self.embedding(p)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "MarginRankingLoss_87": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "margin": {
                    "value": "margin",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AvgPool2d_34": {
                "variable": {
                    "value": "self.avg_pool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.roi_feat_size",
                    "possible_values": []
                }
            },
            "normalize_50": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x.reshape((x.shape[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/builder.py": {
        "torch": {
            "Sequential_13": {
                "*args": {
                    "value": "*modules",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/detectors/base.py": {
        "torch": {
            "BaseDetector_12": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/detectors/cascade_rcnn.py": {
        "torch": {
            "randn_132": {
                "variable": {
                    "value": "proposals",
                    "possible_values": []
                },
                "*size": {
                    "value": "1000",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "ModuleList_49": {
                "variable": {
                    "value": "self.bbox_roi_extractor",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ModuleList_50": {
                "variable": {
                    "value": "self.bbox_head",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ModuleList_64": {
                "variable": {
                    "value": "self.mask_head",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ModuleList_72": {
                "variable": {
                    "value": "self.mask_roi_extractor",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cat_292": {
                "variable": {
                    "value": "pos_labels",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res.pos_gt_labels for res in sampling_results]",
                    "possible_values": []
                }
            },
            "cat_463": {
                "variable": {
                    "value": "pos_labels",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res.pos_gt_labels for res in sampling_results]",
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "pos_inds",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pos_inds",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pos_inds)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pos_inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_457": {
                "variable": {
                    "value": "pos_inds",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pos_inds",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pos_inds)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pos_inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_303": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_474": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ones_277": {
                "*size": {
                    "value": "res.pos_bboxes.shape[0]",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "bbox_feats.device",
                            "Attribute"
                        ],
                        [
                            "bbox_feats.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "possible_values": []
                }
            },
            "zeros_282": {
                "*size": {
                    "value": "res.neg_bboxes.shape[0]",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "bbox_feats.device",
                            "Attribute"
                        ],
                        [
                            "bbox_feats.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "possible_values": []
                }
            },
            "ones_448": {
                "*size": {
                    "value": "res.pos_bboxes.shape[0]",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "bbox_feats.device",
                            "Attribute"
                        ],
                        [
                            "bbox_feats.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "possible_values": []
                }
            },
            "zeros_453": {
                "*size": {
                    "value": "res.neg_bboxes.shape[0]",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "bbox_feats.device",
                            "Attribute"
                        ],
                        [
                            "bbox_feats.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "possible_values": []
                }
            },
            "from_numpy_577": {
                "ndarray": {
                    "value": "scale_factor",
                    "possible_values": [
                        [
                            "img_meta[0]['scale_factor']",
                            "Subscript"
                        ],
                        [
                            "img_meta[0]['scale_factor']",
                            "Subscript"
                        ],
                        [
                            "img_meta[0]['scale_factor']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/detectors/double_head_rcnn.py": {
        "torch": {
            "randn_23": {
                "variable": {
                    "value": "proposals",
                    "possible_values": []
                },
                "*size": {
                    "value": "1000",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "pos_labels",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res.pos_gt_labels for res in sampling_results]",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "pos_inds",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pos_inds",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pos_inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_126": {
                "*size": {
                    "value": "res.pos_bboxes.shape[0]",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "bbox_cls_feats.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "possible_values": []
                }
            },
            "zeros_131": {
                "*size": {
                    "value": "res.neg_bboxes.shape[0]",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "bbox_cls_feats.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/detectors/grid_rcnn.py": {
        "torch": {
            "randn_91": {
                "variable": {
                    "value": "proposals",
                    "possible_values": []
                },
                "*size": {
                    "value": "1000",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "new_bboxes",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[new_x1y1, new_x2y2]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Tensor_224": {
                "variable": {
                    "value": "det_bboxes",
                    "possible_values": []
                }
            },
            "randperm_183": {
                "n": {
                    "value": "grid_feats.shape[0]",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/detectors/htc.py": {
        "torch": {
            "cat_110": {
                "variable": {
                    "value": "pos_labels",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res.pos_gt_labels for res in sampling_results]",
                    "possible_values": []
                }
            },
            "randn_165": {
                "variable": {
                    "value": "proposals",
                    "possible_values": []
                },
                "*size": {
                    "value": "1000",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_62": {
                "variable": {
                    "value": "bbox_semantic_feat",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox_semantic_feat",
                    "possible_values": [
                        [
                            "self.semantic_roi_extractor([semantic_feat], rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(bbox_semantic_feat, bbox_feats.shape[-2:])",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(bbox_semantic_feat, bbox_feats.shape[-2:])",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "bbox_feats.shape[-2:]",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_92": {
                "variable": {
                    "value": "mask_semantic_feat",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_semantic_feat",
                    "possible_values": [
                        [
                            "self.semantic_roi_extractor([semantic_feat], pos_rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(mask_semantic_feat, mask_feats.shape[-2:])",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(mask_semantic_feat, mask_feats.shape[-2:])",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(mask_semantic_feat, mask_feats.shape[-2:])",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "mask_feats.shape[-2:]",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_123": {
                "variable": {
                    "value": "bbox_semantic_feat",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox_semantic_feat",
                    "possible_values": [
                        [
                            "self.semantic_roi_extractor([semantic_feat], rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(bbox_semantic_feat, bbox_feats.shape[-2:])",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(bbox_semantic_feat, bbox_feats.shape[-2:])",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "bbox_feats.shape[-2:]",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_139": {
                "variable": {
                    "value": "mask_semantic_feat",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_semantic_feat",
                    "possible_values": [
                        [
                            "self.semantic_roi_extractor([semantic_feat], pos_rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(mask_semantic_feat, mask_feats.shape[-2:])",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(mask_semantic_feat, mask_feats.shape[-2:])",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(mask_semantic_feat, mask_feats.shape[-2:])",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "mask_feats.shape[-2:]",
                    "possible_values": []
                }
            },
            "no_grad_304": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_278": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_489": {
                "variable": {
                    "value": "mask_semantic_feat",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_semantic_feat",
                    "possible_values": [
                        [
                            "self.semantic_roi_extractor([semantic_feat], pos_rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(mask_semantic_feat, mask_feats.shape[-2:])",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(mask_semantic_feat, mask_feats.shape[-2:])",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(mask_semantic_feat, mask_feats.shape[-2:])",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "mask_feats.shape[-2:]",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/detectors/mask_scoring_rcnn.py": {
        "torch": {
            "cat_146": {
                "variable": {
                    "value": "pos_labels",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res.pos_gt_labels for res in sampling_results]",
                    "possible_values": []
                }
            },
            "cat_139": {
                "variable": {
                    "value": "pos_inds",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pos_inds",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pos_inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_130": {
                "*size": {
                    "value": "res.pos_bboxes.shape[0]",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "bbox_feats.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "possible_values": []
                }
            },
            "zeros_135": {
                "*size": {
                    "value": "res.neg_bboxes.shape[0]",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "bbox_feats.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/detectors/reppoints_detector.py": {
        "torch": {
            "cat_45": {
                "variable": {
                    "value": "bboxes",
                    "possible_values": []
                },
                "tensors": {
                    "value": "recovered_bboxes",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "scores",
                    "possible_values": []
                },
                "tensors": {
                    "value": "aug_scores",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/detectors/single_stage.py": {
        "torch": {}
    },
    "mmdet/models/detectors/test_mixins.py": {
        "torch": {
            "from_numpy_240": {
                "variable": {
                    "value": "scale_factor",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "scale_factor",
                    "possible_values": [
                        [
                            "img_meta[0]['scale_factor']",
                            "Subscript"
                        ],
                        [
                            "img_meta[0]['scale_factor']",
                            "Subscript"
                        ],
                        [
                            "img_meta[0]['scale_factor']",
                            "Subscript"
                        ],
                        [
                            "img_meta[0]['scale_factor']",
                            "Subscript"
                        ],
                        [
                            "img_meta[0]['scale_factor']",
                            "Subscript"
                        ],
                        [
                            "img_meta[0]['scale_factor']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(scale_factor).to(det_bboxes.device)",
                            "Call"
                        ],
                        [
                            "img_meta[0]['scale_factor']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/detectors/two_stage.py": {
        "torch": {
            "randn_112": {
                "variable": {
                    "value": "proposals",
                    "possible_values": []
                },
                "*size": {
                    "value": "1000",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "cat_251": {
                "variable": {
                    "value": "pos_inds",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pos_inds",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pos_inds)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pos_inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_258": {
                "variable": {
                    "value": "pos_labels",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res.pos_gt_labels for res in sampling_results]",
                    "possible_values": []
                }
            },
            "cat_400": {
                "variable": {
                    "value": "pos_inds",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pos_inds",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pos_inds)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pos_inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_407": {
                "variable": {
                    "value": "pos_labels",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res.pos_gt_labels for res in sampling_results]",
                    "possible_values": []
                }
            },
            "ones_242": {
                "*size": {
                    "value": "res.pos_bboxes.shape[0]",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "bbox_feats.device",
                            "Attribute"
                        ],
                        [
                            "bbox_feats.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "possible_values": []
                }
            },
            "zeros_247": {
                "*size": {
                    "value": "res.neg_bboxes.shape[0]",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "bbox_feats.device",
                            "Attribute"
                        ],
                        [
                            "bbox_feats.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "possible_values": []
                }
            },
            "ones_391": {
                "*size": {
                    "value": "res.pos_bboxes.shape[0]",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "bbox_feats.device",
                            "Attribute"
                        ],
                        [
                            "bbox_feats.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "possible_values": []
                }
            },
            "zeros_396": {
                "*size": {
                    "value": "res.neg_bboxes.shape[0]",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "bbox_feats.device",
                            "Attribute"
                        ],
                        [
                            "bbox_feats.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/detectors/two_stage_triplet.py": {
        "torch": {
            "randn_114": {
                "variable": {
                    "value": "proposals",
                    "possible_values": []
                },
                "*size": {
                    "value": "1000",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "cat_425": {
                "variable": {
                    "value": "anchor",
                    "possible_values": []
                },
                "tensors": {
                    "value": "anchor",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(anchor)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_426": {
                "variable": {
                    "value": "neg",
                    "possible_values": []
                },
                "tensors": {
                    "value": "neg",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(neg)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_427": {
                "variable": {
                    "value": "positive",
                    "possible_values": []
                },
                "tensors": {
                    "value": "positive",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(positive)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/losses/accuracy.py": {
        "torch": {
            "Accuracy_24": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.topk": {
                    "value": "topk",
                    "possible_values": [
                        [
                            "(topk,)",
                            "Tuple"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/losses/balanced_l1_loss.py": {
        "torch": {
            "BalancedL1Loss_30": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.alpha": {
                    "value": "alpha",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.gamma": {
                    "value": "gamma",
                    "possible_values": [
                        [
                            "1.5",
                            "MethodArgument"
                        ],
                        [
                            "1.5",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.beta": {
                    "value": "beta",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.reduction": {
                    "value": "reduction",
                    "possible_values": [
                        [
                            "reduction_override if reduction_override else self.reduction",
                            "IfExp"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.loss_weight": {
                    "value": "loss_weight",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "abs_19": {
                "variable": {
                    "value": "diff",
                    "possible_values": []
                },
                "input": {
                    "value": "pred - target",
                    "possible_values": []
                }
            },
            "where_21": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "condition": {
                    "value": "diff < beta",
                    "possible_values": []
                },
                "x": {
                    "value": "alpha / b * (b * diff + 1) * torch.log(b * diff / beta + 1) - alpha * diff",
                    "possible_values": []
                },
                "y": {
                    "value": "gamma * diff + gamma / b - alpha * beta",
                    "possible_values": []
                }
            },
            "log_23": {
                "input": {
                    "value": "b * diff / beta + 1",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/losses/cross_entropy_loss.py": {
        "torch": {
            "CrossEntropyLoss_65": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.use_sigmoid": {
                    "value": "use_sigmoid",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.use_mask": {
                    "value": "use_mask",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.reduction": {
                    "value": "reduction",
                    "possible_values": [
                        [
                            "reduction_override if reduction_override else self.reduction",
                            "IfExp"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.loss_weight": {
                    "value": "loss_weight",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cross_entropy_11": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "possible_values": []
                },
                "target": {
                    "value": "label",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "possible_values": []
                }
            },
            "nonzero_24": {
                "variable": {
                    "value": "inds",
                    "possible_values": []
                },
                "input": {
                    "value": "labels >= 1",
                    "possible_values": []
                }
            },
            "squeeze_24": {
                "variable": {
                    "value": "inds",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_46": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "possible_values": []
                },
                "target": {
                    "value": "label.float()",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "possible_values": [
                        [
                            "weight.float()",
                            "Call"
                        ],
                        [
                            "weight.float()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "possible_values": []
                }
            },
            "arange_58": {
                "variable": {
                    "value": "inds",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "possible_values": []
                },
                "end": {
                    "value": "num_rois",
                    "possible_values": [
                        [
                            "pred.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "pred.device",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_60": {
                "input": {
                    "value": "pred_slice",
                    "possible_values": [
                        [
                            "pred[inds, label].squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/losses/cross_entropy_loss_classweigths.py": {
        "torch": {
            "CQ_CrossEntropyLoss_74": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.use_sigmoid": {
                    "value": "use_sigmoid",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.use_mask": {
                    "value": "use_mask",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.reduction": {
                    "value": "reduction",
                    "possible_values": [
                        [
                            "reduction_override if reduction_override else self.reduction",
                            "IfExp"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.loss_weight": {
                    "value": "loss_weight",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.class_weights": {
                    "value": "class_weights",
                    "possible_values": [
                        [
                            "torch.Tensor(class_weights).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.label_smoothing": {
                    "value": "label_smoothing",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "nonzero_32": {
                "variable": {
                    "value": "inds",
                    "possible_values": []
                },
                "input": {
                    "value": "labels >= 1",
                    "possible_values": []
                }
            },
            "squeeze_32": {
                "variable": {
                    "value": "inds",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_55": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "possible_values": []
                },
                "target": {
                    "value": "label.float()",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "possible_values": [
                        [
                            "weight.float()",
                            "Call"
                        ],
                        [
                            "weight.float()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "possible_values": []
                }
            },
            "arange_67": {
                "variable": {
                    "value": "inds",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "possible_values": []
                },
                "end": {
                    "value": "num_rois",
                    "possible_values": [
                        [
                            "pred.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "pred.device",
                    "possible_values": []
                }
            },
            "cross_entropy_16": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "possible_values": []
                },
                "target": {
                    "value": "label",
                    "possible_values": [
                        [
                            "label_smoothing(label)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "possible_values": []
                }
            },
            "Tensor_18": {
                "variable": {
                    "value": "class_weights",
                    "possible_values": []
                }
            },
            "cross_entropy_19": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "possible_values": []
                },
                "target": {
                    "value": "label",
                    "possible_values": [
                        [
                            "label_smoothing(label)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "class_weights",
                    "possible_values": [
                        [
                            "torch.Tensor(class_weights).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_69": {
                "input": {
                    "value": "pred_slice",
                    "possible_values": [
                        [
                            "pred[inds, label].squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/losses/focal_loss.py": {
        "torch": {
            "FocalLoss_46": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.use_sigmoid": {
                    "value": "use_sigmoid",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.gamma": {
                    "value": "gamma",
                    "possible_values": [
                        [
                            "2.0",
                            "MethodArgument"
                        ],
                        [
                            "2.0",
                            "MethodArgument"
                        ],
                        [
                            "2.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.alpha": {
                    "value": "alpha",
                    "possible_values": [
                        [
                            "0.25",
                            "MethodArgument"
                        ],
                        [
                            "0.25",
                            "MethodArgument"
                        ],
                        [
                            "0.25",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.reduction": {
                    "value": "reduction",
                    "possible_values": [
                        [
                            "reduction_override if reduction_override else self.reduction",
                            "IfExp"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.loss_weight": {
                    "value": "loss_weight",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_22": {
                "input": {
                    "value": "pred",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "possible_values": [
                        [
                            "target.type_as(pred)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/losses/ghm_loss.py": {
        "torch": {
            "GHMC_20": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.bins": {
                    "value": "bins",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.momentum": {
                    "value": "momentum",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.use_sigmoid": {
                    "value": "use_sigmoid",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.loss_weight": {
                    "value": "loss_weight",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GHMR_98": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.mu": {
                    "value": "mu",
                    "possible_values": [
                        [
                            "self.mu",
                            "Attribute"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.bins": {
                    "value": "bins",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.momentum": {
                    "value": "momentum",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.loss_weight": {
                    "value": "loss_weight",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "nonzero_10": {
                "variable": {
                    "value": "inds",
                    "possible_values": []
                },
                "input": {
                    "value": "labels >= 1",
                    "possible_values": []
                }
            },
            "squeeze_10": {
                "variable": {
                    "value": "inds",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "zeros_like_69": {
                "variable": {
                    "value": "weights",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "possible_values": []
                }
            },
            "abs_72": {
                "variable": {
                    "value": "g",
                    "possible_values": []
                },
                "input": {
                    "value": "pred.sigmoid().detach() - target",
                    "possible_values": []
                }
            },
            "abs_149": {
                "variable": {
                    "value": "g",
                    "possible_values": []
                },
                "input": {
                    "value": "diff / torch.sqrt(mu * mu + diff * diff)",
                    "possible_values": []
                }
            },
            "zeros_like_150": {
                "variable": {
                    "value": "weights",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "possible_values": [
                        [
                            "torch.abs(pred.sigmoid().detach() - target)",
                            "Call"
                        ],
                        [
                            "torch.abs(diff / torch.sqrt(mu * mu + diff * diff)).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_42": {
                "variable": {
                    "value": "acc_sum",
                    "possible_values": []
                },
                "*size": {
                    "value": "bins",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_121": {
                "variable": {
                    "value": "acc_sum",
                    "possible_values": []
                },
                "*size": {
                    "value": "bins",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_38": {
                "start": {
                    "value": "bins + 1",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_91": {
                "input": {
                    "value": "pred",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "possible_values": []
                },
                "weight": {
                    "value": "weights",
                    "possible_values": [
                        [
                            "torch.zeros_like(pred)",
                            "Call"
                        ],
                        [
                            "weights / n",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(g)",
                            "Call"
                        ],
                        [
                            "weights / n",
                            "BinOp"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "possible_values": []
                }
            },
            "arange_116": {
                "start": {
                    "value": "bins + 1",
                    "possible_values": []
                }
            },
            "sqrt_146": {
                "input": {
                    "value": "diff * diff + mu * mu",
                    "possible_values": []
                }
            },
            "sqrt_149": {
                "input": {
                    "value": "mu * mu + diff * diff",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/losses/iou_loss.py": {
        "torch": {
            "IoULoss_118": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.eps": {
                    "value": "eps",
                    "possible_values": [
                        [
                            "1e-06",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-06",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "1e-06",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.reduction": {
                    "value": "reduction",
                    "possible_values": [
                        [
                            "reduction_override if reduction_override else self.reduction",
                            "IfExp"
                        ],
                        [
                            "reduction_override if reduction_override else self.reduction",
                            "IfExp"
                        ],
                        [
                            "reduction_override if reduction_override else self.reduction",
                            "IfExp"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.loss_weight": {
                    "value": "loss_weight",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BoundedIoULoss_150": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.beta": {
                    "value": "beta",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.eps": {
                    "value": "eps",
                    "possible_values": [
                        [
                            "1e-06",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-06",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "1e-06",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.reduction": {
                    "value": "reduction",
                    "possible_values": [
                        [
                            "reduction_override if reduction_override else self.reduction",
                            "IfExp"
                        ],
                        [
                            "reduction_override if reduction_override else self.reduction",
                            "IfExp"
                        ],
                        [
                            "reduction_override if reduction_override else self.reduction",
                            "IfExp"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.loss_weight": {
                    "value": "loss_weight",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GIoULoss_184": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.eps": {
                    "value": "eps",
                    "possible_values": [
                        [
                            "1e-06",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-06",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "1e-06",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.reduction": {
                    "value": "reduction",
                    "possible_values": [
                        [
                            "reduction_override if reduction_override else self.reduction",
                            "IfExp"
                        ],
                        [
                            "reduction_override if reduction_override else self.reduction",
                            "IfExp"
                        ],
                        [
                            "reduction_override if reduction_override else self.reduction",
                            "IfExp"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.loss_weight": {
                    "value": "loss_weight",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_64": {
                "variable": {
                    "value": "loss_comb",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[loss_dx, loss_dy, loss_dw, loss_dh]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "where_67": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "condition": {
                    "value": "loss_comb < beta",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 * loss_comb * loss_comb / beta",
                    "possible_values": []
                },
                "y": {
                    "value": "loss_comb - 0.5 * beta",
                    "possible_values": []
                }
            },
            "max_92": {
                "variable": {
                    "value": "lt",
                    "possible_values": []
                },
                "input": {
                    "value": "pred[:, :2]",
                    "possible_values": []
                }
            },
            "min_93": {
                "variable": {
                    "value": "rb",
                    "possible_values": []
                },
                "input": {
                    "value": "pred[:, 2:]",
                    "possible_values": []
                }
            },
            "min_106": {
                "variable": {
                    "value": "enclose_x1y1",
                    "possible_values": []
                },
                "input": {
                    "value": "pred[:, :2]",
                    "possible_values": []
                }
            },
            "max_107": {
                "variable": {
                    "value": "enclose_x2y2",
                    "possible_values": []
                },
                "input": {
                    "value": "pred[:, 2:]",
                    "possible_values": []
                }
            },
            "no_grad_45": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "max_54": {
                "input": {
                    "value": "(target_w - 2 * dx.abs()) / (target_w + 2 * dx.abs() + eps)",
                    "possible_values": []
                }
            },
            "max_57": {
                "input": {
                    "value": "(target_h - 2 * dy.abs()) / (target_h + 2 * dy.abs() + eps)",
                    "possible_values": []
                }
            },
            "min_60": {
                "input": {
                    "value": "target_w / (pred_w + eps)",
                    "possible_values": []
                }
            },
            "min_62": {
                "input": {
                    "value": "target_h / (pred_h + eps)",
                    "possible_values": []
                }
            },
            "zeros_like_56": {
                "input": {
                    "value": "dx",
                    "possible_values": [
                        [
                            "target_ctrx - pred_ctrx",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_59": {
                "input": {
                    "value": "dy",
                    "possible_values": [
                        [
                            "target_ctry - pred_ctry",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_133": {
                "input": {
                    "value": "weight > 0",
                    "possible_values": []
                }
            },
            "any_166": {
                "input": {
                    "value": "weight > 0",
                    "possible_values": []
                }
            },
            "any_199": {
                "input": {
                    "value": "weight > 0",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/losses/mse_loss.py": {
        "torch": {
            "MSELoss_11": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.reduction": {
                    "value": "reduction",
                    "possible_values": [
                        [
                            "'mean'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.loss_weight": {
                    "value": "loss_weight",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/losses/smooth_l1_loss.py": {
        "torch": {
            "SmoothL1Loss_19": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.beta": {
                    "value": "beta",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.reduction": {
                    "value": "reduction",
                    "possible_values": [
                        [
                            "reduction_override if reduction_override else self.reduction",
                            "IfExp"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.loss_weight": {
                    "value": "loss_weight",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "abs_12": {
                "variable": {
                    "value": "diff",
                    "possible_values": []
                },
                "input": {
                    "value": "pred - target",
                    "possible_values": []
                }
            },
            "where_13": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "condition": {
                    "value": "diff < beta",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 * diff * diff / beta",
                    "possible_values": []
                },
                "y": {
                    "value": "diff - 0.5 * beta",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/losses/utils.py": {
        "torch": {}
    },
    "mmdet/models/mask_heads/fcn_mask_head.py": {
        "torch": {
            "FCNMaskHead_15": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.num_convs": {
                    "value": "num_convs",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.in_channels": {
                    "value": "in_channels",
                    "possible_values": [
                        [
                            "self.in_channels if i == 0 else self.conv_out_channels",
                            "IfExp"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.conv_kernel_size": {
                    "value": "conv_kernel_size",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.conv_out_channels": {
                    "value": "conv_out_channels",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.upsample_method": {
                    "value": "upsample_method",
                    "possible_values": [
                        [
                            "'deconv'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.upsample_ratio": {
                    "value": "upsample_ratio",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.num_classes": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "81",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.class_agnostic": {
                    "value": "class_agnostic",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.conv_cfg": {
                    "value": "conv_cfg",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.norm_cfg": {
                    "value": "norm_cfg",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ModuleList_51": {
                    "variable": {
                        "value": "self.convs",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "Conv2d_82": {
                    "variable": {
                        "value": "self.conv_logits",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "logits_in_channel",
                        "possible_values": [
                            [
                                "self.conv_out_channels if self.upsample_method == 'deconv' else upsample_in_channels",
                                "IfExp"
                            ]
                        ]
                    },
                    "out_channels": {
                        "value": "out_channels",
                        "possible_values": [
                            [
                                "1 if self.class_agnostic else self.num_classes",
                                "IfExp"
                            ]
                        ]
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "ReLU_83": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                }
            },
            "ConvTranspose2d_69": {
                "variable": {
                    "value": "self.upsample",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "upsample_in_channels",
                    "possible_values": [
                        [
                            "self.conv_out_channels if self.num_convs > 0 else in_channels",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.conv_out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.upsample_ratio",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.upsample_ratio",
                    "possible_values": []
                }
            },
            "Upsample_75": {
                "variable": {
                    "value": "self.upsample",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "self.upsample_ratio",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.upsample_method",
                    "possible_values": []
                }
            },
            "zeros_like_119": {
                "input": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "det_labels.cpu().numpy() + 1",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/mask_heads/fused_semantic_head.py": {
        "torch": {
            "FusedSemanticHead_11": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.num_ins": {
                    "value": "num_ins",
                    "possible_values": []
                },
                "self.fusion_level": {
                    "value": "fusion_level",
                    "possible_values": []
                },
                "self.num_convs": {
                    "value": "num_convs",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.in_channels": {
                    "value": "in_channels",
                    "possible_values": [
                        [
                            "self.in_channels if i == 0 else conv_out_channels",
                            "IfExp"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.conv_out_channels": {
                    "value": "conv_out_channels",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.num_classes": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "183",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.ignore_label": {
                    "value": "ignore_label",
                    "possible_values": [
                        [
                            "255",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.loss_weight": {
                    "value": "loss_weight",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.conv_cfg": {
                    "value": "conv_cfg",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.norm_cfg": {
                    "value": "norm_cfg",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ModuleList_49": {
                    "variable": {
                        "value": "self.lateral_convs",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "ModuleList_60": {
                    "variable": {
                        "value": "self.convs",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "Conv2d_77": {
                    "variable": {
                        "value": "self.conv_logits",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "conv_out_channels",
                        "possible_values": [
                            [
                                "256",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "out_channels": {
                        "value": "self.num_classes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "CrossEntropyLoss_79": {
                    "variable": {
                        "value": "self.criterion",
                        "possible_values": []
                    },
                    "ignore_index": {
                        "value": "ignore_label",
                        "possible_values": [
                            [
                                "255",
                                "MethodArgument"
                            ]
                        ]
                    }
                }
            },
            "interpolate_90": {
                "variable": {
                    "value": "feat",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "possible_values": [
                        [
                            "F.interpolate(feat, size=fused_size, mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "fused_size",
                    "possible_values": [
                        [
                            "tuple(x.shape[-2:])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/mask_heads/grid_head.py": {
        "torch": {
            "GridHead_13": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.grid_points": {
                    "value": "grid_points",
                    "possible_values": [
                        [
                            "9",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.num_convs": {
                    "value": "num_convs",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.roi_feat_size": {
                    "value": "roi_feat_size",
                    "possible_values": [
                        [
                            "14",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.in_channels": {
                    "value": "in_channels",
                    "possible_values": [
                        [
                            "self.in_channels if i == 0 else self.conv_out_channels",
                            "IfExp"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.conv_kernel_size": {
                    "value": "conv_kernel_size",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.point_feat_channels": {
                    "value": "point_feat_channels",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.class_agnostic": {
                    "value": "class_agnostic",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.conv_cfg": {
                    "value": "conv_cfg",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.norm_cfg": {
                    "value": "norm_cfg",
                    "possible_values": []
                },
                "Sequential_72": {
                    "variable": {
                        "value": "self.convs",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*self.convs",
                        "possible_values": []
                    }
                },
                "ConvTranspose2d_74": {
                    "variable": {
                        "value": "self.deconv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "self.conv_out_channels",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "self.conv_out_channels",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "deconv_kernel_size",
                        "possible_values": [
                            [
                                "4",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "(deconv_kernel_size - 2) // 2",
                        "possible_values": []
                    },
                    "groups": {
                        "value": "grid_points",
                        "possible_values": [
                            [
                                "9",
                                "MethodArgument"
                            ]
                        ]
                    }
                },
                "GroupNorm_81": {
                    "variable": {
                        "value": "self.norm1",
                        "possible_values": []
                    },
                    "num_groups": {
                        "value": "grid_points",
                        "possible_values": [
                            [
                                "9",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "num_channels": {
                        "value": "self.conv_out_channels",
                        "possible_values": []
                    }
                },
                "ConvTranspose2d_82": {
                    "variable": {
                        "value": "self.deconv2",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "self.conv_out_channels",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "grid_points",
                        "possible_values": [
                            [
                                "9",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "kernel_size": {
                        "value": "deconv_kernel_size",
                        "possible_values": [
                            [
                                "4",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "(deconv_kernel_size - 2) // 2",
                        "possible_values": []
                    },
                    "groups": {
                        "value": "grid_points",
                        "possible_values": [
                            [
                                "9",
                                "MethodArgument"
                            ]
                        ]
                    }
                },
                "ModuleList_108": {
                    "variable": {
                        "value": "self.forder_trans",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "ModuleList_109": {
                    "variable": {
                        "value": "self.sorder_trans",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "cat_175": {
                "variable": {
                    "value": "x2",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_so",
                    "possible_values": [
                        [
                            "[None for _ in range(self.grid_points)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "relu_177": {
                "variable": {
                    "value": "x2",
                    "possible_values": []
                },
                "input": {
                    "value": "self.norm1(x2)",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_224": {
                "variable": {
                    "value": "pos_bboxes",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res.pos_bboxes for res in sampling_results]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_226": {
                "variable": {
                    "value": "pos_gt_bboxes",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res.pos_gt_bboxes for res in sampling_results]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "stack_235": {
                "variable": {
                    "value": "pos_bboxes",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, y1, x2, y2]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "zeros_242": {
                "variable": {
                    "value": "targets",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_rois, self.grid_points, map_size, map_size)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "sub_targets",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sub_targets",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(sub_targets, dim=1)",
                            "Call"
                        ],
                        [
                            "sub_targets.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_356": {
                "variable": {
                    "value": "bbox_res",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bboxes_x1, bboxes_y1, bboxes_x2, bboxes_y2, cls_scores]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ModuleList_111": {
                "variable": {
                    "value": "fo_trans",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ModuleList_112": {
                "variable": {
                    "value": "so_trans",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "relu_184": {
                "variable": {
                    "value": "x1",
                    "possible_values": []
                },
                "input": {
                    "value": "self.norm1(x1)",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "*args": {
                    "value": "nn.Conv2d(self.point_feat_channels, self.point_feat_channels, 5, stride=1, padding=2, groups=self.point_feat_channels)",
                    "possible_values": []
                }
            },
            "Sequential_128": {
                "*args": {
                    "value": "nn.Conv2d(self.point_feat_channels, self.point_feat_channels, 5, 1, 2, groups=self.point_feat_channels)",
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "in_channels": {
                    "value": "self.point_feat_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.point_feat_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.point_feat_channels",
                    "possible_values": []
                }
            },
            "Conv2d_125": {
                "in_channels": {
                    "value": "self.point_feat_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.point_feat_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_129": {
                "in_channels": {
                    "value": "self.point_feat_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.point_feat_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.point_feat_channels",
                    "possible_values": []
                }
            },
            "Conv2d_136": {
                "in_channels": {
                    "value": "self.point_feat_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.point_feat_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/mask_heads/maskiou_head.py": {
        "torch": {
            "MaskIoUHead_13": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.in_channels": {
                    "value": "in_channels",
                    "possible_values": [
                        [
                            "self.in_channels + 1",
                            "BinOp"
                        ],
                        [
                            "self.conv_out_channels",
                            "Attribute"
                        ],
                        [
                            "self.conv_out_channels * pooled_area if i == 0 else self.fc_out_channels",
                            "IfExp"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.conv_out_channels": {
                    "value": "conv_out_channels",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.fc_out_channels": {
                    "value": "fc_out_channels",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.num_classes": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "81",
                            "MethodArgument"
                        ]
                    ]
                },
                "ModuleList_35": {
                    "variable": {
                        "value": "self.convs",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "ModuleList_53": {
                    "variable": {
                        "value": "self.fcs",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "Linear_60": {
                    "variable": {
                        "value": "self.fc_mask_iou",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "self.fc_out_channels",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "self.num_classes",
                        "possible_values": []
                    }
                },
                "ReLU_61": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "MaxPool2d_62": {
                    "variable": {
                        "value": "self.max_pool",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "2",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    }
                }
            },
            "cat_81": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mask_feat, mask_pred_pooled)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "area_ratios",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(area_ratios)",
                    "possible_values": []
                }
            },
            "from_numpy_171": {
                "variable": {
                    "value": "area_ratios",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(area_ratios)",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": [
                        [
                            "self.in_channels + 1",
                            "BinOp"
                        ],
                        [
                            "self.conv_out_channels",
                            "Attribute"
                        ],
                        [
                            "self.conv_out_channels * pooled_area if i == 0 else self.fc_out_channels",
                            "IfExp"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.conv_out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "2 if i == num_convs - 1 else 1",
                            "IfExp"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "in_features": {
                    "value": "in_channels",
                    "possible_values": [
                        [
                            "self.in_channels + 1",
                            "BinOp"
                        ],
                        [
                            "self.conv_out_channels",
                            "Attribute"
                        ],
                        [
                            "self.conv_out_channels * pooled_area if i == 0 else self.fc_out_channels",
                            "IfExp"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.fc_out_channels",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/necks/bfp.py": {
        "torch": {
            "BFP_11": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "self.num_levels": {
                    "value": "num_levels",
                    "possible_values": []
                },
                "self.conv_cfg": {
                    "value": "conv_cfg",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.norm_cfg": {
                    "value": "norm_cfg",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.refine_level": {
                    "value": "refine_level",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.refine_type": {
                    "value": "refine_type",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "adaptive_max_pool2d_79": {
                "variable": {
                    "value": "gathered",
                    "possible_values": []
                },
                "*args": {
                    "value": "inputs[i]",
                    "possible_values": []
                },
                "output_size": {
                    "value": "gather_size",
                    "possible_values": [
                        [
                            "inputs[self.refine_level].size()[2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "interpolate_82": {
                "variable": {
                    "value": "gathered",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs[i]",
                    "possible_values": []
                },
                "size": {
                    "value": "gather_size",
                    "possible_values": [
                        [
                            "inputs[self.refine_level].size()[2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "interpolate_97": {
                "variable": {
                    "value": "residual",
                    "possible_values": []
                },
                "input": {
                    "value": "bsf",
                    "possible_values": [
                        [
                            "sum(feats) / len(feats)",
                            "BinOp"
                        ],
                        [
                            "self.refine(bsf)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "out_size",
                    "possible_values": [
                        [
                            "inputs[i].size()[2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "adaptive_max_pool2d_99": {
                "variable": {
                    "value": "residual",
                    "possible_values": []
                },
                "*args": {
                    "value": "bsf",
                    "possible_values": []
                },
                "output_size": {
                    "value": "out_size",
                    "possible_values": [
                        [
                            "inputs[i].size()[2:]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/necks/fpn.py": {
        "torch": {
            "FPN_11": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.in_channels": {
                    "value": "in_channels",
                    "possible_values": [
                        [
                            "self.in_channels[self.backbone_end_level - 1]",
                            "Subscript"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ]
                    ]
                },
                "self.out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "self.num_outs": {
                    "value": "num_outs",
                    "possible_values": []
                },
                "self.activation": {
                    "value": "activation",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.relu_before_extra_convs": {
                    "value": "relu_before_extra_convs",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.no_norm_on_lateral": {
                    "value": "no_norm_on_lateral",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.start_level": {
                    "value": "start_level",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.end_level": {
                    "value": "end_level",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.add_extra_convs": {
                    "value": "add_extra_convs",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.extra_convs_on_inputs": {
                    "value": "extra_convs_on_inputs",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "ModuleList_50": {
                    "variable": {
                        "value": "self.lateral_convs",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "ModuleList_51": {
                    "variable": {
                        "value": "self.fpn_convs",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "interpolate_114": {
                "input": {
                    "value": "laterals[i]",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "max_pool2d_128": {
                "input": {
                    "value": "outs[-1]",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "relu_138": {
                "input": {
                    "value": "outs[-1]",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/necks/hrfpn.py": {
        "torch": {
            "HRFPN_12": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "self.out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "self.num_outs": {
                    "value": "num_outs",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.with_cp": {
                    "value": "with_cp",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.conv_cfg": {
                    "value": "conv_cfg",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.norm_cfg": {
                    "value": "norm_cfg",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ModuleList_56": {
                    "variable": {
                        "value": "self.fpn_convs",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "cat_84": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "possible_values": [
                        [
                            "[inputs[0]]",
                            "List"
                        ],
                        [
                            "[out]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "interpolate_83": {
                "input": {
                    "value": "inputs[i]",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2 ** i",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/necks/nas_fpn.py": {
        "torch": {
            "MergingCell_9": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.with_conv": {
                    "value": "with_conv",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "NASFPN_68": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "self.out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "self.num_outs": {
                    "value": "num_outs",
                    "possible_values": []
                },
                "self.stack_times": {
                    "value": "stack_times",
                    "possible_values": []
                },
                "self.norm_cfg": {
                    "value": "norm_cfg",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.start_level": {
                    "value": "start_level",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.end_level": {
                    "value": "end_level",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.add_extra_convs": {
                    "value": "add_extra_convs",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "ModuleList_106": {
                    "variable": {
                        "value": "self.lateral_convs",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "ModuleList_118": {
                    "variable": {
                        "value": "self.extra_downsamples",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "ModuleList_130": {
                    "variable": {
                        "value": "self.fpn_stages",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "AdaptiveAvgPool2d_60": {
                "variable": {
                    "value": "self.global_pool",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "possible_values": []
                }
            },
            "ModuleDict_132": {
                "variable": {
                    "value": "stage",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "max_pool2d_34": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "F.max_pool2d(x, kernel_size=kernel_size, stride=kernel_size)",
                            "Call"
                        ],
                        [
                            "self._binary_op(x1, x2)",
                            "Call"
                        ],
                        [
                            "self.conv_out(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "x.shape[-1] // size[-1]",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "x.shape[-1] // size[-1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_30": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "F.max_pool2d(x, kernel_size=kernel_size, stride=kernel_size)",
                            "Call"
                        ],
                        [
                            "self._binary_op(x1, x2)",
                            "Call"
                        ],
                        [
                            "self.conv_out(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "*args": {
                    "value": "extra_conv",
                    "possible_values": []
                }
            },
            "MaxPool2d_127": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/plugins/generalized_attention.py": {
        "torch": {
            "GeneralizedAttention_10": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.position_magnitude": {
                    "value": "position_magnitude",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.num_heads": {
                    "value": "num_heads",
                    "possible_values": [
                        [
                            "self.num_heads",
                            "Attribute"
                        ],
                        [
                            "9",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.channel_in": {
                    "value": "in_dim",
                    "possible_values": []
                },
                "self.spatial_range": {
                    "value": "spatial_range",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.kv_stride": {
                    "value": "kv_stride",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.q_stride": {
                    "value": "q_stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "Conv2d_77": {
                    "variable": {
                        "value": "self.value_conv",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "in_dim",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "self.v_dim * num_heads",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Conv2d_103": {
                    "variable": {
                        "value": "self.proj_conv",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "self.v_dim * num_heads",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "in_dim",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "Parameter_109": {
                    "variable": {
                        "value": "self.gamma",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.zeros(1)",
                        "possible_values": []
                    }
                }
            },
            "linspace_162": {
                "variable": {
                    "value": "h_idxs",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "possible_values": []
                },
                "end": {
                    "value": "h - 1",
                    "possible_values": []
                },
                "steps": {
                    "value": "h",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "linspace_165": {
                "variable": {
                    "value": "w_idxs",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "possible_values": []
                },
                "end": {
                    "value": "w - 1",
                    "possible_values": []
                },
                "steps": {
                    "value": "w",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "linspace_168": {
                "variable": {
                    "value": "h_kv_idxs",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "possible_values": []
                },
                "end": {
                    "value": "h_kv - 1",
                    "possible_values": []
                },
                "steps": {
                    "value": "h_kv",
                    "possible_values": []
                }
            },
            "linspace_171": {
                "variable": {
                    "value": "w_kv_idxs",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "possible_values": []
                },
                "end": {
                    "value": "w_kv - 1",
                    "possible_values": []
                },
                "steps": {
                    "value": "w_kv",
                    "possible_values": []
                }
            },
            "arange_182": {
                "variable": {
                    "value": "feat_range",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "possible_values": []
                },
                "end": {
                    "value": "feat_dim / 4",
                    "possible_values": []
                }
            },
            "Tensor_184": {
                "variable": {
                    "value": "dim_mat",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "embedding_x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "((w_diff / dim_mat).sin(), (w_diff / dim_mat).cos())",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "cat_191": {
                "variable": {
                    "value": "embedding_y",
                    "possible_values": []
                },
                "tensors": {
                    "value": "((h_diff / dim_mat).sin(), (h_diff / dim_mat).cos())",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "softmax_358": {
                "variable": {
                    "value": "attention",
                    "possible_values": []
                },
                "input": {
                    "value": "energy",
                    "possible_values": [
                        [
                            "torch.matmul(appr_bias, proj_key).view(n, num_heads, 1, h_kv * w_kv)",
                            "Call"
                        ],
                        [
                            "torch.zeros(n, num_heads, h, w, h_kv, w_kv, dtype=x_input.dtype, device=x_input.device)",
                            "Call"
                        ],
                        [
                            "energy.masked_fill_(cur_local_constraint_map, float('-inf'))",
                            "Call"
                        ],
                        [
                            "torch.matmul(proj_query + appr_bias, proj_key).view(n, num_heads, h, w, h_kv, w_kv)",
                            "Call"
                        ],
                        [
                            "energy.view(n, num_heads, h * w, h_kv * w_kv)",
                            "Call"
                        ],
                        [
                            "torch.matmul(proj_query, proj_key).view(n, num_heads, h, w, h_kv, w_kv)",
                            "Call"
                        ],
                        [
                            "energy + (energy_x + energy_y)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "matmul_365": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "possible_values": [
                        [
                            "F.softmax(energy, 3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "proj_value_reshape",
                    "possible_values": [
                        [
                            "proj_value.view((n, num_heads, self.v_dim, h_kv * w_kv)).permute(0, 1, 3, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_365": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dims": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.query_conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_c",
                    "possible_values": [
                        [
                            "self.qk_embed_dim * num_heads",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.key_conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_c",
                    "possible_values": [
                        [
                            "self.qk_embed_dim * num_heads",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.appr_geom_fc_x",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.position_embedding_dim // 2",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_c",
                    "possible_values": [
                        [
                            "self.qk_embed_dim * num_heads",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "variable": {
                    "value": "self.appr_geom_fc_y",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.position_embedding_dim // 2",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_c",
                    "possible_values": [
                        [
                            "self.qk_embed_dim * num_heads",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Parameter_96": {
                "variable": {
                    "value": "self.appr_bias",
                    "possible_values": []
                },
                "data": {
                    "value": "appr_bias_value",
                    "possible_values": [
                        [
                            "-2 * stdv * torch.rand(out_c) + stdv",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_101": {
                "variable": {
                    "value": "self.geom_bias",
                    "possible_values": []
                },
                "data": {
                    "value": "geom_bias_value",
                    "possible_values": [
                        [
                            "-2 * stdv * torch.rand(out_c) + stdv",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_134": {
                "variable": {
                    "value": "self.local_constraint_map",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(local_constraint_map).byte()",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "AvgPool2d_139": {
                "variable": {
                    "value": "self.q_downsample",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.q_stride",
                    "possible_values": []
                }
            },
            "AvgPool2d_145": {
                "variable": {
                    "value": "self.kv_downsample",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.kv_stride",
                    "possible_values": []
                }
            },
            "matmul_246": {
                "variable": {
                    "value": "energy",
                    "possible_values": []
                },
                "input": {
                    "value": "appr_bias",
                    "possible_values": [
                        [
                            "self.appr_bias.view(1, num_heads, 1, self.qk_embed_dim).repeat(n, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.appr_bias.view(1, num_heads, 1, self.qk_embed_dim)",
                            "Call"
                        ],
                        [
                            "self.appr_bias.view(1, num_heads, 1, self.qk_embed_dim).repeat(n, 1, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "proj_key",
                    "possible_values": [
                        [
                            "self.key_conv(x_kv).view((n, num_heads, self.qk_embed_dim, h_kv * w_kv))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_109": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_254": {
                "variable": {
                    "value": "energy",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "possible_values": []
                },
                "out": {
                    "value": "num_heads",
                    "possible_values": [
                        [
                            "self.num_heads",
                            "Attribute"
                        ],
                        [
                            "9",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x_input.dtype",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "device": {
                    "value": "x_input.device",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "w_kv",
                    "possible_values": []
                }
            },
            "from_numpy_135": {
                "ndarray": {
                    "value": "local_constraint_map",
                    "possible_values": [
                        [
                            "np.ones((max_len, max_len, max_len_kv, max_len_kv), dtype=np.int)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_272": {
                "variable": {
                    "value": "energy",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query + appr_bias",
                    "possible_values": []
                },
                "other": {
                    "value": "proj_key",
                    "possible_values": [
                        [
                            "self.key_conv(x_kv).view((n, num_heads, self.qk_embed_dim, h_kv * w_kv))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_295": {
                "variable": {
                    "value": "energy_x",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query_reshape.permute(0, 1, 3, 2, 4)",
                    "possible_values": []
                },
                "other": {
                    "value": "position_feat_x.permute(0, 1, 2, 4, 3)",
                    "possible_values": []
                }
            },
            "matmul_301": {
                "variable": {
                    "value": "energy_y",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query_reshape",
                    "possible_values": [
                        [
                            "(proj_query + geom_bias).view(n, num_heads, h, w, self.qk_embed_dim)",
                            "Call"
                        ],
                        [
                            "proj_query.view(n, num_heads, h, w, self.qk_embed_dim)",
                            "Call"
                        ],
                        [
                            "proj_query_reshape.permute(0, 1, 3, 2, 4)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "position_feat_y.permute(0, 1, 2, 4, 3)",
                    "possible_values": []
                }
            },
            "rand_95": {
                "*size": {
                    "value": "out_c",
                    "possible_values": [
                        [
                            "self.qk_embed_dim * num_heads",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_100": {
                "*size": {
                    "value": "out_c",
                    "possible_values": [
                        [
                            "self.qk_embed_dim * num_heads",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_276": {
                "variable": {
                    "value": "energy",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query",
                    "possible_values": [
                        [
                            "self.query_conv(x_q).view((n, num_heads, self.qk_embed_dim, h * w))",
                            "Call"
                        ],
                        [
                            "proj_query.permute(0, 1, 3, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "proj_key",
                    "possible_values": [
                        [
                            "self.key_conv(x_kv).view((n, num_heads, self.qk_embed_dim, h_kv * w_kv))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_318": {
                "variable": {
                    "value": "energy_x",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query_reshape",
                    "possible_values": [
                        [
                            "(proj_query + geom_bias).view(n, num_heads, h, w, self.qk_embed_dim)",
                            "Call"
                        ],
                        [
                            "proj_query.view(n, num_heads, h, w, self.qk_embed_dim)",
                            "Call"
                        ],
                        [
                            "proj_query_reshape.permute(0, 1, 3, 2, 4)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "position_feat_x_reshape",
                    "possible_values": [
                        [
                            "position_feat_x.permute(0, 1, 2, 4, 3)",
                            "Call"
                        ],
                        [
                            "position_feat_x.view(n, num_heads, w * w_kv, self.qk_embed_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_322": {
                "variable": {
                    "value": "energy_y",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query_reshape",
                    "possible_values": [
                        [
                            "(proj_query + geom_bias).view(n, num_heads, h, w, self.qk_embed_dim)",
                            "Call"
                        ],
                        [
                            "proj_query.view(n, num_heads, h, w, self.qk_embed_dim)",
                            "Call"
                        ],
                        [
                            "proj_query_reshape.permute(0, 1, 3, 2, 4)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "position_feat_y_reshape",
                    "possible_values": [
                        [
                            "position_feat_y.permute(0, 1, 2, 4, 3)",
                            "Call"
                        ],
                        [
                            "position_feat_y.view(n, num_heads, h * h_kv, self.qk_embed_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_339": {
                "variable": {
                    "value": "energy_x",
                    "possible_values": []
                },
                "input": {
                    "value": "position_feat_x_reshape",
                    "possible_values": [
                        [
                            "position_feat_x.permute(0, 1, 2, 4, 3)",
                            "Call"
                        ],
                        [
                            "position_feat_x.view(n, num_heads, w * w_kv, self.qk_embed_dim)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "geom_bias",
                    "possible_values": [
                        [
                            "self.geom_bias.view(1, num_heads, 1, self.qk_embed_dim)",
                            "Call"
                        ],
                        [
                            "self.geom_bias.view(1, num_heads, self.qk_embed_dim, 1).repeat(n, 1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_342": {
                "variable": {
                    "value": "energy_y",
                    "possible_values": []
                },
                "input": {
                    "value": "position_feat_y_reshape",
                    "possible_values": [
                        [
                            "position_feat_y.permute(0, 1, 2, 4, 3)",
                            "Call"
                        ],
                        [
                            "position_feat_y.view(n, num_heads, h * h_kv, self.qk_embed_dim)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "geom_bias",
                    "possible_values": [
                        [
                            "self.geom_bias.view(1, num_heads, 1, self.qk_embed_dim)",
                            "Call"
                        ],
                        [
                            "self.geom_bias.view(1, num_heads, self.qk_embed_dim, 1).repeat(n, 1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_284": {
                "input": {
                    "value": "appr_bias",
                    "possible_values": [
                        [
                            "self.appr_bias.view(1, num_heads, 1, self.qk_embed_dim).repeat(n, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.appr_bias.view(1, num_heads, 1, self.qk_embed_dim)",
                            "Call"
                        ],
                        [
                            "self.appr_bias.view(1, num_heads, 1, self.qk_embed_dim).repeat(n, 1, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "proj_key",
                    "possible_values": [
                        [
                            "self.key_conv(x_kv).view((n, num_heads, self.qk_embed_dim, h_kv * w_kv))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/plugins/non_local.py": {
        "torch": {
            "NonLocal2D_8": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "self.reduction": {
                    "value": "reduction",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.use_scale": {
                    "value": "use_scale",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.mode": {
                    "value": "mode",
                    "possible_values": [
                        [
                            "'embedded_gaussian'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_76": {
                "variable": {
                    "value": "pairwise_weight",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_x",
                    "possible_values": [
                        [
                            "self.theta(x).view(n, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "theta_x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "phi_x",
                    "possible_values": [
                        [
                            "self.phi(x).view(n, self.inter_channels, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_85": {
                "variable": {
                    "value": "pairwise_weight",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_x",
                    "possible_values": [
                        [
                            "self.theta(x).view(n, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "theta_x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "phi_x",
                    "possible_values": [
                        [
                            "self.phi(x).view(n, self.inter_channels, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_108": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "input": {
                    "value": "pairwise_weight",
                    "possible_values": [
                        [
                            "torch.matmul(theta_x, phi_x)",
                            "Call"
                        ],
                        [
                            "pairwise_weight / pairwise_weight.shape[-1]",
                            "BinOp"
                        ],
                        [
                            "pairwise_weight.softmax(dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(theta_x, phi_x)",
                            "Call"
                        ],
                        [
                            "pairwise_func(theta_x, phi_x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "g_x",
                    "possible_values": [
                        [
                            "self.g(x).view(n, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "g_x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/roi_extractors/single_level.py": {
        "torch": {
            "SingleRoIExtractor_12": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "self.featmap_strides": {
                    "value": "featmap_strides",
                    "possible_values": []
                },
                "self.finest_scale": {
                    "value": "finest_scale",
                    "possible_values": [
                        [
                            "56",
                            "MethodArgument"
                        ],
                        [
                            "56",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.add_global_context": {
                    "value": "add_global_context",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "AdaptiveAvgPool2d_38": {
                    "variable": {
                        "value": "self.avg_pool",
                        "possible_values": []
                    },
                    "output_size": {
                        "value": "7",
                        "possible_values": []
                    }
                }
            },
            "CQ_SingleRoIExtractor_122": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "self.featmap_strides": {
                    "value": "featmap_strides",
                    "possible_values": []
                },
                "self.finest_scale": {
                    "value": "finest_scale",
                    "possible_values": [
                        [
                            "56",
                            "MethodArgument"
                        ],
                        [
                            "56",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.add_global_context": {
                    "value": "add_global_context",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "AdaptiveAvgPool2d_149": {
                    "variable": {
                        "value": "self.pool",
                        "possible_values": []
                    },
                    "output_size": {
                        "value": "7",
                        "possible_values": []
                    }
                },
                "self.local_context_scale": {
                    "value": "local_context_scale",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_53": {
                "variable": {
                    "value": "roi_layers",
                    "possible_values": []
                },
                "modules": {
                    "value": "[layer_cls(spatial_scale=1 / s, **cfg) for s in featmap_strides]",
                    "possible_values": []
                }
            },
            "sqrt_72": {
                "variable": {
                    "value": "scale",
                    "possible_values": []
                },
                "input": {
                    "value": "(rois[:, 3] - rois[:, 1] + 1) * (rois[:, 4] - rois[:, 2] + 1)",
                    "possible_values": []
                }
            },
            "floor_74": {
                "variable": {
                    "value": "target_lvls",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log2(scale / self.finest_scale + 1e-06)",
                    "possible_values": []
                }
            },
            "stack_89": {
                "variable": {
                    "value": "new_rois",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rois[:, 0], x1, y1, x2, y2)",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "ModuleList_167": {
                "variable": {
                    "value": "roi_layers",
                    "possible_values": []
                },
                "modules": {
                    "value": "[layer_cls(spatial_scale=1 / s, **cfg) for s in featmap_strides]",
                    "possible_values": []
                }
            },
            "sqrt_186": {
                "variable": {
                    "value": "scale",
                    "possible_values": []
                },
                "input": {
                    "value": "(rois[:, 3] - rois[:, 1] + 1) * (rois[:, 4] - rois[:, 2] + 1)",
                    "possible_values": []
                }
            },
            "floor_188": {
                "variable": {
                    "value": "target_lvls",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log2(scale / self.finest_scale + 1e-06)",
                    "possible_values": []
                }
            },
            "stack_203": {
                "variable": {
                    "value": "new_rois",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rois[:, 0], x1, y1, x2, y2)",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "stack_217": {
                "variable": {
                    "value": "local_rois",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rois[:, 0], x1, y1, x2, y2)",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "log2_74": {
                "input": {
                    "value": "scale / self.finest_scale + 1e-06",
                    "possible_values": []
                }
            },
            "log2_188": {
                "input": {
                    "value": "scale / self.finest_scale + 1e-06",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/shared_heads/res_layer.py": {
        "torch": {
            "ResLayer_12": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.norm_eval": {
                    "value": "norm_eval",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.norm_cfg": {
                    "value": "norm_cfg",
                    "possible_values": []
                },
                "self.stage": {
                    "value": "stage",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/utils/conv_module.py": {
        "torch": {
            "ConvModule_47": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.conv_cfg": {
                    "value": "conv_cfg",
                    "possible_values": [
                        [
                            "{'Conv': nn.Conv2d, 'ConvWS': ConvWS2d, 'DCN': DeformConvPack, 'DCNv2': ModulatedDeformConvPack}",
                            "Dict"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.norm_cfg": {
                    "value": "norm_cfg",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.activation": {
                    "value": "activation",
                    "possible_values": [
                        [
                            "'relu'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.inplace": {
                    "value": "inplace",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.order": {
                    "value": "order",
                    "possible_values": [
                        [
                            "('conv'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.with_bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "False if self.with_norm else True",
                            "IfExp"
                        ],
                        [
                            "'auto'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_144": {
                "variable": {
                    "value": "self.activate",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/utils/conv_ws.py": {
        "torch": {
            "ConvWS2d_21": {
                "base_class_0": {
                    "value": "torch.nn.Conv2d",
                    "possible_values": []
                },
                "self.eps": {
                    "value": "eps",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_18": {
                "input": {
                    "value": "input",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "possible_values": [
                        [
                            "(weight - mean) / (std + eps)",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/utils/norm.py": {
        "torch": {}
    },
    "mmdet/models/utils/scale.py": {
        "torch": {
            "Scale_5": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Parameter_12": {
                    "variable": {
                        "value": "self.scale",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.tensor(scale, dtype=torch.float)",
                        "possible_values": []
                    }
                }
            },
            "tensor_12": {
                "data": {
                    "value": "scale",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/utils/weight_init.py": {
        "torch": {}
    },
    "mmdet/ops/context_block.py": {
        "torch": {
            "ContextBlock_13": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.inplanes": {
                    "value": "inplanes",
                    "possible_values": []
                },
                "self.ratio": {
                    "value": "ratio",
                    "possible_values": []
                },
                "self.pooling_type": {
                    "value": "pooling_type",
                    "possible_values": [
                        [
                            "'att'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.fusion_types": {
                    "value": "fusion_types",
                    "possible_values": [
                        [
                            "('channel_add'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.conv_mask",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Softmax_33": {
                "variable": {
                    "value": "self.softmax",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_35": {
                "variable": {
                    "value": "self.avg_pool",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.channel_add_conv",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, self.planes, kernel_size=1)",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.channel_mul_conv",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, self.planes, kernel_size=1)",
                    "possible_values": []
                }
            },
            "matmul_81": {
                "variable": {
                    "value": "context",
                    "possible_values": []
                },
                "input": {
                    "value": "input_x",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "input_x.view(batch, channel, height * width)",
                            "Call"
                        ],
                        [
                            "input_x.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "context_mask",
                    "possible_values": [
                        [
                            "self.conv_mask(x)",
                            "Call"
                        ],
                        [
                            "context_mask.view(batch, 1, height * width)",
                            "Call"
                        ],
                        [
                            "self.softmax(context_mask)",
                            "Call"
                        ],
                        [
                            "context_mask.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_97": {
                "variable": {
                    "value": "channel_mul_term",
                    "possible_values": []
                },
                "input": {
                    "value": "self.channel_mul_conv(context)",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "self.inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "LayerNorm_39": {
                "normalized_shape": {
                    "value": "[self.planes, 1, 1]",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "self.planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "self.inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "LayerNorm_47": {
                "normalized_shape": {
                    "value": "[self.planes, 1, 1]",
                    "possible_values": []
                }
            },
            "ReLU_48": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "self.planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/ops/dcn/deform_conv.py": {
        "torch": {
            "DeformConvFunction_13": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                }
            },
            "ModulatedDeformConvFunction_114": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                }
            },
            "DeformConv_191": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "self.out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "self.groups": {
                    "value": "groups",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.deformable_groups": {
                    "value": "deformable_groups",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "Parameter_225": {
                    "variable": {
                        "value": "self.weight",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.Tensor(out_channels, in_channels // self.groups, *self.kernel_size)",
                        "possible_values": []
                    }
                }
            },
            "ModulatedDeformConv_311": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "self.out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.groups": {
                    "value": "groups",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.deformable_groups": {
                    "value": "deformable_groups",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.with_bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "input.new_empty(1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "Parameter_337": {
                    "variable": {
                        "value": "self.weight",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.Tensor(out_channels, in_channels // groups, *self.kernel_size)",
                        "possible_values": []
                    }
                }
            },
            "zeros_like_157": {
                "variable": {
                    "value": "grad_input",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "possible_values": []
                }
            },
            "zeros_like_158": {
                "variable": {
                    "value": "grad_offset",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "possible_values": [
                        [
                            "self.conv_offset(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((o1, o2), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_159": {
                "variable": {
                    "value": "grad_mask",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "torch.sigmoid(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_160": {
                "variable": {
                    "value": "grad_weight",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "possible_values": []
                }
            },
            "zeros_like_161": {
                "variable": {
                    "value": "grad_bias",
                    "possible_values": []
                },
                "input": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "input.new_empty(1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_264": {
                "variable": {
                    "value": "self.conv_offset",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.deformable_groups * 2 * self.kernel_size[0] * self.kernel_size[1]",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "possible_values": []
                },
                "stride": {
                    "value": "_pair(self.stride)",
                    "possible_values": []
                },
                "padding": {
                    "value": "_pair(self.padding)",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_382": {
                "variable": {
                    "value": "self.conv_offset",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.deformable_groups * 3 * self.kernel_size[0] * self.kernel_size[1]",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "possible_values": []
                },
                "stride": {
                    "value": "_pair(self.stride)",
                    "possible_values": []
                },
                "padding": {
                    "value": "_pair(self.padding)",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "chunk_398": {
                "variable": {
                    "value": "(o1, o2, mask)",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "self.conv_offset(x)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_399": {
                "variable": {
                    "value": "offset",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(o1, o2)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sigmoid_400": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "torch.sigmoid(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_341": {
                "variable": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "possible_values": []
                }
            },
            "zeros_like_74": {
                "variable": {
                    "value": "grad_input",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "possible_values": []
                }
            },
            "zeros_like_75": {
                "variable": {
                    "value": "grad_offset",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "possible_values": [
                        [
                            "self.conv_offset(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((o1, o2), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_85": {
                "variable": {
                    "value": "grad_weight",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/ops/dcn/deform_pool.py": {
        "torch": {
            "DeformRoIPoolingFunction_10": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                }
            },
            "DeformRoIPooling_82": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.spatial_scale": {
                    "value": "spatial_scale",
                    "possible_values": []
                },
                "self.out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "self.no_trans": {
                    "value": "no_trans",
                    "possible_values": []
                },
                "self.group_size": {
                    "value": "group_size",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.sample_per_part": {
                    "value": "sample_per_part",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.trans_std": {
                    "value": "trans_std",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_like_66": {
                "variable": {
                    "value": "grad_input",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "possible_values": []
                }
            },
            "zeros_like_68": {
                "variable": {
                    "value": "grad_offset",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "possible_values": [
                        [
                            "data.new_empty(0)",
                            "Call"
                        ],
                        [
                            "data.new_empty(0)",
                            "Call"
                        ],
                        [
                            "data.new_empty(0)",
                            "Call"
                        ],
                        [
                            "self.offset_fc(x.view(n, -1))",
                            "Call"
                        ],
                        [
                            "offset.view(n, 2, self.out_size[0], self.out_size[1])",
                            "Call"
                        ],
                        [
                            "data.new_empty(0)",
                            "Call"
                        ],
                        [
                            "data.new_empty(0)",
                            "Call"
                        ],
                        [
                            "self.offset_fc(x.view(n, -1))",
                            "Call"
                        ],
                        [
                            "offset.view(n, 2, self.out_size[0], self.out_size[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_145": {
                "variable": {
                    "value": "self.offset_fc",
                    "possible_values": []
                },
                "*args": {
                    "value": "*seq",
                    "possible_values": []
                }
            },
            "Sequential_208": {
                "variable": {
                    "value": "self.offset_fc",
                    "possible_values": []
                },
                "*args": {
                    "value": "*offset_fc_seq",
                    "possible_values": []
                }
            },
            "Sequential_225": {
                "variable": {
                    "value": "self.mask_fc",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mask_fc_seq",
                    "possible_values": []
                }
            },
            "Linear_141": {
                "in_features": {
                    "value": "ic",
                    "possible_values": [
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "Name"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "Name"
                        ],
                        [
                            "oc",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "oc",
                    "possible_values": [
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_204": {
                "in_features": {
                    "value": "ic",
                    "possible_values": [
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "Name"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "Name"
                        ],
                        [
                            "oc",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "oc",
                    "possible_values": [
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_219": {
                "in_features": {
                    "value": "ic",
                    "possible_values": [
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "Name"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "Name"
                        ],
                        [
                            "oc",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "oc",
                    "possible_values": [
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_144": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_207": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_222": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Sigmoid_224": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/ops/dropblock/dropblock.py": {
        "torch": {
            "DropBlock2D_6": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.drop_prob": {
                    "value": "drop_prob",
                    "possible_values": []
                },
                "self.block_size": {
                    "value": "block_size",
                    "possible_values": []
                }
            },
            "max_pool2d_63": {
                "variable": {
                    "value": "block_mask",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[:, None, :, :]",
                    "possible_values": [
                        [
                            "(torch.rand(x.shape[0], *x.shape[2:]) < gamma).float()",
                            "Call"
                        ],
                        [
                            "mask.to(x.device)",
                            "Call"
                        ],
                        [
                            "(torch.rand(x.shape[0], *x.shape[2:]) < gamma).float()",
                            "Call"
                        ],
                        [
                            "mask.to(x.device)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(self.block_size, self.block_size)",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.block_size // 2",
                    "possible_values": []
                }
            },
            "max_pool3d_133": {
                "variable": {
                    "value": "block_mask",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[:, None, :, :, :]",
                    "possible_values": [
                        [
                            "(torch.rand(x.shape[0], *x.shape[2:]) < gamma).float()",
                            "Call"
                        ],
                        [
                            "mask.to(x.device)",
                            "Call"
                        ],
                        [
                            "(torch.rand(x.shape[0], *x.shape[2:]) < gamma).float()",
                            "Call"
                        ],
                        [
                            "mask.to(x.device)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(self.block_size, self.block_size, self.block_size)",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.block_size // 2",
                    "possible_values": []
                }
            },
            "rand_46": {
                "*size": {
                    "value": "x.shape[0]",
                    "possible_values": []
                },
                "out": {
                    "value": "*x.shape[2:]",
                    "possible_values": []
                }
            },
            "rand_116": {
                "*size": {
                    "value": "x.shape[0]",
                    "possible_values": []
                },
                "out": {
                    "value": "*x.shape[2:]",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/ops/dropblock/scheduler.py": {
        "torch": {
            "LinearScheduler_5": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.dropblock": {
                    "value": "dropblock",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/ops/masked_conv/masked_conv.py": {
        "torch": {
            "MaskedConv2dFunction_12": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                }
            },
            "MaskedConv2d_64": {
                "base_class_0": {
                    "value": "torch.nn.Conv2d",
                    "possible_values": []
                }
            },
            "nonzero_36": {
                "variable": {
                    "value": "mask_inds",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[0] > 0",
                    "possible_values": []
                }
            },
            "addmm_48": {
                "variable": {
                    "value": "masked_output",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                },
                "mat1": {
                    "value": "bias[:, None]",
                    "possible_values": []
                },
                "mat2": {
                    "value": "1",
                    "possible_values": []
                },
                "beta": {
                    "value": "weight.view(out_channel, -1)",
                    "possible_values": []
                },
                "alpha": {
                    "value": "data_col",
                    "possible_values": [
                        [
                            "features.new_zeros(in_channel * kernel_h * kernel_w, mask_inds.size(0))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/ops/nms/nms_wrapper.py": {
        "torch": {
            "from_numpy_43": {
                "variable": {
                    "value": "dets_th",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dets",
                    "possible_values": []
                }
            },
            "from_numpy_97": {
                "variable": {
                    "value": "dets_t",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dets",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/ops/roi_align/gradcheck.py": {
        "torch": {
            "randn_22": {
                "variable": {
                    "value": "feat",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_imgs",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "16",
                    "possible_values": []
                },
                "dtype": {
                    "value": "feat_size",
                    "possible_values": [
                        [
                            "15",
                            "Constant"
                        ]
                    ]
                },
                "layout": {
                    "value": "feat_size",
                    "possible_values": [
                        [
                            "15",
                            "Constant"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "possible_values": []
                }
            },
            "from_numpy_24": {
                "variable": {
                    "value": "rois",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rois",
                    "possible_values": [
                        [
                            "np.random.rand(num_rois, 4) * img_size * 0.5",
                            "BinOp"
                        ],
                        [
                            "np.hstack((batch_ind, rois))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rois).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "gradcheck_27": {
                "variable": {
                    "value": "test",
                    "possible_values": []
                },
                "func": {
                    "value": "RoIAlign(3, spatial_scale)",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "(feat, rois)",
                            "Tuple"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "possible_values": []
                }
            },
            "gradcheck_29": {
                "variable": {
                    "value": "test",
                    "possible_values": []
                },
                "func": {
                    "value": "RoIAlign(3, spatial_scale, 2)",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "(feat, rois)",
                            "Tuple"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/ops/roi_align/roi_align.py": {
        "torch": {
            "RoIAlignFunction_9": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                }
            },
            "RoIAlign_59": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.use_torchvision": {
                    "value": "use_torchvision",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/ops/roi_pool/gradcheck.py": {
        "torch": {
            "randn_10": {
                "variable": {
                    "value": "feat",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "possible_values": []
                },
                "dtype": {
                    "value": "15",
                    "possible_values": []
                },
                "layout": {
                    "value": "15",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Tensor_11": {
                "variable": {
                    "value": "rois",
                    "possible_values": []
                }
            },
            "gradcheck_15": {
                "variable": {
                    "value": "test",
                    "possible_values": []
                },
                "func": {
                    "value": "RoIPool(4, 1.0 / 8)",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "(feat, rois)",
                            "Tuple"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-05",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/ops/roi_pool/roi_pool.py": {
        "torch": {
            "RoIPoolFunction_10": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                }
            },
            "RoIPool_53": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.use_torchvision": {
                    "value": "use_torchvision",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/ops/sigmoid_focal_loss/sigmoid_focal_loss.py": {
        "torch": {
            "SigmoidFocalLossFunction_8": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                }
            },
            "SigmoidFocalLoss_39": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.gamma": {
                    "value": "gamma",
                    "possible_values": [
                        [
                            "ctx.gamma",
                            "Attribute"
                        ],
                        [
                            "2.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.alpha": {
                    "value": "alpha",
                    "possible_values": [
                        [
                            "ctx.alpha",
                            "Attribute"
                        ],
                        [
                            "0.25",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/utils/collect_env.py": {
        "torch": {
            "is_available_19": {
                "variable": {
                    "value": "cuda_available",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_count_37": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "get_device_name_38": {
                "device": {
                    "value": "k",
                    "possible_values": [
                        [
                            "range(torch.cuda.device_count())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/utils/contextmanagers.py": {
        "torch": {
            "current_stream_30": {
                "variable": {
                    "value": "stream_before_context_switch",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_grad_enabled_46": {
                "variable": {
                    "value": "grad_enabled_before",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "current_stream_109": {
                "variable": {
                    "value": "initial_stream",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Event_41": {
                "variable": {
                    "value": "start",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "current_stream_50": {
                "variable": {
                    "value": "current_stream",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_grad_enabled_59": {
                "variable": {
                    "value": "grad_enabled_after",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "current_stream_81": {
                "variable": {
                    "value": "current_stream",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_26": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Event_37": {
                "enable_timing": {
                    "value": "DEBUG_COMPLETED_TIME",
                    "possible_values": [
                        [
                            "bool(os.environ.get('DEBUG_COMPLETED_TIME', False))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_105": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "current_stream_120": {
                "variable": {
                    "value": "current",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/utils/flops_counter.py": {
        "torch": {
            "ones_51": {
                "variable": {
                    "value": "batch",
                    "possible_values": []
                },
                "*size": {
                    "value": "()",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/utils/profiling.py": {
        "torch": {
            "Event_26": {
                "variable": {
                    "value": "start",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Event_27": {
                "variable": {
                    "value": "end",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "current_stream_24": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_21": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "setup.py": {
        "torch": {
            "is_available_95": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "tests/async_benchmark.py": {
        "torch": {
            "Stream_61": {
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "'cuda:0'",
                            "Constant"
                        ]
                    ]
                }
            },
            "default_stream_80": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_assigner.py": {
        "torch": {
            "Tensor_58": {
                "variable": {
                    "value": "gt_bboxes_ignore",
                    "possible_values": []
                }
            },
            "empty_97": {
                "variable": {
                    "value": "bboxes",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 4)",
                    "possible_values": []
                }
            },
            "empty_123": {
                "variable": {
                    "value": "bboxes",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 4)",
                    "possible_values": []
                }
            },
            "empty_124": {
                "variable": {
                    "value": "gt_bboxes",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 4)",
                    "possible_values": []
                }
            },
            "empty_233": {
                "variable": {
                    "value": "bboxes",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 4)",
                    "possible_values": []
                }
            },
            "empty_254": {
                "variable": {
                    "value": "bboxes",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 4)",
                    "possible_values": []
                }
            },
            "empty_255": {
                "variable": {
                    "value": "gt_bboxes",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 4)",
                    "possible_values": []
                }
            },
            "all_38": {
                "input": {
                    "value": "assign_result.gt_inds == expected_gt_inds",
                    "possible_values": []
                }
            },
            "all_65": {
                "input": {
                    "value": "assign_result.gt_inds == expected_gt_inds",
                    "possible_values": []
                }
            },
            "all_86": {
                "input": {
                    "value": "assign_result.gt_inds == expected_gt_inds",
                    "possible_values": []
                }
            },
            "all_143": {
                "input": {
                    "value": "assign_result.gt_inds == expected_gt_inds",
                    "possible_values": []
                }
            },
            "all_161": {
                "input": {
                    "value": "assign_result.gt_inds == expected_gt_inds",
                    "possible_values": []
                }
            },
            "all_197": {
                "input": {
                    "value": "assign_result.gt_inds == expected_gt_inds",
                    "possible_values": []
                }
            },
            "all_222": {
                "input": {
                    "value": "assign_result.gt_inds == expected_gt_inds",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_async.py": {
        "torch": {
            "Stream_48": {
                "variable": {
                    "value": "stream",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "is_available_66": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_forward.py": {
        "torch": {
            "is_available_147": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_75": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_104": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_139": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_162": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_heads.py": {
        "torch": {
            "rand_84": {
                "variable": {
                    "value": "feat",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "rand_142": {
                "variable": {
                    "value": "dummy_feats",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_sampled",
                    "possible_values": [
                        [
                            "sum((len(res.bboxes) for res in sampling_results))",
                            "Call"
                        ],
                        [
                            "sum((len(res.bboxes) for res in sampling_results))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "8 * 3 * 3",
                    "possible_values": []
                }
            },
            "rand_165": {
                "variable": {
                    "value": "dummy_feats",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_sampled",
                    "possible_values": [
                        [
                            "sum((len(res.bboxes) for res in sampling_results))",
                            "Call"
                        ],
                        [
                            "sum((len(res.bboxes) for res in sampling_results))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "8 * 3 * 3",
                    "possible_values": []
                }
            },
            "cat_324": {
                "variable": {
                    "value": "rois",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img_ids[:, None].float(), roi_boxes]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "from_numpy_327": {
                "variable": {
                    "value": "labels",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "rng.randint(0, 2, (n_roi,))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(labels).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_319": {
                "variable": {
                    "value": "img_ids",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0,)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "empty_320": {
                "variable": {
                    "value": "roi_boxes",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 4)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "from_numpy_323": {
                "variable": {
                    "value": "img_ids",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img_ids",
                    "possible_values": [
                        [
                            "rng.randint(0, n_img, (n_roi,))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img_ids)",
                            "Call"
                        ],
                        [
                            "torch.empty((0,), dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_43": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "s // 2 ** (i + 2)",
                    "possible_values": []
                },
                "layout": {
                    "value": "s // 2 ** (i + 2)",
                    "possible_values": []
                }
            },
            "empty_49": {
                "*size": {
                    "value": "(0, 4)",
                    "possible_values": []
                }
            },
            "empty_130": {
                "*size": {
                    "value": "(0, 4)",
                    "possible_values": []
                }
            },
            "from_numpy_338": {
                "ndarray": {
                    "value": "p",
                    "possible_values": []
                }
            },
            "sort_338": {
                "descending": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_nms.py": {
        "torch": {
            "is_available_49": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_count_59": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_sampler.py": {
        "torch": {
            "Tensor_25": {
                "variable": {
                    "value": "gt_bboxes_ignore",
                    "possible_values": []
                }
            },
            "empty_56": {
                "variable": {
                    "value": "gt_bboxes",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "empty_57": {
                "variable": {
                    "value": "gt_labels",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "empty_76": {
                "variable": {
                    "value": "bboxes",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "Tensor_131": {
                "variable": {
                    "value": "gt_bboxes_ignore",
                    "possible_values": []
                }
            },
            "empty_171": {
                "variable": {
                    "value": "gt_bboxes",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "Tensor_173": {
                "variable": {
                    "value": "gt_bboxes_ignore",
                    "possible_values": []
                }
            },
            "empty_205": {
                "variable": {
                    "value": "bboxes",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "Tensor_213": {
                "variable": {
                    "value": "gt_bboxes_ignore",
                    "possible_values": []
                }
            },
            "rand_149": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "256",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int(2 ** i)",
                    "possible_values": []
                },
                "layout": {
                    "value": "int(2 ** i)",
                    "possible_values": []
                }
            },
            "rand_189": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "256",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int(2 ** i)",
                    "possible_values": []
                },
                "layout": {
                    "value": "int(2 ** i)",
                    "possible_values": []
                }
            },
            "rand_229": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "256",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int(2 ** i)",
                    "possible_values": []
                },
                "layout": {
                    "value": "int(2 ** i)",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_soft_nms.py": {
        "torch": {}
    },
    "tools/detectron2pytorch.py": {
        "torch": {
            "from_numpy_12": {
                "variable": {
                    "value": "state_dict[torch_name + .bias]",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs[caffe_name + '_b']",
                    "possible_values": []
                }
            },
            "from_numpy_14": {
                "variable": {
                    "value": "state_dict[torch_name + .weight]",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs[caffe_name + '_s']",
                    "possible_values": []
                }
            },
            "zeros_17": {
                "variable": {
                    "value": "state_dict[torch_name + .running_mean]",
                    "possible_values": []
                },
                "*size": {
                    "value": "bn_size",
                    "possible_values": [
                        [
                            "state_dict[torch_name + '.weight'].size()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_18": {
                "variable": {
                    "value": "state_dict[torch_name + .running_var]",
                    "possible_values": []
                },
                "*size": {
                    "value": "bn_size",
                    "possible_values": [
                        [
                            "state_dict[torch_name + '.weight'].size()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_25": {
                "variable": {
                    "value": "state_dict[torch_name + .weight]",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs[caffe_name + '_w']",
                    "possible_values": []
                }
            },
            "from_numpy_29": {
                "variable": {
                    "value": "state_dict[torch_name + .bias]",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs[caffe_name + '_b']",
                    "possible_values": []
                }
            },
            "save_75": {
                "obj": {
                    "value": "checkpoint",
                    "possible_values": [
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "dst",
                    "possible_values": []
                }
            }
        }
    },
    "tools/publish_model.py": {
        "torch": {
            "load_17": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "in_file",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "save_23": {
                "obj": {
                    "value": "checkpoint",
                    "possible_values": [
                        [
                            "torch.load(in_file, map_location='cpu')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "out_file",
                    "possible_values": []
                }
            }
        }
    },
    "tools/test.py": {
        "torch": {
            "tensor_126": {
                "variable": {
                    "value": "part_tensor",
                    "possible_values": []
                },
                "data": {
                    "value": "bytearray(pickle.dumps(result_part))",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "tensor_129": {
                "variable": {
                    "value": "shape_tensor",
                    "possible_values": []
                },
                "data": {
                    "value": "part_tensor.shape",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "tensor_133": {
                "variable": {
                    "value": "shape_max",
                    "possible_values": []
                },
                "data": {
                    "value": "shape_list",
                    "possible_values": [
                        [
                            "[shape_tensor.clone() for _ in range(world_size)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "max_133": {
                "variable": {
                    "value": "shape_max",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "zeros_134": {
                "variable": {
                    "value": "part_send",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape_max",
                    "possible_values": [
                        [
                            "torch.tensor(shape_list).max()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "full_87": {
                "variable": {
                    "value": "dir_tensor",
                    "possible_values": []
                },
                "size": {
                    "value": "(MAX_LEN,)",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "32",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "tensor_93": {
                "variable": {
                    "value": "tmpdir",
                    "possible_values": []
                },
                "data": {
                    "value": "bytearray(tmpdir.encode())",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "broadcast_96": {
                "tensor": {
                    "value": "dir_tensor",
                    "possible_values": [
                        [
                            "torch.full((MAX_LEN,), 32, dtype=torch.uint8, device='cuda')",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "no_grad_25": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_64": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "current_device_288": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "tools/test_robustness.py": {
        "torch": {
            "full_141": {
                "variable": {
                    "value": "dir_tensor",
                    "possible_values": []
                },
                "size": {
                    "value": "(MAX_LEN,)",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "32",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "tensor_147": {
                "variable": {
                    "value": "tmpdir",
                    "possible_values": []
                },
                "data": {
                    "value": "bytearray(tmpdir.encode())",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "broadcast_150": {
                "tensor": {
                    "value": "dir_tensor",
                    "possible_values": [
                        [
                            "torch.full((MAX_LEN,), 32, dtype=torch.uint8, device='cuda')",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "no_grad_99": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_120": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "current_device_371": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "tools/train.py": {
        "torch": {}
    },
    "tools/upgrade_model_version.py": {
        "torch": {
            "load_15": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "in_file",
                    "possible_values": []
                }
            },
            "save_30": {
                "obj": {
                    "value": "checkpoint",
                    "possible_values": [
                        [
                            "torch.load(in_file)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "out_file",
                    "possible_values": []
                }
            }
        }
    }
}