{
    "datasets/dataset.py": {
        "tensorflow": {
            "expand_dims_26": {
                "variable": {
                    "value": "condition",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "condition",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(condition, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(condition, multiples=tf.convert_to_tensor([1, 1, times]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(condition, shape=[-1, last_dim])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_27": {
                "variable": {
                    "value": "condition",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "condition",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(condition, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(condition, multiples=tf.convert_to_tensor([1, 1, times]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(condition, shape=[-1, last_dim])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "tf.convert_to_tensor([1, 1, times])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_28": {
                "variable": {
                    "value": "condition",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "condition",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(condition, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(condition, multiples=tf.convert_to_tensor([1, 1, times]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(condition, shape=[-1, last_dim])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, last_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_35": {
                "variable": {
                    "value": "wav",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "wav",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(wav, paddings=tf.convert_to_tensor([[0, pad_length], [0, 0]]))",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "tf.convert_to_tensor([[0, pad_length], [0, 0]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_25": {
                "input": {
                    "value": "condition",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(condition, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(condition, multiples=tf.convert_to_tensor([1, 1, times]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(condition, shape=[-1, last_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_149": {
                "variable": {
                    "value": "target_length",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "target.waveform_length - approx_min_target_length",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "convert_to_tensor_27": {
                "value": {
                    "value": "[1, 1, times]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_35": {
                "value": {
                    "value": "[[0, pad_length], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_50": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "parallel_interleave_51": {
                "map_func": {
                    "value": "lambda filename: tf.data.TFRecordDataset(filename)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "cycle_length": {
                    "value": "cycle_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "sloppy": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "buffer_output_elements": {
                    "value": "buffer_output_elements",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "prefetch_input_elements": {
                    "value": "prefetch_input_elements",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "less_equal_110": {
                "x": {
                    "value": "t.waveform_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "max_output_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.hparams.max_output_length",
                            "Attribute"
                        ]
                    ]
                }
            },
            "shuffle_and_repeat_121": {
                "buffer_size": {
                    "value": "buffer_size",
                    "type": "Name",
                    "possible_values": []
                },
                "count": {
                    "value": "count",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "minimum_151": {
                "x": {
                    "value": "tf.to_int64(num_buckets)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "bucket_id",
                    "type": "Name",
                    "possible_values": [
                        [
                            "target_length // bucket_width",
                            "BinOp"
                        ]
                    ]
                }
            },
            "group_by_window_184": {
                "key_func": {
                    "value": "key_func",
                    "type": "Name",
                    "possible_values": []
                },
                "reduce_func": {
                    "value": "reduce_func",
                    "type": "Name",
                    "possible_values": []
                },
                "window_size": {
                    "value": "batch_size * 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_65": {
                "input": {
                    "value": "d.waveform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_int64_151": {
                "x": {
                    "value": "num_buckets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.hparams.batch_num_buckets",
                            "Attribute"
                        ]
                    ]
                }
            },
            "TFRecordDataset_52": {
                "filenames": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "TensorShape_156": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_157": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_158": {
                "dims": {
                    "value": "[None, self.hparams.num_mels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_159": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_160": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_161": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_164": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_165": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_166": {
                "dims": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_167": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int64_170": {
                "x": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_float_172": {
                "x": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_int64_173": {
                "x": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_int64_174": {
                "x": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_int64_178": {
                "x": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_float_180": {
                "x": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_int64_181": {
                "x": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "hparams.py": {
        "tensorflow": {}
    },
    "layers/modules.py": {
        "tensorflow": {
            "while_loop_291": {
                "variable": {
                    "value": "results",
                    "type": "Name",
                    "possible_values": []
                },
                "cond": {
                    "value": "loop_condition",
                    "type": "Name",
                    "possible_values": []
                },
                "body": {
                    "value": "loop_body",
                    "type": "Name",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "initial_vars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SampleGenerationLoopState(t=tf.constant(0, dtype=tf.int32), output_audio_ta=tf.TensorArray(dtype=conditions.dtype, size=0, dynamic_size=True), audio_t=tf.zeros(shape=[batch_size, 1], dtype=conditions.dtype), state_t=probability_estimator.zero_state(batch_size=batch_size, in_channels=1, dtype=conditions.dtype))",
                            "Call"
                        ]
                    ]
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_294": {
                "variable": {
                    "value": "output_waveform",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "results.output_audio_ta.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_39": {
                "variable": {
                    "value": "Y",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "Y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.convolution(inputs, self.W, padding='VALID', dilation_rate=[1, self.dilation])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(Y, axis=1)",
                            "Call"
                        ],
                        [
                            "Y + tf.tensordot(condition, self.lc_gc_filter_gate_W, [[len(condition.shape.as_list()) - 1], [0]])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.tanh(Y)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(Y[:, :, :self.residual_channels]) * tf.sigmoid(Y[:, :, self.residual_channels:])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensordot_85": {
                "variable": {
                    "value": "Z",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "Y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.convolution(inputs, self.W, padding='VALID', dilation_rate=[1, self.dilation])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(Y, axis=1)",
                            "Call"
                        ],
                        [
                            "Y + tf.tensordot(condition, self.lc_gc_filter_gate_W, [[len(condition.shape.as_list()) - 1], [0]])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.tanh(Y)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(Y[:, :, :self.residual_channels]) * tf.sigmoid(Y[:, :, self.residual_channels:])",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "self.output_W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axes": {
                    "value": "[[len(Y.shape.as_list()) - 1], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_135": {
                "variable": {
                    "value": "X_concat",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "skip_outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensordot_136": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "X_concat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(skip_outputs, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axes": {
                    "value": "[[len(X_concat.shape.as_list()) - 1], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensordot_142": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tensordot(X_concat, self.W, [[len(X_concat.shape.as_list()) - 1], [0]])",
                            "Call"
                        ],
                        [
                            "X + self.postprocessing1_b",
                            "BinOp"
                        ],
                        [
                            "concat_relu(X)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(X, self.postprocessing1_W, [[len(X.shape.as_list()) - 1], [0]])",
                            "Call"
                        ],
                        [
                            "concat_relu(X)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.postprocessing1_W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axes": {
                    "value": "[[len(X.shape.as_list()) - 1], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensordot_148": {
                "variable": {
                    "value": "probability_params",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tensordot(X_concat, self.W, [[len(X_concat.shape.as_list()) - 1], [0]])",
                            "Call"
                        ],
                        [
                            "X + self.postprocessing1_b",
                            "BinOp"
                        ],
                        [
                            "concat_relu(X)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(X, self.postprocessing1_W, [[len(X.shape.as_list()) - 1], [0]])",
                            "Call"
                        ],
                        [
                            "concat_relu(X)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.postprocessing2_W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axes": {
                    "value": "[[len(X.shape.as_list()) - 1], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensordot_174": {
                "variable": {
                    "value": "H_lc",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "local_condition",
                    "type": "Name",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W_lc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axes": {
                    "value": "[[len(local_condition.shape.as_list()) - 1], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_275": {
                "variable": {
                    "value": "H",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "conditions[:, t, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_276": {
                "variable": {
                    "value": "audio_t",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "audio_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(audio_t, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_295": {
                "input": {
                    "value": "output_waveform",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(results.output_audio_ta.stack(), perm=[1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_32": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(inputs, [[0, 0], [effective_filter_width - 1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [effective_filter_width - 1, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_33": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(inputs, [[0, 0], [effective_filter_width - 1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "convolution_34": {
                "variable": {
                    "value": "Y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(inputs, [[0, 0], [effective_filter_width - 1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "[1, self.dilation]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_35": {
                "variable": {
                    "value": "Y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "Y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.convolution(inputs, self.W, padding='VALID', dilation_rate=[1, self.dilation])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(Y, axis=1)",
                            "Call"
                        ],
                        [
                            "Y + tf.tensordot(condition, self.lc_gc_filter_gate_W, [[len(condition.shape.as_list()) - 1], [0]])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.tanh(Y)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(Y[:, :, :self.residual_channels]) * tf.sigmoid(Y[:, :, self.residual_channels:])",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensordot_76": {
                "a": {
                    "value": "condition",
                    "type": "Name",
                    "possible_values": []
                },
                "b": {
                    "value": "self.lc_gc_filter_gate_W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axes": {
                    "value": "[[len(condition.shape.as_list()) - 1], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_179": {
                "variable": {
                    "value": "H_gc",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_gc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "global_condition",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tanh_183": {
                "x": {
                    "value": "H",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(conditions[:, t, :], axis=1)",
                            "Call"
                        ],
                        [
                            "H_lc",
                            "Name"
                        ],
                        [
                            "H_lc + H_gc",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_268": {
                "input": {
                    "value": "conditions",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_269": {
                "input": {
                    "value": "conditions",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "less_272": {
                "x": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "n_total_samples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(conditions)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tanh_79": {
                "x": {
                    "value": "Y[:, :, :self.residual_channels]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_79": {
                "x": {
                    "value": "Y[:, :, self.residual_channels:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_284": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorArray_285": {
                "dtype": {
                    "value": "conditions.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_286": {
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "conditions.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_29": {
                "input": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "layers/modules_test.py": {
        "tensorflow": {
            "one_hot_48": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "draw(arrays(dtype=np.float32, shape=[batch_size, width], elements=integers(0, n_classes - 1)))",
                            "Call"
                        ],
                        [
                            "draw(arrays(dtype=np.float32, shape=[batch_size, width], elements=integers(0, n_classes - 1)))",
                            "Call"
                        ],
                        [
                            "tf.one_hot(X, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(X, n_classes)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "n_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "draw(n_classes)",
                            "Call"
                        ],
                        [
                            "draw(n_classes)",
                            "Call"
                        ],
                        [
                            "integers(4",
                            "MethodArgument"
                        ],
                        [
                            "integers(4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_57": {
                "variable": {
                    "value": "Y1",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "Y1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(Y1, axis=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.squeeze(tf.stack(Y1, axis=1), axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "one_hot_71": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "draw(arrays(dtype=np.float32, shape=[batch_size, width], elements=integers(0, n_classes - 1)))",
                            "Call"
                        ],
                        [
                            "draw(arrays(dtype=np.float32, shape=[batch_size, width], elements=integers(0, n_classes - 1)))",
                            "Call"
                        ],
                        [
                            "tf.one_hot(X, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(X, n_classes)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "n_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "draw(n_classes)",
                            "Call"
                        ],
                        [
                            "draw(n_classes)",
                            "Call"
                        ],
                        [
                            "integers(4",
                            "MethodArgument"
                        ],
                        [
                            "integers(4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "squeeze_96": {
                "variable": {
                    "value": "Y1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.stack(Y1, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_92": {
                "variable": {
                    "value": "X_t",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "X[:, t, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_93": {
                "variable": {
                    "value": "H_t",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "H[:, t, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_96": {
                "values": {
                    "value": "Y1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(Y1, axis=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.squeeze(tf.stack(Y1, axis=1), axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_initializer_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/hooks.py": {
        "tensorflow": {
            "SessionRunArgs_22": {
                "fetches": {
                    "value": "{'global_step': self.global_step_tensor}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "info_39": {
                "msg": {
                    "value": "Saving a %s result for %d at %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "global_step_value",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "models/wavenet.py": {
        "tensorflow": {
            "get_global_step_33": {
                "variable": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_86": {
                "name": {
                    "value": "learning_rate",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "merge_all_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_45": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_learning_rate(params.learning_rate_method, global_step, params={'learning_rate': params.learning_rate, 'decay_steps': params.decay_steps, 'decay_rate': params.decay_rate})",
                            "Call"
                        ]
                    ]
                },
                "beta1": {
                    "value": "params.adam_beta1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta2": {
                    "value": "params.adam_beta2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "params.adam_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_49": {
                "variable": {
                    "value": "(clipped_gradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "Name",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FileWriter_61": {
                "variable": {
                    "value": "summary_writer",
                    "type": "Name",
                    "possible_values": []
                },
                "logdir": {
                    "value": "model_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "EstimatorSpec_52": {
                "mode": {
                    "value": "mode",
                    "type": "Name",
                    "possible_values": []
                },
                "loss": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discretized_mix_logistic_loss(Y, probability_params, params.quantization_levels, params.n_logistic_mix)",
                            "Call"
                        ],
                        [
                            "discretized_mix_logistic_loss(Y, probability_params, params.quantization_levels, params.n_logistic_mix)",
                            "Call"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optimizer.apply_gradients(zip(clipped_gradients, variables), global_step=global_step)",
                            "Call"
                        ]
                    ]
                }
            },
            "EstimatorSpec_67": {
                "mode": {
                    "value": "mode",
                    "type": "Name",
                    "possible_values": []
                },
                "loss": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discretized_mix_logistic_loss(Y, probability_params, params.quantization_levels, params.n_logistic_mix)",
                            "Call"
                        ],
                        [
                            "discretized_mix_logistic_loss(Y, probability_params, params.quantization_levels, params.n_logistic_mix)",
                            "Call"
                        ]
                    ]
                },
                "evaluation_hooks": {
                    "value": "[metrics_saver]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "EstimatorSpec_71": {
                "mode": {
                    "value": "mode",
                    "type": "Name",
                    "possible_values": []
                },
                "predictions": {
                    "value": "{'id': features.id, 'key': features.key, 'predicted_waveform': predicted_waveform, 'ground_truth_waveform': tf.squeeze(features.waveform, axis=2), 'mel': features.mel, 'text': features.text}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "squeeze_62": {
                "input": {
                    "value": "labels.waveform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_75": {
                "input": {
                    "value": "features.waveform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ops/convolutions.py": {
        "tensorflow": {
            "shape_12": {
                "variable": {
                    "value": "W_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(W, shape=[-1, out_channels])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_15": {
                "variable": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(W, shape=[-1, out_channels])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, out_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_20": {
                "variable": {
                    "value": "X_next",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.slice(X_prev, begin=[0, 1, 0], size=[-1, -1, -1]), X_cur]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_23": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "X_next[:, 0::dilation, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_24": {
                "variable": {
                    "value": "conv_output",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(X_next[:, 0::dilation, :], shape=[batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(W, shape=[-1, out_channels])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_18": {
                "variable": {
                    "value": "X_cur",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "X_cur",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(X_cur, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "shape": {
                    "value": "[batch_size, effective_filter_width, in_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_13": {
                "input": {
                    "value": "X_cur",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(X_cur, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_25": {
                "input": {
                    "value": "conv_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(inputs, W)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(conv_output, axis=1) if input_dim == 3 else conv_output",
                            "IfExp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "slice_20": {
                "input_": {
                    "value": "X_prev",
                    "type": "Name",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "ops/convolutions_test.py": {
        "tensorflow": {
            "one_hot_32": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "draw(arrays(dtype=np.float32, shape=[batch_size, width], elements=integers(0, n_classes - 1)))",
                            "Call"
                        ],
                        [
                            "tf.one_hot(X, n_classes)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "n_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "draw(n_classes)",
                            "Call"
                        ],
                        [
                            "integers(4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_34": {
                "variable": {
                    "value": "X2",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.pad(X, [[0, 0], [effective_filter_width - 1, 0], [0, 0]])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1, -1, n_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_40": {
                "variable": {
                    "value": "W2",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.random_normal([filter_width, n_classes, out_channels])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, filter_width, n_classes, out_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_46": {
                "variable": {
                    "value": "Y1",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "Y1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(Y1, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "atrous_conv2d_48": {
                "variable": {
                    "value": "Y2",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "X2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.pad(X, [[0, 0], [effective_filter_width - 1, 0], [0, 0]]), shape=[batch_size, 1, -1, n_classes])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(W, [1, filter_width, n_classes, out_channels])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_49": {
                "variable": {
                    "value": "Y2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "Y2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.atrous_conv2d(X2, W2, rate=dilation, padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(Y2, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_35": {
                "tensor": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "draw(arrays(dtype=np.float32, shape=[batch_size, width], elements=integers(0, n_classes - 1)))",
                            "Call"
                        ],
                        [
                            "tf.one_hot(X, n_classes)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [effective_filter_width - 1, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "ops/mixture_of_logistics_distribution.py": {
        "tensorflow": {
            "reduce_max_7": {
                "variable": {
                    "value": "m",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "means + tf.exp(log_scales) * (tf.log(u) - tf.log(1.0 - u))",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ],
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_max_8": {
                "variable": {
                    "value": "m2",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "means + tf.exp(log_scales) * (tf.log(u) - tf.log(1.0 - u))",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ],
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_max_15": {
                "variable": {
                    "value": "m",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "means + tf.exp(log_scales) * (tf.log(u) - tf.log(1.0 - u))",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ],
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_27": {
                "variable": {
                    "value": "X_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(X, multiples=[1, 1, nr_mix])",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_31": {
                "variable": {
                    "value": "log_scales",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "probability_params[:, :, 2 * nr_mix:3 * nr_mix]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "-14.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_33": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(X, multiples=[1, 1, nr_mix])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, nr_mix]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_35": {
                "variable": {
                    "value": "inv_stdv",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "-log_scales",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_37": {
                "variable": {
                    "value": "cdf_plus",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "plus_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inv_stdv * (centered_X + 1.0 / q)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_39": {
                "variable": {
                    "value": "cdf_min",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "min_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inv_stdv * (centered_X - 1.0 / q)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_55": {
                "variable": {
                    "value": "log_probs",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "X < min_threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "log_cdf_plus",
                    "type": "Name",
                    "possible_values": [
                        [
                            "plus_in - tf.nn.softplus(plus_in)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.where(X > max_threshold, log_one_minus_cdf_min, tf.log(tf.maximum(cdf_delta, 1e-14)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_72": {
                "variable": {
                    "value": "index",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logit_probs - tf.log(-tf.log(tf.random_uniform(shape=tf.shape(logit_probs), minval=1e-06, maxval=1.0 - 1e-06)))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "one_hot_75": {
                "variable": {
                    "value": "index",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "index",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.argmax(logit_probs - tf.log(-tf.log(tf.random_uniform(shape=tf.shape(logit_probs), minval=1e-06, maxval=1.0 - 1e-06))), axis=2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(index, depth=nr_mix, dtype=probability_params.dtype)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "nr_mix",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "probability_params.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_79": {
                "variable": {
                    "value": "means",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "means * index",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_81": {
                "variable": {
                    "value": "log_scales",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "log_scales * index",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "maximum_82": {
                "variable": {
                    "value": "log_scales",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "log_scales",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.maximum(probability_params[:, :, 2 * nr_mix:3 * nr_mix], -14.0)",
                            "Call"
                        ],
                        [
                            "probability_params[:, :, 2 * nr_mix:3 * nr_mix]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(log_scales * index, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.maximum(log_scales, -14.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-14.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_9": {
                "x": {
                    "value": "tf.reduce_sum(tf.exp(x - m2), axis)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_16": {
                "x": {
                    "value": "tf.reduce_sum(tf.exp(x - m), axis=axis, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_41": {
                "features": {
                    "value": "plus_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inv_stdv * (centered_X + 1.0 / q)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softplus_43": {
                "features": {
                    "value": "min_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inv_stdv * (centered_X - 1.0 / q)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_56": {
                "condition": {
                    "value": "X > max_threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "log_one_minus_cdf_min",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-tf.nn.softplus(min_in)",
                            "UnaryOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.log(tf.maximum(cdf_delta, 1e-14))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_9": {
                "input_tensor": {
                    "value": "tf.exp(x - m2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ],
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_16": {
                "input_tensor": {
                    "value": "tf.exp(x - m)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ],
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_56": {
                "x": {
                    "value": "tf.maximum(cdf_delta, 1e-14)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_59": {
                "input_tensor": {
                    "value": "_log_sum_exp(log_probs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_73": {
                "x": {
                    "value": "tf.random_uniform(shape=tf.shape(logit_probs), minval=1e-06, maxval=1.0 - 1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_86": {
                "input": {
                    "value": "means",
                    "type": "Name",
                    "possible_values": [
                        [
                            "probability_params[:, :, nr_mix:2 * nr_mix]",
                            "Subscript"
                        ],
                        [
                            "probability_params[:, :, nr_mix:2 * nr_mix]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(means * index, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_87": {
                "x": {
                    "value": "log_scales",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.maximum(probability_params[:, :, 2 * nr_mix:3 * nr_mix], -14.0)",
                            "Call"
                        ],
                        [
                            "probability_params[:, :, 2 * nr_mix:3 * nr_mix]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(log_scales * index, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.maximum(log_scales, -14.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_9": {
                "x": {
                    "value": "x - m2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_16": {
                "x": {
                    "value": "x - m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_56": {
                "x": {
                    "value": "cdf_delta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cdf_plus - cdf_min",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-14",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_87": {
                "x": {
                    "value": "1.0 - u",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_73": {
                "input": {
                    "value": "logit_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "probability_params[:, :, :nr_mix]",
                            "Subscript"
                        ],
                        [
                            "probability_params[:, :, :nr_mix]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "ops/nonlinearity.py": {
        "tensorflow": {
            "relu_7": {
                "features": {
                    "value": "tf.concat([x, -x], axis)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_7": {
                "values": {
                    "value": "[x, -x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.get_shape().ndims - 1",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "ops/optimizers.py": {
        "tensorflow": {
            "exponential_decay_11": {
                "global_step": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "natural_exp_decay_14": {
                "global_step": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "inverse_time_decay_17": {
                "global_step": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "piecewise_constant_19": {
                "global_step": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "polynomial_decay_23": {
                "global_step": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "predict.py": {
        "tensorflow": {
            "TFRecordDataset_37": {
                "variable": {
                    "value": "records",
                    "type": "Name",
                    "possible_values": []
                },
                "filenames": {
                    "value": "list(test_files)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_verbosity_80": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_83": {
                "msg": {
                    "value": "hparams_debug_string()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_54": {
                "msg": {
                    "value": "f'Saving {audio_filepath}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "info_58": {
                "msg": {
                    "value": "f'Saving {png_filepath}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "tensorflow": {
            "RunConfig_54": {
                "variable": {
                    "value": "run_config",
                    "type": "Name",
                    "possible_values": []
                },
                "save_summary_steps": {
                    "value": "hparams.save_summary_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_step_count_steps": {
                    "value": "hparams.log_step_count_steps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TrainSpec_58": {
                "variable": {
                    "value": "train_spec",
                    "type": "Name",
                    "possible_values": []
                },
                "input_fn": {
                    "value": "train_input_fn",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "EvalSpec_59": {
                "variable": {
                    "value": "eval_spec",
                    "type": "Name",
                    "possible_values": []
                },
                "input_fn": {
                    "value": "eval_input_fn",
                    "type": "Name",
                    "possible_values": []
                },
                "steps": {
                    "value": "hparams.num_evaluation_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "throttle_secs": {
                    "value": "hparams.eval_throttle_secs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start_delay_secs": {
                    "value": "hparams.eval_start_delay_secs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_31": {
                "msg": {
                    "value": "Interleave parallelism is %d.",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "interleave_parallelism",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_parallelism(hparams.interleave_cycle_length_cpu_factor, hparams.interleave_cycle_length_min, hparams.interleave_cycle_length_max)",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordDataset_48": {
                "variable": {
                    "value": "eval_files_copy",
                    "type": "Name",
                    "possible_values": []
                },
                "filenames": {
                    "value": "eval_files_copy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(eval_files)",
                            "Call"
                        ],
                        [
                            "tf.data.TFRecordDataset(eval_files_copy)",
                            "Call"
                        ]
                    ]
                }
            },
            "train_and_evaluate_64": {
                "estimator": {
                    "value": "estimator",
                    "type": "Name",
                    "possible_values": [
                        [
                            "WaveNetModel(hparams, model_dir, config=run_config)",
                            "Call"
                        ]
                    ]
                },
                "train_spec": {
                    "value": "train_spec",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.estimator.TrainSpec(input_fn=train_input_fn)",
                            "Call"
                        ]
                    ]
                },
                "eval_spec": {
                    "value": "eval_spec",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.estimator.EvalSpec(input_fn=eval_input_fn, steps=hparams.num_evaluation_steps, throttle_secs=hparams.eval_throttle_secs, start_delay_secs=hparams.eval_start_delay_secs)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_verbosity_98": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_100": {
                "msg": {
                    "value": "hparams_debug_string()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_verbosity_110": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/audio.py": {
        "tensorflow": {
            "stft_38": {
                "signals": {
                    "value": "signals",
                    "type": "Name",
                    "possible_values": []
                },
                "frame_length": {
                    "value": "win_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.hparams.frame_length_ms / 1000 * self.hparams.sample_rate)",
                            "Call"
                        ]
                    ]
                },
                "frame_step": {
                    "value": "hop_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.hparams.frame_shift_ms / 1000 * self.hparams.sample_rate)",
                            "Call"
                        ]
                    ]
                },
                "fft_length": {
                    "value": "n_fft",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(self.hparams.num_freq - 1) * 2",
                            "BinOp"
                        ],
                        [
                            "(self.hparams.num_freq - 1) * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "inverse_stft_42": {
                "stfts": {
                    "value": "stfts",
                    "type": "Name",
                    "possible_values": []
                },
                "frame_length": {
                    "value": "win_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.hparams.frame_length_ms / 1000 * self.hparams.sample_rate)",
                            "Call"
                        ]
                    ]
                },
                "frame_step": {
                    "value": "hop_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.hparams.frame_shift_ms / 1000 * self.hparams.sample_rate)",
                            "Call"
                        ]
                    ]
                },
                "fft_length": {
                    "value": "n_fft",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(self.hparams.num_freq - 1) * 2",
                            "BinOp"
                        ],
                        [
                            "(self.hparams.num_freq - 1) * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_57": {
                "x": {
                    "value": "tf.ones(tf.shape(x)) * 10.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x * 0.05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_57": {
                "shape": {
                    "value": "tf.shape(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_57": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "utils/tfrecord.py": {
        "tensorflow": {
            "Example_31": {
                "variable": {
                    "value": "example",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'id': int64_feature([id]), 'key': bytes_feature([key.encode('utf-8')]), 'waveform': bytes_feature([raw_waveform]), 'waveform_length': int64_feature([len(waveform)]), 'mel': bytes_feature([raw_mel]), 'mel_length': int64_feature([len(mel)]), 'mel_width': int64_feature([mel.shape[1]]), 'text': bytes_feature([text.encode('utf-8')])})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "parse_single_example_55": {
                "variable": {
                    "value": "parsed_features",
                    "type": "Name",
                    "possible_values": []
                },
                "serialized": {
                    "value": "proto",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'id': tf.FixedLenFeature((), tf.int64), 'key': tf.FixedLenFeature((), tf.string), 'waveform': tf.FixedLenFeature((), tf.string), 'waveform_length': tf.FixedLenFeature((), tf.int64), 'mel': tf.FixedLenFeature((), tf.string), 'mel_length': tf.FixedLenFeature((), tf.int64), 'mel_width': tf.FixedLenFeature((), tf.int64), 'text': tf.FixedLenFeature((), tf.string)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "decode_raw_61": {
                "variable": {
                    "value": "waveform",
                    "type": "Name",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "parsed['waveform']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_raw_64": {
                "variable": {
                    "value": "mel",
                    "type": "Name",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "parsed['mel']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Feature_15": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_20": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordWriter_24": {
                "path": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "FixedLenFeature_46": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_47": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_48": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_49": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_50": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_51": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_52": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_53": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BytesList_15": {
                "value": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Int64List_20": {
                "value": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Features_31": {
                "feature": {
                    "value": "{'id': int64_feature([id]), 'key': bytes_feature([key.encode('utf-8')]), 'waveform': bytes_feature([raw_waveform]), 'waveform_length': int64_feature([len(waveform)]), 'mel': bytes_feature([raw_mel]), 'mel_length': int64_feature([len(mel)]), 'mel_width': int64_feature([mel.shape[1]]), 'text': bytes_feature([text.encode('utf-8')])}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "reshape_70": {
                "tensor": {
                    "value": "mel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.decode_raw(parsed['mel'], tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([mel_length, mel_width], axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_70": {
                "values": {
                    "value": "[mel_length, mel_width]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}