{
    "AEQUITAS_MainFiles/Aequitas_Fully_Directed.py": {
        "sklearn": {}
    },
    "AEQUITAS_TestCases/DecTreeAdult.py": {
        "sklearn": {}
    },
    "AEQUITAS_TestCases/DecTreeCredit.py": {
        "sklearn": {}
    },
    "AEQUITAS_TestCases/FairNBAdult.py": {
        "sklearn": {
            "MultinomialNB_96": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MultinomialNB_288": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AEQUITAS_TestCases/FairNBCredit.py": {
        "sklearn": {
            "MultinomialNB_96": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MultinomialNB_288": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AEQUITAS_TestCases/LogRegAdult.py": {
        "sklearn": {}
    },
    "AEQUITAS_TestCases/LogRegCredit.py": {
        "sklearn": {}
    },
    "AEQUITAS_TestCases/NBAdult.py": {
        "sklearn": {
            "MultinomialNB_35": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AEQUITAS_TestCases/NBCredit.py": {
        "sklearn": {
            "MultinomialNB_36": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "adf_baseline/TestCases/DecTreeAdult.py": {
        "sklearn": {
            "DecisionTreeClassifier_23": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "class_weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "criterion": {
                    "value": "gini",
                    "type": "str",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "max_features": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "max_leaf_nodes": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "min_impurity_decrease": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "min_impurity_split": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "min_samples_leaf": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "min_samples_split": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "min_weight_fraction_leaf": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "splitter": {
                    "value": "best",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "adf_baseline/TestCases/DecTreeCredit.py": {
        "sklearn": {
            "DecisionTreeClassifier_23": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "class_weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "criterion": {
                    "value": "gini",
                    "type": "str",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "max_features": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "max_leaf_nodes": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "min_impurity_decrease": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "min_impurity_split": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "min_samples_leaf": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "min_samples_split": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "min_weight_fraction_leaf": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "splitter": {
                    "value": "best",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "adf_baseline/TestCases/FairNBAdult.py": {
        "sklearn": {
            "MultinomialNB_97": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MultinomialNB_289": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "adf_baseline/TestCases/FairNBCredit.py": {
        "sklearn": {
            "MultinomialNB_97": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MultinomialNB_289": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "adf_baseline/TestCases/LogRegAdult.py": {
        "sklearn": {
            "LogisticRegression_23": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "penalty": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "dual": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "tol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "C": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "intercept_scaling": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "class_weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "random_state": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "solver": {
                    "value": "lbfgs",
                    "type": "str",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "5000",
                    "type": "int",
                    "possible_values": []
                },
                "multi_class": {
                    "value": "auto",
                    "type": "str",
                    "possible_values": []
                },
                "verbose": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "warm_start": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "l1_ratio": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        }
    },
    "adf_baseline/TestCases/LogRegCredit.py": {
        "sklearn": {
            "LogisticRegression_22": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "penalty": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "dual": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "tol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "C": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "intercept_scaling": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "class_weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "random_state": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "solver": {
                    "value": "lbfgs",
                    "type": "str",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "5000",
                    "type": "int",
                    "possible_values": []
                },
                "multi_class": {
                    "value": "auto",
                    "type": "str",
                    "possible_values": []
                },
                "verbose": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "warm_start": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "l1_ratio": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        }
    },
    "adf_baseline/TestCases/NBAdult.py": {
        "sklearn": {
            "MultinomialNB_24": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "adf_baseline/TestCases/NBCredit.py": {
        "sklearn": {
            "MultinomialNB_23": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "adf_baseline/lime/discretize.py": {
        "sklearn": {
            "check_random_state_51": {
                "variable": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DecisionTreeClassifier_230": {
                "variable": {
                    "value": "dt",
                    "type": "variable",
                    "possible_values": []
                },
                "criterion": {
                    "value": "entropy",
                    "type": "str",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "adf_baseline/lime/explanation.py": {
        "sklearn": {
            "check_random_state_258": {
                "seed": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "adf_baseline/lime/lime_base.py": {
        "sklearn": {
            "check_random_state_29": {
                "variable": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "lars_path_44": {
                "variable": {
                    "value": "(alphas, _, coefs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "X": {
                    "value": "x_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weighted_data",
                            "variable"
                        ]
                    ]
                },
                "y": {
                    "value": "weighted_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(labels - np.average(labels, weights=weights)) * np.sqrt(weights)",
                            "BinOp"
                        ],
                        [
                            "weighted_labels",
                            "Method Argument"
                        ]
                    ]
                },
                "method": {
                    "value": "lasso",
                    "type": "str",
                    "possible_values": []
                },
                "verbose": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Ridge_52": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Ridge_190": {
                "variable": {
                    "value": "model_regressor",
                    "type": "variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Ridge_79": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "adf_baseline/lime/lime_tabular.py": {
        "sklearn": {
            "check_random_state_187": {
                "variable": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "StandardScaler_254": {
                "variable": {
                    "value": "self.scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "with_mean": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pairwise_distances_401": {
                "variable": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "scaled_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.multiply(self.scaler.scale_)",
                            "Call"
                        ],
                        [
                            "(data - self.scaler.mean_) / self.scaler.scale_",
                            "BinOp"
                        ],
                        [
                            "scaled_data.tocsr()",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "scaled_data[0].reshape(1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "metric": {
                    "value": "distance_metric",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'euclidean'",
                            "Method Argument"
                        ],
                        [
                            "'euclidean'",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "adf_baseline/symbolic_generation.py": {
        "sklearn": {
            "DecisionTreeClassifier_150": {
                "variable": {
                    "value": "tree",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "2019",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "adf_tutorial/utils.py": {
        "sklearn": {
            "KMeans_30": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "cluster_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "2019",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "gradients_52": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_loss(y, preds, mean=False)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_43": {
                "variable": {
                    "value": "preds_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "to_float_44": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(preds, preds_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_45": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / tf.reduce_sum(y, 1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DEFINE_string_61": {
                "name": {
                    "value": "dataset",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "census",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "name of datasets",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_62": {
                "name": {
                    "value": "clusters",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "number of clusters",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_46": {
                "input_tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / tf.reduce_sum(y, 1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "equal_44": {
                "x": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "preds_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(preds, 1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "multi_utils/Pruning.py": {
        "sklearn": {}
    },
    "multi_utils/ReadZ3Output.py": {
        "sklearn": {}
    },
    "multi_utils/trainDecTree.py": {
        "sklearn": {
            "DecisionTreeClassifier_30": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "criterion": {
                    "value": "entropy",
                    "type": "str",
                    "possible_values": []
                },
                "splitter": {
                    "value": "best",
                    "type": "str",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "min_samples_split": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "min_samples_leaf": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "min_weight_fraction_leaf": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max_features": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "multi_utils/tree2Logic.py": {
        "sklearn": {}
    },
    "utils/Pruning.py": {
        "sklearn": {}
    },
    "utils/ReadZ3Output.py": {
        "sklearn": {}
    },
    "utils/assume2logic.py": {
        "sklearn": {}
    },
    "utils/trainDecTree.py": {
        "sklearn": {
            "DecisionTreeClassifier_16": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "criterion": {
                    "value": "entropy",
                    "type": "str",
                    "possible_values": []
                },
                "splitter": {
                    "value": "best",
                    "type": "str",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "min_samples_split": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "min_samples_leaf": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "min_weight_fraction_leaf": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max_features": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "random_state": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        }
    },
    "utils/tree2Logic.py": {
        "sklearn": {}
    },
    "ART_MainFiles/artGen.py": {
        "torch": {
            "tensor_60": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "dataTest",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dfTest.values",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_65": {
                "input": {
                    "value": "predict_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(X[i].view(-1, X.shape[1]))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "PytorchDNNStruct.py": {
        "torch": {
            "Linear_9": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_10": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_14": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_15": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_28": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_17": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_32": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mlCheck.py": {
        "torch": {
            "tensor_525": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "dataTest",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dfTest.values",
                            "Attribute"
                        ],
                        [
                            "dfTest.values",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_264": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataTest[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(X, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "data[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(X, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor(dataTest, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "dataCex[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "dataCex[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(X, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "data[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "data[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_483": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataTest[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(X, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "data[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(X, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor(dataTest, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "dataCex[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "dataCex[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(X, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "data[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "data[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_591": {
                "variable": {
                    "value": "X_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "X[testIndx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_611": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataTest[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(X, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "data[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(X, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor(dataTest, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "dataCex[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "dataCex[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(X, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "data[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "data[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_455": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.paramDict['model_path']",
                            "Subscript"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_530": {
                "input": {
                    "value": "predict_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(X[i].view(-1, X.shape[1]))",
                            "Call"
                        ],
                        [
                            "self.model(X[i].view(-1, X.shape[1]))",
                            "Call"
                        ],
                        [
                            "self.model(X[i].view(-1, X.shape[1]))",
                            "Call"
                        ],
                        [
                            "self.model(X_pred.view(-1, X.shape[1]))",
                            "Call"
                        ],
                        [
                            "self.model(X[i].view(-1, X.shape[1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_594": {
                "input": {
                    "value": "predict_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(X[i].view(-1, X.shape[1]))",
                            "Call"
                        ],
                        [
                            "self.model(X[i].view(-1, X.shape[1]))",
                            "Call"
                        ],
                        [
                            "self.model(X[i].view(-1, X.shape[1]))",
                            "Call"
                        ],
                        [
                            "self.model(X_pred.view(-1, X.shape[1]))",
                            "Call"
                        ],
                        [
                            "self.model(X[i].view(-1, X.shape[1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_268": {
                "input": {
                    "value": "predict_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(X[i].view(-1, X.shape[1]))",
                            "Call"
                        ],
                        [
                            "self.model(X[i].view(-1, X.shape[1]))",
                            "Call"
                        ],
                        [
                            "self.model(X[i].view(-1, X.shape[1]))",
                            "Call"
                        ],
                        [
                            "self.model(X_pred.view(-1, X.shape[1]))",
                            "Call"
                        ],
                        [
                            "self.model(X[i].view(-1, X.shape[1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_387": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.paramDict['model_path']",
                            "Subscript"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_487": {
                "input": {
                    "value": "predict_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(X[i].view(-1, X.shape[1]))",
                            "Call"
                        ],
                        [
                            "self.model(X[i].view(-1, X.shape[1]))",
                            "Call"
                        ],
                        [
                            "self.model(X[i].view(-1, X.shape[1]))",
                            "Call"
                        ],
                        [
                            "self.model(X_pred.view(-1, X.shape[1]))",
                            "Call"
                        ],
                        [
                            "self.model(X[i].view(-1, X.shape[1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_615": {
                "input": {
                    "value": "predict_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(X[i].view(-1, X.shape[1]))",
                            "Call"
                        ],
                        [
                            "self.model(X[i].view(-1, X.shape[1]))",
                            "Call"
                        ],
                        [
                            "self.model(X[i].view(-1, X.shape[1]))",
                            "Call"
                        ],
                        [
                            "self.model(X_pred.view(-1, X.shape[1]))",
                            "Call"
                        ],
                        [
                            "self.model(X[i].view(-1, X.shape[1]))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "multi_utils/trainDNN.py": {
        "torch": {
            "from_numpy_71": {
                "variable": {
                    "value": "X_train",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[:, :-no_of_class]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_72": {
                "variable": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[:, -no_of_class:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_77": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_78": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ModuleList_32": {
                "variable": {
                    "value": "self.linears",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(input_size, self.layers_size)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "save_90": {
                "obj": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LinearNet(input_size=df.shape[1] - no_of_class)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "MODEL_PATH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Model/dnn_model_multi'",
                            "str"
                        ]
                    ]
                }
            },
            "relu_38": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linears[i](x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_40": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.linears[i](x))",
                            "Call"
                        ],
                        [
                            "self.linears[self.num_layers - 1](x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_53": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module.weight.data",
                            "Attribute"
                        ],
                        [
                            "torch.clamp(w, min=-10, max=10)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-10",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "self.layers_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.layers_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "self.layers_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.layers_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "test_function_trojan_10k.py": {
        "torch": {
            "load_121": {
                "variable": {
                    "value": "art_mod",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.split('/')",
                            "Call"
                        ],
                        [
                            "'ART_TestCases/' + model_name[1]",
                            "BinOp"
                        ],
                        [
                            "model.split('/')",
                            "Call"
                        ],
                        [
                            "'ART_TestCases/' + model_name[1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_249": {
                "variable": {
                    "value": "art_mod",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.split('/')",
                            "Call"
                        ],
                        [
                            "'ART_TestCases/' + model_name[1]",
                            "BinOp"
                        ],
                        [
                            "model.split('/')",
                            "Call"
                        ],
                        [
                            "'ART_TestCases/' + model_name[1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_20": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_21": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_148": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_149": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_150": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_151": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_154": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_155": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_156": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_23": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_158": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "test_function_trojan_1K.py": {
        "torch": {
            "load_121": {
                "variable": {
                    "value": "art_mod",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.split('/')",
                            "Call"
                        ],
                        [
                            "'ART_TestCases/' + model_name[1]",
                            "BinOp"
                        ],
                        [
                            "model.split('/')",
                            "Call"
                        ],
                        [
                            "'ART_TestCases/' + model_name[1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_249": {
                "variable": {
                    "value": "art_mod",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.split('/')",
                            "Call"
                        ],
                        [
                            "'ART_TestCases/' + model_name[1]",
                            "BinOp"
                        ],
                        [
                            "model.split('/')",
                            "Call"
                        ],
                        [
                            "'ART_TestCases/' + model_name[1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_20": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_21": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_148": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_149": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_150": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_151": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_154": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_155": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_156": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_23": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_158": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/DNN2logic.py": {
        "torch": {
            "load_20": {
                "variable": {
                    "value": "self.dnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "Model/dnn_model_multi",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_22": {
                "variable": {
                    "value": "self.dnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "Model/dnn_model",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "utils/trainDNN.py": {
        "torch": {
            "from_numpy_70": {
                "variable": {
                    "value": "X_train",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[:, :-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "squeeze_71": {
                "variable": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.from_numpy(y).long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_76": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ModuleList_30": {
                "variable": {
                    "value": "self.linears",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(input_size, self.layers_size)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "nll_loss_81": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(X_train)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(torch.from_numpy(y).long())",
                            "Call"
                        ]
                    ]
                }
            },
            "save_89": {
                "obj": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LinearNet(input_size=df.shape[1] - 1)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "MODEL_PATH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Model/dnn_model'",
                            "str"
                        ]
                    ]
                }
            },
            "relu_36": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linears[i](x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_38": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.linears[i](x))",
                            "Call"
                        ],
                        [
                            "self.linears[self.num_layers - 1](x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_51": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module.weight.data",
                            "Attribute"
                        ],
                        [
                            "torch.clamp(w, min=-10, max=10)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-10",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_71": {
                "ndarray": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[:, -1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "self.layers_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.layers_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "self.layers_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.layers_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}