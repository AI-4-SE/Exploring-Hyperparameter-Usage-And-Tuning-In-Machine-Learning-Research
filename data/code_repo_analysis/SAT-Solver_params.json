{
    "src/pdp/factorgraph/base.py": {
        "torch": {
            "device_43": {
                "variable": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if self._use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_161": {
                "variable": {
                    "value": "lambda_value",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self._config['lambda']]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_num_threads_54": {
                "int": {
                    "value": "self._num_cores",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_98": {
                "variable": {
                    "value": "_module(model)._global_step.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_168": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_104": {
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._model_list",
                            "Attribute"
                        ],
                        [
                            "self._model_list",
                            "Attribute"
                        ],
                        [
                            "self._model_list",
                            "Attribute"
                        ],
                        [
                            "self._model_list",
                            "Attribute"
                        ],
                        [
                            "model in enumerate(self._model_list)",
                            "Call"
                        ],
                        [
                            "model in enumerate(self._model_list)",
                            "Call"
                        ],
                        [
                            "model in enumerate(self._model_list)",
                            "Call"
                        ],
                        [
                            "model in enumerate(self._model_list)",
                            "Call"
                        ],
                        [
                            "model in enumerate(self._model_list)",
                            "Call"
                        ],
                        [
                            "model in enumerate(self._model_list)",
                            "Call"
                        ],
                        [
                            "model in enumerate(self._model_list)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_155": {
                "data": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(len(self._model_list), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "total_loss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_170": {
                "start": {
                    "value": "self._config['train_outer_recurrence_num']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_270": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_488": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__190": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self._config['clip_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "empty_cache_455": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_376": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_394": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/pdp/factorgraph/dataset.py": {
        "torch": {
            "DataLoader_240": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FactorGraphDataset(input_file=input_file, limit=limit, hidden_dim=hidden_dim, max_cache_size=max_cache_size, generator=generator, epoch_size=epoch_size, batch_replication=batch_replication)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(variable_num)",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shuffle",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_workers",
                            "Method Argument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "dataset.dag_collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_192": {
                "ndarray": {
                    "value": "np.expand_dims(np.concatenate(edge_feature[i]), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_195": {
                "ndarray": {
                    "value": "np.expand_dims(np.array(label[i]), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_220": {
                "ndarray": {
                    "value": "g_map_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((2, 0), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.concatenate((g_map_b, graph_map[i][j]), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_221": {
                "ndarray": {
                    "value": "v_map_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(0, dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.concatenate((v_map_b, np.tile(j, variable_num[i][j])))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_222": {
                "ndarray": {
                    "value": "f_map_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(0, dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.concatenate((f_map_b, np.tile(j, function_num[i][j])))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_189": {
                "ndarray": {
                    "value": "np.stack(graph_feat[i])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/pdp/nn/layers.py": {
        "torch": {
            "Parameter_20": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(size=(in_features, out_features))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_23": {
                "variable": {
                    "value": "self.a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(size=(2 * out_features, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_27": {
                "variable": {
                    "value": "self.leakyrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mm_30": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_34": {
                "variable": {
                    "value": "a_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h.repeat(1, N).view(N * N, -1), h.repeat(N, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_39": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "adj > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "e.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "zero_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-9000000000000000.0 * torch.ones_like(e.cuda())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_41": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(adj > 0, e.cuda(), zero_vec)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(attention, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_42": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(adj > 0, e.cuda(), zero_vec)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(attention, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_43": {
                "variable": {
                    "value": "h_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(adj > 0, e.cuda(), zero_vec)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(attention, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "h.cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_59": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices",
                            "Method Argument"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "values": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "values",
                            "Method Argument"
                        ],
                        [
                            "values",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_94": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(size=(in_features, out_features))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_97": {
                "variable": {
                    "value": "self.a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(size=(1, 2 * out_features))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_100": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_101": {
                "variable": {
                    "value": "self.leakyrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_110": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_115": {
                "variable": {
                    "value": "edge_h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h[edge[0, :], :], h[edge[1, :], :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_115": {
                "variable": {
                    "value": "edge_h",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_118": {
                "variable": {
                    "value": "edge_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-self.leakyrelu(self.a.mm(edge_h).squeeze())",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_62": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse_coo_tensor(indices, values, shape)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_23": {
                "size": {
                    "value": "(2 * out_features, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_35": {
                "input": {
                    "value": "a_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([h.repeat(1, N).view(N * N, -1), h.repeat(N, 1)], dim=1).view(N, -1, 2 * self.out_features)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.a",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_35": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_38": {
                "input": {
                    "value": "e.cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_46": {
                "input": {
                    "value": "h_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(attention, h.cuda())",
                            "Call"
                        ],
                        [
                            "self.special_spmm(edge, edge_e, torch.Size([N, N]), h)",
                            "Call"
                        ],
                        [
                            "h_prime.div(e_rowsum)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_94": {
                "size": {
                    "value": "(in_features, out_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_97": {
                "size": {
                    "value": "(1, 2 * out_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "isnan_112": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(input, self.W).cpu()",
                            "Call"
                        ],
                        [
                            "torch.mm(input, self.W)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_119": {
                "input": {
                    "value": "edge_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(-self.leakyrelu(self.a.mm(edge_h).squeeze()))",
                            "Call"
                        ],
                        [
                            "self.dropout(edge_e)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_122": {
                "size": {
                    "value": "(N, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "dv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if input.is_cuda else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "isnan_129": {
                "input": {
                    "value": "h_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(attention, h.cuda())",
                            "Call"
                        ],
                        [
                            "self.special_spmm(edge, edge_e, torch.Size([N, N]), h)",
                            "Call"
                        ],
                        [
                            "h_prime.div(e_rowsum)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_134": {
                "input": {
                    "value": "h_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(attention, h.cuda())",
                            "Call"
                        ],
                        [
                            "self.special_spmm(edge, edge_e, torch.Size([N, N]), h)",
                            "Call"
                        ],
                        [
                            "h_prime.div(e_rowsum)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "elu_138": {
                "input": {
                    "value": "h_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(attention, h.cuda())",
                            "Call"
                        ],
                        [
                            "self.special_spmm(edge, edge_e, torch.Size([N, N]), h)",
                            "Call"
                        ],
                        [
                            "h_prime.div(e_rowsum)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_20": {
                "size": {
                    "value": "(in_features, out_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "src/pdp/nn/models.py": {
        "torch": {
            "dropout_21": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([att(x, adj) for att in self.attentions], dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.out_att(x, adj), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([att(x, adj) for att in self.attentions], dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.out_att(x, adj))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_22": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[att(x, adj) for att in self.attentions]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_23": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([att(x, adj) for att in self.attentions], dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.out_att(x, adj), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([att(x, adj) for att in self.attentions], dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.out_att(x, adj))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "elu_24": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.out_att(x, adj)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout_49": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([att(x, adj) for att in self.attentions], dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.out_att(x, adj), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([att(x, adj) for att in self.attentions], dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.out_att(x, adj))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[att(x, adj) for att in self.attentions]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_51": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([att(x, adj) for att in self.attentions], dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.out_att(x, adj), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([att(x, adj) for att in self.attentions], dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.out_att(x, adj))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "elu_52": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.out_att(x, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_25": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([att(x, adj) for att in self.attentions], dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.out_att(x, adj), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([att(x, adj) for att in self.attentions], dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.out_att(x, adj))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_53": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([att(x, adj) for att in self.attentions], dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.out_att(x, adj), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([att(x, adj) for att in self.attentions], dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.out_att(x, adj))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/pdp/nn/pdp_decimate.py": {
        "torch": {
            "ModuleList_30": {
                "variable": {
                    "value": "self._module_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GRUCell_40": {
                "variable": {
                    "value": "self._variable_rnn_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "variable_message_dim + edge_dimension + meta_data_dimension",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dimension",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRUCell_42": {
                "variable": {
                    "value": "self._function_rnn_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "function_message_dim + edge_dimension + meta_data_dimension",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dimension",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_92": {
                "variable": {
                    "value": "function_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(function_state, sat_problem._edge_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_135": {
                "variable": {
                    "value": "self._constant",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_138": {
                "variable": {
                    "value": "self._module_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self._scorer]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mm_64": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b_variable_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "active_mask.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_65": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "variable_mask_transpose",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(b_variable_mask, active_mask.float())",
                            "Call"
                        ],
                        [
                            "torch.mm(variable_mask_transpose, mask)",
                            "Call"
                        ],
                        [
                            "torch.ones(edge_num, 1, device=self._device)",
                            "Call"
                        ],
                        [
                            "torch.mm(b_variable_mask, active_mask.float())",
                            "Call"
                        ],
                        [
                            "torch.mm(variable_mask_transpose, mask)",
                            "Call"
                        ],
                        [
                            "torch.ones(sat_problem._edge_num, 1, device=self._device)",
                            "Call"
                        ],
                        [
                            "mask.squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_68": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "edge_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_state[0].size(0)",
                            "Call"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_71": {
                "variable": {
                    "value": "graph_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b_variable_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "sat_problem._meta_data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_72": {
                "variable": {
                    "value": "graph_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "variable_mask_transpose",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "graph_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(b_variable_mask, sat_problem._meta_data)",
                            "Call"
                        ],
                        [
                            "torch.mm(variable_mask_transpose, graph_feat)",
                            "Call"
                        ],
                        [
                            "graph_feat",
                            "Method Argument"
                        ],
                        [
                            "graph_feat",
                            "Method Argument"
                        ],
                        [
                            "graph_feat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_80": {
                "variable": {
                    "value": "variable_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(variable_state, sat_problem._edge_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_82": {
                "variable": {
                    "value": "variable_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(variable_state, sat_problem._edge_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_87": {
                "variable": {
                    "value": "variable_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(variable_state, graph_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "function_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(function_state, graph_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_115": {
                "variable": {
                    "value": "variable_state",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "edge_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_state[0].size(0)",
                            "Call"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "self._hidden_dimension",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_116": {
                "variable": {
                    "value": "function_state",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "edge_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_state[0].size(0)",
                            "Call"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "self._hidden_dimension",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_143": {
                "variable": {
                    "value": "self._counters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "sat_problem._batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_168": {
                "variable": {
                    "value": "sum_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sat_problem._batch_mask_tuple[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "sum_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.sparse_smooth_max(function_diff, sat_problem._graph_mask_tuple[0], self._device)",
                            "Call"
                        ],
                        [
                            "sum_diff * sat_problem._active_variables",
                            "BinOp"
                        ],
                        [
                            "util.sparse_max(sum_diff.squeeze(1), sat_problem._batch_mask_tuple[0], self._device).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "(sum_diff < self._tolerance).float()",
                            "Call"
                        ],
                        [
                            "torch.mm(sat_problem._batch_mask_tuple[0], sum_diff)",
                            "Call"
                        ],
                        [
                            "util.sparse_smooth_max(function_diff, sat_problem._graph_mask_tuple[0], self._device)",
                            "Call"
                        ],
                        [
                            "sum_diff * sat_problem._active_variables",
                            "BinOp"
                        ],
                        [
                            "util.sparse_max(sum_diff.squeeze(1), sat_problem._batch_mask_tuple[0], self._device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_252": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "variable_mask_transpose",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.sign(score)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_252": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_264": {
                "variable": {
                    "value": "variable_state",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "edge_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_state[0].size(0)",
                            "Call"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "self._function_message_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_265": {
                "variable": {
                    "value": "function_state",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "edge_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_state[0].size(0)",
                            "Call"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "self._variable_message_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_240": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_245": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b_variable_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "active_mask.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_246": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "variable_mask_transpose",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(b_variable_mask, active_mask.float())",
                            "Call"
                        ],
                        [
                            "torch.mm(variable_mask_transpose, mask)",
                            "Call"
                        ],
                        [
                            "torch.ones(edge_num, 1, device=self._device)",
                            "Call"
                        ],
                        [
                            "torch.mm(b_variable_mask, active_mask.float())",
                            "Call"
                        ],
                        [
                            "torch.mm(variable_mask_transpose, mask)",
                            "Call"
                        ],
                        [
                            "torch.ones(sat_problem._edge_num, 1, device=self._device)",
                            "Call"
                        ],
                        [
                            "mask.squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_248": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sat_problem._edge_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_178": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sat_problem._batch_mask_tuple[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "coeff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "score.abs() * sat_problem._active_variables * sum_diff",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_268": {
                "*size": {
                    "value": "edge_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_state[0].size(0)",
                            "Call"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "self._function_message_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_269": {
                "*size": {
                    "value": "edge_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_state[0].size(0)",
                            "Call"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "self._variable_message_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_112": {
                "*size": {
                    "value": "edge_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_state[0].size(0)",
                            "Call"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "self._hidden_dimension",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_113": {
                "*size": {
                    "value": "edge_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_state[0].size(0)",
                            "Call"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "self._hidden_dimension",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_186": {
                "variable": {
                    "value": "assignment",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sat_problem._variable_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_252": {
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._scorer(message_state, sat_problem)",
                            "Call"
                        ],
                        [
                            "self._scorer(message_state, sat_problem)",
                            "Call"
                        ],
                        [
                            "torch.mm(variable_mask_transpose, torch.sign(score)).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/pdp/nn/pdp_predict.py": {
        "torch": {
            "ModuleList_28": {
                "variable": {
                    "value": "self._module_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_155": {
                "variable": {
                    "value": "self._eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[1e-10]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_156": {
                "variable": {
                    "value": "self._max_logit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[30.0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_157": {
                "variable": {
                    "value": "self._pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[pi]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sign_182": {
                "variable": {
                    "value": "external_force",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(variable_mask, function_message[:, 1].unsqueeze(1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_185": {
                "variable": {
                    "value": "edge_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "function_mask_transpose",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "sat_problem._active_functions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_59": {
                "variable": {
                    "value": "graph_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b_variable_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "sat_problem._meta_data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_60": {
                "variable": {
                    "value": "graph_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "variable_mask_transpose",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "graph_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(b_variable_mask, sat_problem._meta_data)",
                            "Call"
                        ],
                        [
                            "torch.mm(variable_mask_transpose, graph_feat)",
                            "Call"
                        ],
                        [
                            "graph_feat",
                            "Method Argument"
                        ],
                        [
                            "graph_feat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_70": {
                "variable": {
                    "value": "aggregated_variable_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(decimator_variable_state, sat_problem._edge_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_82": {
                "variable": {
                    "value": "aggregated_function_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(decimator_function_state, sat_problem._edge_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_104": {
                "variable": {
                    "value": "variable_state",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "edge_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "self._hidden_dimension",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_105": {
                "variable": {
                    "value": "function_state",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "edge_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "self._hidden_dimension",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_160": {
                "variable": {
                    "value": "self._projector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "message_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "message_dimension",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_161": {
                "variable": {
                    "value": "self._module_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self._projector]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_164": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_167": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_177": {
                "variable": {
                    "value": "function_message[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "function_message[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sign_178": {
                "variable": {
                    "value": "function_message[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "function_message[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_213": {
                "variable": {
                    "value": "variable_state",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "edge_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_215": {
                "variable": {
                    "value": "function_state",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "edge_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "aggregated_variable_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(aggregated_variable_state, graph_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "aggregated_function_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(aggregated_function_state, graph_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_140": {
                "variable": {
                    "value": "pred[sat_problem._active_variables[:, 0] > 0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "active_var_num.item()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_182": {
                "input": {
                    "value": "variable_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "function_message[:, 1].unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_188": {
                "input": {
                    "value": "p_variable_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "function_message",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._projector(message_state[1])",
                            "Call"
                        ],
                        [
                            "message_state[1]",
                            "Subscript"
                        ],
                        [
                            "self.safe_log(1 - function_message[:, 0]).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "function_message * edge_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_189": {
                "input": {
                    "value": "n_variable_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "function_message",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._projector(message_state[1])",
                            "Call"
                        ],
                        [
                            "message_state[1]",
                            "Subscript"
                        ],
                        [
                            "self.safe_log(1 - function_message[:, 0]).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "function_message * edge_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_193": {
                "input": {
                    "value": "variable_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "function_message",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._projector(message_state[1])",
                            "Call"
                        ],
                        [
                            "message_state[1]",
                            "Subscript"
                        ],
                        [
                            "self.safe_log(1 - function_message[:, 0]).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "function_message * edge_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_218": {
                "*size": {
                    "value": "edge_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_219": {
                "*size": {
                    "value": "edge_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_101": {
                "*size": {
                    "value": "edge_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "self._hidden_dimension",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_102": {
                "*size": {
                    "value": "edge_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "self._hidden_dimension",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_238": {
                "input": {
                    "value": "sat_problem._graph_mask_tuple[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sat_problem._solution.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "decimator_state[1][:, 1].unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "(torch.mm(sat_problem._graph_mask_tuple[0], pred) > 0).float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/pdp/nn/pdp_propagate.py": {
        "torch": {
            "ModuleList_29": {
                "variable": {
                    "value": "self._module_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "decimator_variable_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(decimator_variable_state, sat_problem._edge_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_109": {
                "variable": {
                    "value": "function_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "function_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask * self._variable_aggregator(decimator_variable_state, sat_problem._edge_feature, variable_mask, variable_mask_transpose, edge_mask) + (1 - mask) * function_state",
                            "BinOp"
                        ],
                        [
                            "F.dropout(function_state, p=self._drop_out, training=is_training)",
                            "Call"
                        ],
                        [
                            "2.0 * torch.rand(edge_num, self._hidden_dimension, dtype=torch.float32, device=self._device) - 1.0",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(edge_num, self._hidden_dimension, dtype=torch.float32, device=self._device)",
                            "Call"
                        ],
                        [
                            "mask * self.safe_exp(aggregated_variable_state) + (1 - mask) * function_state[:, 0].unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "torch.rand(edge_num, self._variable_message_dim, dtype=torch.float32, device=self._device)",
                            "Call"
                        ],
                        [
                            "0.5 * torch.ones(edge_num, self._variable_message_dim, dtype=torch.float32, device=self._device)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "self._drop_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_130": {
                "variable": {
                    "value": "variable_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "variable_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask * self._function_aggregator(decimator_function_state, sat_problem._edge_feature, function_mask, function_mask_transpose, edge_mask) + (1 - mask) * variable_state",
                            "BinOp"
                        ],
                        [
                            "F.dropout(variable_state, p=self._drop_out, training=is_training)",
                            "Call"
                        ],
                        [
                            "2.0 * torch.rand(edge_num, self._hidden_dimension, dtype=torch.float32, device=self._device) - 1.0",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(edge_num, self._hidden_dimension, dtype=torch.float32, device=self._device)",
                            "Call"
                        ],
                        [
                            "mask * temp + (1 - mask) * variable_state",
                            "BinOp"
                        ],
                        [
                            "torch.rand(edge_num, self._function_message_dim, dtype=torch.float32, device=self._device)",
                            "Call"
                        ],
                        [
                            "variable_state / torch.sum(variable_state, 1).unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "torch.ones(edge_num, self._function_message_dim, dtype=torch.float32, device=self._device) / self._function_message_dim",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "self._drop_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_172": {
                "variable": {
                    "value": "self._eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[1e-40]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_173": {
                "variable": {
                    "value": "self._max_logit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[30.0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_174": {
                "variable": {
                    "value": "self._pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[pi]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mm_219": {
                "variable": {
                    "value": "aggregated_variable_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "function_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "decimator_variable_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((decimator_variable_state, sat_problem._edge_feature), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((decimator_variable_state, graph_feat), 1)",
                            "Call"
                        ],
                        [
                            "F.logsigmoid(self._function_input_projector(decimator_variable_state))",
                            "Call"
                        ],
                        [
                            "self.safe_log(decimator_variable_state[:, 0]).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "decimator_variable_state * edge_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_220": {
                "variable": {
                    "value": "aggregated_variable_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "function_mask_transpose",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "aggregated_variable_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(function_mask, decimator_variable_state)",
                            "Call"
                        ],
                        [
                            "torch.mm(function_mask_transpose, aggregated_variable_state)",
                            "Call"
                        ],
                        [
                            "aggregated_variable_state - decimator_variable_state",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_238": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_variable_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "decimator_function_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((decimator_function_state, sat_problem._edge_feature.to(dtype=torch.float16)), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((decimator_function_state, sat_problem._edge_feature), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((decimator_function_state, graph_feat), 1)",
                            "Call"
                        ],
                        [
                            "self._variable_input_projector(decimator_function_state)",
                            "Call"
                        ],
                        [
                            "self.safe_log(1 - decimator_function_state[:, 0]).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "decimator_function_state * edge_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_239": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "variable_mask_transpose",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(p_variable_mask, decimator_function_state)",
                            "Call"
                        ],
                        [
                            "torch.mm(variable_mask_transpose, pos)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_240": {
                "variable": {
                    "value": "neg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n_variable_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "decimator_function_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((decimator_function_state, sat_problem._edge_feature.to(dtype=torch.float16)), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((decimator_function_state, sat_problem._edge_feature), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((decimator_function_state, graph_feat), 1)",
                            "Call"
                        ],
                        [
                            "self._variable_input_projector(decimator_function_state)",
                            "Call"
                        ],
                        [
                            "self.safe_log(1 - decimator_function_state[:, 0]).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "decimator_function_state * edge_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_241": {
                "variable": {
                    "value": "neg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "variable_mask_transpose",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(n_variable_mask, decimator_function_state)",
                            "Call"
                        ],
                        [
                            "torch.mm(variable_mask_transpose, neg)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_78": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b_variable_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "active_mask.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_79": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "variable_mask_transpose",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(b_variable_mask, active_mask.float())",
                            "Call"
                        ],
                        [
                            "torch.mm(variable_mask_transpose, mask)",
                            "Call"
                        ],
                        [
                            "torch.ones(edge_num, 1, device=self._device)",
                            "Call"
                        ],
                        [
                            "torch.mm(b_variable_mask, active_mask.float())",
                            "Call"
                        ],
                        [
                            "torch.mm(variable_mask_transpose, mask)",
                            "Call"
                        ],
                        [
                            "torch.ones(edge_num, 1, device=self._device)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_82": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "edge_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_state[0].size(0)",
                            "Call"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ],
                        [
                            "init_state[0].size(0)",
                            "Call"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_85": {
                "variable": {
                    "value": "graph_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b_variable_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "sat_problem._meta_data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_86": {
                "variable": {
                    "value": "graph_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "variable_mask_transpose",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "graph_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(b_variable_mask, sat_problem._meta_data)",
                            "Call"
                        ],
                        [
                            "torch.mm(variable_mask_transpose, graph_feat)",
                            "Call"
                        ],
                        [
                            "graph_feat",
                            "Method Argument"
                        ],
                        [
                            "graph_feat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_104": {
                "variable": {
                    "value": "decimator_variable_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(decimator_variable_state, graph_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "decimator_function_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(decimator_function_state, sat_problem._edge_feature.to(dtype=torch.float16))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "decimator_function_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(decimator_function_state, sat_problem._edge_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_125": {
                "variable": {
                    "value": "decimator_function_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(decimator_function_state, graph_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_145": {
                "variable": {
                    "value": "variable_state",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "edge_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_state[0].size(0)",
                            "Call"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ],
                        [
                            "init_state[0].size(0)",
                            "Call"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "self._hidden_dimension",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_146": {
                "variable": {
                    "value": "function_state",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "edge_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_state[0].size(0)",
                            "Call"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ],
                        [
                            "init_state[0].size(0)",
                            "Call"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "self._hidden_dimension",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_177": {
                "variable": {
                    "value": "self._variable_input_projector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "decimator_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decimator_dimension",
                            "Method Argument"
                        ],
                        [
                            "decimator_dimension",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self._variable_message_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_178": {
                "variable": {
                    "value": "self._function_input_projector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "decimator_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decimator_dimension",
                            "Method Argument"
                        ],
                        [
                            "decimator_dimension",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_179": {
                "variable": {
                    "value": "self._module_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self._variable_input_projector, self._function_input_projector]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_182": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_185": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_195": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b_variable_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "active_mask.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_196": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "variable_mask_transpose",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(b_variable_mask, active_mask.float())",
                            "Call"
                        ],
                        [
                            "torch.mm(variable_mask_transpose, mask)",
                            "Call"
                        ],
                        [
                            "torch.ones(edge_num, 1, device=self._device)",
                            "Call"
                        ],
                        [
                            "torch.mm(b_variable_mask, active_mask.float())",
                            "Call"
                        ],
                        [
                            "torch.mm(variable_mask_transpose, mask)",
                            "Call"
                        ],
                        [
                            "torch.ones(edge_num, 1, device=self._device)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_199": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "edge_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_state[0].size(0)",
                            "Call"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ],
                        [
                            "init_state[0].size(0)",
                            "Call"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logsigmoid_212": {
                "variable": {
                    "value": "decimator_variable_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._function_input_projector(decimator_variable_state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_229": {
                "variable": {
                    "value": "decimator_function_state[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "decimator_function_state[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sign_230": {
                "variable": {
                    "value": "decimator_function_state[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "decimator_function_state[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_276": {
                "variable": {
                    "value": "variable_state",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "edge_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_state[0].size(0)",
                            "Call"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ],
                        [
                            "init_state[0].size(0)",
                            "Call"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "self._function_message_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_278": {
                "variable": {
                    "value": "function_state",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "edge_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_state[0].size(0)",
                            "Call"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ],
                        [
                            "init_state[0].size(0)",
                            "Call"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "self._variable_message_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_264": {
                "tensors": {
                    "value": "(q_u, q_s, dont_care)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_269": {
                "tensors": {
                    "value": "(function_state, external_force)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_277": {
                "input": {
                    "value": "variable_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask * self._function_aggregator(decimator_function_state, sat_problem._edge_feature, function_mask, function_mask_transpose, edge_mask) + (1 - mask) * variable_state",
                            "BinOp"
                        ],
                        [
                            "F.dropout(variable_state, p=self._drop_out, training=is_training)",
                            "Call"
                        ],
                        [
                            "2.0 * torch.rand(edge_num, self._hidden_dimension, dtype=torch.float32, device=self._device) - 1.0",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(edge_num, self._hidden_dimension, dtype=torch.float32, device=self._device)",
                            "Call"
                        ],
                        [
                            "mask * temp + (1 - mask) * variable_state",
                            "BinOp"
                        ],
                        [
                            "torch.rand(edge_num, self._function_message_dim, dtype=torch.float32, device=self._device)",
                            "Call"
                        ],
                        [
                            "variable_state / torch.sum(variable_state, 1).unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "torch.ones(edge_num, self._function_message_dim, dtype=torch.float32, device=self._device) / self._function_message_dim",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_277": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_281": {
                "*size": {
                    "value": "edge_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_state[0].size(0)",
                            "Call"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ],
                        [
                            "init_state[0].size(0)",
                            "Call"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "self._function_message_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_282": {
                "*size": {
                    "value": "edge_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_state[0].size(0)",
                            "Call"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ],
                        [
                            "init_state[0].size(0)",
                            "Call"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "self._variable_message_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_142": {
                "*size": {
                    "value": "edge_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_state[0].size(0)",
                            "Call"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ],
                        [
                            "init_state[0].size(0)",
                            "Call"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "self._hidden_dimension",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_143": {
                "*size": {
                    "value": "edge_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_state[0].size(0)",
                            "Call"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ],
                        [
                            "init_state[0].size(0)",
                            "Call"
                        ],
                        [
                            "graph_map.size(1) * batch_replication",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "self._hidden_dimension",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/pdp/nn/solver.py": {
        "torch": {
            "ones_51": {
                "variable": {
                    "value": "self._active_variables",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self._variable_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_52": {
                "variable": {
                    "value": "self._active_functions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self._function_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_67": {
                "variable": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_replication",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if is_training else batch_replication",
                            "IfExp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "batch_replication",
                            "Method Argument"
                        ],
                        [
                            "batch_replication",
                            "Method Argument"
                        ],
                        [
                            "batch_replication",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "batch_replication",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_67": {
                "variable": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_70": {
                "variable": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_replication",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if is_training else batch_replication",
                            "IfExp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "batch_replication",
                            "Method Argument"
                        ],
                        [
                            "batch_replication",
                            "Method Argument"
                        ],
                        [
                            "batch_replication",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "batch_replication",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_70": {
                "variable": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_73": {
                "variable": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_replication",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if is_training else batch_replication",
                            "IfExp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "batch_replication",
                            "Method Argument"
                        ],
                        [
                            "batch_replication",
                            "Method Argument"
                        ],
                        [
                            "batch_replication",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "batch_replication",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_73": {
                "variable": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_88": {
                "variable": {
                    "value": "x_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size * batch_replication",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_89": {
                "variable": {
                    "value": "y_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(batch_variable_map.max() + 1).long().item()",
                            "Call"
                        ],
                        [
                            "(batch_variable_map.max() + 1).long().item()",
                            "Call"
                        ],
                        [
                            "(batch_variable_map.max() + 1).long().item()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_90": {
                "variable": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_ind, y_ind]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_91": {
                "variable": {
                    "value": "all_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size * batch_replication",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_107": {
                "variable": {
                    "value": "all_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "edge_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph_map.size()[1]",
                            "Subscript"
                        ],
                        [
                            "graph_map.size()[1]",
                            "Subscript"
                        ],
                        [
                            "graph_map.size()[1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_128": {
                "variable": {
                    "value": "variable_all_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "variable_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_variable_map.size()[0]",
                            "Subscript"
                        ],
                        [
                            "batch_variable_map.size()[0]",
                            "Subscript"
                        ],
                        [
                            "batch_variable_map.size()[0]",
                            "Subscript"
                        ],
                        [
                            "batch_variable_map.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_129": {
                "variable": {
                    "value": "function_all_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "function_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_function_map.size()[0]",
                            "Subscript"
                        ],
                        [
                            "batch_function_map.size()[0]",
                            "Subscript"
                        ],
                        [
                            "batch_function_map.size()[0]",
                            "Subscript"
                        ],
                        [
                            "batch_function_map.size()[0]",
                            "Subscript"
                        ],
                        [
                            "batch_function_map.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_130": {
                "variable": {
                    "value": "variable_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "variable_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_variable_map.size()[0]",
                            "Subscript"
                        ],
                        [
                            "batch_variable_map.size()[0]",
                            "Subscript"
                        ],
                        [
                            "batch_variable_map.size()[0]",
                            "Subscript"
                        ],
                        [
                            "batch_variable_map.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_131": {
                "variable": {
                    "value": "function_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "function_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_function_map.size()[0]",
                            "Subscript"
                        ],
                        [
                            "batch_function_map.size()[0]",
                            "Subscript"
                        ],
                        [
                            "batch_function_map.size()[0]",
                            "Subscript"
                        ],
                        [
                            "batch_function_map.size()[0]",
                            "Subscript"
                        ],
                        [
                            "batch_function_map.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_134": {
                "variable": {
                    "value": "variable_sparse_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[variable_range, batch_variable_map.long()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_135": {
                "variable": {
                    "value": "function_sparse_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[function_range, batch_function_map.long()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_161": {
                "variable": {
                    "value": "edge_num_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "edge_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph_map.size()[1]",
                            "Subscript"
                        ],
                        [
                            "graph_map.size()[1]",
                            "Subscript"
                        ],
                        [
                            "graph_map.size()[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_163": {
                "variable": {
                    "value": "variable_sparse_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[graph_map[0, :].long(), edge_num_range]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_164": {
                "variable": {
                    "value": "function_sparse_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[graph_map[1, :].long(), edge_num_range]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mm_224": {
                "variable": {
                    "value": "variable_degree",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vf_map",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self._active_functions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_225": {
                "variable": {
                    "value": "signed_variable_degree",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "signed_vf_map.to(torch.float)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self._active_functions.to(torch.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_252": {
                "variable": {
                    "value": "input_num",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vf_map_transpose",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "assignment.abs()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_255": {
                "variable": {
                    "value": "function_eval",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "signed_vf_map_transpose",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "assignment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "assignment * self._active_variables",
                            "BinOp"
                        ],
                        [
                            "torch.sign(variable_eval) * assigned_variables",
                            "BinOp"
                        ],
                        [
                            "2 * prediction[0] - 1.0",
                            "BinOp"
                        ],
                        [
                            "(prediction[0] > 0.5).float()",
                            "Call"
                        ],
                        [
                            "sat_problem._active_variables * (2 * assignment - 1.0)",
                            "BinOp"
                        ],
                        [
                            "assignment",
                            "Method Argument"
                        ],
                        [
                            "assignment",
                            "Method Argument"
                        ],
                        [
                            "assignment",
                            "Method Argument"
                        ],
                        [
                            "assignment",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_339": {
                "variable": {
                    "value": "self._module_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_349": {
                "variable": {
                    "value": "self._global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([0], dtype=torch.float, device=self._device)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_454": {
                "variable": {
                    "value": "batch_flag",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sat_problem._batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_457": {
                "variable": {
                    "value": "flag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sat_problem._batch_mask_tuple[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "batch_flag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(sat_problem._batch_size, 1, device=self._device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_460": {
                "variable": {
                    "value": "flag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sat_problem._graph_mask_tuple[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "flag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(sat_problem._batch_mask_tuple[0], batch_flag)",
                            "Call"
                        ],
                        [
                            "torch.mm(sat_problem._graph_mask_tuple[1], flag)",
                            "Call"
                        ],
                        [
                            "torch.mm(sat_problem._batch_mask_tuple[2], batch_flag)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_515": {
                "variable": {
                    "value": "distributed_assignment",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sat_problem._signed_mask_tuple[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "assignment * sat_problem._active_variables",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_516": {
                "variable": {
                    "value": "aggregated_assignment",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sat_problem._graph_mask_tuple[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "distributed_assignment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(sat_problem._signed_mask_tuple[1], assignment * sat_problem._active_variables)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_517": {
                "variable": {
                    "value": "aggregated_assignment",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sat_problem._graph_mask_tuple[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "aggregated_assignment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(sat_problem._graph_mask_tuple[2], distributed_assignment)",
                            "Call"
                        ],
                        [
                            "torch.mm(sat_problem._graph_mask_tuple[3], aggregated_assignment)",
                            "Call"
                        ],
                        [
                            "aggregated_assignment - distributed_assignment",
                            "BinOp"
                        ],
                        [
                            "torch.mm(sat_problem._signed_mask_tuple[1], assignment * sat_problem._active_variables)",
                            "Call"
                        ],
                        [
                            "torch.mm(sat_problem._graph_mask_tuple[2], aggregated_assignment)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_520": {
                "variable": {
                    "value": "function_degree",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sat_problem._graph_mask_tuple[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "sat_problem._active_variables",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_521": {
                "variable": {
                    "value": "function_degree",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sat_problem._graph_mask_tuple[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "function_degree",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(vf_map_transpose, self._active_variables)",
                            "Call"
                        ],
                        [
                            "torch.mm(sat_problem._graph_mask_tuple[1], sat_problem._active_variables)",
                            "Call"
                        ],
                        [
                            "torch.mm(sat_problem._graph_mask_tuple[2], function_degree)",
                            "Call"
                        ],
                        [
                            "torch.mm(sat_problem._graph_mask_tuple[3], function_degree)",
                            "Call"
                        ],
                        [
                            "torch.mm(sat_problem._graph_mask_tuple[1], sat_problem._active_variables)",
                            "Call"
                        ],
                        [
                            "torch.mm(sat_problem._graph_mask_tuple[2], function_degree)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_522": {
                "variable": {
                    "value": "function_degree",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sat_problem._graph_mask_tuple[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "function_degree",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(vf_map_transpose, self._active_variables)",
                            "Call"
                        ],
                        [
                            "torch.mm(sat_problem._graph_mask_tuple[1], sat_problem._active_variables)",
                            "Call"
                        ],
                        [
                            "torch.mm(sat_problem._graph_mask_tuple[2], function_degree)",
                            "Call"
                        ],
                        [
                            "torch.mm(sat_problem._graph_mask_tuple[3], function_degree)",
                            "Call"
                        ],
                        [
                            "torch.mm(sat_problem._graph_mask_tuple[1], sat_problem._active_variables)",
                            "Call"
                        ],
                        [
                            "torch.mm(sat_problem._graph_mask_tuple[2], function_degree)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_525": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sat_problem._graph_mask_tuple[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "critical_edges * distributed_assignment",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_532": {
                "variable": {
                    "value": "aggregated_assignment",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sat_problem._signed_mask_tuple[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "assignment * sat_problem._active_variables",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_533": {
                "variable": {
                    "value": "aggregated_assignment",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sat_problem._graph_mask_tuple[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "aggregated_assignment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(sat_problem._graph_mask_tuple[2], distributed_assignment)",
                            "Call"
                        ],
                        [
                            "torch.mm(sat_problem._graph_mask_tuple[3], aggregated_assignment)",
                            "Call"
                        ],
                        [
                            "aggregated_assignment - distributed_assignment",
                            "BinOp"
                        ],
                        [
                            "torch.mm(sat_problem._signed_mask_tuple[1], assignment * sat_problem._active_variables)",
                            "Call"
                        ],
                        [
                            "torch.mm(sat_problem._graph_mask_tuple[2], aggregated_assignment)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_535": {
                "variable": {
                    "value": "function_degree",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sat_problem._graph_mask_tuple[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "sat_problem._active_variables",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_536": {
                "variable": {
                    "value": "function_degree",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sat_problem._graph_mask_tuple[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "function_degree",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(vf_map_transpose, self._active_variables)",
                            "Call"
                        ],
                        [
                            "torch.mm(sat_problem._graph_mask_tuple[1], sat_problem._active_variables)",
                            "Call"
                        ],
                        [
                            "torch.mm(sat_problem._graph_mask_tuple[2], function_degree)",
                            "Call"
                        ],
                        [
                            "torch.mm(sat_problem._graph_mask_tuple[3], function_degree)",
                            "Call"
                        ],
                        [
                            "torch.mm(sat_problem._graph_mask_tuple[1], sat_problem._active_variables)",
                            "Call"
                        ],
                        [
                            "torch.mm(sat_problem._graph_mask_tuple[2], function_degree)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_159": {
                "variable": {
                    "value": "edge_values",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "edge_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph_map.size()[1]",
                            "Subscript"
                        ],
                        [
                            "graph_map.size()[1]",
                            "Subscript"
                        ],
                        [
                            "graph_map.size()[1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_274": {
                "variable": {
                    "value": "function_degree",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vf_map_transpose",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self._active_variables",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_281": {
                "variable": {
                    "value": "input_num",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vf_map",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "single_functions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.mm(vf_map_transpose, single_variables) > 0).float() * self._active_functions",
                            "BinOp"
                        ],
                        [
                            "(function_degree == 1).float() * self._active_functions",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_284": {
                "variable": {
                    "value": "variable_eval",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "signed_vf_map",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "single_functions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.mm(vf_map_transpose, single_variables) > 0).float() * self._active_functions",
                            "BinOp"
                        ],
                        [
                            "(function_degree == 1).float() * self._active_functions",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_358": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(export_path_base, self._name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_403": {
                "variable": {
                    "value": "active_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sat_problem._batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_405": {
                "start": {
                    "value": "iteration_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "iteration_num",
                            "Method Argument"
                        ],
                        [
                            "iteration_num",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_471": {
                "variable": {
                    "value": "flag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sat_problem._batch_mask_tuple[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "batch_flag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(sat_problem._batch_size, 1, device=self._device)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_53": {
                "*size": {
                    "value": "self._variable_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_56": {
                "*size": {
                    "value": "self._batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_291": {
                "variable": {
                    "value": "unsat_examples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b_variable_mask_transpose",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "conflict_variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(variable_eval.abs() != input_num).float() * self._active_variables",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_349": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_361": {
                "f": {
                    "value": "os.path.join(import_path_base, self._name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_482": {
                "input": {
                    "value": "sat_problem._graph_mask_tuple[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "sat_problem._active_variables",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_483": {
                "input": {
                    "value": "sat_problem._graph_mask_tuple[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "sat_problem._active_functions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_539": {
                "input": {
                    "value": "sat_problem._batch_mask_tuple[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "unsat_functions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(b_function_mask, unsat_examples) * self._active_functions",
                            "BinOp"
                        ],
                        [
                            "self._compute_energy(assignment, sat_problem)",
                            "Call"
                        ],
                        [
                            "(aggregated_assignment == -function_degree).float() * sat_problem._active_functions",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_68": {
                "data": {
                    "value": "[[variable_num], [function_num]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_230": {
                "input": {
                    "value": "single_variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(variable_degree == signed_variable_degree.abs()).float() * self._active_variables",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_234": {
                "input": {
                    "value": "vf_map",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "single_functions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.mm(vf_map_transpose, single_variables) > 0).float() * self._active_functions",
                            "BinOp"
                        ],
                        [
                            "(function_degree == 1).float() * self._active_functions",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_235": {
                "input": {
                    "value": "signed_vf_map.to(torch.float)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "single_functions.to(torch.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_277": {
                "input": {
                    "value": "single_functions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.mm(vf_map_transpose, single_variables) > 0).float() * self._active_functions",
                            "BinOp"
                        ],
                        [
                            "(function_degree == 1).float() * self._active_functions",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_288": {
                "input": {
                    "value": "conflict_variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(variable_eval.abs() != input_num).float() * self._active_variables",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sign_306": {
                "input": {
                    "value": "variable_eval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(signed_vf_map, single_functions)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_410": {
                "input": {
                    "value": "sat_problem._graph_mask_tuple[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "sat_problem._active_variables",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_411": {
                "input": {
                    "value": "sat_problem._graph_mask_tuple[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "sat_problem._active_functions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_499": {
                "input": {
                    "value": "sat_problem._vf_mask_tuple[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "unsat_functions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(b_function_mask, unsat_examples) * self._active_functions",
                            "BinOp"
                        ],
                        [
                            "self._compute_energy(assignment, sat_problem)",
                            "Call"
                        ],
                        [
                            "(aggregated_assignment == -function_degree).float() * sat_problem._active_functions",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_500": {
                "*size": {
                    "value": "[sat_problem._variable_num, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_295": {
                "input": {
                    "value": "b_function_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "unsat_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(b_variable_mask_transpose, conflict_variables)",
                            "Call"
                        ],
                        [
                            "self._compute_energy(assignment, sat_problem)",
                            "Call"
                        ],
                        [
                            "(unsat_examples > 0).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_299": {
                "input": {
                    "value": "b_variable_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "unsat_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(b_variable_mask_transpose, conflict_variables)",
                            "Call"
                        ],
                        [
                            "self._compute_energy(assignment, sat_problem)",
                            "Call"
                        ],
                        [
                            "(unsat_examples > 0).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_503": {
                "*size": {
                    "value": "sat_problem._batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_233": {
                "input": {
                    "value": "vf_map_transpose",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "single_variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(variable_degree == signed_variable_degree.abs()).float() * self._active_variables",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_490": {
                "input": {
                    "value": "sat_problem._replication_mask_tuple[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "1 - unsat_examples",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/pdp/nn/util.py": {
        "torch": {
            "ModuleList_20": {
                "variable": {
                    "value": "self._module_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_114": {
                "variable": {
                    "value": "self._module_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_122": {
                "variable": {
                    "value": "self._output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer_dims[self._layer_num - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layer_dims[self._layer_num]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_154": {
                "variable": {
                    "value": "all_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "edge_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph_map.size(1)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_155": {
                "variable": {
                    "value": "edge_num_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "edge_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph_map.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_157": {
                "variable": {
                    "value": "variable_sparse_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edge_num_range, graph_map[0, :].long()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_158": {
                "variable": {
                    "value": "function_sparse_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[graph_map[1, :].long(), edge_num_range]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_177": {
                "variable": {
                    "value": "variable_all_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "variable_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_variable_map.size(0)",
                            "Call"
                        ],
                        [
                            "batch_variable_map.size()[0]",
                            "Subscript"
                        ],
                        [
                            "batch_variable_map.size(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_178": {
                "variable": {
                    "value": "function_all_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "function_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_function_map.size(0)",
                            "Call"
                        ],
                        [
                            "batch_function_map.size()[0]",
                            "Subscript"
                        ],
                        [
                            "batch_function_map.size(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_179": {
                "variable": {
                    "value": "variable_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "variable_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_variable_map.size(0)",
                            "Call"
                        ],
                        [
                            "batch_variable_map.size()[0]",
                            "Subscript"
                        ],
                        [
                            "batch_variable_map.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_180": {
                "variable": {
                    "value": "function_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "function_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_function_map.size(0)",
                            "Call"
                        ],
                        [
                            "batch_function_map.size()[0]",
                            "Subscript"
                        ],
                        [
                            "batch_function_map.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_183": {
                "variable": {
                    "value": "variable_sparse_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[variable_range, batch_variable_map.long()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_184": {
                "variable": {
                    "value": "function_sparse_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[function_range, batch_function_map.long()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mm_215": {
                "variable": {
                    "value": "edge_values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "signed_variable_mask_transpose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SatLossEvaluator.compute_masks(graph_map, batch_variable_map, batch_function_map, edge_feature, self._device)",
                            "Call"
                        ],
                        [
                            "SatLossEvaluator.compute_masks(graph_map, batch_variable_map, batch_function_map, edge_feature, self._device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "variable_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable_prediction",
                            "Method Argument"
                        ],
                        [
                            "variable_prediction",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mm_220": {
                "variable": {
                    "value": "nominator",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "function_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.sparse.FloatTensor(function_sparse_ind, all_ones, torch.Size([function_num, edge_num]), device=device)",
                            "Call"
                        ],
                        [
                            "torch.sparse.FloatTensor(function_sparse_ind, all_ones, torch.Size([function_num, edge_num]), device=device)",
                            "Call"
                        ],
                        [
                            "torch.cuda.sparse.FloatTensor(function_sparse_ind, function_all_ones, torch.Size([function_num, batch_size]), device=device)",
                            "Call"
                        ],
                        [
                            "torch.sparse.FloatTensor(function_sparse_ind, function_all_ones, torch.Size([function_num, batch_size]), device=device)",
                            "Call"
                        ],
                        [
                            "SatLossEvaluator.compute_masks(graph_map, batch_variable_map, batch_function_map, edge_feature, self._device)",
                            "Call"
                        ],
                        [
                            "SatLossEvaluator.compute_masks(graph_map, batch_variable_map, batch_function_map, edge_feature, self._device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "weights * edge_values",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_221": {
                "variable": {
                    "value": "denominator",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "function_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.sparse.FloatTensor(function_sparse_ind, all_ones, torch.Size([function_num, edge_num]), device=device)",
                            "Call"
                        ],
                        [
                            "torch.sparse.FloatTensor(function_sparse_ind, all_ones, torch.Size([function_num, edge_num]), device=device)",
                            "Call"
                        ],
                        [
                            "torch.cuda.sparse.FloatTensor(function_sparse_ind, function_all_ones, torch.Size([function_num, batch_size]), device=device)",
                            "Call"
                        ],
                        [
                            "torch.sparse.FloatTensor(function_sparse_ind, function_all_ones, torch.Size([function_num, batch_size]), device=device)",
                            "Call"
                        ],
                        [
                            "SatLossEvaluator.compute_masks(graph_map, batch_variable_map, batch_function_map, edge_feature, self._device)",
                            "Call"
                        ],
                        [
                            "SatLossEvaluator.compute_masks(graph_map, batch_variable_map, batch_function_map, edge_feature, self._device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(coeff * edge_values).exp()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_245": {
                "variable": {
                    "value": "all_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "function_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_function_map.size(0)",
                            "Call"
                        ],
                        [
                            "batch_function_map.size()[0]",
                            "Subscript"
                        ],
                        [
                            "batch_function_map.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_255": {
                "variable": {
                    "value": "edge_values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "signed_variable_mask_transpose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SatLossEvaluator.compute_masks(graph_map, batch_variable_map, batch_function_map, edge_feature, self._device)",
                            "Call"
                        ],
                        [
                            "SatLossEvaluator.compute_masks(graph_map, batch_variable_map, batch_function_map, edge_feature, self._device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "variable_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable_prediction",
                            "Method Argument"
                        ],
                        [
                            "variable_prediction",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mm_259": {
                "variable": {
                    "value": "clause_values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "function_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.sparse.FloatTensor(function_sparse_ind, all_ones, torch.Size([function_num, edge_num]), device=device)",
                            "Call"
                        ],
                        [
                            "torch.sparse.FloatTensor(function_sparse_ind, all_ones, torch.Size([function_num, edge_num]), device=device)",
                            "Call"
                        ],
                        [
                            "torch.cuda.sparse.FloatTensor(function_sparse_ind, function_all_ones, torch.Size([function_num, batch_size]), device=device)",
                            "Call"
                        ],
                        [
                            "torch.sparse.FloatTensor(function_sparse_ind, function_all_ones, torch.Size([function_num, batch_size]), device=device)",
                            "Call"
                        ],
                        [
                            "SatLossEvaluator.compute_masks(graph_map, batch_variable_map, batch_function_map, edge_feature, self._device)",
                            "Call"
                        ],
                        [
                            "SatLossEvaluator.compute_masks(graph_map, batch_variable_map, batch_function_map, edge_feature, self._device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "edge_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(signed_variable_mask_transpose, variable_prediction)",
                            "Call"
                        ],
                        [
                            "edge_values + (1 - edge_feature) / 2",
                            "BinOp"
                        ],
                        [
                            "torch.mm(signed_variable_mask_transpose, variable_prediction)",
                            "Call"
                        ],
                        [
                            "edge_values + (1 - edge_feature) / 2",
                            "BinOp"
                        ],
                        [
                            "(edge_values > 0.5).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_263": {
                "variable": {
                    "value": "max_sat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b_function_mask_transpose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SatLossEvaluator.compute_batch_mask(batch_variable_map, batch_function_map, self._device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "all_ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(edge_num, device=device)",
                            "Call"
                        ],
                        [
                            "torch.ones(function_num, 1, device=self._device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_264": {
                "variable": {
                    "value": "batch_values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b_function_mask_transpose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SatLossEvaluator.compute_batch_mask(batch_variable_map, batch_function_map, self._device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "clause_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(function_mask, edge_values)",
                            "Call"
                        ],
                        [
                            "(clause_values > 0).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_277": {
                "variable": {
                    "value": "self._layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dimension",
                            "Method Argument"
                        ],
                        [
                            "input_dimension",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dimension",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_278": {
                "variable": {
                    "value": "self._layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dimension",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dimension",
                            "Method Argument"
                        ],
                        [
                            "output_dimension",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_295": {
                "input": {
                    "value": "dense_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.sparse.FloatTensor(mask._indices(), x - x.min() + 1, mask.size(), device=device).to_dense()",
                            "Call"
                        ],
                        [
                            "torch.sparse.FloatTensor(mask._indices(), x - x.min() + 1, mask.size(), device=device).to_dense()",
                            "Call"
                        ],
                        [
                            "torch.cuda.sparse.FloatTensor(mask._indices(), x - x.min() + 1, mask.size(), device=device).to_dense()",
                            "Call"
                        ],
                        [
                            "torch.sparse.FloatTensor(mask._indices(), x - x.min() + 1, mask.size(), device=device).to_dense()",
                            "Call"
                        ]
                    ]
                }
            },
            "min_310": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "F.relu(layer(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_310": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self._W1_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dimension",
                            "Method Argument"
                        ],
                        [
                            "input_dimension",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "mem_hidden_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mem_hidden_dimension",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self._W2_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mem_hidden_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mem_hidden_dimension",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "mem_agg_hidden_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mem_agg_hidden_dimension",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self._W1_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mem_agg_hidden_dimension + feature_dimension",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "agg_hidden_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "agg_hidden_dimension",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self._W2_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "agg_hidden_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "agg_hidden_dimension",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dimension",
                            "Method Argument"
                        ],
                        [
                            "output_dimension",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "logsigmoid_63": {
                "input": {
                    "value": "self._W1_m(state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_70": {
                "variable": {
                    "value": "aggregated_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.to(dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.logsigmoid(self._W2_m(F.logsigmoid(self._W1_m(state))))",
                            "Call"
                        ],
                        [
                            "state * edge_mask",
                            "BinOp"
                        ],
                        [
                            "state.to(dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mm_73": {
                "variable": {
                    "value": "aggregated_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.to(dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.logsigmoid(self._W2_m(F.logsigmoid(self._W1_m(state))))",
                            "Call"
                        ],
                        [
                            "state * edge_mask",
                            "BinOp"
                        ],
                        [
                            "state.to(dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "logsigmoid_99": {
                "input": {
                    "value": "self._W1_a(aggregated_state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_129": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "layer(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_131": {
                "input": {
                    "value": "self._output_layer(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_147": {
                "data": {
                    "value": "torch.max(x, eps).log()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "min_207": {
                "variable": {
                    "value": "coeff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "global_step.pow(self._alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_209": {
                "variable": {
                    "value": "coeff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "global_step.pow(self._alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_225": {
                "input": {
                    "value": "SatLossEvaluator.safe_log(clause_value, eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_281": {
                "input": {
                    "value": "self._layer2(F.relu(self._layer1(inp), inplace=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_316": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.to(dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "coeff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "safe_exp(alpha * x, device)",
                            "Call"
                        ],
                        [
                            "torch.min(global_step.pow(self._alpha), torch.tensor([max_coeff], device=self._device, dtype=torch.float16))",
                            "Call"
                        ],
                        [
                            "torch.min(global_step.pow(self._alpha), torch.tensor([max_coeff], device=self._device))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_316": {
                "input": {
                    "value": "torch.mm(mask, coeff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_79": {
                "variable": {
                    "value": "aggregated_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_transpose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_transpose.to(dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "mask_transpose",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "aggregated_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(mask, state)",
                            "Call"
                        ],
                        [
                            "torch.mm(mask, state)",
                            "Call"
                        ],
                        [
                            "aggregated_state.to(dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.mm(mask_transpose, aggregated_state).to(dtype=torch.half)",
                            "Call"
                        ],
                        [
                            "torch.mm(mask_transpose, aggregated_state)",
                            "Call"
                        ],
                        [
                            "aggregated_state.to(dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.cat((aggregated_state, feature), 1).to(dtype=torch.half)",
                            "Call"
                        ],
                        [
                            "torch.cat((aggregated_state, feature), 1)",
                            "Call"
                        ],
                        [
                            "F.logsigmoid(self._W2_a(F.logsigmoid(self._W1_a(aggregated_state))))",
                            "Call"
                        ],
                        [
                            "aggregated_state - state * edge_mask",
                            "BinOp"
                        ],
                        [
                            "aggregated_state - state",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_81": {
                "variable": {
                    "value": "aggregated_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_transpose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_transpose.to(dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "mask_transpose",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "aggregated_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(mask, state)",
                            "Call"
                        ],
                        [
                            "torch.mm(mask, state)",
                            "Call"
                        ],
                        [
                            "aggregated_state.to(dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.mm(mask_transpose, aggregated_state).to(dtype=torch.half)",
                            "Call"
                        ],
                        [
                            "torch.mm(mask_transpose, aggregated_state)",
                            "Call"
                        ],
                        [
                            "aggregated_state.to(dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.cat((aggregated_state, feature), 1).to(dtype=torch.half)",
                            "Call"
                        ],
                        [
                            "torch.cat((aggregated_state, feature), 1)",
                            "Call"
                        ],
                        [
                            "F.logsigmoid(self._W2_a(F.logsigmoid(self._W1_a(aggregated_state))))",
                            "Call"
                        ],
                        [
                            "aggregated_state - state * edge_mask",
                            "BinOp"
                        ],
                        [
                            "aggregated_state - state",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_92": {
                "variable": {
                    "value": "aggregated_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(aggregated_state, feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "aggregated_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(aggregated_state, feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_147": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "F.relu(layer(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_223": {
                "input": {
                    "value": "nominator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(function_mask, weights * edge_values)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_316": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_119": {
                "in_features": {
                    "value": "layer_dims[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layer_dims[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_207": {
                "data": {
                    "value": "[max_coeff]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_209": {
                "data": {
                    "value": "[max_coeff]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_281": {
                "input": {
                    "value": "self._layer1(inp)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_305": {
                "input": {
                    "value": "dense_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.sparse.FloatTensor(mask._indices(), x - x.min() + 1, mask.size(), device=device).to_dense()",
                            "Call"
                        ],
                        [
                            "torch.sparse.FloatTensor(mask._indices(), x - x.min() + 1, mask.size(), device=device).to_dense()",
                            "Call"
                        ],
                        [
                            "torch.cuda.sparse.FloatTensor(mask._indices(), x - x.min() + 1, mask.size(), device=device).to_dense()",
                            "Call"
                        ],
                        [
                            "torch.sparse.FloatTensor(mask._indices(), x - x.min() + 1, mask.size(), device=device).to_dense()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_310": {
                "data": {
                    "value": "[30.0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_206": {
                "data": {
                    "value": "[max_coeff]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/pdp/trainer.py": {
        "torch": {
            "Linear_30": {
                "variable": {
                    "value": "self._layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dimension",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dimension",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self._layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dimension",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dimension",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_34": {
                "input": {
                    "value": "self._layer2(F.relu(self._layer1(inp), inplace=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_169": {
                "tensors": {
                    "value": "[accuracy, recall, loss_value]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_272": {
                "variable": {
                    "value": "real_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sat_problem._replication_mask_tuple[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "(output > 0.5).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_273": {
                "variable": {
                    "value": "dup_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sat_problem._replication_mask_tuple[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "(real_batch == 0).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_47": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_159": {
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_159": {
                "input": {
                    "value": "torch.sum(label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_34": {
                "input": {
                    "value": "self._layer1(inp)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "L1Loss_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/pdp/transformer/Beam.py": {
        "torch": {
            "zeros_21": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sort_76": {
                "input": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "full_28": {
                "size": {
                    "value": "(size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "Constants.PAD",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/pdp/transformer/Layers.py": {
        "torch": {}
    },
    "src/pdp/transformer/Models.py": {
        "torch": {
            "triu_47": {
                "variable": {
                    "value": "subsequent_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones((len_s, len_s), device=seq.device, dtype=torch.uint8)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_66": {
                "variable": {
                    "value": "self.src_word_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_src_vocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_src_vocab",
                            "Method Argument"
                        ],
                        [
                            "n_src_vocab",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "d_word_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_word_vec",
                            "Method Argument"
                        ],
                        [
                            "150",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "Constants.PAD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_73": {
                "variable": {
                    "value": "self.layer_stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EncoderLayer(d_model, d_inner, n_head, d_k, d_v, dropout=dropout) for _ in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ones_48": {
                "*size": {
                    "value": "(len_s, len_s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "seq.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/pdp/transformer/Modules.py": {
        "torch": {
            "Dropout_12": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Softmax_13": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_17": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_25": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn / self.temperature",
                            "BinOp"
                        ],
                        [
                            "attn.masked_fill(mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/pdp/transformer/SubLayers.py": {
        "torch": {
            "Linear_18": {
                "variable": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_head * int(d_k)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.w_ks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_head * int(d_k)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.w_vs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_head * int(d_v)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LayerNorm_26": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_head * int(d_v)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_31": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_68": {
                "variable": {
                    "value": "self.w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "d_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_hid",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_69": {
                "variable": {
                    "value": "self.w_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_hid",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "d_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_in",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_70": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_in",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_71": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_76": {
                "input": {
                    "value": "self.w_1(output)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/pdp/transformer/Translator.py": {
        "torch": {
            "device_15": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if opt.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_17": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogSoftmax_39": {
                "variable": {
                    "value": "model.word_prob_prj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_86": {
                "variable": {
                    "value": "dec_partial_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dec_partial_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[b.get_current_state() for b in inst_dec_beams if not b.done]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(dec_partial_seq).to(self.device)",
                            "Call"
                        ],
                        [
                            "dec_partial_seq.view(-1, len_dec_seq)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_91": {
                "variable": {
                    "value": "dec_partial_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "len_dec_seq + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_98": {
                "variable": {
                    "value": "word_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.model.tgt_word_prj(dec_output)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}