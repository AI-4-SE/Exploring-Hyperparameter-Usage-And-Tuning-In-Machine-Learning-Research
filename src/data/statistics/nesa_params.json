{
    "dataset.py": {
        "torch": {
            "DataLoader_467": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Vectorize(self.test_data, self.config)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.config.batch_size",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SortedBatchSampler(test_dataset.lengths(), batch_size, shuffle=False)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "self.config.data_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self.batchify",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_480": {
                "variable": {
                    "value": "users",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[example[0] for example in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_481": {
                "variable": {
                    "value": "durs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[example[1] for example in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_490": {
                "variable": {
                    "value": "grids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[example[10].unsqueeze(0) for example in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_491": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[example[11] for example in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_595": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.config.sm_day_num * self.config.sm_slot_num",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_436": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Vectorize(self.train_data, self.config)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.config.batch_size",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SortedBatchSampler(train_dataset.lengths(), batch_size, shuffle=shuffle)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "self.config.data_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self.batchify",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_452": {
                "variable": {
                    "value": "valid_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Vectorize(self.valid_data, self.config)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.config.batch_size",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "valid_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SortedBatchSampler(valid_dataset.lengths(), batch_size, shuffle=False)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "self.config.data_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self.batchify",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "device_20": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Embedding_26": {
                "variable": {
                    "value": "self.char_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.char_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.char_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_29": {
                "variable": {
                    "value": "self.word_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.word_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.word_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_83": {
                "variable": {
                    "value": "self.tc_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(config.char_embed_dim, config.tc_conv_fn[i], (config.tc_conv_fh[i], config.tc_conv_fw[i]), stride=1) for i in range(len(config.tc_conv_fn))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_87": {
                "variable": {
                    "value": "self.tc_conv_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.BatchNorm2d(num_tc_conv_f) for num_tc_conv_f in config.tc_conv_fn]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_131": {
                "variable": {
                    "value": "self.mt_nonl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.mt_idim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mt_idim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_132": {
                "variable": {
                    "value": "self.mt_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.mt_idim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mt_idim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_133": {
                "variable": {
                    "value": "self.output_fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.mt_idim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.sm_day_num * config.sm_slot_num",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_143": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_147": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_152": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "class_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_210": {
                "variable": {
                    "value": "h_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "rnn_ln * self.num_directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tl.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "hdim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_213": {
                "variable": {
                    "value": "c_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "rnn_ln * self.num_directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tl.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "hdim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_260": {
                "variable": {
                    "value": "(rnn_out, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "rnn_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_out.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "rnn_out[idx_unsort]",
                            "Subscript"
                        ],
                        [
                            "rnn_out.view(-1, rnn_hdim * self.num_directions).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "self.batch_first",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_323": {
                "variable": {
                    "value": "tc_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, batch_max_seqlen, batch_max_wordlen)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_335": {
                "variable": {
                    "value": "tw_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, batch_max_seqlen)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_348": {
                "variable": {
                    "value": "(_, idx_unsort)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "perm_idxes",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_360": {
                "variable": {
                    "value": "tc_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.unsqueeze(tc_embed, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_376": {
                "variable": {
                    "value": "conv_result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "conv_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(conv_result, dim=2)",
                            "Call"
                        ],
                        [
                            "conv_result.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_398": {
                "variable": {
                    "value": "rnn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(conv_result, tw_embed)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_402": {
                "variable": {
                    "value": "packed_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rnn_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((conv_result, tw_embed), 2)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "tl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tl[idx_unsort]",
                            "Subscript"
                        ],
                        [
                            "torch.LongTensor(tl).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "self.batch_first",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rrelu_433": {
                "variable": {
                    "value": "nonl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.it_nonl(concat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_434": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.it_gate(concat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_594": {
                "variable": {
                    "value": "slot_all",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "total_slots",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.config.sm_day_num * self.config.sm_slot_num",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_612": {
                "variable": {
                    "value": "context_map",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "total_slots",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.config.sm_day_num * self.config.sm_slot_num",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "self.sm_conv1_idim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_640": {
                "variable": {
                    "value": "context_mf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(total_slots, self.sm_conv1_idim).to(self.device)",
                            "Call"
                        ],
                        [
                            "context_map.view(self.config.sm_day_num, self.config.sm_slot_num, self.sm_conv1_idim)",
                            "Call"
                        ],
                        [
                            "context_map.permute(2, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rrelu_675": {
                "variable": {
                    "value": "nonl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mt_nonl(concat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_676": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mt_gate(concat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_678": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output - et * 99999.0",
                            "BinOp"
                        ],
                        [
                            "torch.mul(gate, nonl) + torch.mul(1 - gate, concat)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(output, p=self.config.output_dr, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.matching_layer(title_rep, intention_rep, None, None)",
                            "Call"
                        ],
                        [
                            "self.matching_layer(title_rep, intention_rep, context_mf, gr)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.config.output_dr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_787": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.config.checkpoint_dir, self.config.model_name + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config.checkpoint_dir, filename + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config.checkpoint_dir, self.config.model_name + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config.checkpoint_dir, filename + '.pth')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "None if 'cuda' == self.device.type else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Embedding_34": {
                "variable": {
                    "value": "self.user_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.user_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.user_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_37": {
                "variable": {
                    "value": "self.dur_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.dur_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.dur_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_49": {
                "variable": {
                    "value": "self.slot_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.slot_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_61": {
                "variable": {
                    "value": "self.empty_st_rnn_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.config.st_rnn_hdim * self.num_directions",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_93": {
                "variable": {
                    "value": "self.sm_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(self.sm_conv1_idim, config.sm_conv_fn[i], (config.sm_conv_fh[i], config.sm_conv_fw[i]), stride=1, padding=config.sm_conv_pd[i]) for i in range(0, len(config.sm_conv_fn) // 2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "MaxPool2d_98": {
                "variable": {
                    "value": "self.sm_mp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_99": {
                "variable": {
                    "value": "self.sm_conv1_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.sm_conv2_idim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_100": {
                "variable": {
                    "value": "self.sm_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(self.sm_conv2_idim, config.sm_conv_fn[i + len(config.sm_conv_fn) // 2], (config.sm_conv_fh[i], config.sm_conv_fw[i]), stride=1, padding=config.sm_conv_pd[i]) for i in range(len(config.sm_conv_fn) // 2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "MaxPool2d_106": {
                "variable": {
                    "value": "self.sm_mp2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_107": {
                "variable": {
                    "value": "self.sm_conv2_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.context_odim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_114": {
                "variable": {
                    "value": "self.t_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.t_rnn_idim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "config.t_rnn_dr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "self.batch_first",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "self.bidirectional",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_121": {
                "variable": {
                    "value": "self.st_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.st_rnn_idim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "config.st_rnn_dr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "self.batch_first",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "self.bidirectional",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_129": {
                "variable": {
                    "value": "self.it_nonl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.it_idim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.it_idim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_130": {
                "variable": {
                    "value": "self.it_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.it_idim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.it_idim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_355": {
                "variable": {
                    "value": "tc_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tc_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.char_embed(tc_tensor.view(-1, batch_max_wordlen))",
                            "Call"
                        ],
                        [
                            "F.dropout(tc_embed, p=self.config.char_dr, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.transpose(torch.unsqueeze(tc_embed, 2), 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.config.char_dr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_385": {
                "variable": {
                    "value": "tw_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tw_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.word_embed(tw_tensor)",
                            "Call"
                        ],
                        [
                            "F.dropout(tw_embed, p=self.config.word_dr, training=self.training)",
                            "Call"
                        ],
                        [
                            "tw_embed.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.config.word_dr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_430": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(user, dur, title)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_432": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(user, dur)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_519": {
                "tensors": {
                    "value": "context_rep_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_602": {
                "variable": {
                    "value": "zero_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "total_slots",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.config.sm_day_num * self.config.sm_slot_num",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "self.config.st_rnn_hdim * self.num_directions",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_606": {
                "variable": {
                    "value": "context_base",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(zero_concat, user_all_embed, slot_all_embed)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_609": {
                "variable": {
                    "value": "context_base",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(user_all_embed, slot_all_embed)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_647": {
                "variable": {
                    "value": "context_mf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "conv_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(conv_result, dim=2)",
                            "Call"
                        ],
                        [
                            "conv_result.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_671": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "concat_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_777": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.config.checkpoint_dir, self.config.model_name + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config.checkpoint_dir, filename + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config.checkpoint_dir, self.config.model_name + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config.checkpoint_dir, filename + '.pth')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_40": {
                "variable": {
                    "value": "self.dur_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.dur_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_160": {
                "ndarray": {
                    "value": "np.array(widx2vec)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_252": {
                "variable": {
                    "value": "ht",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ht[0], ht[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_256": {
                "input": {
                    "value": "ht",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ht[:, idx_unsort]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((ht[0], ht[1]), dim=1)",
                            "Call"
                        ],
                        [
                            "ht[0]",
                            "Subscript"
                        ]
                    ]
                },
                "p": {
                    "value": "rnn_out_dr",
                    "type": "variable",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_295": {
                "input": {
                    "value": "torch.cat((selected_fw, selected_bw), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "rnn_out_dr",
                    "type": "variable",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_299": {
                "input": {
                    "value": "selected_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_out[fw_idxes]",
                            "Subscript"
                        ],
                        [
                            "selected_fw[:, :rnn_hdim]",
                            "Subscript"
                        ]
                    ]
                },
                "p": {
                    "value": "rnn_out_dr",
                    "type": "variable",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_360": {
                "input": {
                    "value": "tc_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.char_embed(tc_tensor.view(-1, batch_max_wordlen))",
                            "Call"
                        ],
                        [
                            "F.dropout(tc_embed, p=self.config.char_dr, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.transpose(torch.unsqueeze(tc_embed, 2), 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_435": {
                "input": {
                    "value": "1 - gate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((user, dur, title), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((user, dur), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(concat_seq, 1)",
                            "Call"
                        ],
                        [
                            "concat_seq[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_494": {
                "variable": {
                    "value": "usr_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "usr_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(usr_emb, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(usr_emb, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_515": {
                "variable": {
                    "value": "usr_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "usr_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(usr_emb, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(usr_emb, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_560": {
                "variable": {
                    "value": "new_title",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_title",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(new_title, 0).view(-1, self.config.st_rnn_hdim * self.num_directions)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_562": {
                "variable": {
                    "value": "slot_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.slot_embed(new_slot)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "self.config.slot_dr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_570": {
                "variable": {
                    "value": "context_contents",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(new_title, user_src_embed, slot_embed)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_582": {
                "variable": {
                    "value": "slot_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.slot_embed(new_slot)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "self.config.slot_dr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_589": {
                "variable": {
                    "value": "context_contents",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(user_src_embed, slot_embed)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rrelu_649": {
                "variable": {
                    "value": "context_mf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sm_conv1_bn(context_mf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_677": {
                "input": {
                    "value": "1 - gate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((user, dur, title), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((user, dur), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(concat_seq, 1)",
                            "Call"
                        ],
                        [
                            "concat_seq[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "dropout_711": {
                "variable": {
                    "value": "user_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "user_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.user_embed(user.to(self.device))",
                            "Call"
                        ],
                        [
                            "F.dropout(user_embed, p=self.config.user_dr, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.config.user_dr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_722": {
                "variable": {
                    "value": "dur_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dur_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dur_embed(dur.to(self.device))",
                            "Call"
                        ],
                        [
                            "F.dropout(dur_embed, p=self.config.dur_dr, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.config.dur_dr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_755": {
                "input": {
                    "value": "param.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_860": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "k": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_891": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "in_channels": {
                    "value": "config.char_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "config.tc_conv_fn[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(config.tc_conv_fh[i], config.tc_conv_fw[i])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_88": {
                "num_features": {
                    "value": "num_tc_conv_f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_289": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tl.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_295": {
                "tensors": {
                    "value": "(selected_fw, selected_bw)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_368": {
                "input": {
                    "value": "torch.tanh(conv_bn(tc_conv))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ceil_533": {
                "input": {
                    "value": "dur.float() / (30 * self.config.class_div)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "topk_823": {
                "input": {
                    "value": "_o",
                    "type": "variable",
                    "possible_values": []
                },
                "k": {
                    "value": "topk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_45": {
                "ndarray": {
                    "value": "didx2vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((config.dur_size, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_93": {
                "in_channels": {
                    "value": "self.sm_conv1_idim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "config.sm_conv_fn[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(config.sm_conv_fh[i], config.sm_conv_fw[i])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "config.sm_conv_pd[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "in_channels": {
                    "value": "self.sm_conv2_idim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "config.sm_conv_fn[i + len(config.sm_conv_fn) // 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(config.sm_conv_fh[i], config.sm_conv_fw[i])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "config.sm_conv_pd[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_279": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tl.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_368": {
                "input": {
                    "value": "conv_bn(tc_conv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_651": {
                "input": {
                    "value": "self.sm_conv2_bn(context_mf).view(1, context_mf.size(1), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "load_24": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "None if 'cuda' == dvc.type else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_109": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_86": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_88": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_89": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}