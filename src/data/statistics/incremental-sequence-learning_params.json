{
    "model.py": {
        "tensorflow": {
            "zeros_22": {
                "variable": {
                    "value": "classvars",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "zeros_23": {
                "variable": {
                    "value": "classpred",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "sigmoid_41": {
                "variable": {
                    "value": "z_eos",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z_eos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z[:, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.sigmoid(z_eos)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_44": {
                "variable": {
                    "value": "z_eod",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z_eod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z[:, 1]",
                            "Subscript"
                        ],
                        [
                            "tf.sigmoid(z_eod)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_46": {
                "variable": {
                    "value": "(z_pi, z_mu1, z_mu2, z_sigma1, z_sigma2, z_corr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "z[:, 2:last]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_51": {
                "variable": {
                    "value": "max_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "z_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(z_pi, max_pi)",
                            "Call"
                        ],
                        [
                            "tf.exp(z_pi)",
                            "Call"
                        ],
                        [
                            "tf.multiply(normalize_pi, z_pi)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "subtract_52": {
                "variable": {
                    "value": "z_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(z_pi, max_pi)",
                            "Call"
                        ],
                        [
                            "tf.exp(z_pi)",
                            "Call"
                        ],
                        [
                            "tf.multiply(normalize_pi, z_pi)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "max_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(z_pi, 1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_54": {
                "variable": {
                    "value": "z_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(z_pi, max_pi)",
                            "Call"
                        ],
                        [
                            "tf.exp(z_pi)",
                            "Call"
                        ],
                        [
                            "tf.multiply(normalize_pi, z_pi)",
                            "Call"
                        ]
                    ]
                }
            },
            "reciprocal_55": {
                "variable": {
                    "value": "normalize_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(z_pi, 1, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_56": {
                "variable": {
                    "value": "z_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "normalize_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reciprocal(tf.reduce_sum(z_pi, 1, keep_dims=True))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "z_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(z_pi, max_pi)",
                            "Call"
                        ],
                        [
                            "tf.exp(z_pi)",
                            "Call"
                        ],
                        [
                            "tf.multiply(normalize_pi, z_pi)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_59": {
                "variable": {
                    "value": "z_sigma1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z_sigma1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(z_sigma1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_60": {
                "variable": {
                    "value": "z_sigma2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z_sigma2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(z_sigma2)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_61": {
                "variable": {
                    "value": "z_corr_tanh",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z_corr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "subtract_77": {
                "variable": {
                    "value": "norm1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "mu1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "subtract_78": {
                "variable": {
                    "value": "norm2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "mu2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multiply_79": {
                "variable": {
                    "value": "s1s2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "s1",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "s2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multiply_80": {
                "variable": {
                    "value": "normprod",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "norm1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(x1, mu1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "norm2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(x2, mu2)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_85": {
                "variable": {
                    "value": "result5",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.div(-self.z, 2 * negRho)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_88": {
                "variable": {
                    "value": "self.result6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "result5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.div(-self.z, 2 * negRho))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.denom",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_94": {
                "variable": {
                    "value": "trainablevars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_96": {
                "variable": {
                    "value": "weightsum",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "zeros_97": {
                "variable": {
                    "value": "nrweights",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "zeros_98": {
                "variable": {
                    "value": "self.maxabsweight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "zeros_113": {
                "variable": {
                    "value": "regularization_term",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "zeros_114": {
                "variable": {
                    "value": "nrvalues",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "sign_127": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.abs(tf.reduce_max(targetdata_classvars, reduction_indices=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_128": {
                "variable": {
                    "value": "self.result0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.tf_2d_normal(x1_data, x2_data, z_mu1, z_mu2, z_sigma1, z_sigma2, z_corr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_132": {
                "variable": {
                    "value": "self.result1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.result0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "z_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(z_pi, max_pi)",
                            "Call"
                        ],
                        [
                            "tf.exp(z_pi)",
                            "Call"
                        ],
                        [
                            "tf.multiply(normalize_pi, z_pi)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_134": {
                "variable": {
                    "value": "self.result1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.result1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_135": {
                "variable": {
                    "value": "self.result1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "-tf.log(self.result1 + epsilon)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_138": {
                "variable": {
                    "value": "eos_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eos_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(eos_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_144": {
                "variable": {
                    "value": "eod_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eod_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(eod_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_153": {
                "variable": {
                    "value": "self.lossnrpoints",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_159": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.abs(tf.reduce_max(targetdata_classvars, reduction_indices=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_161": {
                "variable": {
                    "value": "self.result4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "reduce_sum_174": {
                "variable": {
                    "value": "self.lossnrpoints",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_182": {
                "variable": {
                    "value": "self.result0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "zeros_183": {
                "variable": {
                    "value": "self.result1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "zeros_184": {
                "variable": {
                    "value": "self.result1_nomask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "zeros_185": {
                "variable": {
                    "value": "self.result2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "zeros_186": {
                "variable": {
                    "value": "self.result3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "zeros_187": {
                "variable": {
                    "value": "self.result4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "zeros_188": {
                "variable": {
                    "value": "self.crossentropy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "zeros_189": {
                "variable": {
                    "value": "self.lossvector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "zeros_190": {
                "variable": {
                    "value": "self.targetdata_classvars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "zeros_198": {
                "variable": {
                    "value": "self.regularization_term",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "zeros_199": {
                "variable": {
                    "value": "o_classvars",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "zeros_200": {
                "variable": {
                    "value": "o_classpred",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_205": {
                "variable": {
                    "value": "self.batch_size_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_206": {
                "variable": {
                    "value": "self.seq_length_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_285": {
                "variable": {
                    "value": "self.batch_size_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_293": {
                "variable": {
                    "value": "self.inputdatasize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.input_data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_294": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.input_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "seqlen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.seq_length - 1",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_295": {
                "variable": {
                    "value": "self.inputssize1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(self.input_data, seqlen, 1)",
                            "Call"
                        ],
                        [
                            "[tf.squeeze(input_, [1]) for input_ in inputs]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "shape_297": {
                "variable": {
                    "value": "self.inputssize2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(self.input_data, seqlen, 1)",
                            "Call"
                        ],
                        [
                            "[tf.squeeze(input_, [1]) for input_ in inputs]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "reshape_329": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.concat(output, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, args.rnn_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "xw_plus_b_330": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden1",
                            "Name"
                        ],
                        [
                            "hidden2",
                            "Name"
                        ],
                        [
                            "tf.reshape(tf.concat(output, 1), [-1, args.rnn_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.xw_plus_b(output, outputWeight, outputBias)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "outputWeight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('outputWeight', initializer=self.init_op_weights)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('outputWeight', [args.rnn_size, self.nroutputvars_raw])",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "outputBias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('outputBias', initializer=init_op_bias)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('outputBias', [self.nroutputvars_raw])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_337": {
                "variable": {
                    "value": "flat_target_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.target_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, nrtargetvars]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_339": {
                "variable": {
                    "value": "[x1_data, x2_data, eos_data, eod_data]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "flat_target_data[:, self.nrauxoutputvars:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_341": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Variable_368": {
                "variable": {
                    "value": "self.learningratevar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_369": {
                "variable": {
                    "value": "self.learningrate_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_370": {
                "variable": {
                    "value": "self.learningrateop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.learningratevar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.learningrate_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_372": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_27": {
                "variable": {
                    "value": "classpred",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "classvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(1, dtype=tf.float32, name=None)",
                            "Call"
                        ],
                        [
                            "z[:, last:]",
                            "Subscript"
                        ],
                        [
                            "o_classvars[0,]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "div_122": {
                "variable": {
                    "value": "regularization_term",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "regularization_term",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(1, dtype=tf.float32, name=None)",
                            "Call"
                        ],
                        [
                            "regularization_term + tf.nn.l2_loss(weight)",
                            "BinOp"
                        ],
                        [
                            "tf.div(regularization_term, nrvalues)",
                            "Call"
                        ],
                        [
                            "tf.maximum(regularization_term, tf.reduce_max(weight))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "nrvalues",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(1, dtype=tf.int32, name=None)",
                            "Call"
                        ],
                        [
                            "tf.add(nrvalues, tf.reduce_prod(tf.shape(weight)))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_163": {
                "variable": {
                    "value": "self.crossentropy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "z_classvars",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "targetdata_classvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat_target_data[:, :self.nrauxoutputvars]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "multiply_165": {
                "variable": {
                    "value": "self.result4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.result4",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_248": {
                "variable": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DropoutWrapper_275": {
                "variable": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cell_fn(args.rnn_size, use_peepholes=True)",
                            "Call"
                        ],
                        [
                            "cell_fn(args.rnn_size)",
                            "Call"
                        ],
                        [
                            "tf.zeros([1])",
                            "Call"
                        ],
                        [
                            "cell_fn(args.rnn_size, use_peepholes=True)",
                            "Call"
                        ],
                        [
                            "cell_fn(args.rnn_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(layers, output_keep_prob=args.keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.MultiRNNCell(cells=rnn_layers, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "args.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_280": {
                "variable": {
                    "value": "self.input_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1, nrinputvars_network]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_281": {
                "variable": {
                    "value": "self.target_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1, nrtargetvars]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_283": {
                "variable": {
                    "value": "self.input_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.seq_length - 1, nrinputvars_network]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_284": {
                "variable": {
                    "value": "self.target_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.seq_length - 1, nrtargetvars]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_288": {
                "variable": {
                    "value": "self.initial_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_301": {
                "variable": {
                    "value": "init_op_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.nroutputvars_raw]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "reshape_315": {
                "variable": {
                    "value": "inputs_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(self.input_data, seqlen, 1)",
                            "Call"
                        ],
                        [
                            "[tf.squeeze(input_, [1]) for input_ in inputs]",
                            "ListComp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, nrinputvars_network]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_323": {
                "variable": {
                    "value": "last_state",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_375": {
                "variable": {
                    "value": "self.gradient_org",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(1, dtype=tf.float32, name=None)",
                            "Call"
                        ],
                        [
                            "loss + self.regularization_term",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_376": {
                "variable": {
                    "value": "(self.gradient_clipped, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "self.gradient_org",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "args.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_377": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learningratevar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_55": {
                "input_tensor": {
                    "value": "z_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(z_pi, max_pi)",
                            "Call"
                        ],
                        [
                            "tf.exp(z_pi)",
                            "Call"
                        ],
                        [
                            "tf.multiply(normalize_pi, z_pi)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "square_84": {
                "x": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "div_85": {
                "x": {
                    "value": "-self.z",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2 * negRho",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_87": {
                "x": {
                    "value": "s1s2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(s1, s2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.sqrt(negRho)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_108": {
                "variable": {
                    "value": "nrweights",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "nrweights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(1, dtype=tf.int32, name=None)",
                            "Call"
                        ],
                        [
                            "tf.add(nrweights, tf.reduce_prod(tf.shape(var)))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reduce_prod(tf.shape(var))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_109": {
                "variable": {
                    "value": "maxval",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_110": {
                "variable": {
                    "value": "self.maxabsweight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "maxval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(tf.abs(var))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.maxabsweight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_111": {
                "x": {
                    "value": "nrweights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(1, dtype=tf.int32, name=None)",
                            "Call"
                        ],
                        [
                            "tf.add(nrweights, tf.reduce_prod(tf.shape(var)))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_118": {
                "variable": {
                    "value": "nrvalues",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "nrvalues",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(1, dtype=tf.int32, name=None)",
                            "Call"
                        ],
                        [
                            "tf.add(nrvalues, tf.reduce_prod(tf.shape(weight)))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reduce_prod(tf.shape(weight))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_120": {
                "variable": {
                    "value": "regularization_term",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "regularization_term",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(1, dtype=tf.float32, name=None)",
                            "Call"
                        ],
                        [
                            "regularization_term + tf.nn.l2_loss(weight)",
                            "BinOp"
                        ],
                        [
                            "tf.div(regularization_term, nrvalues)",
                            "Call"
                        ],
                        [
                            "tf.maximum(regularization_term, tf.reduce_max(weight))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reduce_max(weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_127": {
                "x": {
                    "value": "tf.reduce_max(targetdata_classvars, reduction_indices=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_141": {
                "x": {
                    "value": "1 - z_eos",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "1 - eos_data",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_142": {
                "x": {
                    "value": "self.result2 + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_145": {
                "x": {
                    "value": "1 - z_eod",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "1 - eod_data",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_146": {
                "x": {
                    "value": "self.result3 + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_155": {
                "input_tensor": {
                    "value": "self.result",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_159": {
                "x": {
                    "value": "tf.reduce_max(targetdata_classvars, reduction_indices=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_176": {
                "input_tensor": {
                    "value": "self.result",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_232": {
                "variable": {
                    "value": "init_op_bias_ffnn",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nrhidden]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "MultiRNNCell_266": {
                "variable": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "rnn_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_296": {
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_302": {
                "name_or_scope": {
                    "value": "trainpredictmode",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_304": {
                "variable": {
                    "value": "outputWeight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "outputWeight",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.init_op_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_305": {
                "variable": {
                    "value": "outputBias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "outputBias",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init_op_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([self.nroutputvars_raw], dtype=tf.float32, name=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_307": {
                "variable": {
                    "value": "outputWeight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "outputWeight",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[args.rnn_size, self.nroutputvars_raw]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_308": {
                "variable": {
                    "value": "outputBias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "outputBias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.nroutputvars_raw]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_318": {
                "variable": {
                    "value": "hidden1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(inputs_2d, weightsh1) + biasesh1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_321": {
                "variable": {
                    "value": "hidden2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(output, weightsh2) + biasesh2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "static_rnn_325": {
                "variable": {
                    "value": "(output, last_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cell_fn(args.rnn_size, use_peepholes=True)",
                            "Call"
                        ],
                        [
                            "cell_fn(args.rnn_size)",
                            "Call"
                        ],
                        [
                            "tf.zeros([1])",
                            "Call"
                        ],
                        [
                            "cell_fn(args.rnn_size, use_peepholes=True)",
                            "Call"
                        ],
                        [
                            "cell_fn(args.rnn_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(layers, output_keep_prob=args.keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.MultiRNNCell(cells=rnn_layers, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(self.input_data, seqlen, 1)",
                            "Call"
                        ],
                        [
                            "[tf.squeeze(input_, [1]) for input_ in inputs]",
                            "ListComp"
                        ]
                    ]
                },
                "initial_state": {
                    "value": "self.initial_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "trainpredictmode",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_329": {
                "values": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden1",
                            "Name"
                        ],
                        [
                            "hidden2",
                            "Name"
                        ],
                        [
                            "tf.reshape(tf.concat(output, 1), [-1, args.rnn_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.xw_plus_b(output, outputWeight, outputBias)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_374": {
                "name_or_scope": {
                    "value": "gradient",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_83": {
                "x": {
                    "value": "tf.div(norm2, s2 + epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_83": {
                "x": {
                    "value": "norm2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(x2, mu2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "s2 + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_87": {
                "x": {
                    "value": "negRho",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - tf.square(rho)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_max_127": {
                "input_tensor": {
                    "value": "targetdata_classvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat_target_data[:, :self.nrauxoutputvars]",
                            "Subscript"
                        ]
                    ]
                },
                "reduction_indices": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_135": {
                "x": {
                    "value": "self.result1 + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_159": {
                "input_tensor": {
                    "value": "targetdata_classvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat_target_data[:, :self.nrauxoutputvars]",
                            "Subscript"
                        ]
                    ]
                },
                "reduction_indices": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_235": {
                "variable": {
                    "value": "weightsh1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weightsh1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.init_op_weights_ffnn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_236": {
                "variable": {
                    "value": "biasesh1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biasesh1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init_op_bias_ffnn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([nrhidden], dtype=tf.float32, name=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_238": {
                "variable": {
                    "value": "weightsh1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weightsh1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nrinputs, nrhidden]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_239": {
                "variable": {
                    "value": "biasesh1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biasesh1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nrhidden]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_243": {
                "variable": {
                    "value": "weightsh2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weightsh2",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.init_op_weights_ffnn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_244": {
                "variable": {
                    "value": "biasesh2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biasesh2",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init_op_bias_ffnn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([nrhidden], dtype=tf.float32, name=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_246": {
                "variable": {
                    "value": "weightsh2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weightsh2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nrhidden, nrhidden]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_247": {
                "variable": {
                    "value": "biasesh2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biasesh2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nrhidden]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_83": {
                "x": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "normprod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(norm1, norm2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_107": {
                "input_tensor": {
                    "value": "tf.abs(var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_prod_108": {
                "input_tensor": {
                    "value": "tf.shape(var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_109": {
                "x": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trainablevars",
                            "Name"
                        ]
                    ]
                }
            },
            "l2_loss_117": {
                "t": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weights",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reduce_prod_118": {
                "input_tensor": {
                    "value": "tf.shape(weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_120": {
                "input_tensor": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weights",
                            "Attribute"
                        ]
                    ]
                }
            },
            "abs_107": {
                "x": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trainablevars",
                            "Name"
                        ]
                    ]
                }
            },
            "shape_108": {
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trainablevars",
                            "Name"
                        ]
                    ]
                }
            },
            "shape_118": {
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weights",
                            "Attribute"
                        ]
                    ]
                }
            },
            "matmul_318": {
                "a": {
                    "value": "inputs_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, nrinputvars_network])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weightsh1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weightsh1', initializer=self.init_op_weights_ffnn)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weightsh1', [nrinputs, nrhidden])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_321": {
                "a": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden1",
                            "Name"
                        ],
                        [
                            "hidden2",
                            "Name"
                        ],
                        [
                            "tf.reshape(tf.concat(output, 1), [-1, args.rnn_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.xw_plus_b(output, outputWeight, outputBias)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weightsh2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weightsh2', initializer=self.init_op_weights_ffnn)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weightsh2', [nrhidden, nrhidden])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "sample.py": {
        "tensorflow": {}
    },
    "stats.py": {
        "tensorflow": {}
    },
    "train.py": {
        "tensorflow": {
            "Saver_238": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.trainable_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "args.save_maxnrmodels_keep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_256": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.trainable_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "args.save_maxnrmodels_keep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "all_variables_459": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "all_variables_464": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "all_variables_535": {
                "variable": {
                    "value": "allvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_checkpoint_state_247": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "modelfile",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'save/' + saved_args.explabel",
                            "BinOp"
                        ],
                        [
                            "args.model_checkpointfile",
                            "Attribute"
                        ]
                    ]
                }
            },
            "get_collection_456": {
                "key": {
                    "value": "tf.GraphKeys.VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "gradient",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_random_seed_555": {
                "seed": {
                    "value": "100 * args.runnr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Saver_600": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.trainable_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "args.save_maxnrmodels_keep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_238": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_313": {
                "name_or_scope": {
                    "value": "trainpredictmode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Predict'",
                            "Constant"
                        ],
                        [
                            "'Predict'",
                            "Constant"
                        ]
                    ]
                }
            },
            "get_default_graph_442": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_589": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_599": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_599": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_600": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "tensorflow": {
            "set_random_seed_201": {
                "seed": {
                    "value": "100 * args.runnr",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}