{
    "graph_classification/src/dataset.py": {
        "sklearn": {
            "MinMaxScaler_29": {
                "variable": {
                    "value": "self.scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "graph_classification/src/evaluator.py": {
        "sklearn": {
            "confusion_matrix_127": {
                "variable": {
                    "value": "conf_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(y, 1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "[i for i in range(self.n_labels)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "f1_score_95": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {}
    },
    "graph_classification/src/graph_evaluator.py": {
        "sklearn": {
            "confusion_matrix_95": {
                "variable": {
                    "value": "conf_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(y, 1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "[i for i in range(self.n_labels)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "f1_score_63": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {}
    },
    "node_classification/src/dataset.py": {
        "sklearn": {
            "MinMaxScaler_24": {
                "variable": {
                    "value": "self.scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "node_classification/src/evaluator.py": {
        "sklearn": {
            "confusion_matrix_158": {
                "variable": {
                    "value": "conf_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(y, 1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "[i for i in range(self.n_labels)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "f1_score_126": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {}
    },
    "graph_classification/src/base/base_model.py": {
        "tensorflow": {
            "latest_checkpoint_26": {
                "variable": {
                    "value": "latest_checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self.config.checkpoint_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_35": {
                "variable": {
                    "value": "self.cur_epoch_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "cur_epoch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_36": {
                "variable": {
                    "value": "self.increment_cur_epoch_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.cur_epoch_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.cur_epoch_tensor + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_42": {
                "variable": {
                    "value": "self.global_step_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_34": {
                "name_or_scope": {
                    "value": "cur_epoch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "graph_classification/src/base/base_train.py": {
        "tensorflow": {}
    },
    "graph_classification/src/graph_trainer.py": {
        "tensorflow": {}
    },
    "graph_classification/src/logger.py": {
        "tensorflow": {}
    },
    "graph_classification/src/main.py": {
        "tensorflow": {
            "ConfigProto_30": {
                "variable": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_40": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(log_device_placement=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "group_42": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_60": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "trainable_variables_46": {
                "variable": {
                    "value": "model_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_19": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_61": {
                "checkpoint_dir": {
                    "value": "os.path.join(config.save_dir, exp_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "graph_classification/src/models/HATS.py": {
        "tensorflow": {
            "placeholder_with_default_83": {
                "variable": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_85": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.config.lookback, self.input_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_86": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_99": {
                "variable": {
                    "value": "graph_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat([self.g_state, pooled], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_101": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "graph_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.concat([self.g_state, pooled], 0), 0)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "prediction",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_103": {
                "variable": {
                    "value": "self.prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=graph_state, units=3, name='prediction', activation=tf.nn.leaky_relu)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_104": {
                "variable": {
                    "value": "self.prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=graph_state, units=3, name='prediction', activation=tf.nn.leaky_relu)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Saver_118": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "self.config.max_to_keep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_45": {
                "values": {
                    "value": "one_hots",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_50": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_77": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_state(price_model=self.config.price_model)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_88": {
                "variable": {
                    "value": "self.rel_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_89": {
                "variable": {
                    "value": "self.rel_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_107": {
                "variable": {
                    "value": "self.cross_entropy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits_v2(labels=self.y, logits=logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_108": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_113": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(self.y, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_114": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_31": {
                "name_or_scope": {
                    "value": "feat_ext_ops",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MultiRNNCell_37": {
                "variable": {
                    "value": "lstm_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.contrib.rnn.DropoutWrapper(cell, input_keep_prob=self.keep_prob, output_keep_prob=self.keep_prob) for cell in cells]",
                            "ListComp"
                        ]
                    ]
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dynamic_rnn_38": {
                "variable": {
                    "value": "(outputs, state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "lstm_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.MultiRNNCell(dropout, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_62": {
                "variable": {
                    "value": "node_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros([1, node_feats.shape[1]]), node_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_lookup_63": {
                "variable": {
                    "value": "neighbors",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "node_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.zeros([1, node_feats.shape[1]]), node_feats], 0)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.rel_mat",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_64": {
                "input": {
                    "value": "node_feats[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_65": {
                "variable": {
                    "value": "exp_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "exp_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.expand_dims(node_feats[1:], 1), 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(exp_state, [self.num_relations, 1, 20, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[self.num_relations, 1, 20, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_67": {
                "variable": {
                    "value": "att_x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[neighbors, exp_state, rel_embs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_68": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "att_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([neighbors, exp_state, rel_embs], -1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "state_attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_float_69": {
                "variable": {
                    "value": "att_mask_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(tf.sequence_mask(self.rel_num, 20), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_70": {
                "variable": {
                    "value": "att_score",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=att_x, units=1, name='state_attention')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_72": {
                "variable": {
                    "value": "updated_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "all_rel_rep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(neighbors * att_score, 2) / tf.expand_dims(tf.to_float(self.rel_num) + 1e-10, -1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_79": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_state(price_model=self.config.price_model)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_99": {
                "values": {
                    "value": "[self.g_state, pooled]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_106": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_110": {
                "variable": {
                    "value": "self.train_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.config.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_44": {
                "indices": {
                    "value": "[rel_idx]",
                    "type": "List",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_relations",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_58": {
                "variable": {
                    "value": "exp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(emb[i], 0), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self.num_companies, 20, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_60": {
                "values": {
                    "value": "emb_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "graph_ops",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_107": {
                "labels": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=graph_state, units=3, name='prediction', activation=tf.nn.leaky_relu)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_109": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_113": {
                "input": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_114": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(self.prediction, tf.argmax(self.y, -1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_34": {
                "num_units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DropoutWrapper_35": {
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "input_keep_prob": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_keep_prob": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_69": {
                "input": {
                    "value": "tf.sequence_mask(self.rel_num, 20)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_71": {
                "input_tensor": {
                    "value": "neighbors * att_score",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_71": {
                "input": {
                    "value": "tf.to_float(self.rel_num) + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_58": {
                "input": {
                    "value": "emb[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_59": {
                "input": {
                    "value": "exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(emb[i], 0), 0), [self.num_companies, 20, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "shape": {
                    "value": "[1, node_feats.shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sequence_mask_69": {
                "lengths": {
                    "value": "self.rel_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_71": {
                "x": {
                    "value": "self.rel_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "node_classification/src/base/base_model.py": {
        "tensorflow": {
            "latest_checkpoint_30": {
                "variable": {
                    "value": "latest_checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self.config.checkpoint_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_39": {
                "variable": {
                    "value": "self.cur_epoch_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "cur_epoch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_40": {
                "variable": {
                    "value": "self.increment_cur_epoch_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.cur_epoch_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.cur_epoch_tensor + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_46": {
                "variable": {
                    "value": "self.global_step_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "cur_epoch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_45": {
                "name_or_scope": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "node_classification/src/base/base_train.py": {
        "tensorflow": {}
    },
    "node_classification/src/logger.py": {
        "tensorflow": {}
    },
    "node_classification/src/main.py": {
        "tensorflow": {
            "ConfigProto_27": {
                "variable": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_37": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "group_39": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_53": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "trainable_variables_43": {
                "variable": {
                    "value": "model_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_15": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_54": {
                "checkpoint_dir": {
                    "value": "os.path.join(config.save_dir, exp_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "node_classification/src/models/HATS.py": {
        "tensorflow": {
            "placeholder_with_default_136": {
                "variable": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_138": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.config.lookback, self.input_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_139": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.n_labels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_140": {
                "variable": {
                    "value": "self.rel_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, self.neighbors_sample]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_141": {
                "variable": {
                    "value": "self.rel_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_142": {
                "variable": {
                    "value": "self.max_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "dense_156": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "updated_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(self.all_rel_rep * att_score, 0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(self.all_rel_rep, 0)",
                            "Call"
                        ],
                        [
                            "rel_summary + state[1:]",
                            "BinOp"
                        ]
                    ]
                },
                "units": {
                    "value": "self.n_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "prediction",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_159": {
                "variable": {
                    "value": "self.prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=updated_state, units=self.n_labels, activation=tf.nn.leaky_relu, name='prediction')",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_160": {
                "variable": {
                    "value": "self.prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=updated_state, units=self.n_labels, activation=tf.nn.leaky_relu, name='prediction')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Saver_176": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "self.config.max_to_keep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiRNNCell_37": {
                "variable": {
                    "value": "lstm_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.contrib.rnn.DropoutWrapper(cell, input_keep_prob=self.keep_prob, output_keep_prob=self.keep_prob) for cell in cells]",
                            "ListComp"
                        ]
                    ]
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dynamic_rnn_38": {
                "variable": {
                    "value": "(outputs, state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "lstm_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.MultiRNNCell(dropout, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_39": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros([1, state[-1][-1].shape[1]]), state[-1][-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_45": {
                "variable": {
                    "value": "rel_state",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.zeros([1, state[-1][-1].shape[1]]), state[-1][-1]], 0)",
                            "Call"
                        ],
                        [
                            "self.get_state('lstm')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.node_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "projection",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_52": {
                "variable": {
                    "value": "neighbors",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "node_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "rel_mat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "to_float_53": {
                "variable": {
                    "value": "mask_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(tf.sequence_mask(rel_num, self.max_k), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_54": {
                "variable": {
                    "value": "exp_node_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(node_feats[1:], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, self.max_k, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_55": {
                "variable": {
                    "value": "att_x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[neighbors, exp_node_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "embedding_lookup_82": {
                "variable": {
                    "value": "neighbors",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.zeros([1, state[-1][-1].shape[1]]), state[-1][-1]], 0)",
                            "Call"
                        ],
                        [
                            "self.get_state('lstm')",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.rel_mat",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_83": {
                "variable": {
                    "value": "mask_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(tf.sequence_mask(self.rel_num, self.max_k), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_120": {
                "name": {
                    "value": "Relation_embeddings",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_relations, 32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_126": {
                "values": {
                    "value": "one_hots",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_131": {
                "variable": {
                    "value": "exp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(emb[i], 0), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self.num_companies, self.neighbors_sample, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_133": {
                "values": {
                    "value": "emb_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_163": {
                "variable": {
                    "value": "self.cross_entropy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(labels=self.y, logits=logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_164": {
                "variable": {
                    "value": "reg_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_166": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_171": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(logits, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(self.y, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_172": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_44": {
                "name_or_scope": {
                    "value": "'relation_' + str(rel_idx)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_50": {
                "name_or_scope": {
                    "value": "'node_attention_' + str(rel_idx)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_60": {
                "name_or_scope": {
                    "value": "graph_ops",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_62": {
                "variable": {
                    "value": "neighbors",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.zeros([1, state[-1][-1].shape[1]]), state[-1][-1]], 0)",
                            "Call"
                        ],
                        [
                            "self.get_state('lstm')",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.rel_mat",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_64": {
                "input": {
                    "value": "state[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_65": {
                "variable": {
                    "value": "exp_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "exp_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.expand_dims(state[1:], 1), 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(exp_state, [self.num_relations, 1, self.max_k, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(state[1:], 1), 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(exp_state, [self.num_relations, 1, self.max_k, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[self.num_relations, 1, self.max_k, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_69": {
                "variable": {
                    "value": "att_x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[neighbors, exp_state, rel_embs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_71": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "att_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([neighbors, exp_node_feats], -1)",
                            "Call"
                        ],
                        [
                            "tf.concat([neighbors, exp_state, rel_embs], -1)",
                            "Call"
                        ],
                        [
                            "tf.concat([neighbors, exp_state], -1)",
                            "Call"
                        ],
                        [
                            "tf.concat([self.all_rel_rep, rel_emb], -1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "state_attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_float_72": {
                "variable": {
                    "value": "att_mask_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(tf.sequence_mask(self.rel_num, self.max_k), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_73": {
                "variable": {
                    "value": "att_score",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=att_x, units=1, name='state_attention')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=att_x, units=1, name='state_attention')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_80": {
                "name": {
                    "value": "graph_ops",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_87": {
                "input": {
                    "value": "state[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_88": {
                "variable": {
                    "value": "exp_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "exp_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.expand_dims(state[1:], 1), 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(exp_state, [self.num_relations, 1, self.max_k, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(state[1:], 1), 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(exp_state, [self.num_relations, 1, self.max_k, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[self.num_relations, 1, self.max_k, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_91": {
                "variable": {
                    "value": "att_x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[neighbors, exp_state]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_92": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "att_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([neighbors, exp_node_feats], -1)",
                            "Call"
                        ],
                        [
                            "tf.concat([neighbors, exp_state, rel_embs], -1)",
                            "Call"
                        ],
                        [
                            "tf.concat([neighbors, exp_state], -1)",
                            "Call"
                        ],
                        [
                            "tf.concat([self.all_rel_rep, rel_emb], -1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "state_attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_93": {
                "variable": {
                    "value": "att_score",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=att_x, units=1, name='state_attention')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=att_x, units=1, name='state_attention')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_104": {
                "variable": {
                    "value": "exp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(emb[i], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self.num_companies, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_106": {
                "values": {
                    "value": "emb_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_107": {
                "name": {
                    "value": "aggregate_ops",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_111": {
                "variable": {
                    "value": "att_x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.all_rel_rep, rel_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_112": {
                "variable": {
                    "value": "att_score",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.layers.dense(inputs=att_x, units=1, name='relation_attention')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_114": {
                "variable": {
                    "value": "updated_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.all_rel_rep * att_score",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_116": {
                "variable": {
                    "value": "updated_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.all_rel_rep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_162": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_168": {
                "variable": {
                    "value": "self.train_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.config.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_34": {
                "num_units": {
                    "value": "self.node_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DropoutWrapper_35": {
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "input_keep_prob": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_keep_prob": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_53": {
                "input": {
                    "value": "tf.sequence_mask(rel_num, self.max_k)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_54": {
                "input": {
                    "value": "node_feats[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_83": {
                "input": {
                    "value": "tf.sequence_mask(self.rel_num, self.max_k)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "one_hot_125": {
                "indices": {
                    "value": "[rel_idx]",
                    "type": "List",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_relations",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_131": {
                "input": {
                    "value": "emb[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_132": {
                "input": {
                    "value": "exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(emb[i], 0), [self.num_companies, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(emb[i], 0), 0), [self.num_companies, self.neighbors_sample, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_163": {
                "labels": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=updated_state, units=self.n_labels, activation=tf.nn.leaky_relu, name='prediction')",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_167": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_171": {
                "input": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_172": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(logits, -1), tf.argmax(self.y, -1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_39": {
                "shape": {
                    "value": "[1, state[-1][-1].shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sequence_mask_53": {
                "lengths": {
                    "value": "rel_num",
                    "type": "variable",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "self.max_k",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_72": {
                "input": {
                    "value": "tf.sequence_mask(self.rel_num, self.max_k)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_74": {
                "input_tensor": {
                    "value": "neighbors * att_score",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_74": {
                "input": {
                    "value": "tf.to_float(self.rel_num) + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sequence_mask_83": {
                "lengths": {
                    "value": "self.rel_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "self.max_k",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_94": {
                "input_tensor": {
                    "value": "neighbors * att_score",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_94": {
                "input": {
                    "value": "tf.to_float(self.rel_num) + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_96": {
                "input_tensor": {
                    "value": "neighbors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(node_feats, rel_mat)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(state, self.rel_mat)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(state, self.rel_mat)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_96": {
                "input": {
                    "value": "tf.to_float(self.rel_num) + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_104": {
                "input": {
                    "value": "emb[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_105": {
                "input": {
                    "value": "exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(emb[i], 0), [self.num_companies, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(emb[i], 0), 0), [self.num_companies, self.neighbors_sample, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_112": {
                "inputs": {
                    "value": "att_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([neighbors, exp_node_feats], -1)",
                            "Call"
                        ],
                        [
                            "tf.concat([neighbors, exp_state, rel_embs], -1)",
                            "Call"
                        ],
                        [
                            "tf.concat([neighbors, exp_state], -1)",
                            "Call"
                        ],
                        [
                            "tf.concat([self.all_rel_rep, rel_emb], -1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "relation_attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sequence_mask_72": {
                "lengths": {
                    "value": "self.rel_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "self.max_k",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_74": {
                "x": {
                    "value": "self.rel_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_94": {
                "x": {
                    "value": "self.rel_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_96": {
                "x": {
                    "value": "self.rel_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "node_classification/src/trainer.py": {
        "tensorflow": {}
    }
}