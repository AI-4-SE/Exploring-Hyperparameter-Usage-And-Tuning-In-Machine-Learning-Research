{
    "scripts/case_study.py": {
        "tensorflow": {}
    },
    "src_nq/create_examples.py": {
        "tensorflow": {
            "GFile_708": {
                "name": {
                    "value": "input_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "glob(args.input_pattern)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "manual_seed_287": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src_nq/dataset.py": {
        "tensorflow": {
            "GFile_36": {
                "name": {
                    "value": "input_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "modules/graph_encoder.py": {
        "torch": {
            "Parameter_148": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_149": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_169": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_170": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_171": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_176": {
                "variable": {
                    "value": "self.relative_key_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "max_relative_position * 2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.attention_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_178": {
                "variable": {
                    "value": "self.relative_value_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "max_relative_position * 2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.attention_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_180": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_189": {
                "variable": {
                    "value": "self.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.LongTensor(self.indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_215": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ],
                        [
                            "self.query(hidden_states).view(batch_size * seq_len, self.num_attention_heads, self.attention_head_size)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_247": {
                "variable": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ],
                        [
                            "self.value(hidden_states).view(batch_size * seq_len, self.num_attention_heads, self.attention_head_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_272": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_273": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_274": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_278": {
                "variable": {
                    "value": "self.relative_key_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_edge_types",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.attention_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_279": {
                "variable": {
                    "value": "self.relative_value_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_edge_types",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.attention_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_299": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(tgt_query_tensor * src_key_tensor).sum(-1) / math.sqrt(self.attention_head_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_329": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_331": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_367": {
                "variable": {
                    "value": "self_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[token_output, sentence_output, paragraph_output, input_tensor[:, -1:, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_381": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_393": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_395": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_423": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(layer) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Embedding_441": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "NodePosition.MAX_SENTENCE + NodePosition.MAX_PARAGRAPH + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_491": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_492": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "NodePosition.MAX_TOKEN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_493": {
                "variable": {
                    "value": "self.type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_495": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_499": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_116": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_220": {
                "variable": {
                    "value": "relative_attention_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ],
                        [
                            "self.query(hidden_states).view(batch_size * seq_len, self.num_attention_heads, self.attention_head_size)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.relative_key_embeddings.weight.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_251": {
                "variable": {
                    "value": "relative_attention_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relative_attention_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(query_layer, self.relative_key_embeddings.weight.transpose(-1, -2))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_253": {
                "variable": {
                    "value": "relative_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relative_attention_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros_like(relative_attention_scores)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.relative_value_embeddings.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_323": {
                "tensors": {
                    "value": "[hidden_states, output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_502": {
                "variable": {
                    "value": "type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "erf_112": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_148": {
                "*size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_149": {
                "*size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_155": {
                "input": {
                    "value": "s + self.variance_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_241": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_224": {
                "input": {
                    "value": "relative_attention_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(query_layer, self.relative_key_embeddings.weight.transpose(-1, -2))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "batch_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.indices.unsqueeze(0).unsqueeze(1).expand(batch_size, self.num_attention_heads, -1, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_479": {
                "input": {
                    "value": "edges_tgt",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src_nq/model.py": {
        "torch": {
            "Linear_13": {
                "variable": {
                    "value": "self.tok_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.para_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.doc_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.tok_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.para_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.answer_type_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_33": {
                "variable": {
                    "value": "tok_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.tok_dense(graph_output[:, :NodePosition.MAX_TOKEN, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_45": {
                "variable": {
                    "value": "para_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.para_dense(graph_output[:, para_start:para_end, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_51": {
                "variable": {
                    "value": "doc_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.doc_dense(graph_output[:, -1, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_57": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_72": {
                "input": {
                    "value": "torch.stack(loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_72": {
                "tensors": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "src_nq/run.py": {
        "torch": {
            "tensor_61": {
                "variable": {
                    "value": "unique_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.unique_id for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "variable": {
                    "value": "input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "variable": {
                    "value": "segment_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "variable": {
                    "value": "st_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.graph.st_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "variable": {
                    "value": "st_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.graph.st_index for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "edges_src",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "edges_src",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[torch.tensor(f.graph.edges_src, dtype=torch.long) for f in features]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(edges_src)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_86": {
                "variable": {
                    "value": "edges_tgt",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "edges_tgt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[torch.tensor(f.graph.edges_tgt, dtype=torch.long) for f in features]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(edges_tgt)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_87": {
                "variable": {
                    "value": "edges_type",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "edges_type",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[torch.tensor(f.graph.edges_type, dtype=torch.long) for f in features]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(edges_type)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_88": {
                "variable": {
                    "value": "edges_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "edges_pos",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[torch.tensor(f.graph.edges_pos, dtype=torch.long) for f in features]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(edges_pos)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_302": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "eval_dataset.features",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_303": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "eval_dataset.features",
                            "Attribute"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_features)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.predict_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "batcher(device, is_training=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_429": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_430": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_433": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_452": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_486": {
                "variable": {
                    "value": "pretrained_model_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_model_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.model_dir, WEIGHTS_NAME)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.model_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "tensor_73": {
                "variable": {
                    "value": "start_positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.start_positions for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "variable": {
                    "value": "end_positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.end_positions for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "variable": {
                    "value": "answer_type",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.answer_type for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_432": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_454": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_509": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "NqModel(bert_config=bert_config, my_config=my_config)",
                            "Call"
                        ],
                        [
                            "NqModel(bert_config=bert_config, my_config=my_config)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DDP(model)",
                            "Call"
                        ],
                        [
                            "NqModel(bert_config=bert_config, my_config=my_config)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_635": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_648": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "NqModel(bert_config=bert_config, my_config=my_config)",
                            "Call"
                        ],
                        [
                            "NqModel(bert_config=bert_config, my_config=my_config)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DDP(model)",
                            "Call"
                        ],
                        [
                            "NqModel(bert_config=bert_config, my_config=my_config)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_67": {
                "data": {
                    "value": "f.graph.edges_src",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "data": {
                    "value": "f.graph.edges_tgt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_69": {
                "data": {
                    "value": "f.graph.edges_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "data": {
                    "value": "f.graph.edges_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_495": {
                "f": {
                    "value": "pretrained_model_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.model_dir, WEIGHTS_NAME)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.model_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_580": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "train_dataset.features",
                            "Attribute"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(train_features)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_features)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "batcher(device, is_training=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_643": {
                "f": {
                    "value": "output_model_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_312": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomSampler_577": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "train_dataset.features",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DistributedSampler_579": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "train_dataset.features",
                            "Attribute"
                        ]
                    ]
                }
            },
            "is_available_429": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}