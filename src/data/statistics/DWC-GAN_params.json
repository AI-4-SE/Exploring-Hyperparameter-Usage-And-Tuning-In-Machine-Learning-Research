{
    "data_ios/celeba_data.py": {
        "torch": {
            "from_numpy_99": {
                "variable": {
                    "value": "txt2tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "txt2tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(txt2tensor).squeeze(0).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_99": {
                "variable": {
                    "value": "txt2tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_100": {
                "variable": {
                    "value": "txt_lens",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "txt_lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(txt_lens).squeeze(0).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_100": {
                "variable": {
                    "value": "txt_lens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_107": {
                "variable": {
                    "value": "src_label",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "src_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[str(v) for v in src_label]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(src_label).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_108": {
                "variable": {
                    "value": "trg_label",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "trg_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[str(v) for v in trg_label]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(trg_label).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_105": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, image, image]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "data_loader.py": {
        "torch": {
            "DataLoader_28": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "cur_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CelebA(image_dir, attr_path, selected_attrs, transform, mode)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "gmm.py": {
        "torch": {
            "abs_30": {
                "input": {
                    "value": "pred_mus - mus",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_30": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_40": {
                "input": {
                    "value": "pred_mu - mus[:, i:i + 1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_40": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_10": {
                "input": {
                    "value": "sigma / pred_sigma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_21": {
                "input": {
                    "value": "sigma / pred_sigma[i].exp()",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "networks/networks.py": {
        "torch": {
            "exp_31": {
                "variable": {
                    "value": "pt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-BCE_loss",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_61": {
                "variable": {
                    "value": "self.cnns_feat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_62": {
                "variable": {
                    "value": "self.cnns_src",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_63": {
                "variable": {
                    "value": "self.cnns_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_96": {
                "variable": {
                    "value": "cnn_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*cnn_x",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "variable": {
                    "value": "cnn_src",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ],
                        [
                            "min(dim * 2, 512)",
                            "Call"
                        ],
                        [
                            "params['dim']",
                            "Subscript"
                        ],
                        [
                            "params['dim']",
                            "Subscript"
                        ],
                        [
                            "dim // 2",
                            "BinOp"
                        ],
                        [
                            "min(dim * 2, 256)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "variable": {
                    "value": "cnn_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ],
                        [
                            "min(dim * 2, 512)",
                            "Call"
                        ],
                        [
                            "params['dim']",
                            "Subscript"
                        ],
                        [
                            "params['dim']",
                            "Subscript"
                        ],
                        [
                            "dim // 2",
                            "BinOp"
                        ],
                        [
                            "min(dim * 2, 256)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "im_size // 2 ** self.n_layer",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_305": {
                "variable": {
                    "value": "self.embed_tokens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['embed_dim']",
                            "Subscript"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "vocab.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_316": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "embed_dim + style_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['hidden_size']",
                            "Subscript"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['num_layers']",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "self.dropout_out if num_layers > 1 else 0.0",
                    "type": "IfExp",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_323": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 4 * num_layers",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "style_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['style_dim']",
                            "Subscript"
                        ],
                        [
                            "7",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_324": {
                "variable": {
                    "value": "self.fcVar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 4 * num_layers",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "style_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['style_dim']",
                            "Subscript"
                        ],
                        [
                            "7",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sort_330": {
                "variable": {
                    "value": "(sorted_src_lengths, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "src_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout_335": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, scale_factor=0.5, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(sorted_src_tokens)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_in, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, sorted_style_ord.expand(seq_len, -1, -1)], -1)",
                            "Call"
                        ],
                        [
                            "self.conv(self.pad(x))",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "(x - mean) / (std + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.view(*shape) + self.beta.view(*shape)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_336": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, sorted_style_ord.expand(seq_len, -1, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_338": {
                "variable": {
                    "value": "packed_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, scale_factor=0.5, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(sorted_src_tokens)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_in, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, sorted_style_ord.expand(seq_len, -1, -1)], -1)",
                            "Call"
                        ],
                        [
                            "self.conv(self.pad(x))",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "(x - mean) / (std + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.view(*shape) + self.beta.view(*shape)",
                            "BinOp"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sorted_src_lengths.data.tolist()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_348": {
                "variable": {
                    "value": "(mem, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "packed_outs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dropout_349": {
                "variable": {
                    "value": "mem",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mem",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(mem, p=self.dropout_out, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_358": {
                "variable": {
                    "value": "(_, positions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_367": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[final_h, final_c]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_385": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_386": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ],
                        [
                            "min(dim * 2, 512)",
                            "Call"
                        ],
                        [
                            "params['dim']",
                            "Subscript"
                        ],
                        [
                            "params['dim']",
                            "Subscript"
                        ],
                        [
                            "dim // 2",
                            "BinOp"
                        ],
                        [
                            "min(dim * 2, 256)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "c_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['c_dim']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_387": {
                "variable": {
                    "value": "self.fcVar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ],
                        [
                            "min(dim * 2, 512)",
                            "Call"
                        ],
                        [
                            "params['dim']",
                            "Subscript"
                        ],
                        [
                            "params['dim']",
                            "Subscript"
                        ],
                        [
                            "dim // 2",
                            "BinOp"
                        ],
                        [
                            "min(dim * 2, 256)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "c_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['c_dim']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Sequential_421": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_442": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_464": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_486": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_500": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_516": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_642": {
                "variable": {
                    "value": "self.conv1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_643": {
                "variable": {
                    "value": "self.conv1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_645": {
                "variable": {
                    "value": "self.conv2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_646": {
                "variable": {
                    "value": "self.conv2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_648": {
                "variable": {
                    "value": "self.conv3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_649": {
                "variable": {
                    "value": "self.conv3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_650": {
                "variable": {
                    "value": "self.conv3_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_652": {
                "variable": {
                    "value": "self.conv4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_653": {
                "variable": {
                    "value": "self.conv4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_654": {
                "variable": {
                    "value": "self.conv4_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_656": {
                "variable": {
                    "value": "self.conv5_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_657": {
                "variable": {
                    "value": "self.conv5_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_658": {
                "variable": {
                    "value": "self.conv5_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_661": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_1(X)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_662": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_2(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_664": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1_1(X), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_2(h), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_1(h), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_2(h), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3_1(h), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3_2(h), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3_3(h), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv4_1(h), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv4_2(h), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv4_3(h), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv5_1(h), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv5_2(h), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv5_3(h), inplace=True)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_666": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2_1(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_667": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2_2(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_669": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1_1(X), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_2(h), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_1(h), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_2(h), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3_1(h), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3_2(h), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3_3(h), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv4_1(h), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv4_2(h), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv4_3(h), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv5_1(h), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv5_2(h), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv5_3(h), inplace=True)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_671": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3_1(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_672": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3_2(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_673": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3_3(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_675": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1_1(X), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_2(h), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_1(h), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_2(h), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3_1(h), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3_2(h), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3_3(h), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv4_1(h), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv4_2(h), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv4_3(h), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv5_1(h), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv5_2(h), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv5_3(h), inplace=True)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_677": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4_1(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_678": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4_2(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_679": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4_3(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_682": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv5_1(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_683": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv5_2(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_684": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv5_3(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "batch_norm_715": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.contiguous().view(1, b * c, *x.size()[2:])",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "running_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.running_mean.repeat(b)",
                            "Call"
                        ]
                    ]
                },
                "running_var": {
                    "value": "running_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.running_var.repeat(b)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_801": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data.new(height).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_802": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data.new(width).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_805": {
                "variable": {
                    "value": "w_bar",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_28": {
                "variable": {
                    "value": "BCE_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_30": {
                "variable": {
                    "value": "BCE_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_113": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, scale_factor=0.5, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(sorted_src_tokens)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_in, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, sorted_style_ord.expand(seq_len, -1, -1)], -1)",
                            "Call"
                        ],
                        [
                            "self.conv(self.pad(x))",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "(x - mean) / (std + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.view(*shape) + self.beta.view(*shape)",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_391": {
                "variable": {
                    "value": "self.mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim, dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_531": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_542": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "norm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "variable"
                        ],
                        [
                            "output_dim",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_557": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_577": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.use_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_595": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "BatchNorm1d_600": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "norm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "variable"
                        ],
                        [
                            "output_dim",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_612": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_733": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features).uniform_()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_734": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_35": {
                "input": {
                    "value": "F_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.alpha * (1 - pt) ** self.gamma * BCE_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_58": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_83": {
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_entropy_85": {
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_281": {
                "*size": {
                    "value": "hiddens.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_383": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_533": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_545": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "norm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "variable"
                        ],
                        [
                            "output_dim",
                            "variable"
                        ]
                    ]
                }
            },
            "LeakyReLU_559": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm1d_602": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "norm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "variable"
                        ],
                        [
                            "output_dim",
                            "variable"
                        ]
                    ]
                }
            },
            "LeakyReLU_614": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_703": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_704": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_273": {
                "*size": {
                    "value": "hiddens.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_391": {
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ],
                        [
                            "min(dim * 2, 512)",
                            "Call"
                        ],
                        [
                            "params['dim']",
                            "Subscript"
                        ],
                        [
                            "params['dim']",
                            "Subscript"
                        ],
                        [
                            "dim // 2",
                            "BinOp"
                        ],
                        [
                            "min(dim * 2, 256)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ],
                        [
                            "min(dim * 2, 512)",
                            "Call"
                        ],
                        [
                            "params['dim']",
                            "Subscript"
                        ],
                        [
                            "params['dim']",
                            "Subscript"
                        ],
                        [
                            "dim // 2",
                            "BinOp"
                        ],
                        [
                            "min(dim * 2, 256)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_392": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_393": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_394": {
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ],
                        [
                            "min(dim * 2, 512)",
                            "Call"
                        ],
                        [
                            "params['dim']",
                            "Subscript"
                        ],
                        [
                            "params['dim']",
                            "Subscript"
                        ],
                        [
                            "dim // 2",
                            "BinOp"
                        ],
                        [
                            "min(dim * 2, 256)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ],
                        [
                            "min(dim * 2, 512)",
                            "Call"
                        ],
                        [
                            "params['dim']",
                            "Subscript"
                        ],
                        [
                            "params['dim']",
                            "Subscript"
                        ],
                        [
                            "dim // 2",
                            "BinOp"
                        ],
                        [
                            "min(dim * 2, 256)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_395": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_460": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ZeroPad2d_535": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "PReLU_561": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_575": {
                "in_channels": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.use_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_593": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "PReLU_616": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_734": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mv_778": {
                "input": {
                    "value": "torch.t(w.view(height, -1).data)",
                    "type": "Call",
                    "possible_values": []
                },
                "vec": {
                    "value": "u.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mv_779": {
                "input": {
                    "value": "w.view(height, -1).data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "vec": {
                    "value": "v.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_158": {
                "input": {
                    "value": "(out_src_fake - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_313": {
                "ndarray": {
                    "value": "weights_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((vocab.size, embed_dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "SELU_563": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SELU_618": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_778": {
                "input": {
                    "value": "w.view(height, -1).data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_131": {
                "input": {
                    "value": "(out_src_real - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_133": {
                "input": {
                    "value": "out_src_fake.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_134": {
                "input": {
                    "value": "out_src_real.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_135": {
                "input": {
                    "value": "F.binary_cross_entropy(F.sigmoid(out_src_fake), all0) + F.binary_cross_entropy(F.sigmoid(out_src_real), all1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_160": {
                "input": {
                    "value": "out_src_fake.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_161": {
                "input": {
                    "value": "F.binary_cross_entropy(F.sigmoid(out_src_fake), all1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tanh_565": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_620": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "binary_cross_entropy_161": {
                "input": {
                    "value": "F.sigmoid(out_src_fake)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "all1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.ones_like(out_src_real.data).to(self.device), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "Variable(torch.ones_like(out_src_fake.data).to(self.device), requires_grad=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sigmoid_567": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_622": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "binary_cross_entropy_135": {
                "input": {
                    "value": "F.sigmoid(out_src_fake)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "all0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.zeros_like(out_src_fake.data).to(self.device), requires_grad=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_136": {
                "input": {
                    "value": "F.sigmoid(out_src_real)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "all1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.ones_like(out_src_real.data).to(self.device), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "Variable(torch.ones_like(out_src_fake.data).to(self.device), requires_grad=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_138": {
                "input": {
                    "value": "out_src_real",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_161": {
                "input": {
                    "value": "out_src_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_fake[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_163": {
                "input": {
                    "value": "out_src_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_fake[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_135": {
                "input": {
                    "value": "out_src_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_fake[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_136": {
                "input": {
                    "value": "out_src_real",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "networks/networks_v2.py": {
        "torch": {
            "Sequential_114": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_123": {
                "variable": {
                    "value": "self.fcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_124": {
                "variable": {
                    "value": "self.fcvars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_158": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Embedding_186": {
                "variable": {
                    "value": "self.embed_tokens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['embed_dim']",
                            "Subscript"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "vocab.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_197": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "embed_dim + self.style_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['hidden_size']",
                            "Subscript"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['num_layers']",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "self.dropout_out if num_layers > 1 else 0.0",
                    "type": "IfExp",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_206": {
                "variable": {
                    "value": "self.fcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_207": {
                "variable": {
                    "value": "self.fcvars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sort_217": {
                "variable": {
                    "value": "(sorted_src_lengths, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "src_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout_222": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_tokens(sorted_src_tokens)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_in, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, sorted_style_ord.expand(seq_len, -1, -1)], -1)",
                            "Call"
                        ],
                        [
                            "embeddings.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_in, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, style_ord.expand(seq_len, -1, -1)], -1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_223": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, sorted_style_ord.expand(seq_len, -1, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_225": {
                "variable": {
                    "value": "packed_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_tokens(sorted_src_tokens)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_in, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, sorted_style_ord.expand(seq_len, -1, -1)], -1)",
                            "Call"
                        ],
                        [
                            "embeddings.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_in, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, style_ord.expand(seq_len, -1, -1)], -1)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sorted_src_lengths.data.tolist()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_235": {
                "variable": {
                    "value": "(mem, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "packed_outs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dropout_236": {
                "variable": {
                    "value": "mem",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mem",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(mem, p=self.dropout_out, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(mem, p=self.dropout_out, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_244": {
                "variable": {
                    "value": "(_, positions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_249": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[final_h, final_c]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_258": {
                "variable": {
                    "value": "(_, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout_261": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_tokens(sorted_src_tokens)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_in, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, sorted_style_ord.expand(seq_len, -1, -1)], -1)",
                            "Call"
                        ],
                        [
                            "embeddings.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_in, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, style_ord.expand(seq_len, -1, -1)], -1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_262": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, style_ord.expand(seq_len, -1, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_264": {
                "variable": {
                    "value": "packed_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_tokens(sorted_src_tokens)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_in, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, sorted_style_ord.expand(seq_len, -1, -1)], -1)",
                            "Call"
                        ],
                        [
                            "embeddings.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_in, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, style_ord.expand(seq_len, -1, -1)], -1)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_274": {
                "variable": {
                    "value": "(mem, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "packed_outs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dropout_275": {
                "variable": {
                    "value": "mem",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mem",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(mem, p=self.dropout_out, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(mem, p=self.dropout_out, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_283": {
                "variable": {
                    "value": "(_, positions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_288": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[final_h, final_c]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "self.mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim, dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_113": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_117": {
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['dim']",
                            "Subscript"
                        ],
                        [
                            "dim // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['dim']",
                            "Subscript"
                        ],
                        [
                            "dim // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_118": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_119": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_120": {
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['dim']",
                            "Subscript"
                        ],
                        [
                            "dim // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['dim']",
                            "Subscript"
                        ],
                        [
                            "dim // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_121": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_126": {
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['dim']",
                            "Subscript"
                        ],
                        [
                            "dim // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "c_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['c_dim']",
                            "Subscript"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_127": {
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['dim']",
                            "Subscript"
                        ],
                        [
                            "dim // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "c_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['c_dim']",
                            "Subscript"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Upsample_154": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_209": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size * num_layers",
                            "BinOp"
                        ],
                        [
                            "hidden_dim * (4 if bidirectional else 2)",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "c_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['c_dim']",
                            "Subscript"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_210": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size * num_layers",
                            "BinOp"
                        ],
                        [
                            "hidden_dim * (4 if bidirectional else 2)",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "c_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['c_dim']",
                            "Subscript"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_194": {
                "ndarray": {
                    "value": "weights_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((vocab.size, embed_dim))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "solver.py": {
        "torch": {
            "InstanceNorm2d_33": {
                "variable": {
                    "value": "self.instancenorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "variable": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.stddev ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_65": {
                "variable": {
                    "value": "self.dis_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[p for p in dis_params if p.requires_grad]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "configs['lr']",
                            "Subscript"
                        ]
                    ]
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "configs['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Adam_67": {
                "variable": {
                    "value": "self.gen_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[p for p in gen_params if p.requires_grad]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "configs['lr']",
                            "Subscript"
                        ]
                    ]
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "configs['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "L1Loss_76": {
                "variable": {
                    "value": "self.criterionL1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_181": {
                "variable": {
                    "value": "self.loss_ds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(x_fake1 - x_fake2.detach())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_281": {
                "variable": {
                    "value": "x_real_recon",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_real_recon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(x_real_recon)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_282": {
                "variable": {
                    "value": "x_ab",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_ab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(x_ab)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_283": {
                "variable": {
                    "value": "x_sam",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_sam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(x_sam)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_293": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "y.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_302": {
                "variable": {
                    "value": "dydx_l2norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(dydx ** 2, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_307": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "y.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_313": {
                "variable": {
                    "value": "dydx_l2sqr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dydx ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_314": {
                "variable": {
                    "value": "r2_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dydx_l2sqr ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_321": {
                "variable": {
                    "value": "style_real",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "style_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(style_real, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(style_real, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_326": {
                "variable": {
                    "value": "style_txt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "style_txt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(style_txt, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(style_txt, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_362": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "last_model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_model_list(checkpoint_dir, 'gen')",
                            "Call"
                        ],
                        [
                            "get_model_list(checkpoint_dir, 'dis')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_367": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "last_model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_model_list(checkpoint_dir, 'gen')",
                            "Call"
                        ],
                        [
                            "get_model_list(checkpoint_dir, 'dis')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "mean_114": {
                "input": {
                    "value": "torch.abs(x - y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_118": {
                "input": {
                    "value": "torch.abs(x - y).sum(dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_121": {
                "input": {
                    "value": "self.distance(z1, z2) - self.distance(rec_z1, rec_z2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(a, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_131": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(z, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_247": {
                "input": {
                    "value": "(self.instancenorm(img_fea) - self.instancenorm(target_fea)) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_254": {
                "variable": {
                    "value": "style_real",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "style_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(style_real, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(style_real, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_257": {
                "variable": {
                    "value": "style_txt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "style_txt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(style_txt, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(style_txt, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_262": {
                "variable": {
                    "value": "mus_real",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_cls",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_263": {
                "variable": {
                    "value": "mus_txt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_cls",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "x_att",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(x_att)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_303": {
                "input": {
                    "value": "(dydx_l2norm - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_339": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x_real.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_409": {
                "obj": {
                    "value": "{'a': self.gen.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "gen_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_dir, 'gen_%08d.pt' % (iterations + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_410": {
                "obj": {
                    "value": "{'b': self.dis.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "dis_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_dir, 'dis_%08d.pt' % (iterations + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_411": {
                "obj": {
                    "value": "{'a': self.gen_copy.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "gen_copy_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_dir, 'gen_%08d_avg.pt' % (iterations + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_412": {
                "obj": {
                    "value": "{'b': self.dis_copy.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "dis_copy_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_dir, 'dis_%08d_avg.pt' % (iterations + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_413": {
                "obj": {
                    "value": "{'gen': self.gen_opt.state_dict(), 'dis': self.dis_opt.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "opt_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_dir, 'optimizer.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_25": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_114": {
                "input": {
                    "value": "x - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_118": {
                "input": {
                    "value": "x - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_118": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_124": {
                "input": {
                    "value": "torch.abs(z1 - z2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_144": {
                "tensors": {
                    "value": "style_src",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_159": {
                "tensors": {
                    "value": "style_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(style_real, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(style_real, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_165": {
                "tensors": {
                    "value": "style_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(style_real, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(style_real, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_168": {
                "tensors": {
                    "value": "style_txt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(style_txt, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(style_txt, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_181": {
                "input": {
                    "value": "x_fake1 - x_fake2.detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_294": {
                "outputs": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(y.size()).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.ones(y.size()).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_302": {
                "input": {
                    "value": "dydx ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_308": {
                "outputs": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(y.size()).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.ones(y.size()).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_385": {
                "f": {
                    "value": "gen_path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_386": {
                "f": {
                    "value": "dis_path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "abs_124": {
                "input": {
                    "value": "z1 - z2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_190": {
                "tensors": {
                    "value": "style_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(style_real, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(style_real, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_277": {
                "tensors": {
                    "value": "[x_trg_att, x_trg_att, x_trg_att]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tools.py": {
        "torch": {
            "zeros_9": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Normal_52": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(mu.size()).to(device) * stddev",
                            "BinOp"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Normal_67": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(mu.size()).to(device) * stddev",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_51": {
                "*size": {
                    "value": "mu.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_66": {
                "*size": {
                    "value": "mu.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_34": {
                "*size": {
                    "value": "c_org.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "stack_59": {
                "variable": {
                    "value": "train_display_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[item[0] for item in train_display]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_61": {
                "variable": {
                    "value": "test_display_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[item[0] for item in test_display]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_63": {
                "variable": {
                    "value": "train_display_txt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[item[3] for item in train_display]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_64": {
                "variable": {
                    "value": "train_display_txt_lens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[item[4] for item in train_display]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_65": {
                "variable": {
                    "value": "test_display_txt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[item[3] for item in test_display]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_66": {
                "variable": {
                    "value": "test_display_txt_lens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[item[4] for item in test_display]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "manual_seed_23": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_42": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "synchronize_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "cat_71": {
                "variable": {
                    "value": "image_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[images[:display_image_num] for images in image_outputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_197": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_201": {
                "variable": {
                    "value": "model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "state_dict['fc.weight'].size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "chunk_209": {
                "variable": {
                    "value": "(r, g, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((b, g, r), dim=1)",
                            "Call"
                        ],
                        [
                            "(batch + 1) * 255 * 0.5",
                            "BinOp"
                        ],
                        [
                            "batch.sub(Variable(mean))",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_210": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(b, g, r)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "lerp_54": {
                "variable": {
                    "value": "param_copy.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "param.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "end": {
                    "value": "param_copy.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.999",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_191": {
                "obj": {
                    "value": "vgg.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_dir, 'vgg16.weight')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_193": {
                "f": {
                    "value": "os.path.join(model_dir, 'vgg16.weight')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "StepLR_224": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "step_size": {
                    "value": "hyperparameters['step_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "gamma": {
                    "value": "hyperparameters['gamma']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "iterations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CosineAnnealingLR_227": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "T_max": {
                    "value": "hyperparameters['step_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "hyperparameters['eta_min']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "iterations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "vocab.py": {
        "torch": {}
    }
}