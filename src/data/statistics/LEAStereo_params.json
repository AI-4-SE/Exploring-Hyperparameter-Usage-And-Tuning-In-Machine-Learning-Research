{
    "dataloaders/__init__.py": {
        "torch": {
            "DataLoader_27": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "stereo.DatasetFromList(args, val_list, [576, 960], False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.testBatchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_28": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Call",
                    "possible_values": [
                        [
                            "stereo.DatasetFromList(args, test_list, [576, 960], False)",
                            "Call"
                        ],
                        [
                            "stereo.DatasetFromList(args, test_list, [384, 1248], False)",
                            "Call"
                        ],
                        [
                            "stereo.DatasetFromList(args, test_list, [384, 1248], False)",
                            "Call"
                        ],
                        [
                            "stereo.DatasetFromList(args, test_list, [1008, 1512], False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.testBatchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_20": {
                "variable": {
                    "value": "train_loaderA",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainA_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "stereo.DatasetFromList(args, trainA_list, [args.crop_height, args.crop_width], True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_21": {
                "variable": {
                    "value": "train_loaderB",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainB_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "stereo.DatasetFromList(args, trainB_list, [args.crop_height, args.crop_width], True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_42": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Call",
                    "possible_values": [
                        [
                            "stereo.DatasetFromList(args, train_list, [args.crop_height, args.crop_width], True)",
                            "Call"
                        ],
                        [
                            "stereo.DatasetFromList(args, train_list, [args.crop_height, args.crop_width], True)",
                            "Call"
                        ],
                        [
                            "stereo.DatasetFromList(args, train_list, [args.crop_height, args.crop_width], True)",
                            "Call"
                        ],
                        [
                            "stereo.DatasetFromList(args, train_list, [args.crop_height, args.crop_width], True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_43": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Call",
                    "possible_values": [
                        [
                            "stereo.DatasetFromList(args, test_list, [576, 960], False)",
                            "Call"
                        ],
                        [
                            "stereo.DatasetFromList(args, test_list, [384, 1248], False)",
                            "Call"
                        ],
                        [
                            "stereo.DatasetFromList(args, test_list, [384, 1248], False)",
                            "Call"
                        ],
                        [
                            "stereo.DatasetFromList(args, test_list, [1008, 1512], False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.testBatchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_23": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Call",
                    "possible_values": [
                        [
                            "stereo.DatasetFromList(args, train_list, [args.crop_height, args.crop_width], True)",
                            "Call"
                        ],
                        [
                            "stereo.DatasetFromList(args, train_list, [args.crop_height, args.crop_width], True)",
                            "Call"
                        ],
                        [
                            "stereo.DatasetFromList(args, train_list, [args.crop_height, args.crop_width], True)",
                            "Call"
                        ],
                        [
                            "stereo.DatasetFromList(args, train_list, [args.crop_height, args.crop_width], True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_53": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Call",
                    "possible_values": [
                        [
                            "stereo.DatasetFromList(args, train_list, [args.crop_height, args.crop_width], True)",
                            "Call"
                        ],
                        [
                            "stereo.DatasetFromList(args, train_list, [args.crop_height, args.crop_width], True)",
                            "Call"
                        ],
                        [
                            "stereo.DatasetFromList(args, train_list, [args.crop_height, args.crop_width], True)",
                            "Call"
                        ],
                        [
                            "stereo.DatasetFromList(args, train_list, [args.crop_height, args.crop_width], True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_54": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Call",
                    "possible_values": [
                        [
                            "stereo.DatasetFromList(args, test_list, [576, 960], False)",
                            "Call"
                        ],
                        [
                            "stereo.DatasetFromList(args, test_list, [384, 1248], False)",
                            "Call"
                        ],
                        [
                            "stereo.DatasetFromList(args, test_list, [384, 1248], False)",
                            "Call"
                        ],
                        [
                            "stereo.DatasetFromList(args, test_list, [1008, 1512], False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.testBatchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_64": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Call",
                    "possible_values": [
                        [
                            "stereo.DatasetFromList(args, train_list, [args.crop_height, args.crop_width], True)",
                            "Call"
                        ],
                        [
                            "stereo.DatasetFromList(args, train_list, [args.crop_height, args.crop_width], True)",
                            "Call"
                        ],
                        [
                            "stereo.DatasetFromList(args, train_list, [args.crop_height, args.crop_width], True)",
                            "Call"
                        ],
                        [
                            "stereo.DatasetFromList(args, train_list, [args.crop_height, args.crop_width], True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_65": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Call",
                    "possible_values": [
                        [
                            "stereo.DatasetFromList(args, test_list, [576, 960], False)",
                            "Call"
                        ],
                        [
                            "stereo.DatasetFromList(args, test_list, [384, 1248], False)",
                            "Call"
                        ],
                        [
                            "stereo.DatasetFromList(args, test_list, [384, 1248], False)",
                            "Call"
                        ],
                        [
                            "stereo.DatasetFromList(args, test_list, [1008, 1512], False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.testBatchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "dataloaders/datasets/stereo.py": {
        "torch": {}
    },
    "decode.py": {
        "torch": {
            "load_16": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/build_model.py": {
        "torch": {
            "device_of_45": {
                "obj": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.feature(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/build_model_2d.py": {
        "torch": {
            "Softmin_12": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_16": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.interpolate(x, [self.maxdisp, x.size()[3] * 3, x.size()[4] * 3], mode='trilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "e * m",
                            "BinOp"
                        ],
                        [
                            "self.softmax(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, [self.maxdisp, x.size()[3] * 3, x.size()[4] * 3], mode='trilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "self.softmax(x)",
                            "Call"
                        ],
                        [
                            "self.disparity(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[self.maxdisp, x.size()[3] * 3, x.size()[4] * 3]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Softmin_41": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_45": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.interpolate(x, [self.maxdisp, x.size()[3] * 3, x.size()[4] * 3], mode='trilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "e * m",
                            "BinOp"
                        ],
                        [
                            "self.softmax(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, [self.maxdisp, x.size()[3] * 3, x.size()[4] * 3], mode='trilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "self.softmax(x)",
                            "Call"
                        ],
                        [
                            "self.disparity(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[self.maxdisp, x.size()[3] * 3, x.size()[4] * 3]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_56": {
                "variable": {
                    "value": "self.cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_402": {
                "variable": {
                    "value": "upsample_6",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "stem2.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_403": {
                "variable": {
                    "value": "upsample_12",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[h // 2, w // 2]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_404": {
                "variable": {
                    "value": "upsample_24",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[h // 4, w // 4]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_190": {
                "variable": {
                    "value": "normalized_alphas",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.alphas.to(device=img_device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_212": {
                "variable": {
                    "value": "normalized_alphas",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.alphas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_18": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.interpolate(x, [self.maxdisp, x.size()[3] * 3, x.size()[4] * 3], mode='trilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "e * m",
                            "BinOp"
                        ],
                        [
                            "self.softmax(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, [self.maxdisp, x.size()[3] * 3, x.size()[4] * 3], mode='trilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "self.softmax(x)",
                            "Call"
                        ],
                        [
                            "self.disparity(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_18": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.interpolate(x, [self.maxdisp, x.size()[3] * 3, x.size()[4] * 3], mode='trilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "e * m",
                            "BinOp"
                        ],
                        [
                            "self.softmax(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, [self.maxdisp, x.size()[3] * 3, x.size()[4] * 3], mode='trilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "self.softmax(x)",
                            "Call"
                        ],
                        [
                            "self.disparity(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_199": {
                "variable": {
                    "value": "normalized_betas[layer][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.betas[layer][1].to(device=img_device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_220": {
                "variable": {
                    "value": "normalized_betas[layer][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.betas[layer][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_195": {
                "input": {
                    "value": "self.betas[layer][0][1:].to(device=img_device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_203": {
                "variable": {
                    "value": "normalized_betas[layer][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.betas[layer][1].to(device=img_device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_204": {
                "variable": {
                    "value": "normalized_betas[layer][2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.betas[layer][2].to(device=img_device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_207": {
                "variable": {
                    "value": "normalized_betas[layer][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.betas[layer][1].to(device=img_device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_208": {
                "variable": {
                    "value": "normalized_betas[layer][2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.betas[layer][2].to(device=img_device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_216": {
                "input": {
                    "value": "self.betas[layer][0][1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_224": {
                "variable": {
                    "value": "normalized_betas[layer][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.betas[layer][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_225": {
                "variable": {
                    "value": "normalized_betas[layer][2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.betas[layer][2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_228": {
                "variable": {
                    "value": "normalized_betas[layer][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.betas[layer][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_229": {
                "variable": {
                    "value": "normalized_betas[layer][2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.betas[layer][2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_198": {
                "input": {
                    "value": "self.betas[layer][0][1:].to(device=img_device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_219": {
                "input": {
                    "value": "self.betas[layer][0][1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_202": {
                "input": {
                    "value": "self.betas[layer][0][1:].to(device=img_device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_206": {
                "input": {
                    "value": "self.betas[layer][0][1:].to(device=img_device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_209": {
                "input": {
                    "value": "self.betas[layer][3][:1].to(device=img_device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_223": {
                "input": {
                    "value": "self.betas[layer][0][1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_227": {
                "input": {
                    "value": "self.betas[layer][0][1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_230": {
                "input": {
                    "value": "self.betas[layer][3][:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/build_model_3d.py": {
        "torch": {
            "ModuleList_13": {
                "variable": {
                    "value": "self.cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_355": {
                "variable": {
                    "value": "upsample_6",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "stem.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_356": {
                "variable": {
                    "value": "upsample_12",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[d // 2, h // 2, w // 2]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_357": {
                "variable": {
                    "value": "upsample_24",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[d // 4, h // 4, w // 4]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_142": {
                "variable": {
                    "value": "normalized_alphas",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.alphas.to(device=img_device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_164": {
                "variable": {
                    "value": "normalized_alphas",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.alphas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_151": {
                "variable": {
                    "value": "normalized_betas[layer][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.betas[layer][1].to(device=img_device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_172": {
                "variable": {
                    "value": "normalized_betas[layer][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.betas[layer][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_147": {
                "input": {
                    "value": "self.betas[layer][0][1:].to(device=img_device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_155": {
                "variable": {
                    "value": "normalized_betas[layer][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.betas[layer][1].to(device=img_device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_156": {
                "variable": {
                    "value": "normalized_betas[layer][2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.betas[layer][2].to(device=img_device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_159": {
                "variable": {
                    "value": "normalized_betas[layer][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.betas[layer][1].to(device=img_device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_160": {
                "variable": {
                    "value": "normalized_betas[layer][2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.betas[layer][2].to(device=img_device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_168": {
                "input": {
                    "value": "self.betas[layer][0][1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_176": {
                "variable": {
                    "value": "normalized_betas[layer][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.betas[layer][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_177": {
                "variable": {
                    "value": "normalized_betas[layer][2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.betas[layer][2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_180": {
                "variable": {
                    "value": "normalized_betas[layer][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.betas[layer][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_181": {
                "variable": {
                    "value": "normalized_betas[layer][2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.betas[layer][2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_150": {
                "input": {
                    "value": "self.betas[layer][0][1:].to(device=img_device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_171": {
                "input": {
                    "value": "self.betas[layer][0][1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_154": {
                "input": {
                    "value": "self.betas[layer][0][1:].to(device=img_device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_158": {
                "input": {
                    "value": "self.betas[layer][0][1:].to(device=img_device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_161": {
                "input": {
                    "value": "self.betas[layer][3][:1].to(device=img_device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_175": {
                "input": {
                    "value": "self.betas[layer][0][1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_179": {
                "input": {
                    "value": "self.betas[layer][0][1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_182": {
                "input": {
                    "value": "self.betas[layer][3][:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/cell_level_search_2d.py": {
        "torch": {
            "interpolate_78": {
                "input": {
                    "value": "prev_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(feature_size_h, feature_size_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_96": {
                "input": {
                    "value": "s0",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "F.interpolate(s0, (size_h, size_w), mode='bilinear', align_corners=True) if s0.shape[2] != size_h or s0.shape[3] != size_w else s0",
                            "IfExp"
                        ],
                        [
                            "self.pre_preprocess(s0) if s0.shape[1] != self.C_out else s0",
                            "IfExp"
                        ]
                    ]
                },
                "size": {
                    "value": "(size_h, size_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/cell_level_search_3d.py": {
        "torch": {
            "interpolate_79": {
                "input": {
                    "value": "prev_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(feature_size_d, feature_size_h, feature_size_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_96": {
                "input": {
                    "value": "s0",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "F.interpolate(s0, (size_d, size_h, size_w), mode='trilinear', align_corners=True) if s0.shape[3] != size_h or s0.shape[4] != size_w or s0.shape[2] != size_d else s0",
                            "IfExp"
                        ],
                        [
                            "self.pre_preprocess(s0) if s0.shape[1] != self.C_out else s0",
                            "IfExp"
                        ]
                    ]
                },
                "size": {
                    "value": "(size_d, size_h, size_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/decoding_formulas.py": {
        "torch": {
            "zeros_38": {
                "variable": {
                    "value": "self.network_space",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self._num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_45": {
                "variable": {
                    "value": "self.network_space[layer][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self._betas[layer][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_42": {
                "input": {
                    "value": "self._betas[layer][0][1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_49": {
                "variable": {
                    "value": "self.network_space[layer][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self._betas[layer][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_50": {
                "variable": {
                    "value": "self.network_space[layer][2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self._betas[layer][2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_55": {
                "variable": {
                    "value": "self.network_space[layer][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self._betas[layer][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_56": {
                "variable": {
                    "value": "self.network_space[layer][2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self._betas[layer][2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_44": {
                "input": {
                    "value": "self._betas[layer][0][1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_48": {
                "input": {
                    "value": "self._betas[layer][0][1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_54": {
                "input": {
                    "value": "self._betas[layer][0][1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_57": {
                "input": {
                    "value": "self._betas[layer][3][:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_109": {
                "input": {
                    "value": "self._alphas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/operations_2d.py": {
        "torch": {
            "Sequential_13": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(C_out)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(C_in, C_in, kernel_size=kernel_size, stride=stride, padding=padding, groups=C_in, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_110": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_111": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_112": {
                "variable": {
                    "value": "self.conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_113": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_117": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.conv_1(x), self.conv_2(x[:, :, 1:, 1:, 1:])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_141": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_142": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_143": {
                "variable": {
                    "value": "self.conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_144": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.conv_1(x), self.conv_2(x[:, :, 1:, 1:, 1:])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_166": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(scale_factor=2, mode='bilinear')",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_191": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(scale_factor=2, mode='bilinear')",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_46": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "num_features": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "groups": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "num_features": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "groups": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_67": {
                "num_features": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_167": {
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_168": {
                "in_channels": {
                    "value": "self._in_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_169": {
                "num_features": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_170": {
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_192": {
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_193": {
                "in_channels": {
                    "value": "self._in_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_194": {
                "num_features": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_195": {
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_196": {
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_197": {
                "in_channels": {
                    "value": "self._in_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_198": {
                "num_features": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_199": {
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/operations_3d.py": {
        "torch": {
            "Sequential_13": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm3d(C_out)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_37": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_38": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(C_in, C_in, kernel_size=kernel_size, stride=stride, padding=padding, groups=C_in, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv3d_112": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv3d_113": {
                "variable": {
                    "value": "self.conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_114": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.conv_1(x), self.conv_2(x[:, :, 1:, 1:, 1:])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_142": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv3d_143": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv3d_144": {
                "variable": {
                    "value": "self.conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_145": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.conv_1(x), self.conv_2(x[:, :, 1:, 1:, 1:])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_167": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(scale_factor=2, mode='trilinear')",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_192": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(scale_factor=2, mode='trilinear')",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_46": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_14": {
                "num_features": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_61": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "groups": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv3d_63": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_64": {
                "num_features": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_65": {
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv3d_66": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "groups": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv3d_67": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_68": {
                "num_features": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_168": {
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv3d_169": {
                "in_channels": {
                    "value": "self._in_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_170": {
                "num_features": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_171": {
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_193": {
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv3d_194": {
                "in_channels": {
                    "value": "self._in_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_195": {
                "num_features": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_196": {
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_197": {
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv3d_198": {
                "in_channels": {
                    "value": "self._in_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_199": {
                "num_features": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_200": {
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "predict.py": {
        "torch": {
            "DataParallel_52": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "LEAStereo(opt)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_57": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "synchronize_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_166": {
                "ndarray": {
                    "value": "right",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.ones([1, 3, crop_height, crop_width], 'float32')",
                            "Call"
                        ],
                        [
                            "Image.open(rightname)",
                            "Call"
                        ],
                        [
                            "np.asarray(right)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "retrain/LEAStereo.py": {
        "torch": {
            "device_of_31": {
                "obj": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.feature(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "retrain/new_model_2d.py": {
        "torch": {
            "ModuleList_28": {
                "variable": {
                    "value": "self._ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "concat_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "states[-self.block_multiplier:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_82": {
                "variable": {
                    "value": "self.cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_83": {
                "variable": {
                    "value": "self.network_arch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "network_arch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_84": {
                "variable": {
                    "value": "self.cell_arch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cell_arch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Upsample_152": {
                "variable": {
                    "value": "upsample_6",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "stem2.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_153": {
                "variable": {
                    "value": "upsample_12",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[h // 2, w // 2]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_154": {
                "variable": {
                    "value": "upsample_24",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[h // 4, w // 4]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_47": {
                "variable": {
                    "value": "s1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prev_input",
                            "Name"
                        ],
                        [
                            "F.interpolate(s1, [feature_size_h, feature_size_w], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.preprocess(s1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[feature_size_h, feature_size_w]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_49": {
                "variable": {
                    "value": "s0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prev_prev_input",
                            "Name"
                        ],
                        [
                            "F.interpolate(s0, (s1.shape[2], s1.shape[3]), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.pre_preprocess(s0) if s0.shape[1] != self.C_out else s0",
                            "IfExp"
                        ]
                    ]
                },
                "size": {
                    "value": "(s1.shape[2], s1.shape[3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_100": {
                "variable": {
                    "value": "level_option",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.network_arch[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_101": {
                "variable": {
                    "value": "prev_level_option",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.network_arch[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_102": {
                "variable": {
                    "value": "prev_prev_level_option",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.network_arch[i - 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_103": {
                "variable": {
                    "value": "level",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "level_option",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(self.network_arch[i], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_104": {
                "variable": {
                    "value": "prev_level",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prev_level_option",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(self.network_arch[i - 1], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_105": {
                "variable": {
                    "value": "prev_prev_level",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prev_prev_level_option",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(self.network_arch[i - 2], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_116": {
                "variable": {
                    "value": "three_branch_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.network_arch[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_108": {
                "input": {
                    "value": "torch.sum(self.network_arch[0], dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_117": {
                "input": {
                    "value": "three_branch_options",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(self.network_arch[i], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_108": {
                "input": {
                    "value": "self.network_arch[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "retrain/new_model_3d.py": {
        "torch": {
            "ModuleList_27": {
                "variable": {
                    "value": "self._ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "concat_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "states[-self.block_multiplier:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_80": {
                "variable": {
                    "value": "self.cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_81": {
                "variable": {
                    "value": "self.network_arch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "network_arch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_82": {
                "variable": {
                    "value": "self.cell_arch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cell_arch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Upsample_147": {
                "variable": {
                    "value": "upsample_6",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_148": {
                "variable": {
                    "value": "upsample_12",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[d // 2, h // 2, w // 2]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_149": {
                "variable": {
                    "value": "upsample_24",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[d // 4, h // 4, w // 4]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_47": {
                "variable": {
                    "value": "s1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prev_input",
                            "Name"
                        ],
                        [
                            "F.interpolate(s1, [feature_size_d, feature_size_h, feature_size_w], mode='trilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.preprocess(s1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[feature_size_d, feature_size_h, feature_size_w]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_49": {
                "variable": {
                    "value": "s0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prev_prev_input",
                            "Name"
                        ],
                        [
                            "F.interpolate(s0, (s1.shape[2], s1.shape[3], s1.shape[4]), mode='trilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.pre_preprocess(s0) if s0.shape[1] != self.C_out else s0",
                            "IfExp"
                        ]
                    ]
                },
                "size": {
                    "value": "(s1.shape[2], s1.shape[3], s1.shape[4])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_96": {
                "variable": {
                    "value": "level_option",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.network_arch[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_97": {
                "variable": {
                    "value": "prev_level_option",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.network_arch[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_98": {
                "variable": {
                    "value": "prev_prev_level_option",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.network_arch[i - 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_99": {
                "variable": {
                    "value": "level",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "level_option",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(self.network_arch[i], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_100": {
                "variable": {
                    "value": "prev_level",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prev_level_option",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(self.network_arch[i - 1], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_101": {
                "variable": {
                    "value": "prev_prev_level",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prev_prev_level_option",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(self.network_arch[i - 2], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_111": {
                "variable": {
                    "value": "three_branch_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.network_arch[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_103": {
                "input": {
                    "value": "torch.sum(self.network_arch[0], dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_112": {
                "input": {
                    "value": "three_branch_options",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(self.network_arch[i], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_103": {
                "input": {
                    "value": "self.network_arch[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "retrain/skip_model_3d.py": {
        "torch": {
            "ModuleList_27": {
                "variable": {
                    "value": "self._ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "concat_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "states[-self.block_multiplier:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_80": {
                "variable": {
                    "value": "self.cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_81": {
                "variable": {
                    "value": "self.network_arch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "network_arch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_82": {
                "variable": {
                    "value": "self.cell_arch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cell_arch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Upsample_160": {
                "variable": {
                    "value": "upsample_6",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_161": {
                "variable": {
                    "value": "upsample_12",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[d // 2, h // 2, w // 2]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_162": {
                "variable": {
                    "value": "upsample_24",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[d // 4, h // 4, w // 4]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_47": {
                "variable": {
                    "value": "s1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prev_input",
                            "Name"
                        ],
                        [
                            "F.interpolate(s1, [feature_size_d, feature_size_h, feature_size_w], mode='trilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.preprocess(s1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[feature_size_d, feature_size_h, feature_size_w]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_49": {
                "variable": {
                    "value": "s0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prev_prev_input",
                            "Name"
                        ],
                        [
                            "F.interpolate(s0, (s1.shape[2], s1.shape[3], s1.shape[4]), mode='trilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.pre_preprocess(s0) if s0.shape[1] != self.C_out else s0",
                            "IfExp"
                        ]
                    ]
                },
                "size": {
                    "value": "(s1.shape[2], s1.shape[3], s1.shape[4])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_96": {
                "variable": {
                    "value": "level_option",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.network_arch[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_97": {
                "variable": {
                    "value": "prev_level_option",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.network_arch[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_98": {
                "variable": {
                    "value": "prev_prev_level_option",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.network_arch[i - 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_99": {
                "variable": {
                    "value": "level",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "level_option",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(self.network_arch[i], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_100": {
                "variable": {
                    "value": "prev_level",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prev_level_option",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(self.network_arch[i - 1], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_101": {
                "variable": {
                    "value": "prev_prev_level",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prev_prev_level_option",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(self.network_arch[i - 2], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_111": {
                "variable": {
                    "value": "three_branch_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.network_arch[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_148": {
                "tensors": {
                    "value": "(out1[-1], out4[-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_153": {
                "tensors": {
                    "value": "(out4[-1], out8[-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_103": {
                "input": {
                    "value": "torch.sum(self.network_arch[0], dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_112": {
                "input": {
                    "value": "three_branch_options",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(self.network_arch[i], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_103": {
                "input": {
                    "value": "self.network_arch[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "search.py": {
        "torch": {
            "manual_seed_34": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_36": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_72": {
                "variable": {
                    "value": "optimizer_F",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.feature.weight_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_78": {
                "variable": {
                    "value": "optimizer_M",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.matching.weight_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_87": {
                "variable": {
                    "value": "self.architect_optimizer_F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.feature.arch_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.arch_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.arch_weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_91": {
                "variable": {
                    "value": "self.architect_optimizer_M",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.matching.arch_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.arch_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.arch_weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_100": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_107": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_165": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Call",
                    "possible_values": [
                        [
                            "target.cuda()",
                            "Call"
                        ],
                        [
                            "torch.squeeze(target, 1)",
                            "Call"
                        ],
                        [
                            "target.cuda()",
                            "Call"
                        ],
                        [
                            "torch.squeeze(target, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_248": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Call",
                    "possible_values": [
                        [
                            "target.cuda()",
                            "Call"
                        ],
                        [
                            "torch.squeeze(target, 1)",
                            "Call"
                        ],
                        [
                            "target.cuda()",
                            "Call"
                        ],
                        [
                            "torch.squeeze(target, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_176": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "target[mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_count_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_190": {
                "variable": {
                    "value": "target_search",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_search",
                    "type": "Call",
                    "possible_values": [
                        [
                            "target_search.cuda()",
                            "Call"
                        ],
                        [
                            "torch.squeeze(target_search, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_197": {
                "variable": {
                    "value": "arch_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_search[mask_search]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "target_search[mask_search]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_257": {
                "variable": {
                    "value": "error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(output[mask] - target[mask])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_count_285": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_254": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_257": {
                "input": {
                    "value": "output[mask] - target[mask]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_269": {
                "input": {
                    "value": "correct",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(disp_true[index[0][:], index[1][:], index[2][:]] < 1) | (disp_true[index[0][:], index[1][:], index[2][:]] < true_disp[index[0][:], index[1][:], index[2][:]] * 0.05)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "thop/count_hooks.py": {
        "torch": {
            "prod_109": {
                "variable": {
                    "value": "kernel_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.Tensor([m.kernel_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_113": {
                "variable": {
                    "value": "m.total_ops",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "prod_118": {
                "variable": {
                    "value": "kernel_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.Tensor([*x[0].shape[2:]]) // torch.Tensor(list((m.output_size,))).squeeze()",
                            "BinOp"
                        ],
                        [
                            "torch.Tensor([*x[0].shape[2:]]) // torch.Tensor(list((m.output_size,))).squeeze()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Tensor_122": {
                "variable": {
                    "value": "m.total_ops",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "prod_126": {
                "variable": {
                    "value": "total_add",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.Tensor([m.kernel_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_132": {
                "variable": {
                    "value": "m.total_ops",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "prod_137": {
                "variable": {
                    "value": "total_add",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.Tensor([*x[0].shape[2:]]) // torch.Tensor(list((m.output_size,))).squeeze()",
                            "BinOp"
                        ],
                        [
                            "torch.Tensor([*x[0].shape[2:]]) // torch.Tensor(list((m.output_size,))).squeeze()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Tensor_143": {
                "variable": {
                    "value": "m.total_ops",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_153": {
                "variable": {
                    "value": "m.total_ops",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_109": {},
            "Tensor_117": {},
            "squeeze_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_126": {},
            "Tensor_136": {},
            "squeeze_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "thop/profile.py": {
        "torch": {
            "zeros_75": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_49": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "MultiStepLR_70": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=opt.lr, betas=(0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "optim.SGD(model.parameters(), lr=opt.lr, momentum=0.9)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "opt.milestones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_37": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_61": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "LEAStereo(opt)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_66": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "manual_seed_39": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_68": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_75": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_92": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Call",
                    "possible_values": [
                        [
                            "target.cuda()",
                            "Call"
                        ],
                        [
                            "torch.squeeze(target, 1)",
                            "Call"
                        ],
                        [
                            "target.cuda()",
                            "Call"
                        ],
                        [
                            "torch.squeeze(target, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_128": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Call",
                    "possible_values": [
                        [
                            "target.cuda()",
                            "Call"
                        ],
                        [
                            "torch.squeeze(target, 1)",
                            "Call"
                        ],
                        [
                            "target.cuda()",
                            "Call"
                        ],
                        [
                            "torch.squeeze(target, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_158": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_path + 'epoch_{}.pth'.format(epoch)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "smooth_l1_loss_102": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "disp[mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "target[mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_106": {
                "variable": {
                    "value": "error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(disp[mask] - target[mask])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_135": {
                "variable": {
                    "value": "error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(disp[mask] - target[mask])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_106": {
                "input": {
                    "value": "disp[mask] - target[mask]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_135": {
                "input": {
                    "value": "disp[mask] - target[mask]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_146": {
                "input": {
                    "value": "correct",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(disp_true[index[0][:], index[1][:], index[2][:]] < 1) | (disp_true[index[0][:], index[1][:], index[2][:]] < true_disp[index[0][:], index[1][:], index[2][:]] * 0.05)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "utils/multadds_count.py": {
        "torch": {
            "randn_15": {
                "variable": {
                    "value": "input_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1,) + tuple(input_size)",
                            "BinOp"
                        ],
                        [
                            "(3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/saver.py": {
        "torch": {
            "save_23": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self.experiment_dir, filename)",
                            "Call"
                        ],
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/summaries.py": {
        "torch": {}
    }
}