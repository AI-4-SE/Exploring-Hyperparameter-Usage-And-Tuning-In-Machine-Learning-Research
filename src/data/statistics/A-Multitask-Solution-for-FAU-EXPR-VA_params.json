{
    "Multitask-CNN-RNN/test.py": {
        "sklearn": {},
        "torch": {
            "load_50": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self._opt.checkpoints_dir, self._opt.name, 'net_epoch_student_{}_id_resnet50_GRU.pth'.format(i))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_63": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Test_dataset(self._opt, video_data, transform=val_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self._opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(self._opt.n_threads_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empty_cache_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Multitask-CNN-RNN/utils/model_utils.py": {
        "sklearn": {
            "f1_score_74": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=-1)",
                            "Call"
                        ],
                        [
                            "(self.bins * x).sum(-1)",
                            "Call"
                        ],
                        [
                            "x.view(-1)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.view(B * N, C, W, H)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.argmax(y, axis=-1)",
                            "Call"
                        ],
                        [
                            "y.reshape(-1)",
                            "Call"
                        ],
                        [
                            "y.view(-1)",
                            "Call"
                        ],
                        [
                            "y.view(-1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(y_dig))",
                            "Call"
                        ],
                        [
                            "y.view(-1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.cuda.FloatTensor(y_dig))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(y)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_35": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "input[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "target[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "mean_106": {
                "variable": {
                    "value": "x_m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=-1)",
                            "Call"
                        ],
                        [
                            "(self.bins * x).sum(-1)",
                            "Call"
                        ],
                        [
                            "x.view(-1)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.view(B * N, C, W, H)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_107": {
                "variable": {
                    "value": "y_m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.argmax(y, axis=-1)",
                            "Call"
                        ],
                        [
                            "y.reshape(-1)",
                            "Call"
                        ],
                        [
                            "y.view(-1)",
                            "Call"
                        ],
                        [
                            "y.view(-1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(y_dig))",
                            "Call"
                        ],
                        [
                            "y.view(-1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.cuda.FloatTensor(y_dig))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "std_108": {
                "variable": {
                    "value": "x_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=-1)",
                            "Call"
                        ],
                        [
                            "(self.bins * x).sum(-1)",
                            "Call"
                        ],
                        [
                            "x.view(-1)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.view(B * N, C, W, H)",
                            "Call"
                        ]
                    ]
                }
            },
            "std_109": {
                "variable": {
                    "value": "y_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.argmax(y, axis=-1)",
                            "Call"
                        ],
                        [
                            "y.reshape(-1)",
                            "Call"
                        ],
                        [
                            "y.view(-1)",
                            "Call"
                        ],
                        [
                            "y.view(-1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(y_dig))",
                            "Call"
                        ],
                        [
                            "y.view(-1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.cuda.FloatTensor(y_dig))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_149": {
                "variable": {
                    "value": "pt_1",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "targets == 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(inputs)",
                            "Call"
                        ],
                        [
                            "F.softmax(inputs, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.ones_like(P)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_150": {
                "variable": {
                    "value": "pt_0",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "targets == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(inputs)",
                            "Call"
                        ],
                        [
                            "F.softmax(inputs, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.zeros_like(P)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_201": {
                "variable": {
                    "value": "pt_1",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "targets == 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(inputs)",
                            "Call"
                        ],
                        [
                            "F.softmax(inputs, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.ones_like(P)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_202": {
                "variable": {
                    "value": "pt_0",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "targets == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(inputs)",
                            "Call"
                        ],
                        [
                            "F.softmax(inputs, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.zeros_like(P)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_395": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_396": {
                "variable": {
                    "value": "self.fc_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_397": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_398": {
                "variable": {
                    "value": "self.fc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_496": {
                "variable": {
                    "value": "self.GRU_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_497": {
                "variable": {
                    "value": "self.fc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_501": {
                "variable": {
                    "value": "f0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.GRU_layer(x)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_100": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=-1)",
                            "Call"
                        ],
                        [
                            "(self.bins * x).sum(-1)",
                            "Call"
                        ],
                        [
                            "x.view(-1)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.view(B * N, C, W, H)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_142": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cross_entropy_177": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=-1)",
                            "Call"
                        ],
                        [
                            "(self.bins * x).sum(-1)",
                            "Call"
                        ],
                        [
                            "x.view(-1)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.view(B * N, C, W, H)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.argmax(y, axis=-1)",
                            "Call"
                        ],
                        [
                            "y.reshape(-1)",
                            "Call"
                        ],
                        [
                            "y.view(-1)",
                            "Call"
                        ],
                        [
                            "y.view(-1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(y_dig))",
                            "Call"
                        ],
                        [
                            "y.view(-1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.cuda.FloatTensor(y_dig))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_194": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=-1)",
                            "Call"
                        ],
                        [
                            "(self.bins * x).sum(-1)",
                            "Call"
                        ],
                        [
                            "x.view(-1)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.view(B * N, C, W, H)",
                            "Call"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_222": {
                "variable": {
                    "value": "task_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_231": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.argmax(y, axis=-1)",
                            "Call"
                        ],
                        [
                            "y.reshape(-1)",
                            "Call"
                        ],
                        [
                            "y.view(-1)",
                            "Call"
                        ],
                        [
                            "y.view(-1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(y_dig))",
                            "Call"
                        ],
                        [
                            "y.view(-1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.cuda.FloatTensor(y_dig))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_243": {
                "variable": {
                    "value": "task_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_103": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=-1)",
                            "Call"
                        ],
                        [
                            "(self.bins * x).sum(-1)",
                            "Call"
                        ],
                        [
                            "x.view(-1)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.view(B * N, C, W, H)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_104": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.argmax(y, axis=-1)",
                            "Call"
                        ],
                        [
                            "y.reshape(-1)",
                            "Call"
                        ],
                        [
                            "y.view(-1)",
                            "Call"
                        ],
                        [
                            "y.view(-1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(y_dig))",
                            "Call"
                        ],
                        [
                            "y.view(-1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.cuda.FloatTensor(y_dig))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_105": {
                "input": {
                    "value": "torch.pow(vy, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_144": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_149": {
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(inputs)",
                            "Call"
                        ],
                        [
                            "F.softmax(inputs, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_150": {
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(inputs)",
                            "Call"
                        ],
                        [
                            "F.softmax(inputs, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_196": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=-1)",
                            "Call"
                        ],
                        [
                            "(self.bins * x).sum(-1)",
                            "Call"
                        ],
                        [
                            "x.view(-1)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.view(B * N, C, W, H)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_201": {
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(inputs)",
                            "Call"
                        ],
                        [
                            "F.softmax(inputs, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_202": {
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(inputs)",
                            "Call"
                        ],
                        [
                            "F.softmax(inputs, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_232": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=-1)",
                            "Call"
                        ],
                        [
                            "(self.bins * x).sum(-1)",
                            "Call"
                        ],
                        [
                            "x.view(-1)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.view(B * N, C, W, H)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.argmax(y, axis=-1)",
                            "Call"
                        ],
                        [
                            "y.reshape(-1)",
                            "Call"
                        ],
                        [
                            "y.view(-1)",
                            "Call"
                        ],
                        [
                            "y.view(-1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(y_dig))",
                            "Call"
                        ],
                        [
                            "y.view(-1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.cuda.FloatTensor(y_dig))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_401": {
                "input": {
                    "value": "self.fc_0(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_105": {
                "input": {
                    "value": "torch.sum(torch.pow(vy, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_110": {
                "input": {
                    "value": "y_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.std(y)",
                            "Call"
                        ],
                        [
                            "torch.std(y)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_147": {
                "tensor": {
                    "value": "targets.view(-1).data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "one_hot_199": {
                "tensor": {
                    "value": "targets.view(-1).data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "KLDivLoss_249": {
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_softmax_249": {
                "input": {
                    "value": "y / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_249": {
                "input": {
                    "value": "teacher_pred / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "KLDivLoss_284": {
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_softmax_284": {
                "input": {
                    "value": "y[:, :N] / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_284": {
                "input": {
                    "value": "teacher_pred[:, :N] / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "KLDivLoss_285": {
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_softmax_285": {
                "input": {
                    "value": "y[:, N:] / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_285": {
                "input": {
                    "value": "teacher_pred[:, N:] / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_468": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "as_tensor_94": {
                "data": {
                    "value": "bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linspace(*self.range, num=self.digitize_num)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_105": {
                "input": {
                    "value": "vy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y - np.mean(y)",
                            "BinOp"
                        ],
                        [
                            "y - torch.mean(y)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_157": {
                "input": {
                    "value": "1.0 - pt_1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_209": {
                "input": {
                    "value": "1.0 - pt_1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Multitask-CNN-RNN/val.py": {
        "sklearn": {
            "precision_recall_curve_135": {
                "variable": {
                    "value": "(precision, recall, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels[i][:, j].astype(np.int)",
                    "type": "Call",
                    "possible_values": []
                },
                "probas_pred": {
                    "value": "merged_preds[i][:, j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_58": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self._opt.checkpoints_dir, self._opt.name, 'net_epoch_student_{}_id_resnet50_GRU.pth'.format(i))",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Multitask-CNN/test.py": {
        "sklearn": {},
        "torch": {
            "load_52": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self._opt.checkpoints_dir, self._opt.name, 'net_epoch_student_{}_id_resnet50.pth'.format(i))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_65": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Test_dataset(self._opt, video_data, transform=val_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self._opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(self._opt.n_threads_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empty_cache_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Multitask-CNN/utils/model_utils.py": {
        "sklearn": {
            "f1_score_74": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=-1)",
                            "Call"
                        ],
                        [
                            "(self.bins * x).sum(-1)",
                            "Call"
                        ],
                        [
                            "x.view(-1)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.argmax(y, axis=-1)",
                            "Call"
                        ],
                        [
                            "y.reshape(-1)",
                            "Call"
                        ],
                        [
                            "y.view(-1)",
                            "Call"
                        ],
                        [
                            "y.view(-1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(y_dig))",
                            "Call"
                        ],
                        [
                            "y.view(-1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.cuda.FloatTensor(y_dig))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(y)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_35": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "input[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "target[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "mean_106": {
                "variable": {
                    "value": "x_m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=-1)",
                            "Call"
                        ],
                        [
                            "(self.bins * x).sum(-1)",
                            "Call"
                        ],
                        [
                            "x.view(-1)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_107": {
                "variable": {
                    "value": "y_m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.argmax(y, axis=-1)",
                            "Call"
                        ],
                        [
                            "y.reshape(-1)",
                            "Call"
                        ],
                        [
                            "y.view(-1)",
                            "Call"
                        ],
                        [
                            "y.view(-1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(y_dig))",
                            "Call"
                        ],
                        [
                            "y.view(-1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.cuda.FloatTensor(y_dig))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "std_108": {
                "variable": {
                    "value": "x_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=-1)",
                            "Call"
                        ],
                        [
                            "(self.bins * x).sum(-1)",
                            "Call"
                        ],
                        [
                            "x.view(-1)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "std_109": {
                "variable": {
                    "value": "y_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.argmax(y, axis=-1)",
                            "Call"
                        ],
                        [
                            "y.reshape(-1)",
                            "Call"
                        ],
                        [
                            "y.view(-1)",
                            "Call"
                        ],
                        [
                            "y.view(-1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(y_dig))",
                            "Call"
                        ],
                        [
                            "y.view(-1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.cuda.FloatTensor(y_dig))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_149": {
                "variable": {
                    "value": "pt_1",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "targets == 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(inputs)",
                            "Call"
                        ],
                        [
                            "F.softmax(inputs, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.ones_like(P)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_150": {
                "variable": {
                    "value": "pt_0",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "targets == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(inputs)",
                            "Call"
                        ],
                        [
                            "F.softmax(inputs, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.zeros_like(P)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_201": {
                "variable": {
                    "value": "pt_1",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "targets == 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(inputs)",
                            "Call"
                        ],
                        [
                            "F.softmax(inputs, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.ones_like(P)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_202": {
                "variable": {
                    "value": "pt_0",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "targets == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(inputs)",
                            "Call"
                        ],
                        [
                            "F.softmax(inputs, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.zeros_like(P)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_396": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_397": {
                "variable": {
                    "value": "self.fc_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_398": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_399": {
                "variable": {
                    "value": "self.fc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_100": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=-1)",
                            "Call"
                        ],
                        [
                            "(self.bins * x).sum(-1)",
                            "Call"
                        ],
                        [
                            "x.view(-1)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_142": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cross_entropy_177": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=-1)",
                            "Call"
                        ],
                        [
                            "(self.bins * x).sum(-1)",
                            "Call"
                        ],
                        [
                            "x.view(-1)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.argmax(y, axis=-1)",
                            "Call"
                        ],
                        [
                            "y.reshape(-1)",
                            "Call"
                        ],
                        [
                            "y.view(-1)",
                            "Call"
                        ],
                        [
                            "y.view(-1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(y_dig))",
                            "Call"
                        ],
                        [
                            "y.view(-1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.cuda.FloatTensor(y_dig))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_194": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=-1)",
                            "Call"
                        ],
                        [
                            "(self.bins * x).sum(-1)",
                            "Call"
                        ],
                        [
                            "x.view(-1)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_222": {
                "variable": {
                    "value": "task_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_231": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.argmax(y, axis=-1)",
                            "Call"
                        ],
                        [
                            "y.reshape(-1)",
                            "Call"
                        ],
                        [
                            "y.view(-1)",
                            "Call"
                        ],
                        [
                            "y.view(-1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(y_dig))",
                            "Call"
                        ],
                        [
                            "y.view(-1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.cuda.FloatTensor(y_dig))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_244": {
                "variable": {
                    "value": "task_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_103": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=-1)",
                            "Call"
                        ],
                        [
                            "(self.bins * x).sum(-1)",
                            "Call"
                        ],
                        [
                            "x.view(-1)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_104": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.argmax(y, axis=-1)",
                            "Call"
                        ],
                        [
                            "y.reshape(-1)",
                            "Call"
                        ],
                        [
                            "y.view(-1)",
                            "Call"
                        ],
                        [
                            "y.view(-1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(y_dig))",
                            "Call"
                        ],
                        [
                            "y.view(-1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.cuda.FloatTensor(y_dig))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_105": {
                "input": {
                    "value": "torch.pow(vy, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_144": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_149": {
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(inputs)",
                            "Call"
                        ],
                        [
                            "F.softmax(inputs, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_150": {
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(inputs)",
                            "Call"
                        ],
                        [
                            "F.softmax(inputs, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_196": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=-1)",
                            "Call"
                        ],
                        [
                            "(self.bins * x).sum(-1)",
                            "Call"
                        ],
                        [
                            "x.view(-1)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_201": {
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(inputs)",
                            "Call"
                        ],
                        [
                            "F.softmax(inputs, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_202": {
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(inputs)",
                            "Call"
                        ],
                        [
                            "F.softmax(inputs, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_232": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=-1)",
                            "Call"
                        ],
                        [
                            "(self.bins * x).sum(-1)",
                            "Call"
                        ],
                        [
                            "x.view(-1)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.argmax(y, axis=-1)",
                            "Call"
                        ],
                        [
                            "y.reshape(-1)",
                            "Call"
                        ],
                        [
                            "y.view(-1)",
                            "Call"
                        ],
                        [
                            "y.view(-1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(y_dig))",
                            "Call"
                        ],
                        [
                            "y.view(-1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.cuda.FloatTensor(y_dig))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_402": {
                "input": {
                    "value": "self.fc_0(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_105": {
                "input": {
                    "value": "torch.sum(torch.pow(vy, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_110": {
                "input": {
                    "value": "y_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.std(y)",
                            "Call"
                        ],
                        [
                            "torch.std(y)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_147": {
                "tensor": {
                    "value": "targets.view(-1).data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "one_hot_199": {
                "tensor": {
                    "value": "targets.view(-1).data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "KLDivLoss_250": {
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_softmax_250": {
                "input": {
                    "value": "y / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_250": {
                "input": {
                    "value": "teacher_pred / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "KLDivLoss_285": {
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_softmax_285": {
                "input": {
                    "value": "y[:, :N] / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_285": {
                "input": {
                    "value": "teacher_pred[:, :N] / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "KLDivLoss_286": {
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_softmax_286": {
                "input": {
                    "value": "y[:, N:] / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_286": {
                "input": {
                    "value": "teacher_pred[:, N:] / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_469": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "as_tensor_94": {
                "data": {
                    "value": "bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linspace(*self.range, num=self.digitize_num)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_105": {
                "input": {
                    "value": "vy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y - np.mean(y)",
                            "BinOp"
                        ],
                        [
                            "y - torch.mean(y)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_157": {
                "input": {
                    "value": "1.0 - pt_1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_209": {
                "input": {
                    "value": "1.0 - pt_1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Multitask-CNN/val.py": {
        "sklearn": {
            "precision_recall_curve_134": {
                "variable": {
                    "value": "(precision, recall, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels[i][:, j].astype(np.int)",
                    "type": "Call",
                    "possible_values": []
                },
                "probas_pred": {
                    "value": "merged_preds[i][:, j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_61": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self._opt.checkpoints_dir, self._opt.name, 'net_epoch_student_{}_id_resnet50.pth'.format(i))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "eval_val_set.py": {
        "sklearn": {
            "f1_score_60": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.argmax(y, axis=-1)",
                            "Call"
                        ],
                        [
                            "y.reshape(-1)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_22": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "input[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "target[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "Multitask-CNN-RNN/data/custom_dataset_data_loader.py": {
        "torch": {}
    },
    "Multitask-CNN-RNN/data/dataset.py": {
        "torch": {}
    },
    "Multitask-CNN-RNN/data/dataset_Mixed_AU.py": {
        "torch": {
            "stack_43": {
                "tensors": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Multitask-CNN-RNN/data/dataset_Mixed_EXPR.py": {
        "torch": {
            "stack_42": {
                "tensors": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Multitask-CNN-RNN/data/dataset_Mixed_VA.py": {
        "torch": {
            "stack_43": {
                "tensors": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Multitask-CNN-RNN/data/test_video_dataset.py": {
        "torch": {
            "stack_47": {
                "tensors": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Multitask-CNN-RNN/models/models.py": {
        "torch": {
            "save_79": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self._save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self._save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_93": {
                "obj": {
                    "value": "network.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self._save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self._save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "LambdaLR_120": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lambda_rule",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_87": {
                "f": {
                    "value": "load_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self._save_dir, load_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self._save_dir, load_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_102": {
                "f": {
                    "value": "load_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self._save_dir, load_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self._save_dir, load_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "StepLR_122": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "step_size": {
                    "value": "opt.lr_decay_epochs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_124": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "max",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Multitask-CNN-RNN/models/resnet50.py": {
        "torch": {}
    },
    "Multitask-CNN-RNN/options/base_options.py": {
        "torch": {
            "set_device_107": {
                "device": {
                    "value": "self._opt.gpu_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "Multitask-CNN-RNN/torchsampler/imbalanced_ML.py": {
        "torch": {
            "multinomial_75": {
                "input": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "self.num_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "Multitask-CNN-RNN/torchsampler/imbalanced_SLML.py": {
        "torch": {
            "multinomial_50": {
                "input": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "self.num_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "Multitask-CNN-RNN/torchsampler/imbalanced_VA.py": {
        "torch": {
            "multinomial_45": {
                "input": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "self.num_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "Multitask-CNN-RNN/train.py": {
        "torch": {
            "empty_cache_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_69": {
                "f": {
                    "value": "self._opt.pretrained_teacher_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Multitask-CNN-RNN/utils/data_utils.py": {
        "torch": {
            "from_numpy_258": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img_array",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "permute_258": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Multitask-CNN/data/custom_dataset_data_loader.py": {
        "torch": {}
    },
    "Multitask-CNN/data/dataset.py": {
        "torch": {}
    },
    "Multitask-CNN/models/models.py": {
        "torch": {
            "save_79": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self._save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self._save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_93": {
                "obj": {
                    "value": "network.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self._save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self._save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "LambdaLR_120": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lambda_rule",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_87": {
                "f": {
                    "value": "load_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self._save_dir, load_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self._save_dir, load_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_102": {
                "f": {
                    "value": "load_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self._save_dir, load_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self._save_dir, load_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "StepLR_122": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "step_size": {
                    "value": "opt.lr_decay_epochs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_124": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "max",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Multitask-CNN/models/resnet50.py": {
        "torch": {}
    },
    "Multitask-CNN/options/base_options.py": {
        "torch": {
            "set_device_105": {
                "device": {
                    "value": "self._opt.gpu_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "Multitask-CNN/torchsampler/imbalanced_ML.py": {
        "torch": {
            "multinomial_75": {
                "input": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "self.num_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "Multitask-CNN/torchsampler/imbalanced_SLML.py": {
        "torch": {
            "multinomial_50": {
                "input": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "self.num_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "Multitask-CNN/torchsampler/imbalanced_VA.py": {
        "torch": {
            "multinomial_45": {
                "input": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "self.num_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "Multitask-CNN/train.py": {
        "torch": {
            "empty_cache_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_68": {
                "f": {
                    "value": "self._opt.pretrained_teacher_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Multitask-CNN/utils/data_utils.py": {
        "torch": {
            "from_numpy_258": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img_array",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "permute_258": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "api/Emotion_API.py": {
        "torch": {
            "DataLoader_66": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Seq_Dataset(face_dir, seq_len=self.length, transform=self.val_transforms)",
                            "Call"
                        ],
                        [
                            "Image_Dataset(face_dir, transform=self.val_transforms)",
                            "Call"
                        ],
                        [
                            "Seq_Dataset(face_dir, seq_len=self.length, transform=self.val_transforms)",
                            "Call"
                        ],
                        [
                            "Image_Dataset(face_dir, transform=self.val_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_118": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Seq_Dataset(face_dir, seq_len=self.length, transform=self.val_transforms)",
                            "Call"
                        ],
                        [
                            "Image_Dataset(face_dir, transform=self.val_transforms)",
                            "Call"
                        ],
                        [
                            "Seq_Dataset(face_dir, seq_len=self.length, transform=self.val_transforms)",
                            "Call"
                        ],
                        [
                            "Image_Dataset(face_dir, transform=self.val_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_43": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "stack_211": {
                "variable": {
                    "value": "ensemble_outputs[task]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[models_preds[i_model][task]['outputs'] for i_model in range(len(self.ensemble))]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_211": {
                "variable": {
                    "value": "ensemble_outputs[task]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_225": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output['AU'].cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_198": {
                "variable": {
                    "value": "track_val[task][key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "track_val[task][key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_230": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output['EXPR'].cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_230": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_226": {
                "input": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(output['AU'].cpu())",
                            "Call"
                        ],
                        [
                            "(o > threshold).type(torch.LongTensor)",
                            "Call"
                        ],
                        [
                            "F.softmax(output['EXPR'].cpu(), dim=-1).argmax(-1).type(torch.LongTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_234": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output['VA'][:, :N].cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_235": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output['VA'][:, N:].cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "api/data/Seq_Dataset.py": {
        "torch": {
            "stack_39": {
                "tensors": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "api/models/ModelFactory.py": {
        "torch": {}
    },
    "api/models/Multitask_CNN.py": {
        "torch": {
            "ModuleList_31": {
                "variable": {
                    "value": "classifiers",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "classifiers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[Head(output_feature_dim, self._opt.hidden_size, output_sizes[i]) for i in range(len(self._opt.tasks))]",
                            "ListComp"
                        ],
                        [
                            "nn.ModuleList(classifiers)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_37": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_59": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output['EXPR'].cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_59": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_63": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output['VA'][:, :N].cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_64": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output['VA'][:, N:].cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_56": {
                "input": {
                    "value": "output['AU'].cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "api/models/Multitask_CNN_RNN.py": {
        "torch": {
            "ModuleList_30": {
                "variable": {
                    "value": "classifiers",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "classifiers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[Head(output_feature_dim, self._opt.hidden_size, output_sizes[i]) for i in range(len(self._opt.tasks))]",
                            "ListComp"
                        ],
                        [
                            "nn.ModuleList(classifiers)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_34": {
                "variable": {
                    "value": "GRU_classifiers",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "GRU_classifiers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[GRU_Head(self._opt.hidden_size, self._opt.hidden_size // 2, output_sizes[i]) for i in range(len(self._opt.tasks))]",
                            "ListComp"
                        ],
                        [
                            "nn.ModuleList(GRU_classifiers)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_40": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_62": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output['EXPR'].cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_62": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_66": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output['VA'][:, :, :N].cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_67": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output['VA'][:, :, N:].cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_59": {
                "input": {
                    "value": "output['AU'].cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "api/run_example.py": {
        "torch": {
            "device_9": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "api/utils/model_utils.py": {
        "torch": {
            "BatchNorm1d_114": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_115": {
                "variable": {
                    "value": "self.fc_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_116": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_117": {
                "variable": {
                    "value": "self.fc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_216": {
                "variable": {
                    "value": "self.GRU_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_217": {
                "variable": {
                    "value": "self.fc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_221": {
                "variable": {
                    "value": "f0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.GRU_layer(x)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_120": {
                "input": {
                    "value": "self.fc_0(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_187": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "run_pretrained_model.py": {
        "torch": {
            "BatchNorm1d_244": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_245": {
                "variable": {
                    "value": "self.fc_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_246": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_247": {
                "variable": {
                    "value": "self.fc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_356": {
                "variable": {
                    "value": "classifiers",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "classifiers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[Head(output_feature_dim, self._opt.hidden_size, output_sizes[i]) for i in range(len(self._opt.tasks))]",
                            "ListComp"
                        ],
                        [
                            "nn.ModuleList(classifiers)",
                            "Call"
                        ],
                        [
                            "[Head(output_feature_dim, self._opt.hidden_size, output_sizes[i]) for i in range(len(self._opt.tasks))]",
                            "ListComp"
                        ],
                        [
                            "nn.ModuleList(classifiers)",
                            "Call"
                        ]
                    ]
                }
            },
            "GRU_401": {
                "variable": {
                    "value": "self.GRU_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_402": {
                "variable": {
                    "value": "self.fc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_406": {
                "variable": {
                    "value": "f0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.GRU_layer(x)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ModuleList_447": {
                "variable": {
                    "value": "classifiers",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "classifiers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[Head(output_feature_dim, self._opt.hidden_size, output_sizes[i]) for i in range(len(self._opt.tasks))]",
                            "ListComp"
                        ],
                        [
                            "nn.ModuleList(classifiers)",
                            "Call"
                        ],
                        [
                            "[Head(output_feature_dim, self._opt.hidden_size, output_sizes[i]) for i in range(len(self._opt.tasks))]",
                            "ListComp"
                        ],
                        [
                            "nn.ModuleList(classifiers)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_451": {
                "variable": {
                    "value": "GRU_classifiers",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "GRU_classifiers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[GRU_Head(self._opt.hidden_size, self._opt.hidden_size // 2, output_sizes[i]) for i in range(len(self._opt.tasks))]",
                            "ListComp"
                        ],
                        [
                            "nn.ModuleList(GRU_classifiers)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_599": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image_dataset(opt, transform=val_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_359": {
                "variable": {
                    "value": "self.resnet50",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.resnet50",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "self._opt.gpu_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_454": {
                "variable": {
                    "value": "self.resnet50_GRU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.resnet50_GRU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "self._opt.gpu_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_609": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_250": {
                "input": {
                    "value": "self.fc_0(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_362": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_370": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_457": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_464": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_53": {
                "tensors": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_317": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_385": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output['EXPR'].cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_385": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_479": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output['EXPR'].cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_479": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_389": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output['VA'][:, :N].cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_390": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output['VA'][:, N:].cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_483": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output['VA'][:, :, :N].cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_484": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output['VA'][:, :, N:].cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_382": {
                "input": {
                    "value": "output['AU'].cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_476": {
                "input": {
                    "value": "output['AU'].cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}