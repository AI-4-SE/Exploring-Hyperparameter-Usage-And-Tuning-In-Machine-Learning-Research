{
    "test_segmentation_deeplab.py": {
        "tensorflow": {
            "Graph_25": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_43": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_144": {
                "dirname": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'deeplab_model'",
                            "str"
                        ]
                    ]
                }
            },
            "import_graph_def_41": {
                "graph_def": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.GraphDef.FromString(file_handle.read())",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "data_loader.py": {
        "torch": {
            "from_numpy_309": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pic.transpose((2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_311": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pic",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "functions.py": {
        "torch": {
            "zeros_16": {
                "variable": {
                    "value": "image_sh",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "fg_pred.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_27": {
                "variable": {
                    "value": "alpha_pred_sh",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(alpha_pred[t, :, :, -n:], alpha_pred[t, :, :, :-n])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_28": {
                "variable": {
                    "value": "fg_pred_sh",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fg_pred[t, :, :, -n:], fg_pred[t, :, :, :-n])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "loss_functions.py": {
        "torch": {
            "Tensor_40": {
                "variable": {
                    "value": "fx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_41": {
                "variable": {
                    "value": "fy",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_43": {
                "variable": {
                    "value": "G_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha",
                            "Method Argument"
                        ],
                        [
                            "alpha",
                            "Method Argument"
                        ],
                        [
                            "alpha",
                            "Method Argument"
                        ],
                        [
                            "alpha",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "fy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(fy.cuda())",
                            "Call"
                        ],
                        [
                            "Variable(fy.cuda())",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_44": {
                "variable": {
                    "value": "G_y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(alpha_pred + 1) / 2",
                            "BinOp"
                        ],
                        [
                            "alpha_pred",
                            "Method Argument"
                        ],
                        [
                            "alpha_pred",
                            "Method Argument"
                        ],
                        [
                            "alpha_pred",
                            "Method Argument"
                        ],
                        [
                            "alpha_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "fy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(fy.cuda())",
                            "Call"
                        ],
                        [
                            "Variable(fy.cuda())",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_56": {
                "variable": {
                    "value": "fx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_57": {
                "variable": {
                    "value": "fy",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_59": {
                "variable": {
                    "value": "G_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha",
                            "Method Argument"
                        ],
                        [
                            "alpha",
                            "Method Argument"
                        ],
                        [
                            "alpha",
                            "Method Argument"
                        ],
                        [
                            "alpha",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "fy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(fy.cuda())",
                            "Call"
                        ],
                        [
                            "Variable(fy.cuda())",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_71": {
                "variable": {
                    "value": "MSE",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_61": {
                "input": {
                    "value": "torch.abs(G_y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_76": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "pred[i][0].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "pred[i][0].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_61": {
                "input": {
                    "value": "G_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(alpha, fy, padding=1)",
                            "Call"
                        ],
                        [
                            "F.conv2d(alpha, fy, padding=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_91": {
                "input": {
                    "value": "mask[i, ...]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_91": {
                "input": {
                    "value": "alpha[i, ...] * mask[i, ...] - alpha_pred[i, ...] * mask[i, ...]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "networks.py": {
        "torch": {
            "Sequential_47": {
                "variable": {
                    "value": "self.model_enc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model_enc1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.model_enc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model_enc2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.model_enc_back",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model_enc_back",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.model_enc_seg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model_enc_seg",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.model_enc_multi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model_enc_multi",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.comb_back",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ngf * mult * 2, nf_part, kernel_size=1, stride=1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.comb_seg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ngf * mult * 2, nf_part, kernel_size=1, stride=1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.comb_multi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ngf * mult * 2, nf_part, kernel_size=1, stride=1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.model_res_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model_res_dec",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "variable": {
                    "value": "self.model_res_dec_al",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model_res_dec_al",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.model_res_dec_fg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model_res_dec_fg",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "variable": {
                    "value": "self.model_al_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model_dec_al",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.model_dec_fg1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model_dec_fg1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "self.model_fg_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model_dec_fg2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_99": {
                "tensors": {
                    "value": "[img_feat, back_feat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_137": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_ch, out_ch, 3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_151": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_ch, out_ch, 3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_168": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_ch, out_ch, 1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_183": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(scale_factor=2, mode='bilinear')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_196": {
                "variable": {
                    "value": "self.fullc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_ch, out_ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AvgPool2d_265": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "normal_126": {
                "mean": {
                    "value": "m.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normal_130": {
                "mean": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "generator": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_240": {
                "*args": {
                    "value": "*conv_block",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_330": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*sequence_stream",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_18": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "input_nc[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_18": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_19": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_20": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_24": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "input_nc[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_24": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_31": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "input_nc[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_31": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_40": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "input_nc[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_40": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "ngf * mult * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nf_part",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "ngf * mult * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nf_part",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "ngf * mult * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nf_part",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_56": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "ngf * mult + 3 * nf_part",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_76": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_79": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "in_channels": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(ngf * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_80": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_80": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_101": {
                "tensors": {
                    "value": "[img_feat, oth_feat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_108": {
                "tensors": {
                    "value": "[out_dec_fg1, img_feat1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_138": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_139": {
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_140": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_152": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_153": {
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_154": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_169": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_170": {
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_171": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_184": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_185": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_186": {
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_187": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_197": {
                "in_features": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_198": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_222": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_224": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_237": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * mult * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_28": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * mult * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_35": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * mult * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_44": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_75": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(ngf * mult / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_214": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_226": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_230": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_299": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_299": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_313": {
                "in_channels": {
                    "value": "nf_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "variable"
                        ],
                        [
                            "nf",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ndf",
                            "variable"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_315": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_318": {
                "in_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ndf",
                            "variable"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "ReplicationPad2d_216": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_232": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_306": {
                "in_channels": {
                    "value": "nf_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "variable"
                        ],
                        [
                            "nf",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ndf",
                            "variable"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_307": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_321": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_325": {
                "*args": {
                    "value": "*sequence[n]",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "test_background-matting_image.py": {
        "torch": {
            "DataParallel_56": {
                "variable": {
                    "value": "netM",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ResnetConditionHR(input_nc=(3, 3, 1, 4), output_nc=4, n_blocks1=7, n_blocks2=3)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(netM)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_num_threads_18": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_149": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bgr_img.transpose((2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_149": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_150": {
                "variable": {
                    "value": "bg",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bg_im.transpose((2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_150": {
                "variable": {
                    "value": "bg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_151": {
                "variable": {
                    "value": "rcnn_al",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rcnn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.imread(os.path.join(data_path, filename.replace('_img', '_masksDL')), 0)",
                            "Call"
                        ],
                        [
                            "crop_list[2]",
                            "Subscript"
                        ],
                        [
                            "rcnn.astype(np.float32) / 255",
                            "BinOp"
                        ],
                        [
                            "np.delete(rcnn, del_id, 0)",
                            "Call"
                        ],
                        [
                            "cv2.copyMakeBorder(rcnn, 0, K + len(del_id), 0, 0, cv2.BORDER_REPLICATE)",
                            "Call"
                        ],
                        [
                            "cv2.erode(rcnn, kernel_er, iterations=10)",
                            "Call"
                        ],
                        [
                            "cv2.dilate(rcnn, kernel_dil, iterations=5)",
                            "Call"
                        ],
                        [
                            "cv2.GaussianBlur(rcnn.astype(np.float32), (31, 31), 0)",
                            "Call"
                        ],
                        [
                            "(255 * rcnn).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.delete(rcnn, range(reso[0], reso[0] + K), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_151": {
                "variable": {
                    "value": "rcnn_al",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_152": {
                "variable": {
                    "value": "multi_fr",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "multi_fr.transpose((2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_152": {
                "variable": {
                    "value": "multi_fr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_57": {
                "f": {
                    "value": "model_name1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fo[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_157": {
                "variable": {
                    "value": "input_im",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img, bg, rcnn_al, multi_fr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_adobe.py": {
        "torch": {
            "DataLoader_62": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "traindata",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AdobeDataAffineHR(csv_file='Data_adobe/Adobe_train_data.csv', data_config=data_config_train, transform=None)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_filter_none",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collate_filter_none",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_69": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ResnetConditionHR(input_nc=(3, 3, 1, 4), output_nc=4, n_blocks1=7, n_blocks2=3, norm_layer=nn.BatchNorm2d)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(net)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_79": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_179": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_dir + 'net_epoch_%d_%.4f.pth' % (epoch, testL / ct_tst)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_180": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_dir + 'optim_epoch_%d_%.4f.pth' % (epoch, testL / ct_tst)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_108": {
                "*size": {
                    "value": "alpha.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train_real_fixed.py": {
        "torch": {
            "DataLoader_63": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "traindata",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VideoData(csv_file='Video_data_train.csv', data_config=data_config_train, transform=None)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_filter_none",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collate_filter_none",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_69": {
                "variable": {
                    "value": "netB",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ResnetConditionHR(input_nc=(3, 3, 1, 4), output_nc=4, n_blocks1=args.n_blocks1, n_blocks2=args.n_blocks2)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(netB)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_77": {
                "variable": {
                    "value": "netG",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netG",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ResnetConditionHR(input_nc=(3, 3, 1, 4), output_nc=4, n_blocks1=args.n_blocks1, n_blocks2=args.n_blocks2)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(netG)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_83": {
                "variable": {
                    "value": "netD",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netD",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MultiscaleDiscriminator(input_nc=3, num_D=1, norm_layer=nn.InstanceNorm2d, ndf=64)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(netD)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_92": {
                "variable": {
                    "value": "optimizerG",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_93": {
                "variable": {
                    "value": "optimizerD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_70": {
                "f": {
                    "value": "args.init_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_237": {
                "obj": {
                    "value": "netG.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_dir + 'netG_epoch_%d.pth' % epoch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_238": {
                "obj": {
                    "value": "optimizerG.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_dir + 'optimG_epoch_%d.pth' % epoch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_239": {
                "obj": {
                    "value": "netD.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_dir + 'netD_epoch_%d.pth' % epoch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_240": {
                "obj": {
                    "value": "optimizerD.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_dir + 'optimD_epoch_%d.pth' % epoch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_121": {
                "*size": {
                    "value": "seg.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}