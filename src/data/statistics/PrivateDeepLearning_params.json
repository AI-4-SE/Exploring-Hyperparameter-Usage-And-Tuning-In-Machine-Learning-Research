{
    "AdLM/Cifar10/AdLMCNN_CIFAR.py": {
        "tensorflow": {
            "DEFINE_string_26": {
                "name": {
                    "value": "checkpoint_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "os.getcwd() + '/tmp/cifar10_train'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where to read model checkpoints.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_max_54": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(inputs, shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_58": {
                "variable": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "_x.get_shape()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_61": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_88": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([kernel_size, kernel_size, in_features, out_features])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_95": {
                "variable": {
                    "value": "current",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "current",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.batch_norm(current, scale=True, is_training=is_training, updates_collections=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(current)",
                            "Call"
                        ],
                        [
                            "conv2d(current, in_features, out_features, kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(current, keep_prob)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "tf.concat((current, tmp), axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat((conv2, norm1), axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat((conv2, norm1), axis=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_97": {
                "variable": {
                    "value": "current",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "current",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.batch_norm(current, scale=True, is_training=is_training, updates_collections=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(current)",
                            "Call"
                        ],
                        [
                            "conv2d(current, in_features, out_features, kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(current, keep_prob)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "tf.concat((current, tmp), axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat((conv2, norm1), axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat((conv2, norm1), axis=3)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_156": {
                "variable": {
                    "value": "current",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(conv2, norm1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_212": {
                "variable": {
                    "value": "softmax_linear",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(local4, weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [256], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [hk], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [10], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [256], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [hk], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [10], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_246": {
                "variable": {
                    "value": "current",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(conv2, norm1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_287": {
                "variable": {
                    "value": "softmax_linear",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(local4, weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [256], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [hk], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [10], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [256], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [hk], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [10], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_82": {
                "variable": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_loss(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool_101": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, s, s, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, s, s, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_108": {
                "variable": {
                    "value": "current",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(current, tmp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_133": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 3, 128], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 128, 128], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 256, 256], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 3, 128], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 128, 128], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 256, 256], stddev=0.05, wd=0.0)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_136": {
                "variable": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input, W, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [256], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [hk], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [10], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [256], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [hk], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [10], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_137": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_148": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.batch_norm(conv1, scale=True, is_training=True, updates_collections=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(conv1, scale=True, is_training=True, updates_collections=None)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 3, 128], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 128, 128], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 256, 256], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 3, 128], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 128, 128], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 256, 256], stddev=0.05, wd=0.0)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_150": {
                "variable": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input, W, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [256], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [hk], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [10], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [256], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [hk], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [10], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_151": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_166": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.batch_norm(current, scale=True, is_training=True, updates_collections=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(current, scale=True, is_training=True, updates_collections=None)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 3, 128], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 128, 128], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 256, 256], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 3, 128], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 128, 128], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 256, 256], stddev=0.05, wd=0.0)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_168": {
                "variable": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input, W, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [256], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [hk], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [10], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [256], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [hk], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [10], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_169": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_183": {
                "variable": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "avg_pool(norm3, 2)",
                            "Call"
                        ],
                        [
                            "avg_pool(norm3, 2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 5 * 5 * 256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_184": {
                "variable": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(h_pool2_flat, weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [256], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [hk], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [10], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [256], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [hk], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [10], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "moments_186": {
                "variable": {
                    "value": "(batch_mean2, batch_var2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(h_pool2_flat, weights), biases, name=scope.name)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(h_pool2_flat, weights), biases, name=scope.name)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_187": {
                "variable": {
                    "value": "scale2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([hk])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_188": {
                "variable": {
                    "value": "beta2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([hk])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_189": {
                "variable": {
                    "value": "BN_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(h_pool2_flat, weights), biases, name=scope.name)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(h_pool2_flat, weights), biases, name=scope.name)",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "batch_mean2",
                    "type": "variable",
                    "possible_values": []
                },
                "variance": {
                    "value": "batch_var2",
                    "type": "variable",
                    "possible_values": []
                },
                "offset": {
                    "value": "beta2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([hk]))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.zeros([hk]))",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.ones([hk]))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.ones([hk]))",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_192": {
                "variable": {
                    "value": "local4",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "local4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(local4, -1, 1)",
                            "Call"
                        ],
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_222": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 3, 128], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 128, 128], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 256, 256], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 3, 128], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 128, 128], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 256, 256], stddev=0.05, wd=0.0)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_225": {
                "variable": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input, W, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [256], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [hk], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [10], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [256], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [hk], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [10], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_226": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_238": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.batch_norm(conv1, scale=True, is_training=True, updates_collections=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(conv1, scale=True, is_training=True, updates_collections=None)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 3, 128], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 128, 128], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 256, 256], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 3, 128], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 128, 128], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 256, 256], stddev=0.05, wd=0.0)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_240": {
                "variable": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input, W, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [256], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [hk], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [10], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [256], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [hk], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [10], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_241": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_256": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.batch_norm(current, scale=True, is_training=True, updates_collections=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(current, scale=True, is_training=True, updates_collections=None)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 3, 128], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 128, 128], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 256, 256], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 3, 128], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 128, 128], stddev=0.05, wd=0.0)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 256, 256], stddev=0.05, wd=0.0)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_258": {
                "variable": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input, W, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, kernel, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [256], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [hk], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [10], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [256], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [hk], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [10], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_259": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_273": {
                "variable": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "avg_pool(norm3, 2)",
                            "Call"
                        ],
                        [
                            "avg_pool(norm3, 2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 5 * 5 * 256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_274": {
                "variable": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(h_pool2_flat, weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [256], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [hk], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [10], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [256], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [hk], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [10], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "moments_276": {
                "variable": {
                    "value": "(batch_mean2, batch_var2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(h_pool2_flat, weights), biases, name=scope.name)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(h_pool2_flat, weights), biases, name=scope.name)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_277": {
                "variable": {
                    "value": "scale2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([hk])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_278": {
                "variable": {
                    "value": "beta2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([hk])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_279": {
                "variable": {
                    "value": "BN_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(h_pool2_flat, weights), biases, name=scope.name)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(h_pool2_flat, weights), biases, name=scope.name)",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "batch_mean2",
                    "type": "variable",
                    "possible_values": []
                },
                "variance": {
                    "value": "batch_var2",
                    "type": "variable",
                    "possible_values": []
                },
                "offset": {
                    "value": "beta2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([hk]))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.zeros([hk]))",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.ones([hk]))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.ones([hk]))",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Variable_294": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "one_hot_298": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(labels, 10)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_312": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.all_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "merge_all_315": {
                "variable": {
                    "value": "summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_318": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_321": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(log_device_placement=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FileWriter_327": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.getcwd() + '/tmp/cifar10_train'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_331": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.checkpoint_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Exists_370": {
                "filename": {
                    "value": "/tmp/cifar10_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MakeDirs_372": {
                "dirname": {
                    "value": "/tmp/cifar10_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_393": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_54": {
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "shape + [num_channels // num_units]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "add_to_collection_83": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_128": {
                "name_or_scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_143": {
                "name_or_scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_161": {
                "name_or_scope": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_179": {
                "name_or_scope": {
                    "value": "local4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_211": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_212": {
                "a": {
                    "value": "local4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(local4, -1, 1)",
                            "Call"
                        ],
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_with_weight_decay('weights', shape=[5 * 5 * 256, hk], stddev=0.04, wd=0.004)",
                            "Call"
                        ],
                        [
                            "cifar10._variable_with_weight_decay('weights', [hk, 10], stddev=1 / (hk * 1.0), wd=0.0)",
                            "Call"
                        ],
                        [
                            "cifar10._variable_with_weight_decay('weights', shape=[5 * 5 * 256, hk], stddev=0.04, wd=0.004)",
                            "Call"
                        ],
                        [
                            "cifar10._variable_with_weight_decay('weights', [hk, 10], stddev=1 / (hk * 1.0), wd=0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_217": {
                "name_or_scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_233": {
                "name_or_scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_251": {
                "name_or_scope": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_269": {
                "name_or_scope": {
                    "value": "local4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_286": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_287": {
                "a": {
                    "value": "local4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(local4, -1, 1)",
                            "Call"
                        ],
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_with_weight_decay('weights', shape=[5 * 5 * 256, hk], stddev=0.04, wd=0.004)",
                            "Call"
                        ],
                        [
                            "cifar10._variable_with_weight_decay('weights', [hk, 10], stddev=1 / (hk * 1.0), wd=0.0)",
                            "Call"
                        ],
                        [
                            "cifar10._variable_with_weight_decay('weights', shape=[5 * 5 * 256, hk], stddev=0.04, wd=0.004)",
                            "Call"
                        ],
                        [
                            "cifar10._variable_with_weight_decay('weights', [hk, 10], stddev=1 / (hk * 1.0), wd=0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_293": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_325": {
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session(config=tf.ConfigProto(log_device_placement=False))",
                            "Call"
                        ]
                    ]
                }
            },
            "DeleteRecursively_371": {
                "dirname": {
                    "value": "/tmp/cifar10_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_59": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "l2_loss_82": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_on_cpu(name, shape, initializer=tf.contrib.layers.xavier_initializer_conv2d())",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_135": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_149": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_167": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_182": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_184": {
                "a": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pool3, [-1, 5 * 5 * 256])",
                            "Call"
                        ],
                        [
                            "tf.reshape(pool3, [-1, 5 * 5 * 256])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_with_weight_decay('weights', shape=[5 * 5 * 256, hk], stddev=0.04, wd=0.004)",
                            "Call"
                        ],
                        [
                            "cifar10._variable_with_weight_decay('weights', [hk, 10], stddev=1 / (hk * 1.0), wd=0.0)",
                            "Call"
                        ],
                        [
                            "cifar10._variable_with_weight_decay('weights', shape=[5 * 5 * 256, hk], stddev=0.04, wd=0.004)",
                            "Call"
                        ],
                        [
                            "cifar10._variable_with_weight_decay('weights', [hk, 10], stddev=1 / (hk * 1.0), wd=0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_187": {
                "shape": {
                    "value": "[hk]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_188": {
                "shape": {
                    "value": "[hk]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_initializer_224": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_239": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_257": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_272": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_274": {
                "a": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pool3, [-1, 5 * 5 * 256])",
                            "Call"
                        ],
                        [
                            "tf.reshape(pool3, [-1, 5 * 5 * 256])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_with_weight_decay('weights', shape=[5 * 5 * 256, hk], stddev=0.04, wd=0.004)",
                            "Call"
                        ],
                        [
                            "cifar10._variable_with_weight_decay('weights', [hk, 10], stddev=1 / (hk * 1.0), wd=0.0)",
                            "Call"
                        ],
                        [
                            "cifar10._variable_with_weight_decay('weights', shape=[5 * 5 * 256, hk], stddev=0.04, wd=0.004)",
                            "Call"
                        ],
                        [
                            "cifar10._variable_with_weight_decay('weights', [hk, 10], stddev=1 / (hk * 1.0), wd=0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_277": {
                "shape": {
                    "value": "[hk]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_278": {
                "shape": {
                    "value": "[hk]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "all_variables_312": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_321": {
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "AdLM/Cifar10/CifarEval_AdLM2.py": {
        "tensorflow": {
            "DEFINE_string_38": {
                "name": {
                    "value": "eval_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "os.getcwd() + '/tmp/cifar10_eval'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where to write event logs.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_40": {
                "name": {
                    "value": "eval_data",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "test",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "\"Either 'test' or 'train_eval'.\"",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_42": {
                "name": {
                    "value": "checkpoint_dir_eval",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "os.getcwd() + '/tmp/cifar10_train'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where to read model checkpoints.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_44": {
                "name": {
                    "value": "eval_interval_secs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "60 * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "help": {
                    "value": "How often to run the eval.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_46": {
                "name": {
                    "value": "num_examples",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of examples to run.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_61": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.checkpoint_dir_eval",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Coordinator_75": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_113": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.one_hot(labels, 10)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_119": {
                "variable": {
                    "value": "top_k_op",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(logits, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(labels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_122": {
                "variable": {
                    "value": "variable_averages",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "cifar10.MOVING_AVERAGE_DECAY",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_125": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "variables_to_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable_averages.variables_to_restore()",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_all_128": {
                "variable": {
                    "value": "summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_130": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "FLAGS.eval_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Exists_141": {
                "filename": {
                    "value": "FLAGS.eval_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_143": {
                "dirname": {
                    "value": "FLAGS.eval_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Summary_96": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DeleteRecursively_142": {
                "dirname": {
                    "value": "FLAGS.eval_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_78": {
                "key": {
                    "value": "tf.GraphKeys.QUEUE_RUNNERS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_113": {
                "indices": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.one_hot(labels, 10), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_119": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.one_hot(labels, 10), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "AdLM/Cifar10/cifar10.py": {
        "tensorflow": {
            "cast_224": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_225": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "cross_entropy_per_example",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_227": {
                "variable": {
                    "value": "cross_entropy_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=logits, name='cross_entropy_per_example')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "cross_entropy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_246": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_296": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "logits.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_298": {
                "variable": {
                    "value": "relu_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits >= zeros",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.zeros_like(logits, dtype=logits.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_299": {
                "variable": {
                    "value": "neg_abs_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits >= zeros",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "-logits",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_301": {
                "variable": {
                    "value": "Taylor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "relu_logits - logits * labels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "math.log(2.0) + 0.5 * neg_abs_logits + 1.0 / 8.0 * neg_abs_logits ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_303": {
                "variable": {
                    "value": "zeros1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "perturbW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.where(cond1, perturbW, -perturbW)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "perturbW.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_305": {
                "variable": {
                    "value": "perturbW",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "perturbW >= zeros1",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "perturbW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.where(cond1, perturbW, -perturbW)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-perturbW",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_325": {
                "variable": {
                    "value": "loss_averages",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "avg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_326": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_377": {
                "variable": {
                    "value": "variable_averages",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "MOVING_AVERAGE_DECAY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9999",
                            "Constant"
                        ]
                    ]
                },
                "num_updates": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "histogram_117": {
                "name": {
                    "value": "tensor_name + '/activations'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_118": {
                "name": {
                    "value": "tensor_name + '/sparsity'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.nn.zero_fraction(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_134": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float16 if FLAGS.use_fp16 else tf.float32",
                            "IfExp"
                        ],
                        [
                            "tf.float16 if FLAGS.use_fp16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "multiply_160": {
                "variable": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_loss(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_183": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_184": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_207": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_208": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_to_collection_228": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "cross_entropy_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(cross_entropy, name='cross_entropy')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(Taylor, name='cross_entropy') + tf.reduce_mean(perturbW, name='perturbW')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "add_n_232": {
                "inputs": {
                    "value": "tf.get_collection('losses')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_309": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "cross_entropy_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(cross_entropy, name='cross_entropy')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(Taylor, name='cross_entropy') + tf.reduce_mean(perturbW, name='perturbW')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "add_n_311": {
                "inputs": {
                    "value": "tf.get_collection('losses')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_354": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_361": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_op_382": {
                "variable": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zero_fraction_119": {
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_132": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_158": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float16 if FLAGS.use_fp16 else tf.float32",
                            "IfExp"
                        ],
                        [
                            "tf.float16 if FLAGS.use_fp16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "add_to_collection_161": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_232": {
                "key": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_307": {
                "input_tensor": {
                    "value": "perturbW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.where(cond1, perturbW, -perturbW)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "perturbW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_311": {
                "key": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_334": {
                "name": {
                    "value": "l.op.name + ' (raw)'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "losses + [total_loss]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_335": {
                "name": {
                    "value": "l.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "loss_averages.average(l)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_360": {
                "control_inputs": {
                    "value": "[loss_averages_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trainable_variables_379": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_381": {
                "control_inputs": {
                    "value": "[apply_gradient_op, variables_averages_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_loss_160": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, initializer=initializer, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu(name, shape, tf.truncated_normal_initializer(stddev=stddev, dtype=dtype))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "AdLM/Cifar10/cifar10_input.py": {
        "tensorflow": {
            "FixedLengthRecordReader_83": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "record_bytes": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(value, tf.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "decode_raw_87": {
                "variable": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_90": {
                "variable": {
                    "value": "result.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.strided_slice(record_bytes, [0], [label_bytes])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_95": {
                "variable": {
                    "value": "depth_major",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.strided_slice(record_bytes, [label_bytes], [label_bytes + image_bytes])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[result.depth, result.height, result.width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_100": {
                "variable": {
                    "value": "result.uint8image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "depth_major",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.strided_slice(record_bytes, [label_bytes], [label_bytes + image_bytes]), [result.depth, result.height, result.width])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "string_input_producer_162": {
                "variable": {
                    "value": "filename_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "filenames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[os.path.join(data_dir, 'data_batch_%d.bin' % i) for i in xrange(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[os.path.join(data_dir, 'data_batch_%d.bin' % i) for i in xrange(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[os.path.join(data_dir, 'test_batch.bin')]",
                            "List"
                        ]
                    ]
                }
            },
            "cast_166": {
                "variable": {
                    "value": "reshaped_image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "read_input.uint8image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_flip_left_right_173": {
                "variable": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "reshaped_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(read_input.uint8image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(read_input.uint8image, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_brightness_179": {
                "variable": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_flip_left_right(reshaped_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "distorted_image / 127.5 - 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.random_crop(distorted_image + W_conv1Noise, [height, width, 3])",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "63",
                    "type": "int",
                    "possible_values": []
                }
            },
            "random_contrast_181": {
                "variable": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_flip_left_right(reshaped_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "distorted_image / 127.5 - 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.random_crop(distorted_image + W_conv1Noise, [height, width, 3])",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_crop_203": {
                "variable": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "distorted_image + W_conv1Noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "[height, width, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "per_image_standardization_206": {
                "variable": {
                    "value": "float_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_flip_left_right(reshaped_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "distorted_image / 127.5 - 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.random_crop(distorted_image + W_conv1Noise, [height, width, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "string_input_producer_251": {
                "variable": {
                    "value": "filename_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "filenames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[os.path.join(data_dir, 'data_batch_%d.bin' % i) for i in xrange(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[os.path.join(data_dir, 'data_batch_%d.bin' % i) for i in xrange(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[os.path.join(data_dir, 'test_batch.bin')]",
                            "List"
                        ]
                    ]
                }
            },
            "cast_255": {
                "variable": {
                    "value": "reshaped_image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "read_input.uint8image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "per_image_standardization_267": {
                "variable": {
                    "value": "float_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "resized_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_image_with_crop_or_pad(reshaped_image, height, width)",
                            "Call"
                        ],
                        [
                            "resized_image / 127.5 - 1.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shuffle_batch_125": {
                "variable": {
                    "value": "(images, label_batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "num_preprocess_threads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "capacity": {
                    "value": "min_queue_examples + 3 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "min_queue_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(NUM_EXAMPLES_PER_EPOCH_FOR_TRAIN * min_fraction_of_examples_in_queue)",
                            "Call"
                        ],
                        [
                            "int(num_examples_per_epoch * min_fraction_of_examples_in_queue)",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_132": {
                "variable": {
                    "value": "(images, label_batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "num_preprocess_threads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "capacity": {
                    "value": "min_queue_examples + 3 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "image_139": {
                "name": {
                    "value": "images",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "strided_slice_91": {
                "input_": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(value, tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[label_bytes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "strided_slice_96": {
                "input_": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(value, tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[label_bytes]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[label_bytes + image_bytes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_141": {
                "tensor": {
                    "value": "label_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Exists_158": {
                "filename": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filenames",
                            "Name"
                        ],
                        [
                            "filenames",
                            "Name"
                        ]
                    ]
                }
            },
            "Exists_247": {
                "filename": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filenames",
                            "Name"
                        ],
                        [
                            "filenames",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "AdLM/Cifar10/dpLRP/dpLRP_Cifar10.py": {
        "tensorflow": {
            "placeholder_81": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_82": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "truth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_86": {
                "variable": {
                    "value": "conv1_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "c1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "xavier",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[5, 5, 3, 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_87": {
                "variable": {
                    "value": "conv1_biases",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([64])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_88": {
                "variable": {
                    "value": "conv2_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "c2",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "xavier",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[5, 5, 64, 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_89": {
                "variable": {
                    "value": "conv2_biases",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([64])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_90": {
                "variable": {
                    "value": "conv3_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "c3",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "xavier",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[4, 4, 64, 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_91": {
                "variable": {
                    "value": "conv3_biases",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([64])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_92": {
                "variable": {
                    "value": "fc1_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([4 * 4 * 64, 192], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_93": {
                "variable": {
                    "value": "fc1_biases",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([192])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_94": {
                "variable": {
                    "value": "fc2_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([192, 10], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_95": {
                "variable": {
                    "value": "fc2_biases",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([10])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_98": {
                "variable": {
                    "value": "reshaped_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 32, 32, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "absolute_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_100": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reshaped_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, 32, 32, 3], name='absolute_input')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "conv1_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='c1', initializer=xavier, shape=[5, 5, 3, 64])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_101": {
                "variable": {
                    "value": "relu1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv1, conv1_biases)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool_102": {
                "variable": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relu1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv1, conv1_biases))",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_105": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.lrn(pool1, 4, bias=1.0, alpha=0.001 / 9.0, beta=0.75, name='norm1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "conv2_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='c2', initializer=xavier, shape=[5, 5, 64, 64])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_106": {
                "variable": {
                    "value": "relu2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv2, conv2_biases)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool_108": {
                "variable": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.lrn(relu2, 4, bias=1.0, alpha=0.001 / 9.0, beta=0.75, name='norm2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_110": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(norm2, ksize=[1, 3, 3, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "conv3_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='c3', initializer=xavier, shape=[4, 4, 64, 64])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_111": {
                "variable": {
                    "value": "relu3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv3, conv3_biases)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool_113": {
                "variable": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.lrn(relu3, 4, bias=1.0, alpha=0.001 / 9.0, beta=0.75, name='norm3')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_116": {
                "variable": {
                    "value": "reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(norm3, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, pool_shape[1] * pool_shape[2] * pool_shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_117": {
                "variable": {
                    "value": "relu4",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(reshaped, fc1_weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "fc1_biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([192]))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_119": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(relu4, fc2_weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "fc2_biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([10]))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "absolute_output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_122": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(labels=y_, logits=y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_123": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "InteractiveSession_126": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_134": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y_, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_135": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reset_default_graph_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_87": {
                "shape": {
                    "value": "[64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "shape": {
                    "value": "[64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_91": {
                "shape": {
                    "value": "[64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_92": {
                "shape": {
                    "value": "[4 * 4 * 64, 192]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "shape": {
                    "value": "[192]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_94": {
                "shape": {
                    "value": "[192, 10]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_95": {
                "shape": {
                    "value": "[10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_101": {
                "value": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(reshaped_input, conv1_weights, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "conv1_biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([64]))",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_106": {
                "value": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(norm1, conv2_weights, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "conv2_biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([64]))",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_111": {
                "value": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(pool2, conv3_weights, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "conv3_biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([64]))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_117": {
                "a": {
                    "value": "reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pool3, [-1, pool_shape[1] * pool_shape[2] * pool_shape[3]])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "fc1_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([4 * 4 * 64, 192], stddev=0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_119": {
                "a": {
                    "value": "relu4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(reshaped, fc1_weights), fc1_biases)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "fc2_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([192, 10], stddev=0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_122": {
                "labels": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 10], name='truth')",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(relu4, fc2_weights), fc2_biases, name='absolute_output')",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_134": {
                "input": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 10], name='truth')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_135": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "AdLM/Cifar10/dpLRP/lrp.py": {
        "tensorflow": {
            "maximum_86": {
                "variable": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_dict[weight_name]",
                            "Subscript"
                        ],
                        [
                            "var_dict[weight_name]",
                            "Subscript"
                        ],
                        [
                            "tf.maximum(0.0, W)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_89": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F / Z",
                            "BinOp"
                        ],
                        [
                            "F / Z",
                            "BinOp"
                        ],
                        [
                            "F / Z",
                            "BinOp"
                        ],
                        [
                            "F / Z",
                            "BinOp"
                        ],
                        [
                            "F / Z",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(V)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_97": {
                "variable": {
                    "value": "Wn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_dict[weight_name]",
                            "Subscript"
                        ],
                        [
                            "var_dict[weight_name]",
                            "Subscript"
                        ],
                        [
                            "tf.maximum(0.0, W)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_98": {
                "variable": {
                    "value": "Wp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_dict[weight_name]",
                            "Subscript"
                        ],
                        [
                            "var_dict[weight_name]",
                            "Subscript"
                        ],
                        [
                            "tf.maximum(0.0, W)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_102": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.get_tensor_by_name(val_name)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_dict[weight_name]",
                            "Subscript"
                        ],
                        [
                            "var_dict[weight_name]",
                            "Subscript"
                        ],
                        [
                            "tf.maximum(0.0, W)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 1, 1, 1] if strides is None else strides",
                            "IfExp"
                        ],
                        [
                            "[1, 1, 1, 1] if strides is None else strides",
                            "IfExp"
                        ],
                        [
                            "[1, 2, 2, 1] if strides is None else strides",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_103": {
                "variable": {
                    "value": "cp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "Wp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(0.0, W)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 1, 1, 1] if strides is None else strides",
                            "IfExp"
                        ],
                        [
                            "[1, 1, 1, 1] if strides is None else strides",
                            "IfExp"
                        ],
                        [
                            "[1, 2, 2, 1] if strides is None else strides",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_104": {
                "variable": {
                    "value": "cn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "Wn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(0.0, W)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 1, 1, 1] if strides is None else strides",
                            "IfExp"
                        ],
                        [
                            "[1, 1, 1, 1] if strides is None else strides",
                            "IfExp"
                        ],
                        [
                            "[1, 2, 2, 1] if strides is None else strides",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_backprop_input_108": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input_sizes": {
                    "value": "tf.shape(X)",
                    "type": "Call",
                    "possible_values": []
                },
                "filter": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_dict[weight_name]",
                            "Subscript"
                        ],
                        [
                            "var_dict[weight_name]",
                            "Subscript"
                        ],
                        [
                            "tf.maximum(0.0, W)",
                            "Call"
                        ]
                    ]
                },
                "out_backprop": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F / Z",
                            "BinOp"
                        ],
                        [
                            "F / Z",
                            "BinOp"
                        ],
                        [
                            "F / Z",
                            "BinOp"
                        ],
                        [
                            "F / Z",
                            "BinOp"
                        ],
                        [
                            "F / Z",
                            "BinOp"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 1, 1, 1] if strides is None else strides",
                            "IfExp"
                        ],
                        [
                            "[1, 1, 1, 1] if strides is None else strides",
                            "IfExp"
                        ],
                        [
                            "[1, 2, 2, 1] if strides is None else strides",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_backprop_input_109": {
                "variable": {
                    "value": "gp",
                    "type": "variable",
                    "possible_values": []
                },
                "input_sizes": {
                    "value": "tf.shape(X)",
                    "type": "Call",
                    "possible_values": []
                },
                "filter": {
                    "value": "Wp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(0.0, W)",
                            "Call"
                        ]
                    ]
                },
                "out_backprop": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F / Z",
                            "BinOp"
                        ],
                        [
                            "F / Z",
                            "BinOp"
                        ],
                        [
                            "F / Z",
                            "BinOp"
                        ],
                        [
                            "F / Z",
                            "BinOp"
                        ],
                        [
                            "F / Z",
                            "BinOp"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 1, 1, 1] if strides is None else strides",
                            "IfExp"
                        ],
                        [
                            "[1, 1, 1, 1] if strides is None else strides",
                            "IfExp"
                        ],
                        [
                            "[1, 2, 2, 1] if strides is None else strides",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_backprop_input_110": {
                "variable": {
                    "value": "gn",
                    "type": "variable",
                    "possible_values": []
                },
                "input_sizes": {
                    "value": "tf.shape(X)",
                    "type": "Call",
                    "possible_values": []
                },
                "filter": {
                    "value": "Wn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(0.0, W)",
                            "Call"
                        ]
                    ]
                },
                "out_backprop": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F / Z",
                            "BinOp"
                        ],
                        [
                            "F / Z",
                            "BinOp"
                        ],
                        [
                            "F / Z",
                            "BinOp"
                        ],
                        [
                            "F / Z",
                            "BinOp"
                        ],
                        [
                            "F / Z",
                            "BinOp"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 1, 1, 1] if strides is None else strides",
                            "IfExp"
                        ],
                        [
                            "[1, 1, 1, 1] if strides is None else strides",
                            "IfExp"
                        ],
                        [
                            "[1, 2, 2, 1] if strides is None else strides",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "maximum_121": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_dict[weight_name]",
                            "Subscript"
                        ],
                        [
                            "var_dict[weight_name]",
                            "Subscript"
                        ],
                        [
                            "tf.maximum(0.0, W)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_backprop_input_125": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "input_sizes": {
                    "value": "tf.shape(X)",
                    "type": "Call",
                    "possible_values": []
                },
                "filter": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_dict[weight_name]",
                            "Subscript"
                        ],
                        [
                            "var_dict[weight_name]",
                            "Subscript"
                        ],
                        [
                            "tf.maximum(0.0, W)",
                            "Call"
                        ]
                    ]
                },
                "out_backprop": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F / Z",
                            "BinOp"
                        ],
                        [
                            "F / Z",
                            "BinOp"
                        ],
                        [
                            "F / Z",
                            "BinOp"
                        ],
                        [
                            "F / Z",
                            "BinOp"
                        ],
                        [
                            "F / Z",
                            "BinOp"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 1, 1, 1] if strides is None else strides",
                            "IfExp"
                        ],
                        [
                            "[1, 1, 1, 1] if strides is None else strides",
                            "IfExp"
                        ],
                        [
                            "[1, 2, 2, 1] if strides is None else strides",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_119": {
                "variable": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fprop_first(F, W, X, lowest, highest)",
                            "Call"
                        ],
                        [
                            "fprop(F, W, X)",
                            "Call"
                        ],
                        [
                            "fprop_pool(F, X)",
                            "Call"
                        ],
                        [
                            "fprop_conv_first(F, W, X, lowest, highest)",
                            "Call"
                        ],
                        [
                            "fprop_conv(F, W, X)",
                            "Call"
                        ],
                        [
                            "X * tf.matmul(S, tf.transpose(W)) - L * tf.matmul(S, tf.transpose(V)) - H * tf.matmul(S, tf.transpose(U))",
                            "BinOp"
                        ],
                        [
                            "X * C",
                            "BinOp"
                        ],
                        [
                            "X * g - L * gp - H * gn",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(F, (-1, xshape[1], xshape[2], fshape[-1] / (xshape[1] * xshape[2])))",
                            "Call"
                        ],
                        [
                            "X * C",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(F, (-1, int(np.ceil(xshape[1] / 2.0)), int(np.ceil(xshape[2] / 2.0)), xshape[3]))",
                            "Call"
                        ],
                        [
                            "X * C",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, xshape[1], xshape[2], fshape[-1] / (xshape[1] * xshape[2]))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_134": {
                "variable": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fprop_first(F, W, X, lowest, highest)",
                            "Call"
                        ],
                        [
                            "fprop(F, W, X)",
                            "Call"
                        ],
                        [
                            "fprop_pool(F, X)",
                            "Call"
                        ],
                        [
                            "fprop_conv_first(F, W, X, lowest, highest)",
                            "Call"
                        ],
                        [
                            "fprop_conv(F, W, X)",
                            "Call"
                        ],
                        [
                            "X * tf.matmul(S, tf.transpose(W)) - L * tf.matmul(S, tf.transpose(V)) - H * tf.matmul(S, tf.transpose(U))",
                            "BinOp"
                        ],
                        [
                            "X * C",
                            "BinOp"
                        ],
                        [
                            "X * g - L * gp - H * gn",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(F, (-1, xshape[1], xshape[2], fshape[-1] / (xshape[1] * xshape[2])))",
                            "Call"
                        ],
                        [
                            "X * C",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(F, (-1, int(np.ceil(xshape[1] / 2.0)), int(np.ceil(xshape[2] / 2.0)), xshape[3]))",
                            "Call"
                        ],
                        [
                            "X * C",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, int(np.ceil(xshape[1] / 2.0)), int(np.ceil(xshape[2] / 2.0)), xshape[3])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_default_graph_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "maximum_76": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_dict[weight_name]",
                            "Subscript"
                        ],
                        [
                            "var_dict[weight_name]",
                            "Subscript"
                        ],
                        [
                            "tf.maximum(0.0, W)",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_76": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_dict[weight_name]",
                            "Subscript"
                        ],
                        [
                            "var_dict[weight_name]",
                            "Subscript"
                        ],
                        [
                            "tf.maximum(0.0, W)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_87": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.get_tensor_by_name(val_name)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(0.0, W)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_89": {
                "a": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(0.0, W)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_108": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.get_tensor_by_name(val_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_109": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.get_tensor_by_name(val_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_110": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.get_tensor_by_name(val_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_123": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.get_tensor_by_name(val_name)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_dict[weight_name]",
                            "Subscript"
                        ],
                        [
                            "var_dict[weight_name]",
                            "Subscript"
                        ],
                        [
                            "tf.maximum(0.0, W)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 1, 1, 1] if strides is None else strides",
                            "IfExp"
                        ],
                        [
                            "[1, 1, 1, 1] if strides is None else strides",
                            "IfExp"
                        ],
                        [
                            "[1, 2, 2, 1] if strides is None else strides",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_125": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.get_tensor_by_name(val_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool_139": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.get_tensor_by_name(val_name)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 1, 1, 1] if strides is None else strides",
                            "IfExp"
                        ],
                        [
                            "[1, 1, 1, 1] if strides is None else strides",
                            "IfExp"
                        ],
                        [
                            "[1, 2, 2, 1] if strides is None else strides",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "ksize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 2, 2, 1] if ksize is None else ksize",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_collection_59": {
                "key": {
                    "value": "tf.GraphKeys.VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_79": {
                "a": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(0.0, W)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_81": {
                "a": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F / Z",
                            "BinOp"
                        ],
                        [
                            "F / Z",
                            "BinOp"
                        ],
                        [
                            "F / Z",
                            "BinOp"
                        ],
                        [
                            "F / Z",
                            "BinOp"
                        ],
                        [
                            "F / Z",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(V)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_81": {
                "a": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(0.0, W)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "AdLM/MNIST/AdLM.py": {
        "tensorflow": {
            "truncated_normal_33": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "shape + [num_channels // num_units]",
                            "BinOp"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_max_48": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(inputs, shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_52": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "shape + [num_channels // num_units]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "placeholder_155": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, image_size * image_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_156": {
                "variable": {
                    "value": "x_image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, image_size * image_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, image_size, image_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_161": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, image_size, image_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_163": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_image",
                            "Name"
                        ],
                        [
                            "z + noise",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(z, -10, 10)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-10",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_165": {
                "variable": {
                    "value": "h_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(z, W_conv1) + b_conv1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_170": {
                "variable": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(h_pool1, W_conv2) + b_conv2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_175": {
                "variable": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_pool_2x2(h_conv2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 7 * 7 * 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "moments_178": {
                "variable": {
                    "value": "(batch_mean2, batch_var2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_pool2_flat, W_fc1) + b_fc1",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_179": {
                "variable": {
                    "value": "scale2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([hk])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_180": {
                "variable": {
                    "value": "beta2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([hk])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_181": {
                "variable": {
                    "value": "BN_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_pool2_flat, W_fc1) + b_fc1",
                            "BinOp"
                        ]
                    ]
                },
                "mean": {
                    "value": "batch_mean2",
                    "type": "variable",
                    "possible_values": []
                },
                "variance": {
                    "value": "batch_var2",
                    "type": "variable",
                    "possible_values": []
                },
                "offset": {
                    "value": "beta2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([hk]))",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.ones([hk]))",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_183": {
                "variable": {
                    "value": "h_fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "BN_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.batch_normalization(z2, batch_mean2, batch_var2, beta2, scale2, 0.001)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_185": {
                "variable": {
                    "value": "h_fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "h_fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(BN_norm)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(h_fc1, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_193": {
                "variable": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_208": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_263": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_fc1, W_fc2) + b_fc2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "y_conv.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_265": {
                "variable": {
                    "value": "relu_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_conv >= zeros",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "y_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_fc1, W_fc2) + b_fc2",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.zeros_like(y_conv, dtype=y_conv.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_266": {
                "variable": {
                    "value": "neg_abs_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_conv >= zeros",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "-y_conv",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "y_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_fc1, W_fc2) + b_fc2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Variable_270": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exponential_decay_271": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0003",
                            "Constant"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "30000",
                    "type": "int",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamOptimizer_272": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0003",
                            "Constant"
                        ]
                    ]
                }
            },
            "InteractiveSession_273": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_276": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y_conv, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y_, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_277": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_34": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_53": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_56": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, image_size * image_size])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_59": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, image_size * image_size])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Exists_298": {
                "filename": {
                    "value": "/tmp/mnist_logs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MakeDirs_300": {
                "dirname": {
                    "value": "/tmp/mnist_logs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_306": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_48": {
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "shape + [num_channels // num_units]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_176": {
                "a": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h_pool2, [-1, 7 * 7 * 64])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([7 * 7 * 64, hk])",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_179": {
                "shape": {
                    "value": "[hk]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_180": {
                "shape": {
                    "value": "[hk]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_199": {
                "a": {
                    "value": "h_fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(BN_norm)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(h_fc1, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([hk, 10])",
                            "Call"
                        ]
                    ]
                }
            },
            "add_268": {
                "x": {
                    "value": "relu_logits - y_conv * y_",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "math.log(2.0) + 0.5 * neg_abs_logits + 1.0 / 8.0 * neg_abs_logits ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_268": {
                "input_tensor": {
                    "value": "perturbFM * W_fc2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_276": {
                "input": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 10])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_277": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(y_conv, 1), tf.argmax(y_, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "initialize_all_variables_278": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DeleteRecursively_299": {
                "dirname": {
                    "value": "/tmp/mnist_logs",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "AdLM/MNIST/data_io.py": {
        "tensorflow": {}
    },
    "StoBatch/CIFAR10/StoBatch.py": {
        "tensorflow": {
            "DEFINE_string_37": {
                "name": {
                    "value": "checkpoint_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "os.getcwd() + dirCheckpoint",
                    "type": "BinOp",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where to read model checkpoints.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_max_68": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(inputs, shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_72": {
                "variable": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "_x.get_shape()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_75": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_113": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "shape + [num_channels // num_units]",
                            "BinOp"
                        ],
                        [
                            "kernel1.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "conv2d_120": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([kernel_size, kernel_size, in_features, out_features])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_127": {
                "variable": {
                    "value": "current",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "current",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.batch_norm(current, scale=True, is_training=is_training, updates_collections=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(current)",
                            "Call"
                        ],
                        [
                            "conv2d(current, in_features, out_features, kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(current, keep_prob)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "tf.concat((current, tmp), axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat((conv2, norm1), axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat((conv2, norm1), axis=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_129": {
                "variable": {
                    "value": "current",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "current",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.batch_norm(current, scale=True, is_training=is_training, updates_collections=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(current)",
                            "Call"
                        ],
                        [
                            "conv2d(current, in_features, out_features, kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(current, keep_prob)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "tf.concat((current, tmp), axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat((conv2, norm1), axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat((conv2, norm1), axis=3)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_245": {
                "variable": {
                    "value": "current",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(conv2, norm1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_281": {
                "variable": {
                    "value": "local4",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "local4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(local4, -1, 1)",
                            "Call"
                        ],
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(local4, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_300": {
                "variable": {
                    "value": "softmax_linear",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(local4, params[8])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "params[9]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_328": {
                "variable": {
                    "value": "current",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(conv2, norm1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_361": {
                "variable": {
                    "value": "local4",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "local4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(local4, -1, 1)",
                            "Call"
                        ],
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(local4, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_367": {
                "variable": {
                    "value": "softmax_linear",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(local4, kernel5)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params[9]",
                            "Subscript"
                        ],
                        [
                            "_bias_on_cpu('biases5', [10], tf.constant_initializer(0.1), collect=[CONV_VARIABLES])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_to_collections_95": {
                "names": {
                    "value": "collect",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_on_cpu(name, shape, initializer=tf.contrib.layers.xavier_initializer_conv2d())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name, shape, initializer=initializer, dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_97": {
                "variable": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_loss(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collections_114": {
                "names": {
                    "value": "collect",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_on_cpu(name, shape, initializer=tf.contrib.layers.xavier_initializer_conv2d())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name, shape, initializer=initializer, dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool_133": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, s, s, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, s, s, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_140": {
                "variable": {
                    "value": "current",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(current, tmp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bias_add_225": {
                "variable": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input, W, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, params[0], [1, 2, 2, 1], padding='SAME') + perturbH",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images + adv_noise, kernel1, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, kernel2, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, kernel3, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "params[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_226": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases1)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases2)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases3)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_237": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.batch_norm(conv1, scale=True, is_training=True, updates_collections=[CONV_VARIABLES])",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(conv1, scale=True, is_training=True, updates_collections=None)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "params[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_239": {
                "variable": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input, W, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, params[0], [1, 2, 2, 1], padding='SAME') + perturbH",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images + adv_noise, kernel1, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, kernel2, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, kernel3, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "params[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_240": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases1)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases2)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases3)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_255": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.batch_norm(current, scale=True, is_training=True, updates_collections=[CONV_VARIABLES])",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(current, scale=True, is_training=False, updates_collections=None)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "params[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_257": {
                "variable": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input, W, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, params[0], [1, 2, 2, 1], padding='SAME') + perturbH",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images + adv_noise, kernel1, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, kernel2, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, kernel3, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "params[5]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_258": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases1)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases2)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases3)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_272": {
                "variable": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "avg_pool(norm3, 2)",
                            "Call"
                        ],
                        [
                            "avg_pool(norm3, 2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, int(image_size / 4) ** 2 * 256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_273": {
                "variable": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(h_pool2_flat, params[6])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "params[7]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_308": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images + adv_noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params[0]",
                            "Subscript"
                        ],
                        [
                            "_variable_with_weight_decay('kernel1', shape=[4, 4, 3, 128], stddev=np.sqrt(2.0 / (5 * 5 * 256)) / math.ceil(5 / 2), wd=0.0, collect=[AECODER_VARIABLES])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_310": {
                "variable": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input, W, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, params[0], [1, 2, 2, 1], padding='SAME') + perturbH",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images + adv_noise, kernel1, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, kernel2, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, kernel3, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params[1]",
                            "Subscript"
                        ],
                        [
                            "_bias_on_cpu('biases1', [128], tf.constant_initializer(0.0), collect=[AECODER_VARIABLES])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_311": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases1)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases2)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases3)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_321": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.batch_norm(conv1, scale=True, is_training=True, updates_collections=[CONV_VARIABLES])",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(conv1, scale=True, is_training=True, updates_collections=None)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params[2]",
                            "Subscript"
                        ],
                        [
                            "_variable_with_weight_decay('kernel2', shape=[5, 5, 128, 128], stddev=np.sqrt(2.0 / (5 * 5 * 256)) / math.ceil(5 / 2), wd=0.0, collect=[CONV_VARIABLES])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_322": {
                "variable": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input, W, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, params[0], [1, 2, 2, 1], padding='SAME') + perturbH",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images + adv_noise, kernel1, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, kernel2, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, kernel3, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params[3]",
                            "Subscript"
                        ],
                        [
                            "_bias_on_cpu('biases2', [128], tf.constant_initializer(0.1), collect=[CONV_VARIABLES])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_323": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases1)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases2)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases3)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_336": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.batch_norm(current, scale=True, is_training=True, updates_collections=[CONV_VARIABLES])",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(current, scale=True, is_training=False, updates_collections=None)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params[4]",
                            "Subscript"
                        ],
                        [
                            "_variable_with_weight_decay('kernel3', shape=[5, 5, 256, 256], stddev=np.sqrt(2.0 / (5 * 5 * 256)) / math.ceil(5 / 2), wd=0.0, collect=[CONV_VARIABLES])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_337": {
                "variable": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input, W, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, params[0], [1, 2, 2, 1], padding='SAME') + perturbH",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images + adv_noise, kernel1, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, kernel2, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, kernel3, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params[5]",
                            "Subscript"
                        ],
                        [
                            "_bias_on_cpu('biases3', [256], tf.constant_initializer(0.1), collect=[CONV_VARIABLES])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_338": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases1)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases2)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases3)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_351": {
                "variable": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "avg_pool(norm3, 2)",
                            "Call"
                        ],
                        [
                            "avg_pool(norm3, 2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, int(image_size / 4) ** 2 * 256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_352": {
                "variable": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(h_pool2_flat, kernel4)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params[7]",
                            "Subscript"
                        ],
                        [
                            "_bias_on_cpu('biases4', [hk], tf.constant_initializer(0.1), collect=[CONV_VARIABLES])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_373": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_inference(x, params, image_size, adv_noise)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_415": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_429": {
                "variable": {
                    "value": "w_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "kernel1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params[0]",
                            "Subscript"
                        ],
                        [
                            "_variable_with_weight_decay('kernel1', shape=[4, 4, 3, 128], stddev=np.sqrt(2.0 / (5 * 5 * 256)) / math.ceil(5 / 2), wd=0.0, collect=[AECODER_VARIABLES])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_430": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "w_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(kernel1, [-1, shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "svd_431": {
                "variable": {
                    "value": "sing_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(w_t)",
                            "Call"
                        ]
                    ]
                },
                "compute_uv": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_432": {
                "variable": {
                    "value": "sensitivity",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sing_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.svd(w, compute_uv=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_463": {
                "variable": {
                    "value": "FM_h",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 14, 14, 128]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_464": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_465": {
                "variable": {
                    "value": "adv_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_467": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_468": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_475": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(Enc_Layer2.cost + Enc_Layer3.cost) / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_480": {
                "variable": {
                    "value": "softmax_y_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "y_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inference(x_image, FM_h, params)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_481": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_485": {
                "variable": {
                    "value": "adv_y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_collection_494": {
                "variable": {
                    "value": "pretrain_var_list",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "AECODER_VARIABLES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'AECODER_VARIABLES'",
                            "Constant"
                        ]
                    ]
                }
            },
            "get_collection_495": {
                "variable": {
                    "value": "train_var_list",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "CONV_VARIABLES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'CONV_VARIABLES'",
                            "Constant"
                        ]
                    ]
                }
            },
            "get_collection_498": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_502": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(log_device_placement=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_519": {
                "variable": {
                    "value": "dynamic_eps",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_530": {
                "variable": {
                    "value": "mu_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_572": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.all_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "initialize_all_variables_575": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_581": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.getcwd() + dirCheckpoint",
                    "type": "BinOp",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_585": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.checkpoint_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Exists_761": {
                "filename": {
                    "value": "/tmp/cifar10_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MakeDirs_763": {
                "dirname": {
                    "value": "/tmp/cifar10_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_801": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_68": {
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "shape + [num_channels // num_units]",
                            "BinOp"
                        ],
                        [
                            "kernel1.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_98": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_217": {
                "name_or_scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_232": {
                "name_or_scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_250": {
                "name_or_scope": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_268": {
                "name_or_scope": {
                    "value": "local4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_300": {
                "a": {
                    "value": "local4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(local4, -1, 1)",
                            "Call"
                        ],
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(local4, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "params[8]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_307": {
                "name_or_scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_320": {
                "name_or_scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_335": {
                "name_or_scope": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_350": {
                "name_or_scope": {
                    "value": "local4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_367": {
                "a": {
                    "value": "local4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(local4, -1, 1)",
                            "Call"
                        ],
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(local4, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "kernel5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params[8]",
                            "Subscript"
                        ],
                        [
                            "_variable_with_weight_decay('kernel5', [hk, 10], stddev=np.sqrt(2.0 / (int(image_size / 4) ** 2 * 256)) / math.ceil(5 / 2), wd=0.0, collect=[CONV_VARIABLES])",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_414": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_500": {
                "variable": {
                    "value": "pretrain_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DeleteRecursively_762": {
                "dirname": {
                    "value": "/tmp/cifar10_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_73": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "l2_loss_97": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_on_cpu(name, shape, initializer=tf.contrib.layers.xavier_initializer_conv2d())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name, shape, initializer=initializer, dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_222": {
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "params[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_273": {
                "a": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pool3, [-1, int(image_size / 4) ** 2 * 256])",
                            "Call"
                        ],
                        [
                            "tf.reshape(pool3, [-1, int(image_size / 4) ** 2 * 256])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "params[6]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_352": {
                "a": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pool3, [-1, int(image_size / 4) ** 2 * 256])",
                            "Call"
                        ],
                        [
                            "tf.reshape(pool3, [-1, int(image_size / 4) ** 2 * 256])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "kernel4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params[6]",
                            "Subscript"
                        ],
                        [
                            "_variable_with_weight_decay('kernel4', shape=[int(image_size / 4) ** 2 * 256, hk], stddev=0.04, wd=0.004, collect=[CONV_VARIABLES])",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_426": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_440": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_446": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_449": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_453": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "control_dependencies_499": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_variables_572": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_502": {
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_472": {
                "input": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, image_size, image_size, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_474": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, image_size, image_size, 3])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/CIFAR10/accountant.py": {
        "tensorflow": {
            "Variable_64": {
                "variable": {
                    "value": "self._eps_squared_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([1])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "eps_squared_sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_66": {
                "variable": {
                    "value": "self._delta_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([1])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "delta_sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_355": {
                "variable": {
                    "value": "binomial",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "self._binomial_table",
                    "type": "Attribute",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[t + 1, t + 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_361": {
                "variable": {
                    "value": "exponents",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[j * (j + 1.0 - 2.0 * s) / (2.0 * sigma * sigma) for j in range(t + 1)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_364": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "binomial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(self._binomial_table, [0, 0], [t + 1, t + 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "signs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy.zeros((t + 1, t + 1), dtype=numpy.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_369": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(binomial, signs)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.exp(exponents)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_372": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(x, tf.exp(exponents))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_389": {
                "variable": {
                    "value": "binomial_table",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "self._binomial_table",
                    "type": "Attribute",
                    "possible_values": []
                },
                "begin": {
                    "value": "[moment_order, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, moment_order + 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_392": {
                "variable": {
                    "value": "qs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.constant([i * 1.0 for i in range(moment_order + 1)], dtype=tf.float64) * tf.cast(tf.log(q), dtype=tf.float64)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_396": {
                "variable": {
                    "value": "term0",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "binomial_table * qs * moments0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_398": {
                "variable": {
                    "value": "term1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "binomial_table * qs * moments1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_97": {
                "variable": {
                    "value": "amortize_eps",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.log(1.0 + amortize_ratio * (tf.exp(eps) - 1.0))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_99": {
                "variable": {
                    "value": "amortize_delta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "amortize_ratio * delta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "group_235": {
                "*inputs": {
                    "value": "*moments_accum_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "squeeze_399": {
                "input": {
                    "value": "tf.log(tf.cast(q * term0 + (1.0 - q) * term1, tf.float64))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_op_407": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_64": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_88": {
                "control_inputs": {
                    "value": "[tf.Assert(tf.greater(delta, 0), ['delta needs to be greater than 0'])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "group_100": {
                "*inputs": {
                    "value": "*[tf.assign_add(self._eps_squared_sum, tf.square(amortize_eps)), tf.assign_add(self._delta_sum, amortize_delta)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Variable_190": {
                "initial_value": {
                    "value": "numpy.float64(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "'log_moments-%d' % moment_order",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_369": {
                "x": {
                    "value": "exponents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([j * (j + 1.0 - 2.0 * s) / (2.0 * sigma * sigma) for j in range(t + 1)], dtype=tf.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_399": {
                "x": {
                    "value": "tf.cast(q * term0 + (1.0 - q) * term1, tf.float64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_97": {
                "x": {
                    "value": "1.0 + amortize_ratio * (tf.exp(eps) - 1.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_229": {
                "x": {
                    "value": "num_examples",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_add_234": {
                "ref": {
                    "value": "self._log_moments[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "moment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._compute_log_moment(sigma, q, self._moment_orders[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_392": {
                "value": {
                    "value": "[i * 1.0 for i in range(moment_order + 1)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_393": {
                "x": {
                    "value": "tf.log(q)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_399": {
                "x": {
                    "value": "q * term0 + (1.0 - q) * term1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Assert_89": {
                "condition": {
                    "value": "tf.greater(delta, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['delta needs to be greater than 0']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_91": {
                "x": {
                    "value": "num_examples",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_394": {
                "x": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(num_examples, tf.float64) * 1.0 / self._total_examples",
                            "BinOp"
                        ]
                    ]
                }
            },
            "greater_89": {
                "x": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_deltas",
                            "Name"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "assign_add_100": {
                "ref": {
                    "value": "self._eps_squared_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.square(amortize_eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_add_102": {
                "ref": {
                    "value": "self._delta_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "amortize_delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(amortize_ratio * delta, [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "square_101": {
                "x": {
                    "value": "amortize_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.log(1.0 + amortize_ratio * (tf.exp(eps) - 1.0)), [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_98": {
                "x": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_eps",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/CIFAR10/build_graph.py": {
        "tensorflow": {
            "identity_60": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h[n - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "identity_138": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_fc_list[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "identity_223": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_fc_list[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "identity_299": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_fc_list[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "identity_424": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_fc_list[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "identity_509": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_fc_list[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "identity_585": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_fc_list[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_73": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_151": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_236": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_359": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_437": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_522": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_25": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_68": {
                "value": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(1, n)",
                            "Call"
                        ],
                        [
                            "range(n)",
                            "Call"
                        ],
                        [
                            "range(num_fc_layers)",
                            "Call"
                        ],
                        [
                            "range(num_fc_layers)",
                            "Call"
                        ],
                        [
                            "range(num_fc_layers)",
                            "Call"
                        ],
                        [
                            "range(num_fc_layers)",
                            "Call"
                        ],
                        [
                            "range(num_fc_layers)",
                            "Call"
                        ],
                        [
                            "range(num_fc_layers)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_71": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_80": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x_input + input_noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "param_dict['input_low']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "param_dict['input_high']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_88": {
                "variable": {
                    "value": "h_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv2d(x_input, w_conv1, strides=[1, 1, 1, 1], padding='VALID'), b_conv1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_97": {
                "variable": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_103": {
                "variable": {
                    "value": "h_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 2, 2, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 2, 2, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, flat_shape[1] * flat_shape[2] * flat_shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_146": {
                "value": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(1, n)",
                            "Call"
                        ],
                        [
                            "range(n)",
                            "Call"
                        ],
                        [
                            "range(num_fc_layers)",
                            "Call"
                        ],
                        [
                            "range(num_fc_layers)",
                            "Call"
                        ],
                        [
                            "range(num_fc_layers)",
                            "Call"
                        ],
                        [
                            "range(num_fc_layers)",
                            "Call"
                        ],
                        [
                            "range(num_fc_layers)",
                            "Call"
                        ],
                        [
                            "range(num_fc_layers)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_149": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_156": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x_input + input_noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "param_dict['input_low']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "param_dict['input_high']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_159": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "keep_prob[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "relu_167": {
                "variable": {
                    "value": "h_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv2d(x_input, w_conv1, strides=[1, 2, 2, 1], padding='SAME'), b_conv1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_176": {
                "variable": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 2, 2, 1], padding='VALID'), b_conv2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_185": {
                "variable": {
                    "value": "h_conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv2d(h_conv2, w_conv3, strides=[1, 1, 1, 1], padding='VALID'), b_conv3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_191": {
                "variable": {
                    "value": "h_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv2, w_conv3, strides=[1, 1, 1, 1], padding='VALID'), b_conv3))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv3, keep_prob=keep_prob[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv2, w_conv3, strides=[1, 1, 1, 1], padding='VALID'), b_conv3))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv3, keep_prob=keep_prob[1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, flat_shape[1] * flat_shape[2] * flat_shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_231": {
                "value": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(1, n)",
                            "Call"
                        ],
                        [
                            "range(n)",
                            "Call"
                        ],
                        [
                            "range(num_fc_layers)",
                            "Call"
                        ],
                        [
                            "range(num_fc_layers)",
                            "Call"
                        ],
                        [
                            "range(num_fc_layers)",
                            "Call"
                        ],
                        [
                            "range(num_fc_layers)",
                            "Call"
                        ],
                        [
                            "range(num_fc_layers)",
                            "Call"
                        ],
                        [
                            "range(num_fc_layers)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_234": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_241": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x_input + input_noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "param_dict['input_low']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "param_dict['input_high']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_249": {
                "variable": {
                    "value": "h_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv2d(x_input, w_conv1, strides=[1, 1, 1, 1], padding='VALID'), b_conv1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_258": {
                "variable": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_264": {
                "variable": {
                    "value": "h_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 2, 2, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 2, 2, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, flat_shape[1] * flat_shape[2] * flat_shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_357": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_366": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x_input + input_noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_374": {
                "variable": {
                    "value": "h_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv2d(x_input, w_conv1, strides=[1, 1, 1, 1], padding='VALID'), b_conv1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_383": {
                "variable": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_389": {
                "variable": {
                    "value": "h_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 2, 2, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 2, 2, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, flat_shape[1] * flat_shape[2] * flat_shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_435": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_442": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x_input + input_noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_445": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "keep_prob[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "relu_453": {
                "variable": {
                    "value": "h_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv2d(x_input, w_conv1, strides=[1, 2, 2, 1], padding='SAME'), b_conv1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_462": {
                "variable": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 2, 2, 1], padding='VALID'), b_conv2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_471": {
                "variable": {
                    "value": "h_conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv2d(h_conv2, w_conv3, strides=[1, 1, 1, 1], padding='VALID'), b_conv3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_477": {
                "variable": {
                    "value": "h_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv2, w_conv3, strides=[1, 1, 1, 1], padding='VALID'), b_conv3))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv3, keep_prob=keep_prob[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv2, w_conv3, strides=[1, 1, 1, 1], padding='VALID'), b_conv3))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv3, keep_prob=keep_prob[1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, flat_shape[1] * flat_shape[2] * flat_shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_520": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_527": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x_input + input_noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_535": {
                "variable": {
                    "value": "h_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv2d(x_input, w_conv1, strides=[1, 1, 1, 1], padding='VALID'), b_conv1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_544": {
                "variable": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_550": {
                "variable": {
                    "value": "h_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 2, 2, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 2, 2, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, flat_shape[1] * flat_shape[2] * flat_shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_43": {
                "variable": {
                    "value": "z[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "t": {
                    "value": "z[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "param_dict['input_low']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "param_dict['input_high']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_51": {
                "variable": {
                    "value": "h[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.relu(z[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "keep_prob[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_53": {
                "variable": {
                    "value": "h[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "features": {
                    "value": "z[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_82": {
                "name_or_scope": {
                    "value": "conv_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_91": {
                "name_or_scope": {
                    "value": "conv_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_101": {
                "variable": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 2, 2, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 2, 2, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "keep_prob[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "variable_scope_161": {
                "name_or_scope": {
                    "value": "conv_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_170": {
                "name_or_scope": {
                    "value": "conv_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_179": {
                "name_or_scope": {
                    "value": "conv_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_189": {
                "variable": {
                    "value": "h_conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv2, w_conv3, strides=[1, 1, 1, 1], padding='VALID'), b_conv3))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv3, keep_prob=keep_prob[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv2, w_conv3, strides=[1, 1, 1, 1], padding='VALID'), b_conv3))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv3, keep_prob=keep_prob[1])",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "keep_prob[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "variable_scope_243": {
                "name_or_scope": {
                    "value": "conv_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_252": {
                "name_or_scope": {
                    "value": "conv_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_262": {
                "variable": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 2, 2, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 2, 2, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "keep_prob[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "variable_scope_368": {
                "name_or_scope": {
                    "value": "conv_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_377": {
                "name_or_scope": {
                    "value": "conv_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_387": {
                "variable": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 2, 2, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 2, 2, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "keep_prob[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "variable_scope_447": {
                "name_or_scope": {
                    "value": "conv_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_456": {
                "name_or_scope": {
                    "value": "conv_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_465": {
                "name_or_scope": {
                    "value": "conv_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_475": {
                "variable": {
                    "value": "h_conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv2, w_conv3, strides=[1, 1, 1, 1], padding='VALID'), b_conv3))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv3, keep_prob=keep_prob[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv2, w_conv3, strides=[1, 1, 1, 1], padding='VALID'), b_conv3))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv3, keep_prob=keep_prob[1])",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "keep_prob[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "variable_scope_529": {
                "name_or_scope": {
                    "value": "conv_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_538": {
                "name_or_scope": {
                    "value": "conv_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_548": {
                "variable": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 2, 2, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 2, 2, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "keep_prob[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "variable_scope_27": {
                "name_or_scope": {
                    "value": "'layer_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_46": {
                "a": {
                    "value": "h[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "w[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_55": {
                "a": {
                    "value": "h[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "w[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bias_add_88": {
                "value": {
                    "value": "conv2d(x_input, w_conv1, strides=[1, 1, 1, 1], padding='VALID')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_97": {
                "value": {
                    "value": "conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_113": {
                "name_or_scope": {
                    "value": "'fc_' + str(i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_121": {
                "variable": {
                    "value": "h_fc_list[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_132": {
                "variable": {
                    "value": "h_pre_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(h_fc_list[i], w_fc_list[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bias_add_167": {
                "value": {
                    "value": "conv2d(x_input, w_conv1, strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_176": {
                "value": {
                    "value": "conv2d(h_conv1, w_conv2, strides=[1, 2, 2, 1], padding='VALID')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_185": {
                "value": {
                    "value": "conv2d(h_conv2, w_conv3, strides=[1, 1, 1, 1], padding='VALID')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_201": {
                "name_or_scope": {
                    "value": "'fc_' + str(i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_209": {
                "variable": {
                    "value": "h_fc_list[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_217": {
                "variable": {
                    "value": "h_pre_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(h_fc_list[i], w_fc_list[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bias_add_249": {
                "value": {
                    "value": "conv2d(x_input, w_conv1, strides=[1, 1, 1, 1], padding='VALID')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_258": {
                "value": {
                    "value": "conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_274": {
                "name_or_scope": {
                    "value": "'fc_' + str(i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_282": {
                "variable": {
                    "value": "h_fc_list[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_293": {
                "variable": {
                    "value": "h_pre_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(h_fc_list[i], w_fc_list[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bias_add_374": {
                "value": {
                    "value": "conv2d(x_input, w_conv1, strides=[1, 1, 1, 1], padding='VALID')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_383": {
                "value": {
                    "value": "conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_399": {
                "name_or_scope": {
                    "value": "'fc_' + str(i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_407": {
                "variable": {
                    "value": "h_fc_list[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_418": {
                "variable": {
                    "value": "h_pre_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(h_fc_list[i], w_fc_list[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bias_add_453": {
                "value": {
                    "value": "conv2d(x_input, w_conv1, strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_462": {
                "value": {
                    "value": "conv2d(h_conv1, w_conv2, strides=[1, 2, 2, 1], padding='VALID')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_471": {
                "value": {
                    "value": "conv2d(h_conv2, w_conv3, strides=[1, 1, 1, 1], padding='VALID')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_487": {
                "name_or_scope": {
                    "value": "'fc_' + str(i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_495": {
                "variable": {
                    "value": "h_fc_list[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_503": {
                "variable": {
                    "value": "h_pre_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(h_fc_list[i], w_fc_list[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bias_add_535": {
                "value": {
                    "value": "conv2d(x_input, w_conv1, strides=[1, 1, 1, 1], padding='VALID')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_544": {
                "value": {
                    "value": "conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_560": {
                "name_or_scope": {
                    "value": "'fc_' + str(i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_568": {
                "variable": {
                    "value": "h_fc_list[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_579": {
                "variable": {
                    "value": "h_pre_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(h_fc_list[i], w_fc_list[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_51": {
                "features": {
                    "value": "z[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_77": {
                "input": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_131": {
                "variable": {
                    "value": "h_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "h_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "keep_prob": {
                    "value": "keep_prob[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_154": {
                "input": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_239": {
                "input": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_292": {
                "variable": {
                    "value": "h_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "h_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "keep_prob": {
                    "value": "keep_prob[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_363": {
                "input": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_417": {
                "variable": {
                    "value": "h_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "h_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "keep_prob": {
                    "value": "keep_prob[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_440": {
                "input": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_525": {
                "input": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_578": {
                "variable": {
                    "value": "h_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "h_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "keep_prob": {
                    "value": "keep_prob[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_39": {
                "input": {
                    "value": "z[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_48": {
                "input": {
                    "value": "z[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_57": {
                "input": {
                    "value": "z[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bias_add_121": {
                "value": {
                    "value": "tf.matmul(h_fc_list[i], w_fc_list[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_132": {
                "a": {
                    "value": "h_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "w_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bias_add_209": {
                "value": {
                    "value": "tf.matmul(h_fc_list[i], w_fc_list[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_217": {
                "a": {
                    "value": "h_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "w_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bias_add_282": {
                "value": {
                    "value": "tf.matmul(h_fc_list[i], w_fc_list[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_293": {
                "a": {
                    "value": "h_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "w_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bias_add_407": {
                "value": {
                    "value": "tf.matmul(h_fc_list[i], w_fc_list[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_418": {
                "a": {
                    "value": "h_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "w_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bias_add_495": {
                "value": {
                    "value": "tf.matmul(h_fc_list[i], w_fc_list[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_503": {
                "a": {
                    "value": "h_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "w_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bias_add_568": {
                "value": {
                    "value": "tf.matmul(h_fc_list[i], w_fc_list[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_579": {
                "a": {
                    "value": "h_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "w_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_121": {
                "a": {
                    "value": "h_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "w_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_209": {
                "a": {
                    "value": "h_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "w_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_282": {
                "a": {
                    "value": "h_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "w_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_407": {
                "a": {
                    "value": "h_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "w_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_495": {
                "a": {
                    "value": "h_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "w_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_568": {
                "a": {
                    "value": "h_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "w_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_134": {
                "input": {
                    "value": "h_pre_noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "h_pre_noise + output_noise",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_219": {
                "input": {
                    "value": "h_pre_noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "h_pre_noise + output_noise",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_295": {
                "input": {
                    "value": "h_pre_noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "h_pre_noise + output_noise",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_420": {
                "input": {
                    "value": "h_pre_noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "h_pre_noise + output_noise",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_505": {
                "input": {
                    "value": "h_pre_noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "h_pre_noise + output_noise",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_581": {
                "input": {
                    "value": "h_pre_noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "h_pre_noise + output_noise",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/CIFAR10/build_utils.py": {
        "tensorflow": {
            "truncated_normal_initializer_10": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_11": {
                "variable": {
                    "value": "variable",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_t.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(mean=0.0, stddev=stddev)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(value, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(mean=0.0, stddev=stddev)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_16": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_17": {
                "variable": {
                    "value": "variable",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_t.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(mean=0.0, stddev=stddev)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(value, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(mean=0.0, stddev=stddev)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_22": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_23": {
                "variable": {
                    "value": "variable",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_t.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(mean=0.0, stddev=stddev)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(value, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(mean=0.0, stddev=stddev)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "multiply_25": {
                "variable": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_loss(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_30": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_pool_33": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_37": {
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(labels=labels, logits=logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_40": {
                "input_tensor": {
                    "value": "tf.cast(tf.equal(tf.argmax(logits, 1), tf.argmax(labels, 1)), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_69": {
                "variable": {
                    "value": "exp_moving_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.99",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_updates": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "moments_70": {
                "variable": {
                    "value": "(m, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "input_t",
                    "type": "variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "range(len(shape) - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_72": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_test",
                    "type": "variable",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : exp_moving_avg.average(m)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : m",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_73": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_test",
                    "type": "variable",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : exp_moving_avg.average(v)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : v",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "variable_scope_9": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_15": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_21": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_to_collection_26": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_37": {
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_40": {
                "x": {
                    "value": "tf.equal(tf.argmax(logits, 1), tf.argmax(labels, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_66": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "batch_normalization_75": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_t",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(is_test, lambda : exp_moving_avg.average(m), lambda : m)",
                            "Call"
                        ]
                    ]
                },
                "variance": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(is_test, lambda : exp_moving_avg.average(v), lambda : v)",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "variance_epsilon": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "l2_loss_25": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(is_test, lambda : exp_moving_avg.average(v), lambda : v)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_40": {
                "x": {
                    "value": "tf.argmax(logits, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(labels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_74": {
                "control_inputs": {
                    "value": "control_inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "argmax_40": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_43": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/CIFAR10/cifar10.py": {
        "tensorflow": {
            "cast_248": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.argmax(tf.cast(labels, tf.int64), 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_249": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.argmax(tf.cast(labels, tf.int64), 1)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "cross_entropy_per_example",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_251": {
                "variable": {
                    "value": "cross_entropy_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=logits, name='cross_entropy_per_example')",
                            "Call"
                        ],
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=logits, name='cross_entropy_per_example')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "cross_entropy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_271": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.argmax(tf.cast(labels, tf.int64), 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_272": {
                "variable": {
                    "value": "b_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "b_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(b_labels, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_275": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "adv_logits.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_277": {
                "variable": {
                    "value": "relu_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adv_logits >= zeros",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "adv_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.zeros_like(adv_logits, dtype=adv_logits.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_278": {
                "variable": {
                    "value": "neg_abs_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adv_logits >= zeros",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "-adv_logits",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "adv_logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_279": {
                "variable": {
                    "value": "Taylor_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "relu_logits - adv_logits * b_labels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "math.log(2.0) + 0.5 * neg_abs_logits + 1.0 / 8.0 * neg_abs_logits ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_282": {
                "variable": {
                    "value": "zeros2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "logits.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_284": {
                "variable": {
                    "value": "relu_logits_benign",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits >= zeros2",
                            "Compare"
                        ],
                        [
                            "logits >= zeros2",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "zeros2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.zeros_like(logits, dtype=logits.dtype)",
                            "Call"
                        ],
                        [
                            "array_ops.zeros_like(logits, dtype=logits.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_285": {
                "variable": {
                    "value": "neg_abs_logits_benign",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits >= zeros2",
                            "Compare"
                        ],
                        [
                            "logits >= zeros2",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "-logits",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_286": {
                "variable": {
                    "value": "Taylor_benign",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "relu_logits_benign - logits * labels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "math.log(2.0) + 0.5 * neg_abs_logits_benign + 1.0 / 8.0 * neg_abs_logits_benign ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_288": {
                "variable": {
                    "value": "zeros1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "perturbW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.where(cond1, perturbW, -perturbW)",
                            "Call"
                        ],
                        [
                            "array_ops.where(cond1, perturbW, zeros1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "perturbW.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_290": {
                "variable": {
                    "value": "perturbW",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "perturbW >= zeros1",
                            "Compare"
                        ],
                        [
                            "perturbW >= zeros1",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "perturbW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.where(cond1, perturbW, -perturbW)",
                            "Call"
                        ],
                        [
                            "array_ops.where(cond1, perturbW, zeros1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-perturbW",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_325": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.argmax(tf.cast(labels, tf.int64), 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_328": {
                "variable": {
                    "value": "zeros2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "logits.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_330": {
                "variable": {
                    "value": "relu_logits_benign",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits >= zeros2",
                            "Compare"
                        ],
                        [
                            "logits >= zeros2",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "zeros2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.zeros_like(logits, dtype=logits.dtype)",
                            "Call"
                        ],
                        [
                            "array_ops.zeros_like(logits, dtype=logits.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_331": {
                "variable": {
                    "value": "neg_abs_logits_benign",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits >= zeros2",
                            "Compare"
                        ],
                        [
                            "logits >= zeros2",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "-logits",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_332": {
                "variable": {
                    "value": "Taylor_benign",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "relu_logits_benign - logits * labels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "math.log(2.0) + 0.5 * neg_abs_logits_benign + 1.0 / 8.0 * neg_abs_logits_benign ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_334": {
                "variable": {
                    "value": "zeros1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "perturbW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.where(cond1, perturbW, -perturbW)",
                            "Call"
                        ],
                        [
                            "array_ops.where(cond1, perturbW, zeros1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "perturbW.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_336": {
                "variable": {
                    "value": "perturbW",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "perturbW >= zeros1",
                            "Compare"
                        ],
                        [
                            "perturbW >= zeros1",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "perturbW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.where(cond1, perturbW, -perturbW)",
                            "Call"
                        ],
                        [
                            "array_ops.where(cond1, perturbW, zeros1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zeros1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.zeros_like(perturbW, dtype=perturbW.dtype)",
                            "Call"
                        ],
                        [
                            "array_ops.zeros_like(perturbW, dtype=perturbW.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_357": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cast(labels, tf.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_359": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.argmax(tf.cast(labels, tf.int64), 1)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "cross_entropy_per_example",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_360": {
                "variable": {
                    "value": "cross_entropy_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=logits, name='cross_entropy_per_example')",
                            "Call"
                        ],
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=logits, name='cross_entropy_per_example')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "cross_entropy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_379": {
                "variable": {
                    "value": "loss_averages",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "avg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_380": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_432": {
                "variable": {
                    "value": "variable_averages",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "MOVING_AVERAGE_DECAY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9999",
                            "Constant"
                        ]
                    ]
                },
                "num_updates": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exponential_decay_460": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "INITIAL_LEARNING_RATE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "decay_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(num_batches_per_epoch * NUM_EPOCHS_PER_DECAY)",
                            "Call"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "LEARNING_RATE_DECAY_FACTOR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_492": {
                "variable": {
                    "value": "variable_averages",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "MOVING_AVERAGE_DECAY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9999",
                            "Constant"
                        ]
                    ]
                },
                "num_updates": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "histogram_141": {
                "name": {
                    "value": "tensor_name + '/activations'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_142": {
                "name": {
                    "value": "tensor_name + '/sparsity'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.nn.zero_fraction(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_158": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float16 if FLAGS.use_fp16 else tf.float32",
                            "IfExp"
                        ],
                        [
                            "tf.float16 if FLAGS.use_fp16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "multiply_184": {
                "variable": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_loss(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_207": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_208": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.argmax(tf.cast(labels, tf.int64), 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_231": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_232": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.argmax(tf.cast(labels, tf.int64), 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_to_collection_252": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "cross_entropy_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(cross_entropy, name='cross_entropy')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(adv_loss, name='cross_entropy') + tf.reduce_mean(perturbW, name='perturbW')",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(Taylor_benign, name='cross_entropy') + tf.reduce_sum(perturbW, name='perturbW')",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(cross_entropy, name='cross_entropy')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_256": {
                "inputs": {
                    "value": "tf.get_collection('losses')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_309": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "cross_entropy_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(cross_entropy, name='cross_entropy')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(adv_loss, name='cross_entropy') + tf.reduce_mean(perturbW, name='perturbW')",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(Taylor_benign, name='cross_entropy') + tf.reduce_sum(perturbW, name='perturbW')",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(cross_entropy, name='cross_entropy')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_311": {
                "inputs": {
                    "value": "tf.get_collection('losses')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_340": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "cross_entropy_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(cross_entropy, name='cross_entropy')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(adv_loss, name='cross_entropy') + tf.reduce_mean(perturbW, name='perturbW')",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(Taylor_benign, name='cross_entropy') + tf.reduce_sum(perturbW, name='perturbW')",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(cross_entropy, name='cross_entropy')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_342": {
                "inputs": {
                    "value": "tf.get_collection('losses')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_361": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "cross_entropy_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(cross_entropy, name='cross_entropy')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(adv_loss, name='cross_entropy') + tf.reduce_mean(perturbW, name='perturbW')",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(Taylor_benign, name='cross_entropy') + tf.reduce_sum(perturbW, name='perturbW')",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(cross_entropy, name='cross_entropy')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_365": {
                "inputs": {
                    "value": "tf.get_collection('losses')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_408": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(INITIAL_LEARNING_RATE, global_step, decay_steps, LEARNING_RATE_DECAY_FACTOR, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_415": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(INITIAL_LEARNING_RATE, global_step, decay_steps, LEARNING_RATE_DECAY_FACTOR, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_op_438": {
                "variable": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_465": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(INITIAL_LEARNING_RATE, global_step, decay_steps, LEARNING_RATE_DECAY_FACTOR, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_472": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(INITIAL_LEARNING_RATE, global_step, decay_steps, LEARNING_RATE_DECAY_FACTOR, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_norm_475": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.compute_gradients(total_loss)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_norm(grads, clip_bound)",
                            "Call"
                        ],
                        [
                            "grads + tf.random_normal(shape=tf.shape(grads), mean=0.0, stddev=sigma * sensitivity ** 2, dtype=tf.float32)",
                            "BinOp"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "clip_bound",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_op_496": {
                "variable": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zero_fraction_143": {
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_156": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_182": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float16 if FLAGS.use_fp16 else tf.float32",
                            "IfExp"
                        ],
                        [
                            "tf.float16 if FLAGS.use_fp16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "add_to_collection_185": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_256": {
                "key": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_307": {
                "input_tensor": {
                    "value": "perturbW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.where(cond1, perturbW, -perturbW)",
                            "Call"
                        ],
                        [
                            "array_ops.where(cond1, perturbW, zeros1)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "perturbW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_311": {
                "key": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_338": {
                "input_tensor": {
                    "value": "Taylor_benign",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.add(relu_logits_benign - logits * labels, math.log(2.0) + 0.5 * neg_abs_logits_benign + 1.0 / 8.0 * neg_abs_logits_benign ** 2)",
                            "Call"
                        ],
                        [
                            "math_ops.add(relu_logits_benign - logits * labels, math.log(2.0) + 0.5 * neg_abs_logits_benign + 1.0 / 8.0 * neg_abs_logits_benign ** 2)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "cross_entropy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_338": {
                "input_tensor": {
                    "value": "perturbW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.where(cond1, perturbW, -perturbW)",
                            "Call"
                        ],
                        [
                            "array_ops.where(cond1, perturbW, zeros1)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "perturbW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_342": {
                "key": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_357": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.argmax(tf.cast(labels, tf.int64), 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_365": {
                "key": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_388": {
                "name": {
                    "value": "l.op.name + ' (raw)'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "losses + [total_loss]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_389": {
                "name": {
                    "value": "l.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "loss_averages.average(l)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_414": {
                "control_inputs": {
                    "value": "[loss_averages_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_437": {
                "control_inputs": {
                    "value": "[apply_gradient_op, variables_averages_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_471": {
                "control_inputs": {
                    "value": "[loss_averages_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trainable_variables_493": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_495": {
                "control_inputs": {
                    "value": "[apply_gradient_op, variables_averages_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_loss_184": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, initializer=initializer, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu(name, shape, tf.truncated_normal_initializer(stddev=stddev, dtype=dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_477": {
                "input": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.compute_gradients(total_loss)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_norm(grads, clip_bound)",
                            "Call"
                        ],
                        [
                            "grads + tf.random_normal(shape=tf.shape(grads), mean=0.0, stddev=sigma * sensitivity ** 2, dtype=tf.float32)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/CIFAR10/cifar10_input.py": {
        "tensorflow": {
            "FixedLengthRecordReader_79": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "record_bytes": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(value, tf.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "decode_raw_83": {
                "variable": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_86": {
                "variable": {
                    "value": "result.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.strided_slice(record_bytes, [0], [label_bytes])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_91": {
                "variable": {
                    "value": "depth_major",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.strided_slice(record_bytes, [label_bytes], [label_bytes + image_bytes])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[result.depth, result.height, result.width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_96": {
                "variable": {
                    "value": "result.uint8image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "depth_major",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.strided_slice(record_bytes, [label_bytes], [label_bytes + image_bytes]), [result.depth, result.height, result.width])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "string_input_producer_158": {
                "variable": {
                    "value": "filename_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "filenames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[os.path.join(data_dir, 'data_batch_%d.bin' % i) for i in xrange(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[os.path.join(data_dir, 'data_batch_%d.bin' % i) for i in xrange(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[os.path.join(data_dir, 'test_batch.bin')]",
                            "List"
                        ]
                    ]
                }
            },
            "cast_162": {
                "variable": {
                    "value": "reshaped_image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "read_input.uint8image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_flip_left_right_169": {
                "variable": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "reshaped_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(read_input.uint8image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(read_input.uint8image, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_brightness_175": {
                "variable": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_flip_left_right(reshaped_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "distorted_image / 127.5 - 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.random_crop(distorted_image + W_conv1Noise, [height, width, 3])",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "63",
                    "type": "int",
                    "possible_values": []
                }
            },
            "random_contrast_177": {
                "variable": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_flip_left_right(reshaped_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "distorted_image / 127.5 - 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.random_crop(distorted_image + W_conv1Noise, [height, width, 3])",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_crop_194": {
                "variable": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "distorted_image + W_conv1Noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "[height, width, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "per_image_standardization_197": {
                "variable": {
                    "value": "float_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_flip_left_right(reshaped_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "distorted_image / 127.5 - 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.random_crop(distorted_image + W_conv1Noise, [height, width, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "string_input_producer_242": {
                "variable": {
                    "value": "filename_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "filenames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[os.path.join(data_dir, 'data_batch_%d.bin' % i) for i in xrange(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[os.path.join(data_dir, 'data_batch_%d.bin' % i) for i in xrange(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[os.path.join(data_dir, 'test_batch.bin')]",
                            "List"
                        ]
                    ]
                }
            },
            "cast_246": {
                "variable": {
                    "value": "reshaped_image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "read_input.uint8image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "per_image_standardization_258": {
                "variable": {
                    "value": "float_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "resized_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_image_with_crop_or_pad(reshaped_image, height, width)",
                            "Call"
                        ],
                        [
                            "resized_image / 127.5 - 1.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shuffle_batch_121": {
                "variable": {
                    "value": "(images, label_batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "num_preprocess_threads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "capacity": {
                    "value": "min_queue_examples + 3 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "min_queue_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(NUM_EXAMPLES_PER_EPOCH_FOR_TRAIN * min_fraction_of_examples_in_queue)",
                            "Call"
                        ],
                        [
                            "int(num_examples_per_epoch * min_fraction_of_examples_in_queue)",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_128": {
                "variable": {
                    "value": "(images, label_batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "num_preprocess_threads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "capacity": {
                    "value": "min_queue_examples + 3 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "image_135": {
                "name": {
                    "value": "images",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "strided_slice_87": {
                "input_": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(value, tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[label_bytes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "strided_slice_92": {
                "input_": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(value, tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[label_bytes]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[label_bytes + image_bytes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_137": {
                "tensor": {
                    "value": "label_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Exists_154": {
                "filename": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filenames",
                            "Name"
                        ],
                        [
                            "filenames",
                            "Name"
                        ]
                    ]
                }
            },
            "Exists_238": {
                "filename": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filenames",
                            "Name"
                        ],
                        [
                            "filenames",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/CIFAR10/cleverhans/attacks.py": {
        "tensorflow": {
            "placeholder_125": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "x_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None] + list(x_val.shape)[1:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "while_loop_472": {
                "variable": {
                    "value": "(_, eta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": []
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[tf.zeros([]), eta]",
                    "type": "List",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_608": {
                "variable": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(self.tf_dtype, shape=x_shape)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x_single, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "while_loop_667": {
                "variable": {
                    "value": "(_, adv_x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": []
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[tf.zeros([]), adv_x, momentum]",
                    "type": "List",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "py_func_1049": {
                "variable": {
                    "value": "wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "cw_wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x, labels]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_1181": {
                "variable": {
                    "value": "wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "ead_wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x, labels]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_1268": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.top_k(logits, k=self.nb_candidate)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.nb_candidate]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_1272": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "jacobian_graph(preds, x, self.nb_candidate)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "py_func_1281": {
                "variable": {
                    "value": "wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "deepfool_wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_1375": {
                "variable": {
                    "value": "wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lbfgs_wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x, self.y_target]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_1534": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_module.attack_softmax_cross_entropy(y, preds, mean=False)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ],
                        [
                            "-reduce_sum(tf.square(a_feat - g_feat), axis)",
                            "UnaryOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "FGM.generate(x + e, **fgm_params)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "adv_x + scaled_signed_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "pgd_attack(loss_fn, x, y_attack, epsilon, num_steps=num_steps, optimizer=optimizer, early_stop_loss_threshold=early_stop_loss_threshold, is_debug=is_debug)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_1547": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "FGM.generate(x + e, **fgm_params)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "adv_x + scaled_signed_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "pgd_attack(loss_fn, x, y_attack, epsilon, num_steps=num_steps, optimizer=optimizer, early_stop_loss_threshold=early_stop_loss_threshold, is_debug=is_debug)",
                            "Call"
                        ]
                    ]
                }
            },
            "while_loop_1589": {
                "variable": {
                    "value": "(_, eta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": []
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[tf.zeros([]), eta]",
                    "type": "List",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "as_dtype_35": {
                "variable": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type_value": {
                    "value": "dtypestr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_423": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_477": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "FGM.generate(x + e, **fgm_params)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "adv_x + scaled_signed_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "pgd_attack(loss_fn, x, y_attack, epsilon, num_steps=num_steps, optimizer=optimizer, early_stop_loss_threshold=early_stop_loss_threshold, is_debug=is_debug)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_630": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_module.attack_softmax_cross_entropy(y, preds, mean=False)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ],
                        [
                            "-reduce_sum(tf.square(a_feat - g_feat), axis)",
                            "UnaryOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "ax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ax + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "x + utils_tf.clip_eta(ax - x, self.ord, self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(ax, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(ax)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_634": {
                "variable": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grad.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_663": {
                "variable": {
                    "value": "ax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ax + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "x + utils_tf.clip_eta(ax - x, self.ord, self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(ax, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(ax)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_1545": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "FGM.generate(x + e, **fgm_params)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "adv_x + scaled_signed_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "pgd_attack(loss_fn, x, y_attack, epsilon, num_steps=num_steps, optimizer=optimizer, early_stop_loss_threshold=early_stop_loss_threshold, is_debug=is_debug)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_1594": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "FGM.generate(x + e, **fgm_params)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "adv_x + scaled_signed_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "pgd_attack(loss_fn, x, y_attack, epsilon, num_steps=num_steps, optimizer=optimizer, early_stop_loss_threshold=early_stop_loss_threshold, is_debug=is_debug)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_session_37": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_116": {
                "variable": {
                    "value": "new_kwargs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "given_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.feedable_kwargs[name]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None] + list(value.shape[1:])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_float_436": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(model_preds, preds_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_437": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.y_target",
                            "Attribute"
                        ],
                        [
                            "self.y",
                            "Attribute"
                        ],
                        [
                            "tf.to_float(tf.equal(model_preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / reduce_sum(y, 1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "kwargs.pop('y', [None] * batch_size)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "less_457": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xrange(nb_s)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.nb_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_464": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "FGM.generate(x + e, **fgm_params)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "adv_x + scaled_signed_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "pgd_attack(loss_fn, x, y_attack, epsilon, num_steps=num_steps, optimizer=optimizer, early_stop_loss_threshold=early_stop_loss_threshold, is_debug=is_debug)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_620": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xrange(nb_s)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.nb_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_641": {
                "variable": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decay_factor * m + grad",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_by_value_661": {
                "variable": {
                    "value": "ax",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "ax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ax + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "x + utils_tf.clip_eta(ax - x, self.ord, self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(ax, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(ax)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_783": {
                "variable": {
                    "value": "self.y_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func": {
                    "value": "random_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[labels]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_821": {
                "variable": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "jsma_wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x, self.y_target]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_840": {
                "variable": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "jsma_wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_1537": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad / tf.maximum(avoid_zero_div, reduce_mean(tf.abs(grad), red_ind, keepdims=True))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_1579": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(self.tf_dtype, shape=x_shape)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x_single, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "less_1583": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xrange(nb_s)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.nb_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_118": {
                "variable": {
                    "value": "new_kwargs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "given_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.feedable_kwargs[name]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_228": {
                "variable": {
                    "value": "original_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(preds, preds_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_229": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "original_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_420": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(self.tf_dtype, shape=x_shape)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x_single, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_423": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(self.tf_dtype, shape=x_shape)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x_single, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_472": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_635": {
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(1e-12, grad.dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "reduce_mean(tf.abs(grad), red_ind, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_643": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(1e-12, grad.dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "reduce_sum(tf.abs(m), red_ind, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_668": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "top_k_1269": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_logits(x)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.nb_candidate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_1531": {
                "x": {
                    "value": "a_feat - g_feat",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_1589": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_436": {
                "x": {
                    "value": "model_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_probs(x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "preds_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_max(preds, 1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "reduce_max(model_preds, 1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_649": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(avoid_zero_div, square)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_228": {
                "x": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_probs(x)",
                            "Call"
                        ],
                        [
                            "self.model.get_probs(ax)",
                            "Call"
                        ],
                        [
                            "self.model.get_probs(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.top_k(logits, k=self.nb_candidate)[0], [-1, self.nb_candidate])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "preds_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_max(preds, 1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "reduce_max(model_preds, 1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_637": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad / tf.maximum(avoid_zero_div, reduce_mean(tf.abs(grad), red_ind, keepdims=True))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_645": {
                "x": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decay_factor * m + grad",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_648": {
                "x": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decay_factor * m + grad",
                            "BinOp"
                        ]
                    ]
                }
            },
            "maximum_649": {
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(1e-12, grad.dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_sum(tf.square(m), red_ind, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/CIFAR10/cleverhans/attacks_tf.py": {
        "tensorflow": {
            "as_dtype_22": {
                "variable": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gradients_85": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_module.attack_softmax_cross_entropy(y, preds, mean=False)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ],
                        [
                            "reduce_mean(wrapped_loss_fn(perturbation), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss], 'Total batch loss')",
                            "Call"
                        ],
                        [
                            "highest_nonlabel_logits - label_logits",
                            "BinOp"
                        ],
                        [
                            "self.sess.run(self.loss, feed_dict={self.x: adv_x.reshape(oimgs.shape), self.targeted_label: targets, self.ori_img: oimgs, self.const: CONST})",
                            "Call"
                        ],
                        [
                            "reduce_mean(loss_fn(x), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [height, height], [width, width], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(x, angle, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.transform(x, theta, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ],
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "constant_499": {
                "variable": {
                    "value": "zero_diagonal",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones((nb_features, nb_features), int)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "while_loop_610": {
                "variable": {
                    "value": "(x_adv, _, _, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": []
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[x, y_target, search_domain, 0, True]",
                    "type": "List",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "while_loop_1893": {
                "variable": {
                    "value": "(_, final_perturbation, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mod_not_done & (reduce_sum(domain_in, axis=1) >= 2)",
                            "BinOp"
                        ]
                    ]
                },
                "body": {
                    "value": "loop_body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[tf.constant(0.0), init_perturbation, flat_init_optim_state]",
                    "type": "List",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "one_hot_1920": {
                "variable": {
                    "value": "logit_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_1936": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([1, 0, -dx * height, 0, 1, -dy * width, 0, 0] * batch_size, dtype=np.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, 8)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_1939": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [height, height], [width, width], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(x, angle, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.transform(x, theta, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ],
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [height, height], [width, width], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_1990": {
                "variable": {
                    "value": "adv_xs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "adv_xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(adv_xs)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_1991": {
                "variable": {
                    "value": "accs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "accs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(accs)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_75": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(preds, preds_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_76": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / reduce_sum(y, 1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / reduce_sum(y, 1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sign_89": {
                "variable": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sess.run(self.grad, feed_dict={self.x: adv_x.reshape(oimgs.shape), self.targeted_label: targets, self.ori_img: oimgs, self.const: CONST})",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_95": {
                "variable": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(grad)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(normalized_grad)",
                            "Call"
                        ],
                        [
                            "grad / avoid_nan_norm",
                            "BinOp"
                        ],
                        [
                            "grad / tf.sqrt(square)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_by_value_124": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "x + d",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "copy.copy(sample)",
                            "Call"
                        ],
                        [
                            "np.reshape(adv_x, (1, nb_features))",
                            "Call"
                        ],
                        [
                            "apply_perturbations(i, j, adv_x, increase, theta, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "copy.copy(sample)",
                            "Call"
                        ],
                        [
                            "np.clip((1 + overshoot) * r_tot + sample, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "np.clip(r_tot + sample, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "adv_x.reshape(oimgs.shape)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.clip_min * np.ones(oimgs.shape[:])",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.clip_max * np.ones(oimgs.shape[:])",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gradients_288": {
                "variable": {
                    "value": "(derivatives,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "predictions[:, class_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [height, height], [width, width], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(x, angle, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.transform(x, theta, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ],
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_505": {
                "variable": {
                    "value": "search_domain",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(x < clip_max, tf_dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_508": {
                "variable": {
                    "value": "search_domain",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(x > clip_min, tf_dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_527": {
                "variable": {
                    "value": "preds_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.argmax(preds, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(grads)",
                            "Call"
                        ],
                        [
                            "int(y_target.shape[-1].value)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_534": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack(list_derivatives)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nb_classes, -1, nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_541": {
                "variable": {
                    "value": "target_class",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(y_in, perm=[1, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nb_classes, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_543": {
                "variable": {
                    "value": "other_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(target_class, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_577": {
                "variable": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(scores, shape=[-1, nb_features * nb_features])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mod_580": {
                "variable": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(scores)",
                            "Call"
                        ],
                        [
                            "tf.argmax(tf.reshape(scores, shape=[-1, nb_features * nb_features]), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.product(adv_x.shape[1:])",
                            "Call"
                        ],
                        [
                            "int(np.product(x.shape[1:]).value)",
                            "Call"
                        ]
                    ]
                }
            },
            "floordiv_581": {
                "variable": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(scores)",
                            "Call"
                        ],
                        [
                            "tf.argmax(tf.reshape(scores, shape=[-1, nb_features * nb_features]), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.product(adv_x.shape[1:])",
                            "Call"
                        ],
                        [
                            "int(np.product(x.shape[1:]).value)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_582": {
                "variable": {
                    "value": "p1_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.mod(best, nb_features)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.product(adv_x.shape[1:])",
                            "Call"
                        ],
                        [
                            "int(np.product(x.shape[1:]).value)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_583": {
                "variable": {
                    "value": "p2_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.floordiv(best, nb_features)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.product(adv_x.shape[1:])",
                            "Call"
                        ],
                        [
                            "int(np.product(x.shape[1:]).value)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_586": {
                "variable": {
                    "value": "mod_not_done",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "reduce_sum(y_in * preds_onehot, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_590": {
                "variable": {
                    "value": "cond_float",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(cond, tf_dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_596": {
                "variable": {
                    "value": "to_mod_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "to_mod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(p1_one_hot + p2_one_hot) * cond_float",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1] + x_in.shape[1:].as_list()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_604": {
                "variable": {
                    "value": "i_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i_in",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_742": {
                "variable": {
                    "value": "modifier",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape, dtype=np_dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_745": {
                "variable": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "timg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_746": {
                "variable": {
                    "value": "self.tlab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((batch_size, num_labels))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "tlab",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_748": {
                "variable": {
                    "value": "self.const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "const",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_752": {
                "variable": {
                    "value": "self.assign_timg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_timg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_753": {
                "variable": {
                    "value": "self.assign_tlab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, num_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_tlab",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_755": {
                "variable": {
                    "value": "self.assign_const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_const",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_791": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_793": {
                "variable": {
                    "value": "end_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_802": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[modifier] + new_vars",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_1021": {
                "variable": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_1028": {
                "variable": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "timg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_1029": {
                "variable": {
                    "value": "self.newimg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "newimg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_1031": {
                "variable": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "slack",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_1033": {
                "variable": {
                    "value": "self.tlab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((batch_size, num_labels))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "tlab",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_1035": {
                "variable": {
                    "value": "self.const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "const",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_1039": {
                "variable": {
                    "value": "self.assign_timg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_timg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_1040": {
                "variable": {
                    "value": "self.assign_newimg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_newimg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_1042": {
                "variable": {
                    "value": "self.assign_slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_slack",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_1044": {
                "variable": {
                    "value": "self.assign_tlab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, num_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_tlab",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_1046": {
                "variable": {
                    "value": "self.assign_const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_const",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_1049": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_1050": {
                "variable": {
                    "value": "self.global_step_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_1054": {
                "variable": {
                    "value": "self.zt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.global_step_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.global_step_t + tf.cast(3, tf_dtype)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_1056": {
                "variable": {
                    "value": "cond1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(tf.subtract(self.slack, self.timg), self.beta_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_1058": {
                "variable": {
                    "value": "cond2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less_equal(tf.abs(tf.subtract(self.slack, self.timg)), self.beta_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_1061": {
                "variable": {
                    "value": "cond3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(tf.subtract(self.slack, self.timg), tf.negative(self.beta_t))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_1064": {
                "variable": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(self.slack, self.beta_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(self.clip_max, tf_dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_1066": {
                "variable": {
                    "value": "lower",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(self.slack, self.beta_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(self.clip_min, tf_dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_1069": {
                "variable": {
                    "value": "self.assign_newimg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "cond1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.greater(tf.subtract(self.slack, self.timg), self.beta_t), tf_dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(tf.subtract(self.slack, self.beta_t), tf.cast(self.clip_max, tf_dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_1078": {
                "variable": {
                    "value": "self.setter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.newimg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.assign_newimg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_1079": {
                "variable": {
                    "value": "self.setter_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.assign_slack",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "polynomial_decay_1132": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "self.MAX_ITERATIONS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "end_learning_rate": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "power": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_1141": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_1145": {
                "variable": {
                    "value": "end_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_1155": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.global_step] + [self.slack] + [self.newimg] + new_vars",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Variable_1495": {
                "variable": {
                    "value": "self.ori_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(self.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "ori_img",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_1497": {
                "variable": {
                    "value": "self.const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(self.batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "const",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gradients_1505": {
                "variable": {
                    "value": "(self.grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_1788": {
                "variable": {
                    "value": "(_, all_grads)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mod_not_done & (reduce_sum(domain_in, axis=1) >= 2)",
                            "BinOp"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[0, tf.TensorArray(size=self._num_iters, dtype=tf_dtype)]",
                    "type": "List",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_1807": {
                "variable": {
                    "value": "clipped_perturbation",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "perturbation",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-epsilon",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-09",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_1809": {
                "variable": {
                    "value": "new_image",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "input_image + clipped_perturbation",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "assert_less_equal_1901": {
                "variable": {
                    "value": "check_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "final_perturbation",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "perturbation_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epsilon * 1.1",
                            "BinOp"
                        ]
                    ]
                },
                "message": {
                    "value": "'final_perturbation must change no pixel by more than %s' % perturbation_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_op_1906": {
                "variable": {
                    "value": "check_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stop_gradient_1910": {
                "input": {
                    "value": "adversarial_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_image + final_perturbation",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_float_1960": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(preds, preds_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_1961": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / reduce_sum(y, 1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / reduce_sum(y, 1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gather_1992": {
                "params": {
                    "value": "adv_xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(adv_xs)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.argmin(accs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_99": {
                "variable": {
                    "value": "avoid_nan_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "Constant"
                        ],
                        [
                            "1e-12",
                            "Constant"
                        ]
                    ]
                },
                "y": {
                    "value": "reduce_sum(tf.abs(grad), reduction_indices=red_ind, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_155": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stop_gradient_162": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Hd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(kl, d)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clip_by_value_166": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "x + d",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "copy.copy(sample)",
                            "Call"
                        ],
                        [
                            "np.reshape(adv_x, (1, nb_features))",
                            "Call"
                        ],
                        [
                            "apply_perturbations(i, j, adv_x, increase, theta, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "copy.copy(sample)",
                            "Call"
                        ],
                        [
                            "np.clip((1 + overshoot) * r_tot + sample, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "np.clip(r_tot + sample, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "adv_x.reshape(oimgs.shape)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.clip_min * np.ones(oimgs.shape[:])",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.clip_max * np.ones(oimgs.shape[:])",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "logical_and_521": {
                "x": {
                    "value": "tf.less(i_in, max_iters)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "cond_in",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gradients_532": {
                "variable": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "preds[:, class_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "x_in",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "minimum_599": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.clip_max * np.ones(oimgs.shape[:])",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "x_in + to_mod_reshape * theta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_601": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.clip_min * np.ones(oimgs.shape[:])",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "x_in - to_mod_reshape * theta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_779": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ZERO()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "other - real + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_782": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ZERO()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "real - other + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_1070": {
                "x": {
                    "value": "cond2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.less_equal(tf.abs(tf.subtract(self.slack, self.timg)), self.beta_t), tf_dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_1071": {
                "x": {
                    "value": "cond3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.less(tf.subtract(self.slack, self.timg), tf.negative(self.beta_t)), tf_dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "lower",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.add(self.slack, self.beta_t), tf.cast(self.clip_min, tf_dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_1074": {
                "x": {
                    "value": "self.zt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.assign_newimg - self.newimg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_1115": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ZERO()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "other - real + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_1116": {
                "variable": {
                    "value": "loss1_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ZERO()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "other_y - real_y + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_1119": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ZERO()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "real - other + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_1120": {
                "variable": {
                    "value": "loss1_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ZERO()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "real_y - other_y + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_1651": {
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_module.attack_softmax_cross_entropy(y, preds, mean=False)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ],
                        [
                            "reduce_mean(wrapped_loss_fn(perturbation), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss], 'Total batch loss')",
                            "Call"
                        ],
                        [
                            "highest_nonlabel_logits - label_logits",
                            "BinOp"
                        ],
                        [
                            "self.sess.run(self.loss, feed_dict={self.x: adv_x.reshape(oimgs.shape), self.targeted_label: targets, self.ori_img: oimgs, self.const: CONST})",
                            "Call"
                        ],
                        [
                            "reduce_mean(loss_fn(x), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [height, height], [width, width], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(x, angle, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.transform(x, theta, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ],
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_1768": {
                "variable": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1] + static_x_shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_1776": {
                "variable": {
                    "value": "delta_x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[delta_x, -delta_x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_1777": {
                "variable": {
                    "value": "loss_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "loss_fn(x + delta_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2 * self._num_samples] + [1] * (len(x_shape) - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_1781": {
                "variable": {
                    "value": "avg_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "avg_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_sum(all_grads.stack(), axis=0)",
                            "Call"
                        ],
                        [
                            "reduce_mean(loss_vals * delta_x, axis=0) / delta",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(avg_grad, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "control_dependencies_1803": {
                "control_inputs": {
                    "value": "[tf.assert_less_equal(input_image, 1.0), tf.assert_greater_equal(input_image, 0.0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Print_1854": {
                "variable": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Print(input_image, [], 'Starting PGD attack with epsilon: %s' % epsilon)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "'Starting PGD attack with epsilon: %s' % epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_1859": {
                "input": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Print(input_image, [], 'Starting PGD attack with epsilon: %s' % epsilon)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_1882": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(num_iterations)",
                            "Call"
                        ],
                        [
                            "tf.identity(i)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.less(loss, early_stop_loss_threshold), lambda : float(num_steps), lambda : i)",
                            "Call"
                        ],
                        [
                            "range(0, len(imgs), self.batch_size)",
                            "Call"
                        ],
                        [
                            "range(0, len(imgs) // batch_size)",
                            "Call"
                        ],
                        [
                            "range(self.batch_size)",
                            "Call"
                        ],
                        [
                            "xrange(len(x))",
                            "Call"
                        ],
                        [
                            "xrange(len(x))",
                            "Call"
                        ]
                    ]
                }
            },
            "less_1890": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(num_iterations)",
                            "Call"
                        ],
                        [
                            "tf.identity(i)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.less(loss, early_stop_loss_threshold), lambda : float(num_steps), lambda : i)",
                            "Call"
                        ],
                        [
                            "range(0, len(imgs), self.batch_size)",
                            "Call"
                        ],
                        [
                            "range(0, len(imgs) // batch_size)",
                            "Call"
                        ],
                        [
                            "range(self.batch_size)",
                            "Call"
                        ],
                        [
                            "xrange(len(x))",
                            "Call"
                        ],
                        [
                            "xrange(len(x))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "num_steps",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "control_dependencies_1908": {
                "control_inputs": {
                    "value": "[check_diff]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmin_1992": {
                "input": {
                    "value": "accs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(accs)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_75": {
                "x": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_probs(x_in)",
                            "Call"
                        ],
                        [
                            "model.get_probs(x)",
                            "Call"
                        ],
                        [
                            "np.atleast_1d(utils_tf.model_argmax(self.sess, self.x, self.model_preds, adv_x))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "preds_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_max(preds, 1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "reduce_max(preds, 1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_107": {
                "variable": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "Constant"
                        ],
                        [
                            "1e-12",
                            "Constant"
                        ]
                    ]
                },
                "y": {
                    "value": "reduce_sum(tf.square(grad), reduction_indices=red_ind, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_156": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [height, height], [width, width], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(x, angle, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.transform(x, theta, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ],
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cast_506": {
                "x": {
                    "value": "x < clip_max",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_509": {
                "x": {
                    "value": "x > clip_min",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "less_521": {
                "x": {
                    "value": "i_in",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "max_iters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.floor(nb_features * gamma / 2)",
                            "Call"
                        ],
                        [
                            "np.floor(nb_features * gamma / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_527": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_probs(x_in)",
                            "Call"
                        ],
                        [
                            "model.get_probs(x)",
                            "Call"
                        ],
                        [
                            "np.atleast_1d(utils_tf.model_argmax(self.sess, self.x, self.model_preds, adv_x))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_535": {
                "values": {
                    "value": "list_derivatives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "transpose_542": {
                "a": {
                    "value": "y_in",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "not_equal_543": {
                "x": {
                    "value": "target_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(y_in, perm=[1, 0]), shape=[nb_classes, -1, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_552": {
                "x": {
                    "value": "tf.equal(domain_in, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_557": {
                "tensor": {
                    "value": "target_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_target",
                            "Name"
                        ],
                        [
                            "target_tmp - increase_coef * reduce_max(tf.abs(grads_target), axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, nb_features, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_558": {
                "tensor": {
                    "value": "target_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_target",
                            "Name"
                        ],
                        [
                            "target_tmp - increase_coef * reduce_max(tf.abs(grads_target), axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_563": {
                "tensor": {
                    "value": "other_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_other",
                            "Name"
                        ],
                        [
                            "other_tmp + increase_coef * reduce_max(tf.abs(grads_other), axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, nb_features, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_564": {
                "tensor": {
                    "value": "other_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_other",
                            "Name"
                        ],
                        [
                            "other_tmp + increase_coef * reduce_max(tf.abs(grads_other), axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_578": {
                "tensor": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores_mask * (-target_sum * other_sum)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(scores_mask, tf_dtype) * (-target_sum * other_sum) * zero_diagonal",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, nb_features * nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_590": {
                "x": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mod_not_done & (reduce_sum(domain_in, axis=1) >= 2)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "square_770": {
                "x": {
                    "value": "self.newimg - self.other",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "greater_1056": {
                "x": {
                    "value": "tf.subtract(self.slack, self.timg)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_equal_1058": {
                "x": {
                    "value": "tf.abs(tf.subtract(self.slack, self.timg))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_1061": {
                "x": {
                    "value": "tf.subtract(self.slack, self.timg)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.negative(self.beta_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_1064": {
                "x": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_1065": {
                "x": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_1066": {
                "x": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_1067": {
                "x": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "square_1086": {
                "x": {
                    "value": "self.newimg - self.timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_1088": {
                "x": {
                    "value": "self.slack - self.timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_1090": {
                "x": {
                    "value": "self.newimg - self.timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_1092": {
                "x": {
                    "value": "self.slack - self.timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_1094": {
                "x": {
                    "value": "self.l1dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_1096": {
                "x": {
                    "value": "self.l1dist_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_1130": {
                "x": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.loss21",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_1502": {
                "x": {
                    "value": "self.x - self.ori_img",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_1702": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_1703": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sign_1752": {
                "x": {
                    "value": "tf.random_uniform([self._num_samples] + x_shape[1:], minval=-1.0, maxval=1.0, dtype=tf_dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_1853": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Print_1878": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_module.attack_softmax_cross_entropy(y, preds, mean=False)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ],
                        [
                            "reduce_mean(wrapped_loss_fn(perturbation), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss], 'Total batch loss')",
                            "Call"
                        ],
                        [
                            "highest_nonlabel_logits - label_logits",
                            "BinOp"
                        ],
                        [
                            "self.sess.run(self.loss, feed_dict={self.x: adv_x.reshape(oimgs.shape), self.targeted_label: targets, self.ori_img: oimgs, self.const: CONST})",
                            "Call"
                        ],
                        [
                            "reduce_mean(loss_fn(x), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[loss]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "Total batch loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_1881": {
                "control_inputs": {
                    "value": "[loss]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_1884": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.less(loss, early_stop_loss_threshold)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : float(num_steps)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : i",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "equal_1960": {
                "x": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_probs(x_in)",
                            "Call"
                        ],
                        [
                            "model.get_probs(x)",
                            "Call"
                        ],
                        [
                            "np.atleast_1d(utils_tf.model_argmax(self.sess, self.x, self.model_preds, adv_x))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "preds_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_max(preds, 1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "reduce_max(preds, 1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "count_nonzero_1987": {
                "input": {
                    "value": "tf.equal(tf.argmax(y, axis=-1), tf.argmax(preds_adv, axis=-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_161": {
                "ys": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils_tf.kl_with_logits(logits, logits_d)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal(tf.shape(x), dtype=tf_dtype)",
                            "Call"
                        ],
                        [
                            "xi * utils_tf.l2_batch_normalize(d)",
                            "BinOp"
                        ],
                        [
                            "tf.stop_gradient(Hd)",
                            "Call"
                        ],
                        [
                            "eps * utils_tf.l2_batch_normalize(d)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "equal_552": {
                "x": {
                    "value": "domain_in",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_556": {
                "x": {
                    "value": "grads_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_sum(grads * target_class, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_562": {
                "x": {
                    "value": "grads_other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_sum(grads * other_classes, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_573": {
                "x": {
                    "value": "scores_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(target_sum > 0) & (other_sum < 0)",
                            "BinOp"
                        ],
                        [
                            "(target_sum < 0) & (other_sum > 0)",
                            "BinOp"
                        ],
                        [
                            "(target_sum > 0) & (other_sum < 0)",
                            "BinOp"
                        ],
                        [
                            "(target_sum < 0) & (other_sum > 0)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_760": {
                "x": {
                    "value": "modifier + self.timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_1055": {
                "x": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_1056": {
                "x": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_1058": {
                "x": {
                    "value": "tf.subtract(self.slack, self.timg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_1061": {
                "x": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "negative_1062": {
                "x": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assert_less_equal_1804": {
                "x": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Print(input_image, [], 'Starting PGD attack with epsilon: %s' % epsilon)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "assert_greater_equal_1805": {
                "x": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Print(input_image, [], 'Starting PGD attack with epsilon: %s' % epsilon)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "device_1877": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_1896": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "equal_1987": {
                "x": {
                    "value": "tf.argmax(y, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(preds_adv, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_100": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sess.run(self.grad, feed_dict={self.x: adv_x.reshape(oimgs.shape), self.targeted_label: targets, self.ori_img: oimgs, self.const: CONST})",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_111": {
                "x": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(avoid_zero_div, reduce_sum(tf.square(grad), reduction_indices=red_ind, keepdims=True))",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_665": {
                "x": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.stack(list_derivatives), shape=[nb_classes, -1, nb_features])",
                            "Call"
                        ],
                        [
                            "self._compute_gradients(loss_fn, x, optim_state)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_790": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "subtract_1058": {
                "x": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_1140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_1723": {
                "x": {
                    "value": "self._beta1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_optim_state['t']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pow_1724": {
                "x": {
                    "value": "self._beta2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_optim_state['t']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "TensorArray_1792": {
                "size": {
                    "value": "self._num_iters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "less_1885": {
                "x": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_module.attack_softmax_cross_entropy(y, preds, mean=False)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ],
                        [
                            "reduce_mean(wrapped_loss_fn(perturbation), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss], 'Total batch loss')",
                            "Call"
                        ],
                        [
                            "highest_nonlabel_logits - label_logits",
                            "BinOp"
                        ],
                        [
                            "self.sess.run(self.loss, feed_dict={self.x: adv_x.reshape(oimgs.shape), self.targeted_label: targets, self.ori_img: oimgs, self.const: CONST})",
                            "Call"
                        ],
                        [
                            "reduce_mean(loss_fn(x), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "early_stop_loss_threshold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "argmax_1987": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / reduce_sum(y, 1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / reduce_sum(y, 1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_1988": {
                "input": {
                    "value": "preds_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_logits(adv_xs[-1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "square_108": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sess.run(self.grad, feed_dict={self.x: adv_x.reshape(oimgs.shape), self.targeted_label: targets, self.ori_img: oimgs, self.const: CONST})",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_767": {
                "x": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_1726": {
                "x": {
                    "value": "u_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_optim_state['u'][i] / (1.0 - tf.pow(self._beta2, t))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/CIFAR10/cleverhans/attacks_tfe.py": {
        "tensorflow": {
            "as_dtype_42": {
                "variable": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type_value": {
                    "value": "dtypestr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sign_157": {
                "variable": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tape.gradient(loss, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_163": {
                "variable": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(grad)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(normalized_grad)",
                            "Call"
                        ],
                        [
                            "grad / avoid_nan_norm",
                            "BinOp"
                        ],
                        [
                            "grad / tf.sqrt(square)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_by_value_193": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.generate(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "x + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientTape_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "maximum_167": {
                "variable": {
                    "value": "avoid_nan_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "Constant"
                        ],
                        [
                            "1e-12",
                            "Constant"
                        ]
                    ]
                },
                "y": {
                    "value": "reduce_sum(tf.abs(grad), reduction_indices=red_ind, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_175": {
                "variable": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "Constant"
                        ],
                        [
                            "1e-12",
                            "Constant"
                        ]
                    ]
                },
                "y": {
                    "value": "reduce_sum(tf.square(grad), reduction_indices=red_ind, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_168": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tape.gradient(loss, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_179": {
                "x": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(avoid_zero_div, reduce_sum(tf.square(grad), reduction_indices=red_ind, keepdims=True))",
                            "Call"
                        ]
                    ]
                }
            },
            "square_176": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tape.gradient(loss, x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/CIFAR10/cleverhans/augmentation.py": {
        "tensorflow": {
            "pad_22": {
                "variable": {
                    "value": "xp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(random_crop_and_flip_image, x)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[pad[0], pad[0]], [pad[1], pad[1]], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'REFLECT'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "random_flip_left_right_17": {
                "image": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(random_crop_and_flip_image, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_crop_23": {
                "value": {
                    "value": "xp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[pad[0], pad[0]], [pad[1], pad[1]], [0, 0]], mode)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "tf.shape(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "map_fn_50": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "random_crop_and_flip_image",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(random_crop_and_flip_image, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_23": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(random_crop_and_flip_image, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_27": {
                "device_name": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/CPU:0'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "map_fn_28": {
                "fn": {
                    "value": "func",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(random_crop_and_flip_image, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_32": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(random_crop_and_flip_image, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_33": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(random_crop_and_flip_image, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_crop_41": {
                "value": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[rows, cols, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_flip_left_right_44": {
                "image": {
                    "value": "_rand_crop_img(_pad_img(img))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_49": {
                "device_name": {
                    "value": "/CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/CIFAR10/cleverhans/compat.py": {
        "tensorflow": {
            "stop_gradient_107": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(labels)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_v2_108": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(labels)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_116": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(labels)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/CIFAR10/cleverhans/evaluation.py": {
        "tensorflow": {
            "equal_337": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y_batch, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(predictions, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_337": {
                "input": {
                    "value": "y_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.make_label_placeholder()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_338": {
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_probs(x_batch)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_139": {
                "device_name": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "devices",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/CIFAR10/cleverhans/loss.py": {
        "tensorflow": {
            "maximum_128": {
                "variable": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.distributions.Beta(self.beta, self.beta)",
                            "Call"
                        ],
                        [
                            "mix.sample([tf.shape(x)[0]] + [1] * (len(x.shape) - 1))",
                            "Call"
                        ],
                        [
                            "tf.maximum(mix, 1 - mix)",
                            "Call"
                        ],
                        [
                            "tf.distributions.Beta(self.beta, self.beta)",
                            "Call"
                        ],
                        [
                            "mix.sample([tf.shape(x)[0]] + [1] * (len(x.shape) - 1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1 - mix",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_132": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "softmax_cross_entropy_with_logits(labels=ym, logits=logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_155": {
                "variable": {
                    "value": "pairing_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pairing_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.reduce_mean(tf.square(a - b)) for (a, b) in zip(d1[Model.O_FEATURES], d2[Model.O_FEATURES])]",
                            "ListComp"
                        ],
                        [
                            "tf.reduce_mean(pairing_loss)",
                            "Call"
                        ],
                        [
                            "[tf.reduce_mean(tf.square(a - b)) for (a, b) in zip(d1[Model.O_FEATURES], d2[Model.O_FEATURES])]",
                            "ListComp"
                        ],
                        [
                            "tf.reduce_mean(pairing_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_156": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "softmax_cross_entropy_with_logits(labels=y, logits=d1[Model.O_LOGITS])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_168": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "terms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[weight * loss for (weight, loss) in safe_zip(weights, losses)]",
                            "ListComp"
                        ],
                        [
                            "[tf.nn.l2_loss(param) for param in self.model.get_params() if len(param.get_shape()) > 1]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "reduce_mean_250": {
                "variable": {
                    "value": "pairing_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pairing_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.reduce_mean(tf.square(a - b)) for (a, b) in zip(d1[Model.O_FEATURES], d2[Model.O_FEATURES])]",
                            "ListComp"
                        ],
                        [
                            "tf.reduce_mean(pairing_loss)",
                            "Call"
                        ],
                        [
                            "[tf.reduce_mean(tf.square(a - b)) for (a, b) in zip(d1[Model.O_FEATURES], d2[Model.O_FEATURES])]",
                            "ListComp"
                        ],
                        [
                            "tf.reduce_mean(pairing_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "Beta_275": {
                "variable": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": []
                },
                "concentration1": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "concentration0": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_75": {
                "inputs": {
                    "value": "terms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[weight * loss for (weight, loss) in safe_zip(weights, losses)]",
                            "ListComp"
                        ],
                        [
                            "[tf.nn.l2_loss(param) for param in self.model.get_params() if len(param.get_shape()) > 1]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Beta_126": {
                "variable": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": []
                },
                "concentration1": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "concentration0": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_158": {
                "input_tensor": {
                    "value": "softmax_cross_entropy_with_logits(labels=y, logits=d2[Model.O_LOGITS])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_184": {
                "input_tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softmax_cross_entropy_with_logits(logits=logits, labels=y)",
                            "Call"
                        ],
                        [
                            "tf.add_n(terms)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_124": {
                "device_name": {
                    "value": "/CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_152": {
                "input_tensor": {
                    "value": "tf.square(a - b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_loss_165": {
                "t": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_247": {
                "input_tensor": {
                    "value": "tf.square(a - b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_107": {
                "input_tensor": {
                    "value": "softmax_cross_entropy_with_logits(labels=y, logits=logit)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_152": {
                "x": {
                    "value": "a - b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_247": {
                "x": {
                    "value": "a - b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_100": {
                "x": {
                    "value": "y.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_213": {
                "x": {
                    "value": "y.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_276": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x, self.attack(x))",
                            "Tuple"
                        ],
                        [
                            "(x,)",
                            "Tuple"
                        ],
                        [
                            "(x, self.attack(x))",
                            "Tuple"
                        ],
                        [
                            "(x,)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "shape_127": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x, self.attack(x))",
                            "Tuple"
                        ],
                        [
                            "(x,)",
                            "Tuple"
                        ],
                        [
                            "(x, self.attack(x))",
                            "Tuple"
                        ],
                        [
                            "(x,)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "cast_102": {
                "x": {
                    "value": "y.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_215": {
                "x": {
                    "value": "y.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/CIFAR10/cleverhans/model.py": {
        "tensorflow": {
            "get_collection_85": {
                "variable": {
                    "value": "scope_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_90": {
                "variable": {
                    "value": "scope_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "executing_eagerly_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_58": {
                "logits": {
                    "value": "d[self.O_LOGITS]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.fprop(x, **kwargs)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/CIFAR10/cleverhans/model_backup.py": {
        "tensorflow": {
            "get_collection_85": {
                "variable": {
                    "value": "scope_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_90": {
                "variable": {
                    "value": "scope_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "executing_eagerly_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_58": {
                "logits": {
                    "value": "d[self.O_LOGITS]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.fprop(x, **kwargs)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/CIFAR10/cleverhans/picklable_model.py": {
        "tensorflow": {
            "matmul_198": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W.var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_268": {
                "variable": {
                    "value": "dummy_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.get_output_shape()",
                            "Call"
                        ],
                        [
                            "list(input_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_276": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.kernels.var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1,) + tuple(self.strides) + (1,)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_303": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "to_float_401": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x >= 0.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "softmax_433": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_470": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sqrt_471": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(tf.square(x - mean))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_746": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_748": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size,) + self.expanded_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "moments_749": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_751": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(x)",
                            "Call"
                        ],
                        [
                            "tf.shape(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_780": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "moments_782": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_137": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "tuple(self.input_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_250": {
                "variable": {
                    "value": "squared_norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(init)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "(0, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_251": {
                "variable": {
                    "value": "denom",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1e-07 + squared_norms",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_319": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.less(x, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "self.leak * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_339": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tanh_358": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "elu_380": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tanh_423": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "placeholder_440": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.output_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_454": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.output_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Print_472": {
                "input_": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "data": {
                    "value": "[tf.reduce_min(x), mean, tf.reduce_max(x), std]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "Print layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "map_fn_566": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda ex: tf.image.per_image_standardization(ex)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "avg_pool_690": {
                "variable": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ],
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ],
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_694": {
                "variable": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_714": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "avg_pool_846": {
                "variable": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ],
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ],
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_850": {
                "variable": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_471": {
                "input_tensor": {
                    "value": "tf.square(x - mean)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_565": {
                "device_name": {
                    "value": "/CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_631": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "rate": {
                    "value": "include_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.include_prob",
                            "Attribute"
                        ],
                        [
                            "dropout_dict[self.name]",
                            "Subscript"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "rsqrt_750": {
                "x": {
                    "value": "var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rsqrt_783": {
                "x": {
                    "value": "var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_143": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.layers[-1].get_output_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_183": {
                "x": {
                    "value": "1e-07 + tf.reduce_sum(tf.square(init), axis=0, keep_dims=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_250": {
                "x": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal([dim, self.num_hid], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "init / tf.sqrt(1e-07 + tf.reduce_sum(tf.square(init), axis=0, keep_dims=True))",
                            "BinOp"
                        ],
                        [
                            "init * self.init_scale",
                            "BinOp"
                        ],
                        [
                            "tf.random_uniform([dim, self.num_hid], dtype=tf.float32, minval=-scale, maxval=scale)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(kernel_shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.init_scale * init / denom",
                            "BinOp"
                        ],
                        [
                            "tf.random_normal(kernel_shape, dtype=tf.float32, stddev=np.sqrt(2.0 / fan_out))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(kernel_shape, dtype=tf.float32, minval=-scale, maxval=scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "less_319": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "square_471": {
                "x": {
                    "value": "x - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_min_473": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_max_473": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "per_image_standardization_567": {
                "image": {
                    "value": "ex",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_183": {
                "input_tensor": {
                    "value": "tf.square(init)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_403": {
                "x": {
                    "value": "(1.0 - mask) * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_183": {
                "x": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal([dim, self.num_hid], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "init / tf.sqrt(1e-07 + tf.reduce_sum(tf.square(init), axis=0, keep_dims=True))",
                            "BinOp"
                        ],
                        [
                            "init * self.init_scale",
                            "BinOp"
                        ],
                        [
                            "tf.random_uniform([dim, self.num_hid], dtype=tf.float32, minval=-scale, maxval=scale)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(kernel_shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.init_scale * init / denom",
                            "BinOp"
                        ],
                        [
                            "tf.random_normal(kernel_shape, dtype=tf.float32, stddev=np.sqrt(2.0 / fan_out))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(kernel_shape, dtype=tf.float32, minval=-scale, maxval=scale)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/CIFAR10/cleverhans/serial.py": {
        "tensorflow": {
            "Variable_39": {
                "variable": {
                    "value": "self.var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "get_default_session_42": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_49": {
                "variable": {
                    "value": "self.var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "d['var']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_default_session_50": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_session_84": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_session_97": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/CIFAR10/cleverhans/tests/test_dropout.py": {
        "tensorflow": {
            "constant_11": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_13": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_31": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_33": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_51": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_54": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/CIFAR10/cleverhans/tests/test_serial.py": {
        "tensorflow": {
            "Session_12": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_18": {
                "ref": {
                    "value": "xv.var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "np.ones(1) * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/CIFAR10/cleverhans/tests/test_utils_tf.py": {
        "tensorflow": {
            "Session_12": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_18": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(5, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_30": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[2.0], [3.0], [4.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_39": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "clipped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip_eta(eta, ord_arg, eps)",
                            "Call"
                        ],
                        [
                            "self.sess.run(clipped)",
                            "Call"
                        ],
                        [
                            "clip_eta(eta * sign, ord_arg, eps)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros((5, 3))",
                            "Call"
                        ],
                        [
                            "tf.constant([[2.0], [3.0], [4.0]])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/CIFAR10/cleverhans/train.py": {
        "tensorflow": {
            "placeholder_147": {
                "variable": {
                    "value": "epoch_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_148": {
                "variable": {
                    "value": "batch_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdamOptimizer_108": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_153": {
                "variable": {
                    "value": "ema",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "ema_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ema_decay(epoch_tf, batch_tf)",
                            "Call"
                        ],
                        [
                            "0.998",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "placeholder_122": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x_train.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + x_train.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_123": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x_train.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + y_train.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_144": {
                "control_inputs": {
                    "value": "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_121": {
                "device_name": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_collection_144": {
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_154": {
                "control_inputs": {
                    "value": "[train_step]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_160": {
                "initial_value": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "assign_163": {
                "ref": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "control_dependencies_165": {
                "control_inputs": {
                    "value": "param_to_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.assign(tmp, param) for (tmp, param) in safe_zip(tmp_params, var_list)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "control_dependencies_168": {
                "control_inputs": {
                    "value": "avg_to_param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.assign(param, avg) for (param, avg) in safe_zip(var_list, avg_params)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "global_variables_initializer_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_n_322": {
                "inputs": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[g for (g, _) in grad_and_vars]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "assign_166": {
                "ref": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "avg",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "assign_169": {
                "ref": {
                    "value": "avg",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/CIFAR10/cleverhans/utils.py": {
        "tensorflow": {
            "placeholder_267": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, height, width, channels]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_normalize_279": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "adv_x - x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_280": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.lin_space(float(min_epsilon), float(max_epsilon), num_points)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(num_points, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/CIFAR10/cleverhans/utils_pytorch.py": {
        "tensorflow": {
            "get_default_graph_29": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RegisterGradient_26": {
                "op_type": {
                    "value": "rnd_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'PyFuncGrad-' + '%0x' % getrandbits(30 * 4)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "py_func_34": {
                "func": {
                    "value": "func",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "Tout": {
                    "value": "Tout",
                    "type": "variable",
                    "possible_values": []
                },
                "stateful": {
                    "value": "stateful",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "py_func_73": {
                "func": {
                    "value": "_bprop_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[op.inputs[0], grads_in]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32]",
                    "type": "List",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Tensor_53": {
                "variable": {
                    "value": "x_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_63": {
                "variable": {
                    "value": "grads_in_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_68": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch_state['logits'] * grads_in_tensor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/CIFAR10/cleverhans/utils_tf.py": {
        "tensorflow": {
            "global_variables_59": {
                "variable": {
                    "value": "global_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_434": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_131": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_218": {
                "variable": {
                    "value": "correct_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(predictions, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_221": {
                "variable": {
                    "value": "correct_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y, axis=tf.rank(y) - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(predictions, axis=tf.rank(predictions) - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_277": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_325": {
                "variable": {
                    "value": "x_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + reduce_max(tf.abs(x), 1, keepdims=True))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "flatten_326": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + reduce_max(tf.abs(x), 1, keepdims=True))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rsqrt_329": {
                "variable": {
                    "value": "x_inv_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "np.sqrt(epsilon) + square_sum",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_330": {
                "variable": {
                    "value": "x_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + reduce_max(tf.abs(x), 1, keepdims=True))",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "x_inv_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.rsqrt(np.sqrt(epsilon) + square_sum)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_339": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "p_logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_softmax_340": {
                "variable": {
                    "value": "p_log",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "p_logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_softmax_341": {
                "variable": {
                    "value": "q_log",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "q_logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_by_value_363": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(eta, -eps, eps)",
                            "Call"
                        ],
                        [
                            "eta * factor",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-eps",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "minimum_378": {
                "variable": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "eps / norm",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_variable_initialized_62": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "control_dependencies_137": {
                "control_inputs": {
                    "value": "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_182": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_324": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_331": {
                "tensor": {
                    "value": "x_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(x, x_inv_norm)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "x_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(x)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_338": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "add_loss_344": {
                "loss": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_mean(reduce_sum(p * (p_log - q_log), axis=1), name=name)",
                            "Call"
                        ],
                        [
                            "model_loss(y, predictions)",
                            "Call"
                        ],
                        [
                            "(loss + model_loss(y, predictions_adv)) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "loss_collection": {
                    "value": "loss_collection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphKeys.REGULARIZATION_LOSSES",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "maximum_366": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "Constant"
                        ]
                    ]
                },
                "y": {
                    "value": "reduce_sum(tf.abs(eta), reduc_ind, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_479": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_71": {
                "var_list": {
                    "value": "not_initialized_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[var for (var, init) in zip(global_vars, is_initialized) if not init]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "get_collection_137": {
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_218": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_219": {
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_221": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "tf.rank(y) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_222": {
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "tf.rank(predictions) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_328": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + reduce_max(tf.abs(x), 1, keepdims=True))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_372": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(avoid_zero_div, reduce_sum(tf.square(eta), reduc_ind, keepdims=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_327": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + reduce_max(tf.abs(x), 1, keepdims=True))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "global_variables_initializer_440": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_440": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_446": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_367": {
                "x": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(eta, -eps, eps)",
                            "Call"
                        ],
                        [
                            "eta * factor",
                            "BinOp"
                        ]
                    ]
                }
            },
            "maximum_372": {
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "Constant"
                        ]
                    ]
                },
                "y": {
                    "value": "reduce_sum(tf.square(eta), reduc_ind, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rank_221": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rank_223": {
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_373": {
                "x": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(eta, -eps, eps)",
                            "Call"
                        ],
                        [
                            "eta * factor",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/CIFAR10/cleverhans/utils_tfe.py": {
        "tensorflow": {
            "AdamOptimizer_69": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_214": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_119": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_194": {
                "variable": {
                    "value": "cur_corr_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(batch_y, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(predictions, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_187": {
                "ref": {
                    "value": "batch_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfe.Variable(X_train[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tfe.Variable(X_test[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "X_cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((args.batch_size,) + X_test.shape[1:], dtype=X_test.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_188": {
                "ref": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfe.Variable(Y_train[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tfe.Variable(Y_test[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "Y_cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((args.batch_size,) + Y_test.shape[1:], dtype=Y_test.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_230": {
                "input": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(tf_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_232": {
                "input": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(tf_samples)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "assign_91": {
                "ref": {
                    "value": "batch_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfe.Variable(X_train[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tfe.Variable(X_test[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "X_train[index_shuf[start:end]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "assign_92": {
                "ref": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfe.Variable(Y_train[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tfe.Variable(Y_test[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "Y_train[index_shuf[start:end]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_194": {
                "input": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfe.Variable(Y_train[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tfe.Variable(Y_test[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_195": {
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch_adv_x)",
                            "Call"
                        ],
                        [
                            "model(batch_x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "GradientTape_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/CIFAR10/mlp.py": {
        "tensorflow": {
            "relu_73": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.conv2d(v, W, strides=[1, 2, 2, 1], padding='SAME') + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_91": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.conv2d(v, self.W, strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_92": {
                "variable": {
                    "value": "max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.conv2d(v, W, strides=[1, 2, 2, 1], padding='SAME') + b)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(h, scale=True, is_training=True, updates_collections=[AECODER_VARIABLES])",
                            "Call"
                        ],
                        [
                            "tf.add(tf.nn.conv2d(v, self.W, strides=[1, 2, 2, 1], padding='SAME'), self.b)",
                            "Call"
                        ],
                        [
                            "h / max",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_by_value_95": {
                "variable": {
                    "value": "Chebyshev_h",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "self.dpChebyshev(h, Delta, epsilon, batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_120": {
                "variable": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(rc_v - self.input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_121": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_like_140": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rc_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decode(xShape, propup, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "self.decode2(xShape, propup, W, b, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_142": {
                "variable": {
                    "value": "relu_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rc_v >= zeros",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "rc_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decode(xShape, propup, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "self.decode2(xShape, propup, W, b, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.zeros_like(rc_v, dtype=self.input.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_143": {
                "variable": {
                    "value": "neg_abs_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rc_v >= zeros",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "-rc_v",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "rc_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decode(xShape, propup, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "self.decode2(xShape, propup, W, b, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_145": {
                "variable": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "math_ops.add(relu_logits - rc_v * (self.input + perturbFMx), math.log(2.0) + 0.5 * neg_abs_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_35": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([filter_size, filter_size, n_filter_in, n_filter_out], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_37": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_filter_out])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_63": {
                "variable": {
                    "value": "perturbFM",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "perturbFM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.laplace(0.0, 1.0 / (epsilon * batch_size), 1).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(perturbFM, Delta)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "Delta",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_by_value_76": {
                "t": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.conv2d(v, W, strides=[1, 2, 2, 1], padding='SAME') + b)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(h, scale=True, is_training=True, updates_collections=[AECODER_VARIABLES])",
                            "Call"
                        ],
                        [
                            "tf.add(tf.nn.conv2d(v, self.W, strides=[1, 2, 2, 1], padding='SAME'), self.b)",
                            "Call"
                        ],
                        [
                            "h / max",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_91": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_101": {
                "x": {
                    "value": "tf.nn.conv2d_transpose(propup, self.W, tf.stack([xShape, self.inputShape[1], self.inputShape[2], self.inputShape[3]]), strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_112": {
                "input": {
                    "value": "upsample3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(propup, size=(self.inputShape[1], self.inputShape[2]), method=tf.image.ResizeMethod.NEAREST_NEIGHBOR)",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "tf.transpose(W, perm=[1, 0, 3, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_120": {
                "x": {
                    "value": "rc_v - self.input",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_145": {
                "x": {
                    "value": "relu_logits - rc_v * (self.input + perturbFMx)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "math.log(2.0) + 0.5 * neg_abs_logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "truncated_normal_35": {
                "shape": {
                    "value": "[filter_size, filter_size, n_filter_in, n_filter_out]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_37": {
                "shape": {
                    "value": "[n_filter_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_73": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([filter_size, filter_size, n_filter_in, n_filter_out], stddev=0.1), dtype=tf.float32, name='W')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_101": {
                "input": {
                    "value": "propup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.propup(self.input)",
                            "Call"
                        ],
                        [
                            "self.propup(self.input + perturbFMx, W, b) + perturbFM_h",
                            "BinOp"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "tf.stack([xShape, self.inputShape[1], self.inputShape[2], self.inputShape[3]])",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_65": {
                "x": {
                    "value": "coefficients[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "x ** 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_102": {
                "values": {
                    "value": "[xShape, self.inputShape[1], self.inputShape[2], self.inputShape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_112": {
                "a": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([filter_size, filter_size, n_filter_in, n_filter_out], stddev=0.1), dtype=tf.float32, name='W')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/CIFAR10/more_attack.py": {
        "tensorflow": {
            "softmax_cross_entropy_with_logits_27": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model",
                            "Name"
                        ]
                    ]
                },
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / tf.reduce_sum(y, 1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / tf.reduce_sum(y, 1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gradients_132": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils_tf.model_loss(y, preds, mean=False)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ],
                        [
                            "utils_tf.model_loss(y, preds, mean=False)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gradients_264": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils_tf.model_loss(y, preds, mean=False)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ],
                        [
                            "utils_tf.model_loss(y, preds, mean=False)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_30": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=y)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_55": {
                "variable": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stop_gradient_61": {
                "variable": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(grad)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(normalized_grad)",
                            "Call"
                        ],
                        [
                            "grad / tf.reduce_sum(tf.abs(grad), reduction_indices=red_ind, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "grad / tf.sqrt(square)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(grad)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(normalized_grad)",
                            "Call"
                        ],
                        [
                            "grad / tf.reduce_sum(tf.abs(grad), reduction_indices=red_ind, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "grad / tf.sqrt(square)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(grad)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(normalized_grad)",
                            "Call"
                        ],
                        [
                            "grad / tf.reduce_sum(tf.abs(grad), reduction_indices=red_ind, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "grad / tf.sqrt(square)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_by_value_85": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "x + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "x + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_max_121": {
                "variable": {
                    "value": "preds_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "to_float_122": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(preds, preds_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_123": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / tf.reduce_sum(y, 1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / tf.reduce_sum(y, 1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sign_136": {
                "variable": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stop_gradient_142": {
                "variable": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(grad)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(normalized_grad)",
                            "Call"
                        ],
                        [
                            "grad / tf.reduce_sum(tf.abs(grad), reduction_indices=red_ind, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "grad / tf.sqrt(square)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(grad)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(normalized_grad)",
                            "Call"
                        ],
                        [
                            "grad / tf.reduce_sum(tf.abs(grad), reduction_indices=red_ind, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "grad / tf.sqrt(square)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(grad)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(normalized_grad)",
                            "Call"
                        ],
                        [
                            "grad / tf.reduce_sum(tf.abs(grad), reduction_indices=red_ind, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "grad / tf.sqrt(square)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_by_value_166": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "x + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "x + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_181": {
                "variable": {
                    "value": "eta_t",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "eta_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fgm(x_input_t, preds_t, y=target_labels_t, eps=step_eps, ord=ord, clip_min=clip_min, clip_max=clip_max, targeted=targeted) - x_input_t",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(eta_t, -total_eps, total_eps)",
                            "Call"
                        ],
                        [
                            "eta_t * total_eps / norm",
                            "BinOp"
                        ],
                        [
                            "fgm(x_input_t, preds_t, y=target_labels_t, eps=step_eps, ord=ord, clip_min=clip_min, clip_max=clip_max, targeted=targeted) - x_input_t",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(eta_t, -total_eps, total_eps)",
                            "Call"
                        ],
                        [
                            "eta_t * total_eps / norm",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-total_eps",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "total_eps",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_by_value_209": {
                "variable": {
                    "value": "eta_t",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "eta_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fgm(x_input_t, preds_t, y=target_labels_t, eps=step_eps, ord=ord, clip_min=clip_min, clip_max=clip_max, targeted=targeted) - x_input_t",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(eta_t, -total_eps, total_eps)",
                            "Call"
                        ],
                        [
                            "eta_t * total_eps / norm",
                            "BinOp"
                        ],
                        [
                            "fgm(x_input_t, preds_t, y=target_labels_t, eps=step_eps, ord=ord, clip_min=clip_min, clip_max=clip_max, targeted=targeted) - x_input_t",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(eta_t, -total_eps, total_eps)",
                            "Call"
                        ],
                        [
                            "eta_t * total_eps / norm",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-total_eps",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "total_eps",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_max_253": {
                "variable": {
                    "value": "preds_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "to_float_254": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(preds, preds_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_255": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / tf.reduce_sum(y, 1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / tf.reduce_sum(y, 1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sign_268": {
                "variable": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stop_gradient_274": {
                "variable": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(grad)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(normalized_grad)",
                            "Call"
                        ],
                        [
                            "grad / tf.reduce_sum(tf.abs(grad), reduction_indices=red_ind, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "grad / tf.sqrt(square)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(grad)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(normalized_grad)",
                            "Call"
                        ],
                        [
                            "grad / tf.reduce_sum(tf.abs(grad), reduction_indices=red_ind, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "grad / tf.sqrt(square)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(grad)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(normalized_grad)",
                            "Call"
                        ],
                        [
                            "grad / tf.reduce_sum(tf.abs(grad), reduction_indices=red_ind, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "grad / tf.sqrt(square)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_by_value_298": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "x + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "x + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_124": {
                "input_tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / tf.reduce_sum(y, 1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / tf.reduce_sum(y, 1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_256": {
                "input_tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / tf.reduce_sum(y, 1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / tf.reduce_sum(y, 1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_69": {
                "variable": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "red_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sign_116": {
                "x": {
                    "value": "tf.random_normal(shape=tf.get_shape(x), mean=0.0, stddev=1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_122": {
                "x": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "preds_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(preds, 1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(preds, 1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_150": {
                "variable": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "red_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_185": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(eta_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "reduc_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(xrange(1, len(tf.shape(eta_t))))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(tf.shape(eta_t))))",
                            "Call"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_213": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(eta_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "reduc_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(xrange(1, len(tf.shape(eta_t))))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(tf.shape(eta_t))))",
                            "Call"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "equal_254": {
                "x": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "preds_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(preds, 1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(preds, 1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_282": {
                "variable": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "red_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_64": {
                "input_tensor": {
                    "value": "tf.abs(grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "red_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_145": {
                "input_tensor": {
                    "value": "tf.abs(grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "red_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_189": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(eta_t), reduction_indices=reduc_ind, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_217": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(eta_t), reduction_indices=reduc_ind, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_277": {
                "input_tensor": {
                    "value": "tf.abs(grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "red_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_64": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_69": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_72": {
                "x": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(grad), reduction_indices=red_ind, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(grad), reduction_indices=red_ind, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(grad), reduction_indices=red_ind, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_145": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_150": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_153": {
                "x": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(grad), reduction_indices=red_ind, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(grad), reduction_indices=red_ind, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(grad), reduction_indices=red_ind, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_185": {
                "x": {
                    "value": "eta_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fgm(x_input_t, preds_t, y=target_labels_t, eps=step_eps, ord=ord, clip_min=clip_min, clip_max=clip_max, targeted=targeted) - x_input_t",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(eta_t, -total_eps, total_eps)",
                            "Call"
                        ],
                        [
                            "eta_t * total_eps / norm",
                            "BinOp"
                        ],
                        [
                            "fgm(x_input_t, preds_t, y=target_labels_t, eps=step_eps, ord=ord, clip_min=clip_min, clip_max=clip_max, targeted=targeted) - x_input_t",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(eta_t, -total_eps, total_eps)",
                            "Call"
                        ],
                        [
                            "eta_t * total_eps / norm",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_213": {
                "x": {
                    "value": "eta_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fgm(x_input_t, preds_t, y=target_labels_t, eps=step_eps, ord=ord, clip_min=clip_min, clip_max=clip_max, targeted=targeted) - x_input_t",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(eta_t, -total_eps, total_eps)",
                            "Call"
                        ],
                        [
                            "eta_t * total_eps / norm",
                            "BinOp"
                        ],
                        [
                            "fgm(x_input_t, preds_t, y=target_labels_t, eps=step_eps, ord=ord, clip_min=clip_min, clip_max=clip_max, targeted=targeted) - x_input_t",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(eta_t, -total_eps, total_eps)",
                            "Call"
                        ],
                        [
                            "eta_t * total_eps / norm",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_277": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_282": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_285": {
                "x": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(grad), reduction_indices=red_ind, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(grad), reduction_indices=red_ind, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(grad), reduction_indices=red_ind, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_183": {
                "input": {
                    "value": "eta_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fgm(x_input_t, preds_t, y=target_labels_t, eps=step_eps, ord=ord, clip_min=clip_min, clip_max=clip_max, targeted=targeted) - x_input_t",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(eta_t, -total_eps, total_eps)",
                            "Call"
                        ],
                        [
                            "eta_t * total_eps / norm",
                            "BinOp"
                        ],
                        [
                            "fgm(x_input_t, preds_t, y=target_labels_t, eps=step_eps, ord=ord, clip_min=clip_min, clip_max=clip_max, targeted=targeted) - x_input_t",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(eta_t, -total_eps, total_eps)",
                            "Call"
                        ],
                        [
                            "eta_t * total_eps / norm",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_189": {
                "input_tensor": {
                    "value": "tf.square(eta_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "reduc_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(xrange(1, len(tf.shape(eta_t))))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(tf.shape(eta_t))))",
                            "Call"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_211": {
                "input": {
                    "value": "eta_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fgm(x_input_t, preds_t, y=target_labels_t, eps=step_eps, ord=ord, clip_min=clip_min, clip_max=clip_max, targeted=targeted) - x_input_t",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(eta_t, -total_eps, total_eps)",
                            "Call"
                        ],
                        [
                            "eta_t * total_eps / norm",
                            "BinOp"
                        ],
                        [
                            "fgm(x_input_t, preds_t, y=target_labels_t, eps=step_eps, ord=ord, clip_min=clip_min, clip_max=clip_max, targeted=targeted) - x_input_t",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(eta_t, -total_eps, total_eps)",
                            "Call"
                        ],
                        [
                            "eta_t * total_eps / norm",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_217": {
                "input_tensor": {
                    "value": "tf.square(eta_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "reduc_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(xrange(1, len(tf.shape(eta_t))))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(tf.shape(eta_t))))",
                            "Call"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "square_189": {
                "x": {
                    "value": "eta_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fgm(x_input_t, preds_t, y=target_labels_t, eps=step_eps, ord=ord, clip_min=clip_min, clip_max=clip_max, targeted=targeted) - x_input_t",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(eta_t, -total_eps, total_eps)",
                            "Call"
                        ],
                        [
                            "eta_t * total_eps / norm",
                            "BinOp"
                        ],
                        [
                            "fgm(x_input_t, preds_t, y=target_labels_t, eps=step_eps, ord=ord, clip_min=clip_min, clip_max=clip_max, targeted=targeted) - x_input_t",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(eta_t, -total_eps, total_eps)",
                            "Call"
                        ],
                        [
                            "eta_t * total_eps / norm",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_217": {
                "x": {
                    "value": "eta_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fgm(x_input_t, preds_t, y=target_labels_t, eps=step_eps, ord=ord, clip_min=clip_min, clip_max=clip_max, targeted=targeted) - x_input_t",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(eta_t, -total_eps, total_eps)",
                            "Call"
                        ],
                        [
                            "eta_t * total_eps / norm",
                            "BinOp"
                        ],
                        [
                            "fgm(x_input_t, preds_t, y=target_labels_t, eps=step_eps, ord=ord, clip_min=clip_min, clip_max=clip_max, targeted=targeted) - x_input_t",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(eta_t, -total_eps, total_eps)",
                            "Call"
                        ],
                        [
                            "eta_t * total_eps / norm",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/CIFAR10/utils.py": {
        "tensorflow": {
            "shape_86": {
                "variable": {
                    "value": "saved_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.name.rsplit(':', 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_87": {
                "variable": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "saved_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(t)",
                            "Call"
                        ],
                        [
                            "tf.shape(t)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_88": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.name.rsplit(':', 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat(axis=0, values=[batch_size, [-1]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "fill_89": {
                "variable": {
                    "value": "upper_bound_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "tf.slice(saved_shape, [0], [1])",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.constant(1.0 / upper_bound)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rsqrt_92": {
                "variable": {
                    "value": "l2norm_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(t2 * t2, [1]) + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_94": {
                "variable": {
                    "value": "clipped_t",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.diag(scale)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(t, tf.concat(axis=0, values=[batch_size, [-1]]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(t, tf.concat(axis=0, values=[tf.slice(saved_shape, [0], [1]), -1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_95": {
                "variable": {
                    "value": "clipped_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "clipped_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.diag(scale), t2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(clipped_t, saved_shape, name=name)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "saved_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(t)",
                            "Call"
                        ],
                        [
                            "tf.shape(t)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_118": {
                "variable": {
                    "value": "saved_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.name.rsplit(':', 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_119": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.name.rsplit(':', 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat(axis=0, values=[tf.slice(saved_shape, [0], [1]), -1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_120": {
                "variable": {
                    "value": "t_abs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(t, tf.concat(axis=0, values=[batch_size, [-1]]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(t, tf.concat(axis=0, values=[tf.slice(saved_shape, [0], [1]), -1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_163": {
                "value": {
                    "value": "table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy.zeros((m + 1, m + 1), dtype=numpy.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_84": {
                "values": {
                    "value": "[t, upper_bound]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "batch_clip_by_l2norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_116": {
                "values": {
                    "value": "[t, threshold_ratio]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "soft_thresholding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_125": {
                "tensor": {
                    "value": "t_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(t2) * tf.nn.relu(t_abs - tf.reduce_mean(t_abs, [0], keep_dims=True) * threshold_ratio)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "saved_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(t)",
                            "Call"
                        ],
                        [
                            "tf.shape(t)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_139": {
                "values": {
                    "value": "[t, sigma]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "add_gaussian_noise",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_88": {
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_size, [-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_89": {
                "input_": {
                    "value": "saved_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(t)",
                            "Call"
                        ],
                        [
                            "tf.shape(t)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_90": {
                "value": {
                    "value": "1.0 / upper_bound",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_93": {
                "x": {
                    "value": "l2norm_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.rsqrt(tf.reduce_sum(t2 * t2, [1]) + 1e-06)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "upper_bound_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill(tf.slice(saved_shape, [0], [1]), tf.constant(1.0 / upper_bound))",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_94": {
                "diagonal": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(l2norm_inv, upper_bound_inv) * upper_bound",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_119": {
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.slice(saved_shape, [0], [1]), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sign_121": {
                "x": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(t, tf.concat(axis=0, values=[batch_size, [-1]]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(t, tf.concat(axis=0, values=[tf.slice(saved_shape, [0], [1]), -1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_121": {
                "features": {
                    "value": "t_abs - tf.reduce_mean(t_abs, [0], keep_dims=True) * threshold_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_92": {
                "input_tensor": {
                    "value": "t2 * t2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_141": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.name.rsplit(':', 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_119": {
                "input_": {
                    "value": "saved_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(t)",
                            "Call"
                        ],
                        [
                            "tf.shape(t)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_122": {
                "input_tensor": {
                    "value": "t_abs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(t2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/MNIST/StoBatch.py": {
        "tensorflow": {
            "get_variable_59": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "shape + [num_channels // num_units]",
                            "BinOp"
                        ],
                        [
                            "W_conv1.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_66": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "shape + [num_channels // num_units]",
                            "BinOp"
                        ],
                        [
                            "W_conv1.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_116": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(inputs, shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_134": {
                "variable": {
                    "value": "h_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(z, W_conv1) + b_conv1 + perturbFM_h",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_144": {
                "variable": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(h_pool1, W_conv2) + b_conv2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_153": {
                "variable": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4 * 4 * 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_167": {
                "variable": {
                    "value": "h_fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "h_fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(h_fc1, -1, 1)",
                            "Call"
                        ],
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_186": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "y_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_fc1, W_fc2) + b_fc2",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(h_fc1, W_fc2) + b_fc2",
                            "BinOp"
                        ],
                        [
                            "inference(x_image, perturbFM, hk, FM_h, params)",
                            "Call"
                        ]
                    ]
                }
            },
            "top_k_187": {
                "variable": {
                    "value": "(values, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(y_conv)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_188": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.unstack(values, num=2, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "num": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_198": {
                "variable": {
                    "value": "robust_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(kappa_phi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_199": {
                "variable": {
                    "value": "robust_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(kappa_phi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_200": {
                "variable": {
                    "value": "robust_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "eps_r >= robustness_T",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "robust_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones(shape=tf.shape(kappa_phi))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "robust_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(shape=tf.shape(kappa_phi))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_216": {
                "variable": {
                    "value": "h_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(z, W_conv1) + b_conv1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_224": {
                "variable": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(h_pool1, W_conv2) + b_conv2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_231": {
                "variable": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4 * 4 * 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "moments_234": {
                "variable": {
                    "value": "(batch_mean2, batch_var2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_pool2_flat, W_fc1) + b_fc1",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(h_pool2_flat, W_fc1) + b_fc1",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_324": {
                "variable": {
                    "value": "w_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "W_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params[0]",
                            "Subscript"
                        ],
                        [
                            "params[0]",
                            "Subscript"
                        ],
                        [
                            "weight_variable('W_conv1', [5, 5, 1, 32], collect=[AECODER_VARIABLES])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_325": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "w_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(W_conv1, [-1, shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "svd_326": {
                "variable": {
                    "value": "sing_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(w_t)",
                            "Call"
                        ]
                    ]
                },
                "compute_uv": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_327": {
                "variable": {
                    "value": "sensitivity",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sing_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.svd(w, compute_uv=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_354": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, image_size, image_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_355": {
                "variable": {
                    "value": "adv_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, image_size, image_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_357": {
                "variable": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_358": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, image_size * image_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_359": {
                "variable": {
                    "value": "x_image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, image_size * image_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, image_size, image_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_369": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, image_size * image_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_370": {
                "variable": {
                    "value": "adv_image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, image_size * image_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, image_size, image_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_378": {
                "variable": {
                    "value": "FM_h",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 14, 14, 32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_386": {
                "variable": {
                    "value": "x_image",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, image_size, image_size, 1])",
                            "Call"
                        ],
                        [
                            "x_image + noise",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x_image, -10, 10)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-10",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_389": {
                "variable": {
                    "value": "adv_image",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(adv_x, [-1, image_size, image_size, 1])",
                            "Call"
                        ],
                        [
                            "adv_image + adv_noise",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_image, -10, 10)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-10",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_397": {
                "variable": {
                    "value": "softmax_y_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "y_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_fc1, W_fc2) + b_fc2",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(h_fc1, W_fc2) + b_fc2",
                            "BinOp"
                        ],
                        [
                            "inference(x_image, perturbFM, hk, FM_h, params)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_408": {
                "variable": {
                    "value": "x_test",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, image_size * image_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, image_size, image_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_413": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_414": {
                "variable": {
                    "value": "adv_y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_470": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_fc1, W_fc2) + b_fc2",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(h_fc1, W_fc2) + b_fc2",
                            "BinOp"
                        ],
                        [
                            "inference(x_image, perturbFM, hk, FM_h, params)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "y_conv.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_472": {
                "variable": {
                    "value": "relu_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_conv >= zeros",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "y_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_fc1, W_fc2) + b_fc2",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(h_fc1, W_fc2) + b_fc2",
                            "BinOp"
                        ],
                        [
                            "inference(x_image, perturbFM, hk, FM_h, params)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.zeros_like(y_conv, dtype=y_conv.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_473": {
                "variable": {
                    "value": "neg_abs_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_conv >= zeros",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "-y_conv",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "y_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_fc1, W_fc2) + b_fc2",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(h_fc1, W_fc2) + b_fc2",
                            "BinOp"
                        ],
                        [
                            "inference(x_image, perturbFM, hk, FM_h, params)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_479": {
                "variable": {
                    "value": "zeros_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_adv_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inference(adv_image, perturbFM, hk, FM_h, params)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "y_conv.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_481": {
                "variable": {
                    "value": "relu_logits_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_adv_conv >= zeros_adv",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "y_adv_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inference(adv_image, perturbFM, hk, FM_h, params)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zeros_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.zeros_like(y_adv_conv, dtype=y_conv.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_482": {
                "variable": {
                    "value": "neg_abs_logits_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_adv_conv >= zeros_adv",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "-y_adv_conv",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "y_adv_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inference(adv_image, perturbFM, hk, FM_h, params)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_491": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_collection_492": {
                "variable": {
                    "value": "pretrain_var_list",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "AECODER_VARIABLES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'AECODER_VARIABLES'",
                            "Constant"
                        ]
                    ]
                }
            },
            "get_collection_493": {
                "variable": {
                    "value": "train_var_list",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "CONV_VARIABLES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'CONV_VARIABLES'",
                            "Constant"
                        ]
                    ]
                }
            },
            "get_collection_496": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "InteractiveSession_500": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_504": {
                "variable": {
                    "value": "correct_prediction_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y_test, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y_, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_505": {
                "variable": {
                    "value": "accuracy_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction_x, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_516": {
                "variable": {
                    "value": "dynamic_eps",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_518": {
                "variable": {
                    "value": "softmax_y",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inference(x_test, perturbFM_test, hk, FM_h, params)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_521": {
                "variable": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c_x_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fgsm(x, softmax_y, eps=dynamic_eps / 10, clip_min=-1.0, clip_max=1.0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[emsemble_L, image_size * image_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_536": {
                "variable": {
                    "value": "softmax_y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inference(x_test, perturbFM_test, hk, FM_h, params)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_539": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.all_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_557": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "os.getcwd() + './tmp/train'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_568": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "Enc_Layer2.cost",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_582": {
                "variable": {
                    "value": "mu_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_to_collections_60": {
                "names": {
                    "value": "collect",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=name, shape=shape, initializer=tf.contrib.layers.xavier_initializer(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name=name, shape=shape, dtype=tf.float32, initializer=tf.constant_initializer(0.0001))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collections_67": {
                "names": {
                    "value": "collect",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=name, shape=shape, initializer=tf.contrib.layers.xavier_initializer(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name=name, shape=shape, dtype=tf.float32, initializer=tf.constant_initializer(0.0001))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_71": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, image_size * image_size])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_74": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, image_size * image_size])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool_102": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, s, s, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, s, s, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_208": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inference(x_image, perturbFM, hk, params)",
                            "Call"
                        ],
                        [
                            "inference_test_input(x, hk, params, image_size, adv_noise)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_258": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inference(x_image, perturbFM, hk, params)",
                            "Call"
                        ],
                        [
                            "inference_test_input(x, hk, params, image_size, adv_noise)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_498": {
                "variable": {
                    "value": "pretrain_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                }
            },
            "AdamOptimizer_499": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                }
            },
            "Exists_869": {
                "filename": {
                    "value": "./tmp/mnist_logs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MakeDirs_871": {
                "dirname": {
                    "value": "./tmp/mnist_logs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_877": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_116": {
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "shape + [num_channels // num_units]",
                            "BinOp"
                        ],
                        [
                            "W_conv1.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_154": {
                "a": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h_conv2, [-1, 4 * 4 * 64])",
                            "Call"
                        ],
                        [
                            "tf.reshape(h_conv2, [-1, 4 * 4 * 64])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params[4]",
                            "Subscript"
                        ],
                        [
                            "params[4]",
                            "Subscript"
                        ],
                        [
                            "weight_variable('W_fc1', [4 * 4 * 64, hk], collect=[CONV_VARIABLES])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_179": {
                "a": {
                    "value": "h_fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(h_fc1, -1, 1)",
                            "Call"
                        ],
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params[6]",
                            "Subscript"
                        ],
                        [
                            "params[6]",
                            "Subscript"
                        ],
                        [
                            "weight_variable('W_fc2', [hk, 10], collect=[CONV_VARIABLES])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_192": {
                "x": {
                    "value": "values[0] / values[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_211": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, image_size * image_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, image_size, image_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_232": {
                "a": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h_conv2, [-1, 4 * 4 * 64])",
                            "Call"
                        ],
                        [
                            "tf.reshape(h_conv2, [-1, 4 * 4 * 64])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params[4]",
                            "Subscript"
                        ],
                        [
                            "params[4]",
                            "Subscript"
                        ],
                        [
                            "weight_variable('W_fc1', [4 * 4 * 64, hk], collect=[CONV_VARIABLES])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_252": {
                "a": {
                    "value": "h_fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(h_fc1, -1, 1)",
                            "Call"
                        ],
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params[6]",
                            "Subscript"
                        ],
                        [
                            "params[6]",
                            "Subscript"
                        ],
                        [
                            "weight_variable('W_fc2', [hk, 10], collect=[CONV_VARIABLES])",
                            "Call"
                        ]
                    ]
                }
            },
            "add_475": {
                "x": {
                    "value": "relu_logits - y_conv * y_",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "math.log(2.0) + 0.5 * neg_abs_logits + 1.0 / 8.0 * neg_abs_logits ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_475": {
                "input_tensor": {
                    "value": "perturbFM * W_fc2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_484": {
                "x": {
                    "value": "relu_logits_adv - y_adv_conv * adv_y_",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "math.log(2.0) + 0.5 * neg_abs_logits_adv + 1.0 / 8.0 * neg_abs_logits_adv ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_484": {
                "input_tensor": {
                    "value": "perturbFM * W_fc2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_497": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_504": {
                "input": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 10])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_505": {
                "x": {
                    "value": "correct_prediction_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(y_test, 1), tf.argmax(y_, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "all_variables_539": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_659": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DeleteRecursively_870": {
                "dirname": {
                    "value": "./tmp/mnist_logs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_66": {
                "value": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_198": {
                "input": {
                    "value": "kappa_phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Delta2 * eps_r * (1 + 2e-05) / (L * eps)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_199": {
                "input": {
                    "value": "kappa_phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Delta2 * eps_r * (1 + 2e-05) / (L * eps)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_380": {
                "input": {
                    "value": "adv_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(adv_x, [-1, image_size, image_size, 1])",
                            "Call"
                        ],
                        [
                            "adv_image + adv_noise",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_image, -10, 10)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_382": {
                "input": {
                    "value": "x_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, image_size, image_size, 1])",
                            "Call"
                        ],
                        [
                            "x_image + noise",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x_image, -10, 10)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/MNIST/build_graph.py": {
        "tensorflow": {
            "identity_60": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h[n - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "identity_138": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_fc_list[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "identity_223": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_fc_list[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "identity_299": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_fc_list[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "identity_424": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_fc_list[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "identity_509": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_fc_list[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "identity_585": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_fc_list[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_73": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_151": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_236": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_359": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_437": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_522": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_25": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_68": {
                "value": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(1, n)",
                            "Call"
                        ],
                        [
                            "range(n)",
                            "Call"
                        ],
                        [
                            "range(num_fc_layers)",
                            "Call"
                        ],
                        [
                            "range(num_fc_layers)",
                            "Call"
                        ],
                        [
                            "range(num_fc_layers)",
                            "Call"
                        ],
                        [
                            "range(num_fc_layers)",
                            "Call"
                        ],
                        [
                            "range(num_fc_layers)",
                            "Call"
                        ],
                        [
                            "range(num_fc_layers)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_71": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_80": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x_input + input_noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "param_dict['input_low']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "param_dict['input_high']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_88": {
                "variable": {
                    "value": "h_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv2d(x_input, w_conv1, strides=[1, 1, 1, 1], padding='VALID'), b_conv1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_97": {
                "variable": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_103": {
                "variable": {
                    "value": "h_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 2, 2, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 2, 2, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, flat_shape[1] * flat_shape[2] * flat_shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_146": {
                "value": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(1, n)",
                            "Call"
                        ],
                        [
                            "range(n)",
                            "Call"
                        ],
                        [
                            "range(num_fc_layers)",
                            "Call"
                        ],
                        [
                            "range(num_fc_layers)",
                            "Call"
                        ],
                        [
                            "range(num_fc_layers)",
                            "Call"
                        ],
                        [
                            "range(num_fc_layers)",
                            "Call"
                        ],
                        [
                            "range(num_fc_layers)",
                            "Call"
                        ],
                        [
                            "range(num_fc_layers)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_149": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_156": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x_input + input_noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "param_dict['input_low']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "param_dict['input_high']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_159": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "keep_prob[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "relu_167": {
                "variable": {
                    "value": "h_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv2d(x_input, w_conv1, strides=[1, 2, 2, 1], padding='SAME'), b_conv1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_176": {
                "variable": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 2, 2, 1], padding='VALID'), b_conv2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_185": {
                "variable": {
                    "value": "h_conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv2d(h_conv2, w_conv3, strides=[1, 1, 1, 1], padding='VALID'), b_conv3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_191": {
                "variable": {
                    "value": "h_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv2, w_conv3, strides=[1, 1, 1, 1], padding='VALID'), b_conv3))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv3, keep_prob=keep_prob[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv2, w_conv3, strides=[1, 1, 1, 1], padding='VALID'), b_conv3))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv3, keep_prob=keep_prob[1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, flat_shape[1] * flat_shape[2] * flat_shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_231": {
                "value": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(1, n)",
                            "Call"
                        ],
                        [
                            "range(n)",
                            "Call"
                        ],
                        [
                            "range(num_fc_layers)",
                            "Call"
                        ],
                        [
                            "range(num_fc_layers)",
                            "Call"
                        ],
                        [
                            "range(num_fc_layers)",
                            "Call"
                        ],
                        [
                            "range(num_fc_layers)",
                            "Call"
                        ],
                        [
                            "range(num_fc_layers)",
                            "Call"
                        ],
                        [
                            "range(num_fc_layers)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_234": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_241": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x_input + input_noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "param_dict['input_low']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "param_dict['input_high']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_249": {
                "variable": {
                    "value": "h_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv2d(x_input, w_conv1, strides=[1, 1, 1, 1], padding='VALID'), b_conv1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_258": {
                "variable": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_264": {
                "variable": {
                    "value": "h_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 2, 2, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 2, 2, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, flat_shape[1] * flat_shape[2] * flat_shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_357": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_366": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x_input + input_noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_374": {
                "variable": {
                    "value": "h_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv2d(x_input, w_conv1, strides=[1, 1, 1, 1], padding='VALID'), b_conv1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_383": {
                "variable": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_389": {
                "variable": {
                    "value": "h_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 2, 2, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 2, 2, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, flat_shape[1] * flat_shape[2] * flat_shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_435": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_442": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x_input + input_noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_445": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "keep_prob[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "relu_453": {
                "variable": {
                    "value": "h_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv2d(x_input, w_conv1, strides=[1, 2, 2, 1], padding='SAME'), b_conv1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_462": {
                "variable": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 2, 2, 1], padding='VALID'), b_conv2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_471": {
                "variable": {
                    "value": "h_conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv2d(h_conv2, w_conv3, strides=[1, 1, 1, 1], padding='VALID'), b_conv3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_477": {
                "variable": {
                    "value": "h_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv2, w_conv3, strides=[1, 1, 1, 1], padding='VALID'), b_conv3))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv3, keep_prob=keep_prob[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv2, w_conv3, strides=[1, 1, 1, 1], padding='VALID'), b_conv3))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv3, keep_prob=keep_prob[1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, flat_shape[1] * flat_shape[2] * flat_shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_520": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_527": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x_input + input_noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_535": {
                "variable": {
                    "value": "h_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv2d(x_input, w_conv1, strides=[1, 1, 1, 1], padding='VALID'), b_conv1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_544": {
                "variable": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_550": {
                "variable": {
                    "value": "h_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 2, 2, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 2, 2, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, flat_shape[1] * flat_shape[2] * flat_shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_43": {
                "variable": {
                    "value": "z[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "t": {
                    "value": "z[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "param_dict['input_low']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "param_dict['input_high']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_51": {
                "variable": {
                    "value": "h[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.relu(z[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "keep_prob[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_53": {
                "variable": {
                    "value": "h[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "features": {
                    "value": "z[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_82": {
                "name_or_scope": {
                    "value": "conv_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_91": {
                "name_or_scope": {
                    "value": "conv_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_101": {
                "variable": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 2, 2, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 2, 2, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "keep_prob[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "variable_scope_161": {
                "name_or_scope": {
                    "value": "conv_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_170": {
                "name_or_scope": {
                    "value": "conv_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_179": {
                "name_or_scope": {
                    "value": "conv_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_189": {
                "variable": {
                    "value": "h_conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv2, w_conv3, strides=[1, 1, 1, 1], padding='VALID'), b_conv3))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv3, keep_prob=keep_prob[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv2, w_conv3, strides=[1, 1, 1, 1], padding='VALID'), b_conv3))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv3, keep_prob=keep_prob[1])",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "keep_prob[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "variable_scope_243": {
                "name_or_scope": {
                    "value": "conv_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_252": {
                "name_or_scope": {
                    "value": "conv_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_262": {
                "variable": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 2, 2, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 2, 2, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "keep_prob[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "variable_scope_368": {
                "name_or_scope": {
                    "value": "conv_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_377": {
                "name_or_scope": {
                    "value": "conv_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_387": {
                "variable": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 2, 2, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 2, 2, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "keep_prob[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "variable_scope_447": {
                "name_or_scope": {
                    "value": "conv_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_456": {
                "name_or_scope": {
                    "value": "conv_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_465": {
                "name_or_scope": {
                    "value": "conv_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_475": {
                "variable": {
                    "value": "h_conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv2, w_conv3, strides=[1, 1, 1, 1], padding='VALID'), b_conv3))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv3, keep_prob=keep_prob[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv2, w_conv3, strides=[1, 1, 1, 1], padding='VALID'), b_conv3))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv3, keep_prob=keep_prob[1])",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "keep_prob[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "variable_scope_529": {
                "name_or_scope": {
                    "value": "conv_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_538": {
                "name_or_scope": {
                    "value": "conv_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_548": {
                "variable": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 2, 2, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 2, 2, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID'), b_conv2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_conv2, keep_prob=keep_prob[0])",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "keep_prob[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "variable_scope_27": {
                "name_or_scope": {
                    "value": "'layer_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_46": {
                "a": {
                    "value": "h[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "w[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_55": {
                "a": {
                    "value": "h[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "w[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bias_add_88": {
                "value": {
                    "value": "conv2d(x_input, w_conv1, strides=[1, 1, 1, 1], padding='VALID')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_97": {
                "value": {
                    "value": "conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_113": {
                "name_or_scope": {
                    "value": "'fc_' + str(i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_121": {
                "variable": {
                    "value": "h_fc_list[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_132": {
                "variable": {
                    "value": "h_pre_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(h_fc_list[i], w_fc_list[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bias_add_167": {
                "value": {
                    "value": "conv2d(x_input, w_conv1, strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_176": {
                "value": {
                    "value": "conv2d(h_conv1, w_conv2, strides=[1, 2, 2, 1], padding='VALID')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_185": {
                "value": {
                    "value": "conv2d(h_conv2, w_conv3, strides=[1, 1, 1, 1], padding='VALID')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_201": {
                "name_or_scope": {
                    "value": "'fc_' + str(i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_209": {
                "variable": {
                    "value": "h_fc_list[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_217": {
                "variable": {
                    "value": "h_pre_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(h_fc_list[i], w_fc_list[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bias_add_249": {
                "value": {
                    "value": "conv2d(x_input, w_conv1, strides=[1, 1, 1, 1], padding='VALID')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_258": {
                "value": {
                    "value": "conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_274": {
                "name_or_scope": {
                    "value": "'fc_' + str(i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_282": {
                "variable": {
                    "value": "h_fc_list[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_293": {
                "variable": {
                    "value": "h_pre_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(h_fc_list[i], w_fc_list[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bias_add_374": {
                "value": {
                    "value": "conv2d(x_input, w_conv1, strides=[1, 1, 1, 1], padding='VALID')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_383": {
                "value": {
                    "value": "conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_399": {
                "name_or_scope": {
                    "value": "'fc_' + str(i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_407": {
                "variable": {
                    "value": "h_fc_list[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_418": {
                "variable": {
                    "value": "h_pre_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(h_fc_list[i], w_fc_list[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bias_add_453": {
                "value": {
                    "value": "conv2d(x_input, w_conv1, strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_462": {
                "value": {
                    "value": "conv2d(h_conv1, w_conv2, strides=[1, 2, 2, 1], padding='VALID')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_471": {
                "value": {
                    "value": "conv2d(h_conv2, w_conv3, strides=[1, 1, 1, 1], padding='VALID')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_487": {
                "name_or_scope": {
                    "value": "'fc_' + str(i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_495": {
                "variable": {
                    "value": "h_fc_list[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_503": {
                "variable": {
                    "value": "h_pre_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(h_fc_list[i], w_fc_list[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bias_add_535": {
                "value": {
                    "value": "conv2d(x_input, w_conv1, strides=[1, 1, 1, 1], padding='VALID')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[0]], scope=conv1_scope, value=0.1, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_544": {
                "value": {
                    "value": "conv2d(h_conv1, w_conv2, strides=[1, 1, 1, 1], padding='VALID')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable('bias', [conv_size[1]], scope=conv2_scope, value=0.1, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_560": {
                "name_or_scope": {
                    "value": "'fc_' + str(i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_568": {
                "variable": {
                    "value": "h_fc_list[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_579": {
                "variable": {
                    "value": "h_pre_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(h_fc_list[i], w_fc_list[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_51": {
                "features": {
                    "value": "z[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_77": {
                "input": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_131": {
                "variable": {
                    "value": "h_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "h_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "keep_prob": {
                    "value": "keep_prob[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_154": {
                "input": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_239": {
                "input": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_292": {
                "variable": {
                    "value": "h_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "h_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "keep_prob": {
                    "value": "keep_prob[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_363": {
                "input": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_417": {
                "variable": {
                    "value": "h_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "h_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "keep_prob": {
                    "value": "keep_prob[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_440": {
                "input": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_525": {
                "input": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, param_dict['input_low'], param_dict['input_high'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x_input, keep_prob=keep_prob[0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_input, [None, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x_input + input_noise, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_578": {
                "variable": {
                    "value": "h_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "h_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "keep_prob": {
                    "value": "keep_prob[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "[tf.constant(i) for i in param_dict['keep_prob']]",
                            "ListComp"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ],
                        [
                            "param_dict['keep_prob']",
                            "Subscript"
                        ],
                        [
                            "param_dict['noise_amount']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_39": {
                "input": {
                    "value": "z[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_48": {
                "input": {
                    "value": "z[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_57": {
                "input": {
                    "value": "z[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bias_add_121": {
                "value": {
                    "value": "tf.matmul(h_fc_list[i], w_fc_list[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_132": {
                "a": {
                    "value": "h_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "w_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bias_add_209": {
                "value": {
                    "value": "tf.matmul(h_fc_list[i], w_fc_list[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_217": {
                "a": {
                    "value": "h_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "w_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bias_add_282": {
                "value": {
                    "value": "tf.matmul(h_fc_list[i], w_fc_list[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_293": {
                "a": {
                    "value": "h_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "w_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bias_add_407": {
                "value": {
                    "value": "tf.matmul(h_fc_list[i], w_fc_list[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_418": {
                "a": {
                    "value": "h_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "w_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bias_add_495": {
                "value": {
                    "value": "tf.matmul(h_fc_list[i], w_fc_list[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_503": {
                "a": {
                    "value": "h_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "w_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bias_add_568": {
                "value": {
                    "value": "tf.matmul(h_fc_list[i], w_fc_list[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_579": {
                "a": {
                    "value": "h_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "w_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_121": {
                "a": {
                    "value": "h_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "w_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_209": {
                "a": {
                    "value": "h_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "w_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_282": {
                "a": {
                    "value": "h_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "w_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_407": {
                "a": {
                    "value": "h_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "w_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_495": {
                "a": {
                    "value": "h_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "w_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_568": {
                "a": {
                    "value": "h_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "w_fc_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_134": {
                "input": {
                    "value": "h_pre_noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "h_pre_noise + output_noise",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_219": {
                "input": {
                    "value": "h_pre_noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "h_pre_noise + output_noise",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_295": {
                "input": {
                    "value": "h_pre_noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "h_pre_noise + output_noise",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_420": {
                "input": {
                    "value": "h_pre_noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "h_pre_noise + output_noise",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_505": {
                "input": {
                    "value": "h_pre_noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "h_pre_noise + output_noise",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_581": {
                "input": {
                    "value": "h_pre_noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "h_pre_noise + output_noise",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(h_fc_list[i], w_fc_list[i]), b_fc_list[i])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/MNIST/build_utils.py": {
        "tensorflow": {
            "truncated_normal_initializer_10": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_11": {
                "variable": {
                    "value": "variable",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_t.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(mean=0.0, stddev=stddev)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(value, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(mean=0.0, stddev=stddev)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_16": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_17": {
                "variable": {
                    "value": "variable",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_t.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(mean=0.0, stddev=stddev)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(value, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(mean=0.0, stddev=stddev)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_22": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_23": {
                "variable": {
                    "value": "variable",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_t.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(mean=0.0, stddev=stddev)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(value, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(mean=0.0, stddev=stddev)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "multiply_25": {
                "variable": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_loss(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_30": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_pool_33": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_37": {
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(labels=labels, logits=logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_40": {
                "input_tensor": {
                    "value": "tf.cast(tf.equal(tf.argmax(logits, 1), tf.argmax(labels, 1)), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_69": {
                "variable": {
                    "value": "exp_moving_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.99",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_updates": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "moments_70": {
                "variable": {
                    "value": "(m, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "input_t",
                    "type": "variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "range(len(shape) - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_72": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_test",
                    "type": "variable",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : exp_moving_avg.average(m)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : m",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_73": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_test",
                    "type": "variable",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : exp_moving_avg.average(v)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : v",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "variable_scope_9": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_15": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_21": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_to_collection_26": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_37": {
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_40": {
                "x": {
                    "value": "tf.equal(tf.argmax(logits, 1), tf.argmax(labels, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_66": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "batch_normalization_75": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_t",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(is_test, lambda : exp_moving_avg.average(m), lambda : m)",
                            "Call"
                        ]
                    ]
                },
                "variance": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(is_test, lambda : exp_moving_avg.average(v), lambda : v)",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "variance_epsilon": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "l2_loss_25": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(is_test, lambda : exp_moving_avg.average(v), lambda : v)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_40": {
                "x": {
                    "value": "tf.argmax(logits, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(labels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_74": {
                "control_inputs": {
                    "value": "control_inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "argmax_40": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_43": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/MNIST/cleverhans/attacks.py": {
        "tensorflow": {
            "placeholder_125": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "x_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None] + list(x_val.shape)[1:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "while_loop_472": {
                "variable": {
                    "value": "(_, eta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": []
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[tf.zeros([]), eta]",
                    "type": "List",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_608": {
                "variable": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(self.tf_dtype, shape=x_shape)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x_single, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "while_loop_667": {
                "variable": {
                    "value": "(_, adv_x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": []
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[tf.zeros([]), adv_x, momentum]",
                    "type": "List",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "py_func_1049": {
                "variable": {
                    "value": "wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "cw_wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x, labels]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_1181": {
                "variable": {
                    "value": "wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "ead_wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x, labels]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_1268": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.top_k(logits, k=self.nb_candidate)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.nb_candidate]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_1272": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "jacobian_graph(preds, x, self.nb_candidate)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "py_func_1281": {
                "variable": {
                    "value": "wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "deepfool_wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_1375": {
                "variable": {
                    "value": "wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lbfgs_wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x, self.y_target]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_1534": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_module.attack_softmax_cross_entropy(y, preds, mean=False)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ],
                        [
                            "-reduce_sum(tf.square(a_feat - g_feat), axis)",
                            "UnaryOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "FGM.generate(x + e, **fgm_params)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "adv_x + scaled_signed_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "pgd_attack(loss_fn, x, y_attack, epsilon, num_steps=num_steps, optimizer=optimizer, early_stop_loss_threshold=early_stop_loss_threshold, is_debug=is_debug)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_1547": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "FGM.generate(x + e, **fgm_params)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "adv_x + scaled_signed_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "pgd_attack(loss_fn, x, y_attack, epsilon, num_steps=num_steps, optimizer=optimizer, early_stop_loss_threshold=early_stop_loss_threshold, is_debug=is_debug)",
                            "Call"
                        ]
                    ]
                }
            },
            "while_loop_1589": {
                "variable": {
                    "value": "(_, eta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": []
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[tf.zeros([]), eta]",
                    "type": "List",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "as_dtype_35": {
                "variable": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type_value": {
                    "value": "dtypestr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_423": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_477": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "FGM.generate(x + e, **fgm_params)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "adv_x + scaled_signed_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "pgd_attack(loss_fn, x, y_attack, epsilon, num_steps=num_steps, optimizer=optimizer, early_stop_loss_threshold=early_stop_loss_threshold, is_debug=is_debug)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_630": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_module.attack_softmax_cross_entropy(y, preds, mean=False)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ],
                        [
                            "-reduce_sum(tf.square(a_feat - g_feat), axis)",
                            "UnaryOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "ax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ax + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "x + utils_tf.clip_eta(ax - x, self.ord, self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(ax, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(ax)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_634": {
                "variable": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grad.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_663": {
                "variable": {
                    "value": "ax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ax + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "x + utils_tf.clip_eta(ax - x, self.ord, self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(ax, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(ax)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_1545": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "FGM.generate(x + e, **fgm_params)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "adv_x + scaled_signed_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "pgd_attack(loss_fn, x, y_attack, epsilon, num_steps=num_steps, optimizer=optimizer, early_stop_loss_threshold=early_stop_loss_threshold, is_debug=is_debug)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_1594": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "FGM.generate(x + e, **fgm_params)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "adv_x + scaled_signed_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "pgd_attack(loss_fn, x, y_attack, epsilon, num_steps=num_steps, optimizer=optimizer, early_stop_loss_threshold=early_stop_loss_threshold, is_debug=is_debug)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_session_37": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_116": {
                "variable": {
                    "value": "new_kwargs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "given_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.feedable_kwargs[name]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None] + list(value.shape[1:])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_float_436": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(model_preds, preds_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_437": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.y_target",
                            "Attribute"
                        ],
                        [
                            "self.y",
                            "Attribute"
                        ],
                        [
                            "tf.to_float(tf.equal(model_preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / reduce_sum(y, 1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "kwargs.pop('y', [None] * batch_size)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "less_457": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xrange(nb_s)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.nb_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_464": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "FGM.generate(x + e, **fgm_params)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "adv_x + scaled_signed_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "pgd_attack(loss_fn, x, y_attack, epsilon, num_steps=num_steps, optimizer=optimizer, early_stop_loss_threshold=early_stop_loss_threshold, is_debug=is_debug)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_620": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xrange(nb_s)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.nb_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_641": {
                "variable": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decay_factor * m + grad",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_by_value_661": {
                "variable": {
                    "value": "ax",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "ax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ax + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "x + utils_tf.clip_eta(ax - x, self.ord, self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(ax, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(ax)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_783": {
                "variable": {
                    "value": "self.y_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func": {
                    "value": "random_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[labels]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_821": {
                "variable": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "jsma_wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x, self.y_target]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_840": {
                "variable": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "jsma_wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_1537": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad / tf.maximum(avoid_zero_div, reduce_mean(tf.abs(grad), red_ind, keepdims=True))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_1579": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(self.tf_dtype, shape=x_shape)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x_single, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "less_1583": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xrange(nb_s)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.nb_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_118": {
                "variable": {
                    "value": "new_kwargs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "given_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.feedable_kwargs[name]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_228": {
                "variable": {
                    "value": "original_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(preds, preds_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_229": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "original_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_420": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(self.tf_dtype, shape=x_shape)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x_single, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_423": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(self.tf_dtype, shape=x_shape)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x_single, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_472": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_635": {
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(1e-12, grad.dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "reduce_mean(tf.abs(grad), red_ind, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_643": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(1e-12, grad.dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "reduce_sum(tf.abs(m), red_ind, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_668": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "top_k_1269": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_logits(x)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.nb_candidate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_1531": {
                "x": {
                    "value": "a_feat - g_feat",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_1589": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_436": {
                "x": {
                    "value": "model_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_probs(x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "preds_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_max(preds, 1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "reduce_max(model_preds, 1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_649": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(avoid_zero_div, square)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_228": {
                "x": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_probs(x)",
                            "Call"
                        ],
                        [
                            "self.model.get_probs(ax)",
                            "Call"
                        ],
                        [
                            "self.model.get_probs(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.top_k(logits, k=self.nb_candidate)[0], [-1, self.nb_candidate])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "preds_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_max(preds, 1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "reduce_max(model_preds, 1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_637": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad / tf.maximum(avoid_zero_div, reduce_mean(tf.abs(grad), red_ind, keepdims=True))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_645": {
                "x": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decay_factor * m + grad",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_648": {
                "x": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decay_factor * m + grad",
                            "BinOp"
                        ]
                    ]
                }
            },
            "maximum_649": {
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(1e-12, grad.dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_sum(tf.square(m), red_ind, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/MNIST/cleverhans/attacks_tf.py": {
        "tensorflow": {
            "as_dtype_22": {
                "variable": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gradients_85": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_module.attack_softmax_cross_entropy(y, preds, mean=False)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ],
                        [
                            "reduce_mean(wrapped_loss_fn(perturbation), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss], 'Total batch loss')",
                            "Call"
                        ],
                        [
                            "highest_nonlabel_logits - label_logits",
                            "BinOp"
                        ],
                        [
                            "self.sess.run(self.loss, feed_dict={self.x: adv_x.reshape(oimgs.shape), self.targeted_label: targets, self.ori_img: oimgs, self.const: CONST})",
                            "Call"
                        ],
                        [
                            "reduce_mean(loss_fn(x), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [height, height], [width, width], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(x, angle, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.transform(x, theta, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ],
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "constant_499": {
                "variable": {
                    "value": "zero_diagonal",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones((nb_features, nb_features), int)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "while_loop_610": {
                "variable": {
                    "value": "(x_adv, _, _, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": []
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[x, y_target, search_domain, 0, True]",
                    "type": "List",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "while_loop_1893": {
                "variable": {
                    "value": "(_, final_perturbation, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mod_not_done & (reduce_sum(domain_in, axis=1) >= 2)",
                            "BinOp"
                        ]
                    ]
                },
                "body": {
                    "value": "loop_body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[tf.constant(0.0), init_perturbation, flat_init_optim_state]",
                    "type": "List",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "one_hot_1920": {
                "variable": {
                    "value": "logit_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_1936": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([1, 0, -dx * height, 0, 1, -dy * width, 0, 0] * batch_size, dtype=np.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, 8)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_1939": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [height, height], [width, width], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(x, angle, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.transform(x, theta, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ],
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [height, height], [width, width], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_1990": {
                "variable": {
                    "value": "adv_xs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "adv_xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(adv_xs)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_1991": {
                "variable": {
                    "value": "accs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "accs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(accs)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_75": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(preds, preds_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_76": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / reduce_sum(y, 1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / reduce_sum(y, 1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sign_89": {
                "variable": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sess.run(self.grad, feed_dict={self.x: adv_x.reshape(oimgs.shape), self.targeted_label: targets, self.ori_img: oimgs, self.const: CONST})",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_95": {
                "variable": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(grad)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(normalized_grad)",
                            "Call"
                        ],
                        [
                            "grad / avoid_nan_norm",
                            "BinOp"
                        ],
                        [
                            "grad / tf.sqrt(square)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_by_value_124": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "x + d",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "copy.copy(sample)",
                            "Call"
                        ],
                        [
                            "np.reshape(adv_x, (1, nb_features))",
                            "Call"
                        ],
                        [
                            "apply_perturbations(i, j, adv_x, increase, theta, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "copy.copy(sample)",
                            "Call"
                        ],
                        [
                            "np.clip((1 + overshoot) * r_tot + sample, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "np.clip(r_tot + sample, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "adv_x.reshape(oimgs.shape)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.clip_min * np.ones(oimgs.shape[:])",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.clip_max * np.ones(oimgs.shape[:])",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gradients_288": {
                "variable": {
                    "value": "(derivatives,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "predictions[:, class_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [height, height], [width, width], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(x, angle, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.transform(x, theta, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ],
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_505": {
                "variable": {
                    "value": "search_domain",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(x < clip_max, tf_dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_508": {
                "variable": {
                    "value": "search_domain",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(x > clip_min, tf_dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_527": {
                "variable": {
                    "value": "preds_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.argmax(preds, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(grads)",
                            "Call"
                        ],
                        [
                            "int(y_target.shape[-1].value)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_534": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack(list_derivatives)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nb_classes, -1, nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_541": {
                "variable": {
                    "value": "target_class",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(y_in, perm=[1, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nb_classes, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_543": {
                "variable": {
                    "value": "other_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(target_class, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_577": {
                "variable": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(scores, shape=[-1, nb_features * nb_features])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mod_580": {
                "variable": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(scores)",
                            "Call"
                        ],
                        [
                            "tf.argmax(tf.reshape(scores, shape=[-1, nb_features * nb_features]), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.product(adv_x.shape[1:])",
                            "Call"
                        ],
                        [
                            "int(np.product(x.shape[1:]).value)",
                            "Call"
                        ]
                    ]
                }
            },
            "floordiv_581": {
                "variable": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(scores)",
                            "Call"
                        ],
                        [
                            "tf.argmax(tf.reshape(scores, shape=[-1, nb_features * nb_features]), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.product(adv_x.shape[1:])",
                            "Call"
                        ],
                        [
                            "int(np.product(x.shape[1:]).value)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_582": {
                "variable": {
                    "value": "p1_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.mod(best, nb_features)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.product(adv_x.shape[1:])",
                            "Call"
                        ],
                        [
                            "int(np.product(x.shape[1:]).value)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_583": {
                "variable": {
                    "value": "p2_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.floordiv(best, nb_features)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.product(adv_x.shape[1:])",
                            "Call"
                        ],
                        [
                            "int(np.product(x.shape[1:]).value)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_586": {
                "variable": {
                    "value": "mod_not_done",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "reduce_sum(y_in * preds_onehot, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_590": {
                "variable": {
                    "value": "cond_float",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(cond, tf_dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_596": {
                "variable": {
                    "value": "to_mod_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "to_mod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(p1_one_hot + p2_one_hot) * cond_float",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1] + x_in.shape[1:].as_list()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_604": {
                "variable": {
                    "value": "i_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i_in",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_742": {
                "variable": {
                    "value": "modifier",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape, dtype=np_dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_745": {
                "variable": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "timg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_746": {
                "variable": {
                    "value": "self.tlab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((batch_size, num_labels))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "tlab",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_748": {
                "variable": {
                    "value": "self.const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "const",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_752": {
                "variable": {
                    "value": "self.assign_timg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_timg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_753": {
                "variable": {
                    "value": "self.assign_tlab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, num_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_tlab",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_755": {
                "variable": {
                    "value": "self.assign_const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_const",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_791": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_793": {
                "variable": {
                    "value": "end_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_802": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[modifier] + new_vars",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_1021": {
                "variable": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_1028": {
                "variable": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "timg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_1029": {
                "variable": {
                    "value": "self.newimg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "newimg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_1031": {
                "variable": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "slack",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_1033": {
                "variable": {
                    "value": "self.tlab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((batch_size, num_labels))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "tlab",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_1035": {
                "variable": {
                    "value": "self.const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "const",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_1039": {
                "variable": {
                    "value": "self.assign_timg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_timg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_1040": {
                "variable": {
                    "value": "self.assign_newimg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_newimg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_1042": {
                "variable": {
                    "value": "self.assign_slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_slack",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_1044": {
                "variable": {
                    "value": "self.assign_tlab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, num_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_tlab",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_1046": {
                "variable": {
                    "value": "self.assign_const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_const",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_1049": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_1050": {
                "variable": {
                    "value": "self.global_step_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_1054": {
                "variable": {
                    "value": "self.zt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.global_step_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.global_step_t + tf.cast(3, tf_dtype)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_1056": {
                "variable": {
                    "value": "cond1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(tf.subtract(self.slack, self.timg), self.beta_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_1058": {
                "variable": {
                    "value": "cond2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less_equal(tf.abs(tf.subtract(self.slack, self.timg)), self.beta_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_1061": {
                "variable": {
                    "value": "cond3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(tf.subtract(self.slack, self.timg), tf.negative(self.beta_t))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_1064": {
                "variable": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(self.slack, self.beta_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(self.clip_max, tf_dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_1066": {
                "variable": {
                    "value": "lower",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(self.slack, self.beta_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(self.clip_min, tf_dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_1069": {
                "variable": {
                    "value": "self.assign_newimg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "cond1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.greater(tf.subtract(self.slack, self.timg), self.beta_t), tf_dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(tf.subtract(self.slack, self.beta_t), tf.cast(self.clip_max, tf_dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_1078": {
                "variable": {
                    "value": "self.setter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.newimg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.assign_newimg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_1079": {
                "variable": {
                    "value": "self.setter_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.assign_slack",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "polynomial_decay_1132": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "self.MAX_ITERATIONS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "end_learning_rate": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "power": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_1141": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_1145": {
                "variable": {
                    "value": "end_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_1155": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.global_step] + [self.slack] + [self.newimg] + new_vars",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Variable_1495": {
                "variable": {
                    "value": "self.ori_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(self.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "ori_img",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_1497": {
                "variable": {
                    "value": "self.const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(self.batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "const",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gradients_1505": {
                "variable": {
                    "value": "(self.grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_1788": {
                "variable": {
                    "value": "(_, all_grads)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mod_not_done & (reduce_sum(domain_in, axis=1) >= 2)",
                            "BinOp"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[0, tf.TensorArray(size=self._num_iters, dtype=tf_dtype)]",
                    "type": "List",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_1807": {
                "variable": {
                    "value": "clipped_perturbation",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "perturbation",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-epsilon",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-09",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_1809": {
                "variable": {
                    "value": "new_image",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "input_image + clipped_perturbation",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "assert_less_equal_1901": {
                "variable": {
                    "value": "check_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "final_perturbation",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "perturbation_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epsilon * 1.1",
                            "BinOp"
                        ]
                    ]
                },
                "message": {
                    "value": "'final_perturbation must change no pixel by more than %s' % perturbation_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_op_1906": {
                "variable": {
                    "value": "check_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stop_gradient_1910": {
                "input": {
                    "value": "adversarial_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_image + final_perturbation",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_float_1960": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(preds, preds_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_1961": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / reduce_sum(y, 1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / reduce_sum(y, 1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gather_1992": {
                "params": {
                    "value": "adv_xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(adv_xs)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.argmin(accs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_99": {
                "variable": {
                    "value": "avoid_nan_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "Constant"
                        ],
                        [
                            "1e-12",
                            "Constant"
                        ]
                    ]
                },
                "y": {
                    "value": "reduce_sum(tf.abs(grad), reduction_indices=red_ind, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_155": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stop_gradient_162": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Hd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(kl, d)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clip_by_value_166": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "x + d",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "copy.copy(sample)",
                            "Call"
                        ],
                        [
                            "np.reshape(adv_x, (1, nb_features))",
                            "Call"
                        ],
                        [
                            "apply_perturbations(i, j, adv_x, increase, theta, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "copy.copy(sample)",
                            "Call"
                        ],
                        [
                            "np.clip((1 + overshoot) * r_tot + sample, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "np.clip(r_tot + sample, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "adv_x.reshape(oimgs.shape)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.clip_min * np.ones(oimgs.shape[:])",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.clip_max * np.ones(oimgs.shape[:])",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "logical_and_521": {
                "x": {
                    "value": "tf.less(i_in, max_iters)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "cond_in",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gradients_532": {
                "variable": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "preds[:, class_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "x_in",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "minimum_599": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.clip_max * np.ones(oimgs.shape[:])",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "x_in + to_mod_reshape * theta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_601": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.clip_min * np.ones(oimgs.shape[:])",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "x_in - to_mod_reshape * theta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_779": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ZERO()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "other - real + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_782": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ZERO()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "real - other + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_1070": {
                "x": {
                    "value": "cond2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.less_equal(tf.abs(tf.subtract(self.slack, self.timg)), self.beta_t), tf_dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_1071": {
                "x": {
                    "value": "cond3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.less(tf.subtract(self.slack, self.timg), tf.negative(self.beta_t)), tf_dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "lower",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.add(self.slack, self.beta_t), tf.cast(self.clip_min, tf_dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_1074": {
                "x": {
                    "value": "self.zt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.assign_newimg - self.newimg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_1115": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ZERO()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "other - real + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_1116": {
                "variable": {
                    "value": "loss1_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ZERO()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "other_y - real_y + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_1119": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ZERO()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "real - other + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_1120": {
                "variable": {
                    "value": "loss1_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ZERO()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "real_y - other_y + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_1651": {
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_module.attack_softmax_cross_entropy(y, preds, mean=False)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ],
                        [
                            "reduce_mean(wrapped_loss_fn(perturbation), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss], 'Total batch loss')",
                            "Call"
                        ],
                        [
                            "highest_nonlabel_logits - label_logits",
                            "BinOp"
                        ],
                        [
                            "self.sess.run(self.loss, feed_dict={self.x: adv_x.reshape(oimgs.shape), self.targeted_label: targets, self.ori_img: oimgs, self.const: CONST})",
                            "Call"
                        ],
                        [
                            "reduce_mean(loss_fn(x), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [height, height], [width, width], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(x, angle, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.transform(x, theta, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ],
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_1768": {
                "variable": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1] + static_x_shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_1776": {
                "variable": {
                    "value": "delta_x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[delta_x, -delta_x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_1777": {
                "variable": {
                    "value": "loss_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "loss_fn(x + delta_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2 * self._num_samples] + [1] * (len(x_shape) - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_1781": {
                "variable": {
                    "value": "avg_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "avg_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_sum(all_grads.stack(), axis=0)",
                            "Call"
                        ],
                        [
                            "reduce_mean(loss_vals * delta_x, axis=0) / delta",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(avg_grad, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "control_dependencies_1803": {
                "control_inputs": {
                    "value": "[tf.assert_less_equal(input_image, 1.0), tf.assert_greater_equal(input_image, 0.0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Print_1854": {
                "variable": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Print(input_image, [], 'Starting PGD attack with epsilon: %s' % epsilon)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "'Starting PGD attack with epsilon: %s' % epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_1859": {
                "input": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Print(input_image, [], 'Starting PGD attack with epsilon: %s' % epsilon)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_1882": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(num_iterations)",
                            "Call"
                        ],
                        [
                            "tf.identity(i)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.less(loss, early_stop_loss_threshold), lambda : float(num_steps), lambda : i)",
                            "Call"
                        ],
                        [
                            "range(0, len(imgs), self.batch_size)",
                            "Call"
                        ],
                        [
                            "range(0, len(imgs) // batch_size)",
                            "Call"
                        ],
                        [
                            "range(self.batch_size)",
                            "Call"
                        ],
                        [
                            "xrange(len(x))",
                            "Call"
                        ],
                        [
                            "xrange(len(x))",
                            "Call"
                        ]
                    ]
                }
            },
            "less_1890": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(num_iterations)",
                            "Call"
                        ],
                        [
                            "tf.identity(i)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.less(loss, early_stop_loss_threshold), lambda : float(num_steps), lambda : i)",
                            "Call"
                        ],
                        [
                            "range(0, len(imgs), self.batch_size)",
                            "Call"
                        ],
                        [
                            "range(0, len(imgs) // batch_size)",
                            "Call"
                        ],
                        [
                            "range(self.batch_size)",
                            "Call"
                        ],
                        [
                            "xrange(len(x))",
                            "Call"
                        ],
                        [
                            "xrange(len(x))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "num_steps",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "control_dependencies_1908": {
                "control_inputs": {
                    "value": "[check_diff]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmin_1992": {
                "input": {
                    "value": "accs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(accs)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_75": {
                "x": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_probs(x_in)",
                            "Call"
                        ],
                        [
                            "model.get_probs(x)",
                            "Call"
                        ],
                        [
                            "np.atleast_1d(utils_tf.model_argmax(self.sess, self.x, self.model_preds, adv_x))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "preds_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_max(preds, 1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "reduce_max(preds, 1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_107": {
                "variable": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "Constant"
                        ],
                        [
                            "1e-12",
                            "Constant"
                        ]
                    ]
                },
                "y": {
                    "value": "reduce_sum(tf.square(grad), reduction_indices=red_ind, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_156": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [height, height], [width, width], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(x, angle, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.transform(x, theta, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ],
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cast_506": {
                "x": {
                    "value": "x < clip_max",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_509": {
                "x": {
                    "value": "x > clip_min",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "less_521": {
                "x": {
                    "value": "i_in",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "max_iters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.floor(nb_features * gamma / 2)",
                            "Call"
                        ],
                        [
                            "np.floor(nb_features * gamma / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_527": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_probs(x_in)",
                            "Call"
                        ],
                        [
                            "model.get_probs(x)",
                            "Call"
                        ],
                        [
                            "np.atleast_1d(utils_tf.model_argmax(self.sess, self.x, self.model_preds, adv_x))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_535": {
                "values": {
                    "value": "list_derivatives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "transpose_542": {
                "a": {
                    "value": "y_in",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "not_equal_543": {
                "x": {
                    "value": "target_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(y_in, perm=[1, 0]), shape=[nb_classes, -1, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_552": {
                "x": {
                    "value": "tf.equal(domain_in, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_557": {
                "tensor": {
                    "value": "target_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_target",
                            "Name"
                        ],
                        [
                            "target_tmp - increase_coef * reduce_max(tf.abs(grads_target), axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, nb_features, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_558": {
                "tensor": {
                    "value": "target_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_target",
                            "Name"
                        ],
                        [
                            "target_tmp - increase_coef * reduce_max(tf.abs(grads_target), axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_563": {
                "tensor": {
                    "value": "other_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_other",
                            "Name"
                        ],
                        [
                            "other_tmp + increase_coef * reduce_max(tf.abs(grads_other), axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, nb_features, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_564": {
                "tensor": {
                    "value": "other_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_other",
                            "Name"
                        ],
                        [
                            "other_tmp + increase_coef * reduce_max(tf.abs(grads_other), axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_578": {
                "tensor": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores_mask * (-target_sum * other_sum)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(scores_mask, tf_dtype) * (-target_sum * other_sum) * zero_diagonal",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, nb_features * nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_590": {
                "x": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mod_not_done & (reduce_sum(domain_in, axis=1) >= 2)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "square_770": {
                "x": {
                    "value": "self.newimg - self.other",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "greater_1056": {
                "x": {
                    "value": "tf.subtract(self.slack, self.timg)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_equal_1058": {
                "x": {
                    "value": "tf.abs(tf.subtract(self.slack, self.timg))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_1061": {
                "x": {
                    "value": "tf.subtract(self.slack, self.timg)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.negative(self.beta_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_1064": {
                "x": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_1065": {
                "x": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_1066": {
                "x": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_1067": {
                "x": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "square_1086": {
                "x": {
                    "value": "self.newimg - self.timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_1088": {
                "x": {
                    "value": "self.slack - self.timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_1090": {
                "x": {
                    "value": "self.newimg - self.timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_1092": {
                "x": {
                    "value": "self.slack - self.timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_1094": {
                "x": {
                    "value": "self.l1dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_1096": {
                "x": {
                    "value": "self.l1dist_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_1130": {
                "x": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.loss21",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_1502": {
                "x": {
                    "value": "self.x - self.ori_img",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_1702": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_1703": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sign_1752": {
                "x": {
                    "value": "tf.random_uniform([self._num_samples] + x_shape[1:], minval=-1.0, maxval=1.0, dtype=tf_dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_1853": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Print_1878": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_module.attack_softmax_cross_entropy(y, preds, mean=False)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ],
                        [
                            "reduce_mean(wrapped_loss_fn(perturbation), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss], 'Total batch loss')",
                            "Call"
                        ],
                        [
                            "highest_nonlabel_logits - label_logits",
                            "BinOp"
                        ],
                        [
                            "self.sess.run(self.loss, feed_dict={self.x: adv_x.reshape(oimgs.shape), self.targeted_label: targets, self.ori_img: oimgs, self.const: CONST})",
                            "Call"
                        ],
                        [
                            "reduce_mean(loss_fn(x), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[loss]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "Total batch loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_1881": {
                "control_inputs": {
                    "value": "[loss]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_1884": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.less(loss, early_stop_loss_threshold)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : float(num_steps)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : i",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "equal_1960": {
                "x": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_probs(x_in)",
                            "Call"
                        ],
                        [
                            "model.get_probs(x)",
                            "Call"
                        ],
                        [
                            "np.atleast_1d(utils_tf.model_argmax(self.sess, self.x, self.model_preds, adv_x))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "preds_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_max(preds, 1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "reduce_max(preds, 1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "count_nonzero_1987": {
                "input": {
                    "value": "tf.equal(tf.argmax(y, axis=-1), tf.argmax(preds_adv, axis=-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_161": {
                "ys": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils_tf.kl_with_logits(logits, logits_d)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal(tf.shape(x), dtype=tf_dtype)",
                            "Call"
                        ],
                        [
                            "xi * utils_tf.l2_batch_normalize(d)",
                            "BinOp"
                        ],
                        [
                            "tf.stop_gradient(Hd)",
                            "Call"
                        ],
                        [
                            "eps * utils_tf.l2_batch_normalize(d)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "equal_552": {
                "x": {
                    "value": "domain_in",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_556": {
                "x": {
                    "value": "grads_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_sum(grads * target_class, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_562": {
                "x": {
                    "value": "grads_other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_sum(grads * other_classes, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_573": {
                "x": {
                    "value": "scores_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(target_sum > 0) & (other_sum < 0)",
                            "BinOp"
                        ],
                        [
                            "(target_sum < 0) & (other_sum > 0)",
                            "BinOp"
                        ],
                        [
                            "(target_sum > 0) & (other_sum < 0)",
                            "BinOp"
                        ],
                        [
                            "(target_sum < 0) & (other_sum > 0)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_760": {
                "x": {
                    "value": "modifier + self.timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_1055": {
                "x": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_1056": {
                "x": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_1058": {
                "x": {
                    "value": "tf.subtract(self.slack, self.timg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_1061": {
                "x": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "negative_1062": {
                "x": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assert_less_equal_1804": {
                "x": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Print(input_image, [], 'Starting PGD attack with epsilon: %s' % epsilon)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "assert_greater_equal_1805": {
                "x": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Print(input_image, [], 'Starting PGD attack with epsilon: %s' % epsilon)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "device_1877": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_1896": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "equal_1987": {
                "x": {
                    "value": "tf.argmax(y, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(preds_adv, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_100": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sess.run(self.grad, feed_dict={self.x: adv_x.reshape(oimgs.shape), self.targeted_label: targets, self.ori_img: oimgs, self.const: CONST})",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_111": {
                "x": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(avoid_zero_div, reduce_sum(tf.square(grad), reduction_indices=red_ind, keepdims=True))",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_665": {
                "x": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.stack(list_derivatives), shape=[nb_classes, -1, nb_features])",
                            "Call"
                        ],
                        [
                            "self._compute_gradients(loss_fn, x, optim_state)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_790": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "subtract_1058": {
                "x": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_1140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_1723": {
                "x": {
                    "value": "self._beta1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_optim_state['t']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pow_1724": {
                "x": {
                    "value": "self._beta2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_optim_state['t']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "TensorArray_1792": {
                "size": {
                    "value": "self._num_iters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "less_1885": {
                "x": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_module.attack_softmax_cross_entropy(y, preds, mean=False)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ],
                        [
                            "reduce_mean(wrapped_loss_fn(perturbation), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss], 'Total batch loss')",
                            "Call"
                        ],
                        [
                            "highest_nonlabel_logits - label_logits",
                            "BinOp"
                        ],
                        [
                            "self.sess.run(self.loss, feed_dict={self.x: adv_x.reshape(oimgs.shape), self.targeted_label: targets, self.ori_img: oimgs, self.const: CONST})",
                            "Call"
                        ],
                        [
                            "reduce_mean(loss_fn(x), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "early_stop_loss_threshold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "argmax_1987": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / reduce_sum(y, 1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / reduce_sum(y, 1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_1988": {
                "input": {
                    "value": "preds_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_logits(adv_xs[-1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "square_108": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sess.run(self.grad, feed_dict={self.x: adv_x.reshape(oimgs.shape), self.targeted_label: targets, self.ori_img: oimgs, self.const: CONST})",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_767": {
                "x": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_1726": {
                "x": {
                    "value": "u_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_optim_state['u'][i] / (1.0 - tf.pow(self._beta2, t))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/MNIST/cleverhans/attacks_tfe.py": {
        "tensorflow": {
            "as_dtype_42": {
                "variable": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type_value": {
                    "value": "dtypestr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sign_157": {
                "variable": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tape.gradient(loss, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_163": {
                "variable": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(grad)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(normalized_grad)",
                            "Call"
                        ],
                        [
                            "grad / avoid_nan_norm",
                            "BinOp"
                        ],
                        [
                            "grad / tf.sqrt(square)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_by_value_193": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.generate(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "x + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientTape_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "maximum_167": {
                "variable": {
                    "value": "avoid_nan_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "Constant"
                        ],
                        [
                            "1e-12",
                            "Constant"
                        ]
                    ]
                },
                "y": {
                    "value": "reduce_sum(tf.abs(grad), reduction_indices=red_ind, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_175": {
                "variable": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "Constant"
                        ],
                        [
                            "1e-12",
                            "Constant"
                        ]
                    ]
                },
                "y": {
                    "value": "reduce_sum(tf.square(grad), reduction_indices=red_ind, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_168": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tape.gradient(loss, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_179": {
                "x": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(avoid_zero_div, reduce_sum(tf.square(grad), reduction_indices=red_ind, keepdims=True))",
                            "Call"
                        ]
                    ]
                }
            },
            "square_176": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tape.gradient(loss, x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/MNIST/cleverhans/augmentation.py": {
        "tensorflow": {
            "pad_22": {
                "variable": {
                    "value": "xp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(random_crop_and_flip_image, x)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[pad[0], pad[0]], [pad[1], pad[1]], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'REFLECT'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "random_flip_left_right_17": {
                "image": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(random_crop_and_flip_image, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_crop_23": {
                "value": {
                    "value": "xp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[pad[0], pad[0]], [pad[1], pad[1]], [0, 0]], mode)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "tf.shape(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "map_fn_50": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "random_crop_and_flip_image",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(random_crop_and_flip_image, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_23": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(random_crop_and_flip_image, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_27": {
                "device_name": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/CPU:0'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "map_fn_28": {
                "fn": {
                    "value": "func",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(random_crop_and_flip_image, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_32": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(random_crop_and_flip_image, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_33": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(random_crop_and_flip_image, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_crop_41": {
                "value": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[rows, cols, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_flip_left_right_44": {
                "image": {
                    "value": "_rand_crop_img(_pad_img(img))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_49": {
                "device_name": {
                    "value": "/CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/MNIST/cleverhans/compat.py": {
        "tensorflow": {
            "stop_gradient_107": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(labels)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_v2_108": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(labels)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_116": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(labels)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/MNIST/cleverhans/evaluation.py": {
        "tensorflow": {
            "equal_337": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y_batch, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(predictions, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_337": {
                "input": {
                    "value": "y_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.make_label_placeholder()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_338": {
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_probs(x_batch)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_139": {
                "device_name": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "devices",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/MNIST/cleverhans/loss.py": {
        "tensorflow": {
            "maximum_128": {
                "variable": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.distributions.Beta(self.beta, self.beta)",
                            "Call"
                        ],
                        [
                            "mix.sample([tf.shape(x)[0]] + [1] * (len(x.shape) - 1))",
                            "Call"
                        ],
                        [
                            "tf.maximum(mix, 1 - mix)",
                            "Call"
                        ],
                        [
                            "tf.distributions.Beta(self.beta, self.beta)",
                            "Call"
                        ],
                        [
                            "mix.sample([tf.shape(x)[0]] + [1] * (len(x.shape) - 1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1 - mix",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_132": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "softmax_cross_entropy_with_logits(labels=ym, logits=logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_155": {
                "variable": {
                    "value": "pairing_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pairing_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.reduce_mean(tf.square(a - b)) for (a, b) in zip(d1[Model.O_FEATURES], d2[Model.O_FEATURES])]",
                            "ListComp"
                        ],
                        [
                            "tf.reduce_mean(pairing_loss)",
                            "Call"
                        ],
                        [
                            "[tf.reduce_mean(tf.square(a - b)) for (a, b) in zip(d1[Model.O_FEATURES], d2[Model.O_FEATURES])]",
                            "ListComp"
                        ],
                        [
                            "tf.reduce_mean(pairing_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_156": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "softmax_cross_entropy_with_logits(labels=y, logits=d1[Model.O_LOGITS])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_168": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "terms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[weight * loss for (weight, loss) in safe_zip(weights, losses)]",
                            "ListComp"
                        ],
                        [
                            "[tf.nn.l2_loss(param) for param in self.model.get_params() if len(param.get_shape()) > 1]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "reduce_mean_250": {
                "variable": {
                    "value": "pairing_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pairing_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.reduce_mean(tf.square(a - b)) for (a, b) in zip(d1[Model.O_FEATURES], d2[Model.O_FEATURES])]",
                            "ListComp"
                        ],
                        [
                            "tf.reduce_mean(pairing_loss)",
                            "Call"
                        ],
                        [
                            "[tf.reduce_mean(tf.square(a - b)) for (a, b) in zip(d1[Model.O_FEATURES], d2[Model.O_FEATURES])]",
                            "ListComp"
                        ],
                        [
                            "tf.reduce_mean(pairing_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "Beta_275": {
                "variable": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": []
                },
                "concentration1": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "concentration0": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_75": {
                "inputs": {
                    "value": "terms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[weight * loss for (weight, loss) in safe_zip(weights, losses)]",
                            "ListComp"
                        ],
                        [
                            "[tf.nn.l2_loss(param) for param in self.model.get_params() if len(param.get_shape()) > 1]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Beta_126": {
                "variable": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": []
                },
                "concentration1": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "concentration0": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_158": {
                "input_tensor": {
                    "value": "softmax_cross_entropy_with_logits(labels=y, logits=d2[Model.O_LOGITS])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_184": {
                "input_tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softmax_cross_entropy_with_logits(logits=logits, labels=y)",
                            "Call"
                        ],
                        [
                            "tf.add_n(terms)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_124": {
                "device_name": {
                    "value": "/CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_152": {
                "input_tensor": {
                    "value": "tf.square(a - b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_loss_165": {
                "t": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_247": {
                "input_tensor": {
                    "value": "tf.square(a - b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_107": {
                "input_tensor": {
                    "value": "softmax_cross_entropy_with_logits(labels=y, logits=logit)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_152": {
                "x": {
                    "value": "a - b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_247": {
                "x": {
                    "value": "a - b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_100": {
                "x": {
                    "value": "y.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_213": {
                "x": {
                    "value": "y.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_276": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x, self.attack(x))",
                            "Tuple"
                        ],
                        [
                            "(x,)",
                            "Tuple"
                        ],
                        [
                            "(x, self.attack(x))",
                            "Tuple"
                        ],
                        [
                            "(x,)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "shape_127": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x, self.attack(x))",
                            "Tuple"
                        ],
                        [
                            "(x,)",
                            "Tuple"
                        ],
                        [
                            "(x, self.attack(x))",
                            "Tuple"
                        ],
                        [
                            "(x,)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "cast_102": {
                "x": {
                    "value": "y.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_215": {
                "x": {
                    "value": "y.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/MNIST/cleverhans/model.py": {
        "tensorflow": {
            "get_collection_85": {
                "variable": {
                    "value": "scope_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_90": {
                "variable": {
                    "value": "scope_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "executing_eagerly_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_58": {
                "logits": {
                    "value": "d[self.O_LOGITS]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.fprop(x, **kwargs)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/MNIST/cleverhans/picklable_model.py": {
        "tensorflow": {
            "matmul_198": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W.var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_268": {
                "variable": {
                    "value": "dummy_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.get_output_shape()",
                            "Call"
                        ],
                        [
                            "list(input_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_276": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.kernels.var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1,) + tuple(self.strides) + (1,)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_303": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "to_float_401": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x >= 0.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "softmax_433": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_470": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sqrt_471": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(tf.square(x - mean))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_746": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_748": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size,) + self.expanded_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "moments_749": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_751": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(x)",
                            "Call"
                        ],
                        [
                            "tf.shape(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_780": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "moments_782": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_137": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "tuple(self.input_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_250": {
                "variable": {
                    "value": "squared_norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(init)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "(0, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_251": {
                "variable": {
                    "value": "denom",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1e-07 + squared_norms",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_319": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.less(x, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "self.leak * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_339": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tanh_358": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "elu_380": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tanh_423": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "placeholder_440": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.output_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_454": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.output_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Print_472": {
                "input_": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "data": {
                    "value": "[tf.reduce_min(x), mean, tf.reduce_max(x), std]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "Print layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "map_fn_566": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda ex: tf.image.per_image_standardization(ex)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "avg_pool_690": {
                "variable": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ],
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ],
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_694": {
                "variable": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_714": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "avg_pool_846": {
                "variable": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ],
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ],
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_850": {
                "variable": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_471": {
                "input_tensor": {
                    "value": "tf.square(x - mean)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_565": {
                "device_name": {
                    "value": "/CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_631": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "rate": {
                    "value": "include_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.include_prob",
                            "Attribute"
                        ],
                        [
                            "dropout_dict[self.name]",
                            "Subscript"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "rsqrt_750": {
                "x": {
                    "value": "var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rsqrt_783": {
                "x": {
                    "value": "var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_143": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.layers[-1].get_output_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_183": {
                "x": {
                    "value": "1e-07 + tf.reduce_sum(tf.square(init), axis=0, keep_dims=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_250": {
                "x": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal([dim, self.num_hid], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "init / tf.sqrt(1e-07 + tf.reduce_sum(tf.square(init), axis=0, keep_dims=True))",
                            "BinOp"
                        ],
                        [
                            "init * self.init_scale",
                            "BinOp"
                        ],
                        [
                            "tf.random_uniform([dim, self.num_hid], dtype=tf.float32, minval=-scale, maxval=scale)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(kernel_shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.init_scale * init / denom",
                            "BinOp"
                        ],
                        [
                            "tf.random_normal(kernel_shape, dtype=tf.float32, stddev=np.sqrt(2.0 / fan_out))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(kernel_shape, dtype=tf.float32, minval=-scale, maxval=scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "less_319": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "square_471": {
                "x": {
                    "value": "x - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_min_473": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_max_473": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "per_image_standardization_567": {
                "image": {
                    "value": "ex",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_183": {
                "input_tensor": {
                    "value": "tf.square(init)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_403": {
                "x": {
                    "value": "(1.0 - mask) * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_183": {
                "x": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal([dim, self.num_hid], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "init / tf.sqrt(1e-07 + tf.reduce_sum(tf.square(init), axis=0, keep_dims=True))",
                            "BinOp"
                        ],
                        [
                            "init * self.init_scale",
                            "BinOp"
                        ],
                        [
                            "tf.random_uniform([dim, self.num_hid], dtype=tf.float32, minval=-scale, maxval=scale)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(kernel_shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.init_scale * init / denom",
                            "BinOp"
                        ],
                        [
                            "tf.random_normal(kernel_shape, dtype=tf.float32, stddev=np.sqrt(2.0 / fan_out))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(kernel_shape, dtype=tf.float32, minval=-scale, maxval=scale)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/MNIST/cleverhans/serial.py": {
        "tensorflow": {
            "Variable_39": {
                "variable": {
                    "value": "self.var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "get_default_session_42": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_49": {
                "variable": {
                    "value": "self.var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "d['var']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_default_session_50": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_session_84": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_session_97": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/MNIST/cleverhans/tests/test_dropout.py": {
        "tensorflow": {
            "constant_11": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_13": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_31": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_33": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_51": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_54": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/MNIST/cleverhans/tests/test_serial.py": {
        "tensorflow": {
            "Session_12": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_18": {
                "ref": {
                    "value": "xv.var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "np.ones(1) * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/MNIST/cleverhans/tests/test_utils_tf.py": {
        "tensorflow": {
            "Session_12": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_18": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(5, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_30": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[2.0], [3.0], [4.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_39": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "clipped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip_eta(eta, ord_arg, eps)",
                            "Call"
                        ],
                        [
                            "self.sess.run(clipped)",
                            "Call"
                        ],
                        [
                            "clip_eta(eta * sign, ord_arg, eps)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros((5, 3))",
                            "Call"
                        ],
                        [
                            "tf.constant([[2.0], [3.0], [4.0]])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/MNIST/cleverhans/train.py": {
        "tensorflow": {
            "placeholder_147": {
                "variable": {
                    "value": "epoch_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_148": {
                "variable": {
                    "value": "batch_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdamOptimizer_108": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_153": {
                "variable": {
                    "value": "ema",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "ema_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ema_decay(epoch_tf, batch_tf)",
                            "Call"
                        ],
                        [
                            "0.998",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "placeholder_122": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x_train.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + x_train.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_123": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x_train.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + y_train.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_144": {
                "control_inputs": {
                    "value": "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_121": {
                "device_name": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_collection_144": {
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_154": {
                "control_inputs": {
                    "value": "[train_step]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_160": {
                "initial_value": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "assign_163": {
                "ref": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "control_dependencies_165": {
                "control_inputs": {
                    "value": "param_to_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.assign(tmp, param) for (tmp, param) in safe_zip(tmp_params, var_list)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "control_dependencies_168": {
                "control_inputs": {
                    "value": "avg_to_param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.assign(param, avg) for (param, avg) in safe_zip(var_list, avg_params)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "global_variables_initializer_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_n_322": {
                "inputs": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[g for (g, _) in grad_and_vars]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "assign_166": {
                "ref": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "avg",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "assign_169": {
                "ref": {
                    "value": "avg",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/MNIST/cleverhans/utils.py": {
        "tensorflow": {
            "placeholder_267": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, height, width, channels]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_normalize_279": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "adv_x - x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_280": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.lin_space(float(min_epsilon), float(max_epsilon), num_points)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(num_points, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/MNIST/cleverhans/utils_pytorch.py": {
        "tensorflow": {
            "get_default_graph_29": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RegisterGradient_26": {
                "op_type": {
                    "value": "rnd_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'PyFuncGrad-' + '%0x' % getrandbits(30 * 4)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "py_func_34": {
                "func": {
                    "value": "func",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "Tout": {
                    "value": "Tout",
                    "type": "variable",
                    "possible_values": []
                },
                "stateful": {
                    "value": "stateful",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "py_func_73": {
                "func": {
                    "value": "_bprop_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[op.inputs[0], grads_in]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32]",
                    "type": "List",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Tensor_53": {
                "variable": {
                    "value": "x_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_63": {
                "variable": {
                    "value": "grads_in_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_68": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch_state['logits'] * grads_in_tensor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/MNIST/cleverhans/utils_tf.py": {
        "tensorflow": {
            "global_variables_59": {
                "variable": {
                    "value": "global_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_434": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_131": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_218": {
                "variable": {
                    "value": "correct_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(predictions, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_221": {
                "variable": {
                    "value": "correct_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y, axis=tf.rank(y) - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(predictions, axis=tf.rank(predictions) - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_277": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_325": {
                "variable": {
                    "value": "x_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + reduce_max(tf.abs(x), 1, keepdims=True))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "flatten_326": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + reduce_max(tf.abs(x), 1, keepdims=True))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rsqrt_329": {
                "variable": {
                    "value": "x_inv_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "np.sqrt(epsilon) + square_sum",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_330": {
                "variable": {
                    "value": "x_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + reduce_max(tf.abs(x), 1, keepdims=True))",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "x_inv_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.rsqrt(np.sqrt(epsilon) + square_sum)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_339": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "p_logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_softmax_340": {
                "variable": {
                    "value": "p_log",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "p_logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_softmax_341": {
                "variable": {
                    "value": "q_log",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "q_logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_by_value_363": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(eta, -eps, eps)",
                            "Call"
                        ],
                        [
                            "eta * factor",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-eps",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "minimum_378": {
                "variable": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "eps / norm",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_variable_initialized_62": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "control_dependencies_137": {
                "control_inputs": {
                    "value": "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_182": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_324": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_331": {
                "tensor": {
                    "value": "x_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(x, x_inv_norm)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "x_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(x)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_338": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "add_loss_344": {
                "loss": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_mean(reduce_sum(p * (p_log - q_log), axis=1), name=name)",
                            "Call"
                        ],
                        [
                            "model_loss(y, predictions)",
                            "Call"
                        ],
                        [
                            "(loss + model_loss(y, predictions_adv)) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "loss_collection": {
                    "value": "loss_collection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphKeys.REGULARIZATION_LOSSES",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "maximum_366": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "Constant"
                        ]
                    ]
                },
                "y": {
                    "value": "reduce_sum(tf.abs(eta), reduc_ind, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_479": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_71": {
                "var_list": {
                    "value": "not_initialized_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[var for (var, init) in zip(global_vars, is_initialized) if not init]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "get_collection_137": {
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_218": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_219": {
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_221": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "tf.rank(y) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_222": {
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "tf.rank(predictions) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_328": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + reduce_max(tf.abs(x), 1, keepdims=True))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_372": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(avoid_zero_div, reduce_sum(tf.square(eta), reduc_ind, keepdims=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_327": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + reduce_max(tf.abs(x), 1, keepdims=True))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "global_variables_initializer_440": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_440": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_446": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_367": {
                "x": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(eta, -eps, eps)",
                            "Call"
                        ],
                        [
                            "eta * factor",
                            "BinOp"
                        ]
                    ]
                }
            },
            "maximum_372": {
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "Constant"
                        ]
                    ]
                },
                "y": {
                    "value": "reduce_sum(tf.square(eta), reduc_ind, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rank_221": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rank_223": {
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_373": {
                "x": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(eta, -eps, eps)",
                            "Call"
                        ],
                        [
                            "eta * factor",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/MNIST/cleverhans/utils_tfe.py": {
        "tensorflow": {
            "AdamOptimizer_69": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_214": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_119": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_194": {
                "variable": {
                    "value": "cur_corr_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(batch_y, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(predictions, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_187": {
                "ref": {
                    "value": "batch_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfe.Variable(X_train[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tfe.Variable(X_test[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "X_cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((args.batch_size,) + X_test.shape[1:], dtype=X_test.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_188": {
                "ref": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfe.Variable(Y_train[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tfe.Variable(Y_test[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "Y_cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((args.batch_size,) + Y_test.shape[1:], dtype=Y_test.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_230": {
                "input": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(tf_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_232": {
                "input": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(tf_samples)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "assign_91": {
                "ref": {
                    "value": "batch_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfe.Variable(X_train[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tfe.Variable(X_test[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "X_train[index_shuf[start:end]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "assign_92": {
                "ref": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfe.Variable(Y_train[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tfe.Variable(Y_test[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "Y_train[index_shuf[start:end]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_194": {
                "input": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfe.Variable(Y_train[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tfe.Variable(Y_test[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_195": {
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch_adv_x)",
                            "Call"
                        ],
                        [
                            "model(batch_x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "GradientTape_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/MNIST/mlp.py": {
        "tensorflow": {
            "relu_73": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.conv2d(v, W, strides=[1, 2, 2, 1], padding='SAME') + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_81": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.conv2d(v, self.W, strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_82": {
                "variable": {
                    "value": "max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.conv2d(v, W, strides=[1, 2, 2, 1], padding='SAME') + b)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(h, scale=True, is_training=True, updates_collections=[AECODER_VARIABLES])",
                            "Call"
                        ],
                        [
                            "tf.add(tf.nn.conv2d(v, self.W, strides=[1, 2, 2, 1], padding='SAME'), self.b)",
                            "Call"
                        ],
                        [
                            "h / max",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_by_value_85": {
                "variable": {
                    "value": "Chebyshev_h",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "self.dpChebyshev(h, Delta, epsilon, batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_109": {
                "variable": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(rc_v - self.input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_110": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_like_129": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rc_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decode(xShape, propup, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "self.decode2(xShape, propup, W, b, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_131": {
                "variable": {
                    "value": "relu_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rc_v >= zeros",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "rc_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decode(xShape, propup, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "self.decode2(xShape, propup, W, b, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.zeros_like(rc_v, dtype=self.input.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_132": {
                "variable": {
                    "value": "neg_abs_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rc_v >= zeros",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "-rc_v",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "rc_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decode(xShape, propup, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "self.decode2(xShape, propup, W, b, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_134": {
                "variable": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "math_ops.add(relu_logits - rc_v * (self.input + perturbFMx), math.log(2.0) + 0.5 * neg_abs_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_35": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([filter_size, filter_size, n_filter_in, n_filter_out], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_37": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_filter_out])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_63": {
                "variable": {
                    "value": "perturbFM",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "perturbFM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.laplace(0.0, 1.0 / (epsilon * batch_size), 1).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(perturbFM, Delta)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "Delta",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_by_value_76": {
                "t": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.conv2d(v, W, strides=[1, 2, 2, 1], padding='SAME') + b)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(h, scale=True, is_training=True, updates_collections=[AECODER_VARIABLES])",
                            "Call"
                        ],
                        [
                            "tf.add(tf.nn.conv2d(v, self.W, strides=[1, 2, 2, 1], padding='SAME'), self.b)",
                            "Call"
                        ],
                        [
                            "h / max",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_81": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_91": {
                "x": {
                    "value": "tf.nn.conv2d_transpose(propup, self.W, tf.stack([xShape, self.inputShape[1], self.inputShape[2], self.inputShape[3]]), strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_101": {
                "x": {
                    "value": "tf.nn.conv2d(input=upsample3, filter=tf.transpose(W, perm=[1, 0, 3, 2]), strides=[1, 1, 1, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([n_filter_out]), dtype=tf.float32, name='b')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "square_109": {
                "x": {
                    "value": "rc_v - self.input",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_134": {
                "x": {
                    "value": "relu_logits - rc_v * (self.input + perturbFMx)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "math.log(2.0) + 0.5 * neg_abs_logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "truncated_normal_35": {
                "shape": {
                    "value": "[filter_size, filter_size, n_filter_in, n_filter_out]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_37": {
                "shape": {
                    "value": "[n_filter_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_73": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([filter_size, filter_size, n_filter_in, n_filter_out], stddev=0.1), dtype=tf.float32, name='W')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_91": {
                "input": {
                    "value": "propup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.propup(self.input)",
                            "Call"
                        ],
                        [
                            "self.propup(self.input + perturbFMx, W, b) + perturbFM_h",
                            "BinOp"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "tf.stack([xShape, self.inputShape[1], self.inputShape[2], self.inputShape[3]])",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_101": {
                "input": {
                    "value": "upsample3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(propup, size=(self.inputShape[1], self.inputShape[2]), method=tf.image.ResizeMethod.NEAREST_NEIGHBOR)",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "tf.transpose(W, perm=[1, 0, 3, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_65": {
                "x": {
                    "value": "coefficients[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "x ** 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_92": {
                "values": {
                    "value": "[xShape, self.inputShape[1], self.inputShape[2], self.inputShape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_101": {
                "a": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([filter_size, filter_size, n_filter_in, n_filter_out], stddev=0.1), dtype=tf.float32, name='W')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/MNIST/more_attack.py": {
        "tensorflow": {
            "softmax_cross_entropy_with_logits_27": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model",
                            "Name"
                        ]
                    ]
                },
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / tf.reduce_sum(y, 1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / tf.reduce_sum(y, 1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gradients_132": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils_tf.model_loss(y, preds, mean=False)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ],
                        [
                            "utils_tf.model_loss(y, preds, mean=False)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gradients_264": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils_tf.model_loss(y, preds, mean=False)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ],
                        [
                            "utils_tf.model_loss(y, preds, mean=False)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_30": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=y)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_55": {
                "variable": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stop_gradient_61": {
                "variable": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(grad)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(normalized_grad)",
                            "Call"
                        ],
                        [
                            "grad / tf.reduce_sum(tf.abs(grad), reduction_indices=red_ind, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "grad / tf.sqrt(square)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(grad)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(normalized_grad)",
                            "Call"
                        ],
                        [
                            "grad / tf.reduce_sum(tf.abs(grad), reduction_indices=red_ind, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "grad / tf.sqrt(square)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(grad)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(normalized_grad)",
                            "Call"
                        ],
                        [
                            "grad / tf.reduce_sum(tf.abs(grad), reduction_indices=red_ind, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "grad / tf.sqrt(square)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_by_value_85": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "x + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "x + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_max_121": {
                "variable": {
                    "value": "preds_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "to_float_122": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(preds, preds_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_123": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / tf.reduce_sum(y, 1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / tf.reduce_sum(y, 1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sign_136": {
                "variable": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stop_gradient_142": {
                "variable": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(grad)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(normalized_grad)",
                            "Call"
                        ],
                        [
                            "grad / tf.reduce_sum(tf.abs(grad), reduction_indices=red_ind, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "grad / tf.sqrt(square)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(grad)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(normalized_grad)",
                            "Call"
                        ],
                        [
                            "grad / tf.reduce_sum(tf.abs(grad), reduction_indices=red_ind, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "grad / tf.sqrt(square)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(grad)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(normalized_grad)",
                            "Call"
                        ],
                        [
                            "grad / tf.reduce_sum(tf.abs(grad), reduction_indices=red_ind, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "grad / tf.sqrt(square)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_by_value_166": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "x + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "x + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_181": {
                "variable": {
                    "value": "eta_t",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "eta_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fgm(x_input_t, preds_t, y=target_labels_t, eps=step_eps, ord=ord, clip_min=clip_min, clip_max=clip_max, targeted=targeted) - x_input_t",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(eta_t, -total_eps, total_eps)",
                            "Call"
                        ],
                        [
                            "eta_t * total_eps / norm",
                            "BinOp"
                        ],
                        [
                            "fgm(x_input_t, preds_t, y=target_labels_t, eps=step_eps, ord=ord, clip_min=clip_min, clip_max=clip_max, targeted=targeted) - x_input_t",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(eta_t, -total_eps, total_eps)",
                            "Call"
                        ],
                        [
                            "eta_t * total_eps / norm",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-total_eps",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "total_eps",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_by_value_209": {
                "variable": {
                    "value": "eta_t",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "eta_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fgm(x_input_t, preds_t, y=target_labels_t, eps=step_eps, ord=ord, clip_min=clip_min, clip_max=clip_max, targeted=targeted) - x_input_t",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(eta_t, -total_eps, total_eps)",
                            "Call"
                        ],
                        [
                            "eta_t * total_eps / norm",
                            "BinOp"
                        ],
                        [
                            "fgm(x_input_t, preds_t, y=target_labels_t, eps=step_eps, ord=ord, clip_min=clip_min, clip_max=clip_max, targeted=targeted) - x_input_t",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(eta_t, -total_eps, total_eps)",
                            "Call"
                        ],
                        [
                            "eta_t * total_eps / norm",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-total_eps",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "total_eps",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_max_253": {
                "variable": {
                    "value": "preds_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "to_float_254": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(preds, preds_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_255": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / tf.reduce_sum(y, 1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / tf.reduce_sum(y, 1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sign_268": {
                "variable": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stop_gradient_274": {
                "variable": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(grad)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(normalized_grad)",
                            "Call"
                        ],
                        [
                            "grad / tf.reduce_sum(tf.abs(grad), reduction_indices=red_ind, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "grad / tf.sqrt(square)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(grad)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(normalized_grad)",
                            "Call"
                        ],
                        [
                            "grad / tf.reduce_sum(tf.abs(grad), reduction_indices=red_ind, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "grad / tf.sqrt(square)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(grad)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(normalized_grad)",
                            "Call"
                        ],
                        [
                            "grad / tf.reduce_sum(tf.abs(grad), reduction_indices=red_ind, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "grad / tf.sqrt(square)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_by_value_298": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "x + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "x + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_124": {
                "input_tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / tf.reduce_sum(y, 1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / tf.reduce_sum(y, 1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_256": {
                "input_tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / tf.reduce_sum(y, 1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / tf.reduce_sum(y, 1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_69": {
                "variable": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "red_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sign_116": {
                "x": {
                    "value": "tf.random_normal(shape=tf.get_shape(x), mean=0.0, stddev=1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_122": {
                "x": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "preds_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(preds, 1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(preds, 1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_150": {
                "variable": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "red_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_185": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(eta_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "reduc_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(xrange(1, len(tf.shape(eta_t))))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(tf.shape(eta_t))))",
                            "Call"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_213": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(eta_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "reduc_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(xrange(1, len(tf.shape(eta_t))))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(tf.shape(eta_t))))",
                            "Call"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "equal_254": {
                "x": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "preds_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(preds, 1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(preds, 1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_282": {
                "variable": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "red_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_64": {
                "input_tensor": {
                    "value": "tf.abs(grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "red_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_145": {
                "input_tensor": {
                    "value": "tf.abs(grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "red_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_189": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(eta_t), reduction_indices=reduc_ind, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_217": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(eta_t), reduction_indices=reduc_ind, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_277": {
                "input_tensor": {
                    "value": "tf.abs(grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "red_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(x.get_shape())))",
                            "Call"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_64": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_69": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_72": {
                "x": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(grad), reduction_indices=red_ind, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(grad), reduction_indices=red_ind, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(grad), reduction_indices=red_ind, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_145": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_150": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_153": {
                "x": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(grad), reduction_indices=red_ind, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(grad), reduction_indices=red_ind, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(grad), reduction_indices=red_ind, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_185": {
                "x": {
                    "value": "eta_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fgm(x_input_t, preds_t, y=target_labels_t, eps=step_eps, ord=ord, clip_min=clip_min, clip_max=clip_max, targeted=targeted) - x_input_t",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(eta_t, -total_eps, total_eps)",
                            "Call"
                        ],
                        [
                            "eta_t * total_eps / norm",
                            "BinOp"
                        ],
                        [
                            "fgm(x_input_t, preds_t, y=target_labels_t, eps=step_eps, ord=ord, clip_min=clip_min, clip_max=clip_max, targeted=targeted) - x_input_t",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(eta_t, -total_eps, total_eps)",
                            "Call"
                        ],
                        [
                            "eta_t * total_eps / norm",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_213": {
                "x": {
                    "value": "eta_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fgm(x_input_t, preds_t, y=target_labels_t, eps=step_eps, ord=ord, clip_min=clip_min, clip_max=clip_max, targeted=targeted) - x_input_t",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(eta_t, -total_eps, total_eps)",
                            "Call"
                        ],
                        [
                            "eta_t * total_eps / norm",
                            "BinOp"
                        ],
                        [
                            "fgm(x_input_t, preds_t, y=target_labels_t, eps=step_eps, ord=ord, clip_min=clip_min, clip_max=clip_max, targeted=targeted) - x_input_t",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(eta_t, -total_eps, total_eps)",
                            "Call"
                        ],
                        [
                            "eta_t * total_eps / norm",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_277": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_282": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_285": {
                "x": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(grad), reduction_indices=red_ind, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(grad), reduction_indices=red_ind, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(grad), reduction_indices=red_ind, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_183": {
                "input": {
                    "value": "eta_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fgm(x_input_t, preds_t, y=target_labels_t, eps=step_eps, ord=ord, clip_min=clip_min, clip_max=clip_max, targeted=targeted) - x_input_t",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(eta_t, -total_eps, total_eps)",
                            "Call"
                        ],
                        [
                            "eta_t * total_eps / norm",
                            "BinOp"
                        ],
                        [
                            "fgm(x_input_t, preds_t, y=target_labels_t, eps=step_eps, ord=ord, clip_min=clip_min, clip_max=clip_max, targeted=targeted) - x_input_t",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(eta_t, -total_eps, total_eps)",
                            "Call"
                        ],
                        [
                            "eta_t * total_eps / norm",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_189": {
                "input_tensor": {
                    "value": "tf.square(eta_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "reduc_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(xrange(1, len(tf.shape(eta_t))))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(tf.shape(eta_t))))",
                            "Call"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_211": {
                "input": {
                    "value": "eta_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fgm(x_input_t, preds_t, y=target_labels_t, eps=step_eps, ord=ord, clip_min=clip_min, clip_max=clip_max, targeted=targeted) - x_input_t",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(eta_t, -total_eps, total_eps)",
                            "Call"
                        ],
                        [
                            "eta_t * total_eps / norm",
                            "BinOp"
                        ],
                        [
                            "fgm(x_input_t, preds_t, y=target_labels_t, eps=step_eps, ord=ord, clip_min=clip_min, clip_max=clip_max, targeted=targeted) - x_input_t",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(eta_t, -total_eps, total_eps)",
                            "Call"
                        ],
                        [
                            "eta_t * total_eps / norm",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_217": {
                "input_tensor": {
                    "value": "tf.square(eta_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "reduc_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(xrange(1, len(tf.shape(eta_t))))",
                            "Call"
                        ],
                        [
                            "list(xrange(1, len(tf.shape(eta_t))))",
                            "Call"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "square_189": {
                "x": {
                    "value": "eta_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fgm(x_input_t, preds_t, y=target_labels_t, eps=step_eps, ord=ord, clip_min=clip_min, clip_max=clip_max, targeted=targeted) - x_input_t",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(eta_t, -total_eps, total_eps)",
                            "Call"
                        ],
                        [
                            "eta_t * total_eps / norm",
                            "BinOp"
                        ],
                        [
                            "fgm(x_input_t, preds_t, y=target_labels_t, eps=step_eps, ord=ord, clip_min=clip_min, clip_max=clip_max, targeted=targeted) - x_input_t",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(eta_t, -total_eps, total_eps)",
                            "Call"
                        ],
                        [
                            "eta_t * total_eps / norm",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_217": {
                "x": {
                    "value": "eta_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fgm(x_input_t, preds_t, y=target_labels_t, eps=step_eps, ord=ord, clip_min=clip_min, clip_max=clip_max, targeted=targeted) - x_input_t",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(eta_t, -total_eps, total_eps)",
                            "Call"
                        ],
                        [
                            "eta_t * total_eps / norm",
                            "BinOp"
                        ],
                        [
                            "fgm(x_input_t, preds_t, y=target_labels_t, eps=step_eps, ord=ord, clip_min=clip_min, clip_max=clip_max, targeted=targeted) - x_input_t",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(eta_t, -total_eps, total_eps)",
                            "Call"
                        ],
                        [
                            "eta_t * total_eps / norm",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/StoBatchCIFAR10/DPALPixelDP_parallel_4_GPU_clean.py": {
        "tensorflow": {
            "DEFINE_string_63": {
                "name": {
                    "value": "checkpoint_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "os.getcwd() + dirCheckpoint",
                    "type": "BinOp",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where to read model checkpoints.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_max_120": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(inputs, shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_124": {
                "variable": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "_x.get_shape()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_127": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_165": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "shape + [num_channels // num_units]",
                            "BinOp"
                        ],
                        [
                            "kernel1.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "clip_by_value_283": {
                "variable": {
                    "value": "local4",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "local4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(local4, -1, 1)",
                            "Call"
                        ],
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(local4, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_337": {
                "variable": {
                    "value": "local4",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "local4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(local4, -1, 1)",
                            "Call"
                        ],
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(local4, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_to_collections_147": {
                "names": {
                    "value": "collect",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_on_cpu(name, shape, initializer=tf.contrib.layers.xavier_initializer_conv2d())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name, shape, initializer=initializer, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(AECODER_VARIABLES)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(CONV_VARIABLES)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_149": {
                "variable": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_loss(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collections_166": {
                "names": {
                    "value": "collect",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_on_cpu(name, shape, initializer=tf.contrib.layers.xavier_initializer_conv2d())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name, shape, initializer=initializer, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(AECODER_VARIABLES)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(CONV_VARIABLES)",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool_171": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, s, s, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, s, s, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_248": {
                "variable": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(images, params[0], [1, 2, 2, 1], padding='SAME') + perturbH",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images + adv_noise, params[0], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "params[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_249": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_250": {
                "variable": {
                    "value": "norm1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(pre_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(pre_activation)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv1bn{}'.format(bn_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_256": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv1, scale=True, training=training, reuse=tf.AUTO_REUSE, name='conv1bn{}'.format(bn_index))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1, scale=True, training=False, reuse=tf.AUTO_REUSE, name='conv1bn{}'.format(bn_index))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "params[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_257": {
                "variable": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(images, params[0], [1, 2, 2, 1], padding='SAME') + perturbH",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images + adv_noise, params[0], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "params[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_258": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_260": {
                "variable": {
                    "value": "current",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(conv2, norm1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_normalization_261": {
                "variable": {
                    "value": "norm2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "current",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((conv2, norm1), axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat((conv2, norm1), axis=3)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv2bn{}'.format(bn_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_267": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(current, scale=True, training=training, reuse=tf.AUTO_REUSE, name='conv2bn{}'.format(bn_index))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(current, scale=True, training=False, reuse=tf.AUTO_REUSE, name='conv2bn{}'.format(bn_index))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "params[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_268": {
                "variable": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(images, params[0], [1, 2, 2, 1], padding='SAME') + perturbH",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images + adv_noise, params[0], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "params[5]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_269": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_270": {
                "variable": {
                    "value": "norm3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(pre_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(pre_activation)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv3bn{}'.format(bn_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_277": {
                "variable": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "avg_pool(norm3, 2)",
                            "Call"
                        ],
                        [
                            "avg_pool(norm3, 2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, int(image_size / 4) ** 2 * 256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_278": {
                "variable": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(h_pool2_flat, params[6])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "params[7]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "batch_normalization_279": {
                "variable": {
                    "value": "BN_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(h_pool2_flat, params[6]), params[7])",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(h_pool2_flat, params[6]), params[7])",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'local4bn{}'.format(bn_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_286": {
                "variable": {
                    "value": "softmax_linear",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(local4, params[8])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "params[9]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "conv2d_300": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images + adv_noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "filters": {
                    "value": "params[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_301": {
                "variable": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(images, params[0], [1, 2, 2, 1], padding='SAME') + perturbH",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images + adv_noise, params[0], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "params[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_302": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_303": {
                "variable": {
                    "value": "norm1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(pre_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(pre_activation)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv1bn{}'.format(bn_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_309": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv1, scale=True, training=training, reuse=tf.AUTO_REUSE, name='conv1bn{}'.format(bn_index))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1, scale=True, training=False, reuse=tf.AUTO_REUSE, name='conv1bn{}'.format(bn_index))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "params[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_310": {
                "variable": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(images, params[0], [1, 2, 2, 1], padding='SAME') + perturbH",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images + adv_noise, params[0], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "params[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_311": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_313": {
                "variable": {
                    "value": "current",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(conv2, norm1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_normalization_314": {
                "variable": {
                    "value": "norm2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "current",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((conv2, norm1), axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat((conv2, norm1), axis=3)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv2bn{}'.format(bn_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_320": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(current, scale=True, training=training, reuse=tf.AUTO_REUSE, name='conv2bn{}'.format(bn_index))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(current, scale=True, training=False, reuse=tf.AUTO_REUSE, name='conv2bn{}'.format(bn_index))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "params[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_321": {
                "variable": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(images, params[0], [1, 2, 2, 1], padding='SAME') + perturbH",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images + adv_noise, params[0], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "params[5]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_322": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_324": {
                "variable": {
                    "value": "norm3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(pre_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(pre_activation)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv3bn{}'.format(bn_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_331": {
                "variable": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "avg_pool(norm3, 2)",
                            "Call"
                        ],
                        [
                            "avg_pool(norm3, 2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, int(image_size / 4) ** 2 * 256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_332": {
                "variable": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(h_pool2_flat, params[6])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "params[7]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "batch_normalization_333": {
                "variable": {
                    "value": "BN_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(h_pool2_flat, params[6]), params[7])",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(h_pool2_flat, params[6]), params[7])",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'local4bn{}'.format(bn_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_340": {
                "variable": {
                    "value": "softmax_linear",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(local4, params[8])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "params[9]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_346": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_inference(x, params, scopes, image_size, adv_noise, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_355": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_382": {
                "variable": {
                    "value": "w_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "kernel1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('kernel1', shape=[4, 4, 3, 128], stddev=np.sqrt(2.0 / (5 * 5 * 256)) / math.ceil(5 / 2), wd=0.0, collect=[AECODER_VARIABLES])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_383": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "w_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(kernel1, [-1, shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "svd_384": {
                "variable": {
                    "value": "sing_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(w_t)",
                            "Call"
                        ]
                    ]
                },
                "compute_uv": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_385": {
                "variable": {
                    "value": "sensitivity",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sing_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.svd(w, compute_uv=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_418": {
                "variable": {
                    "value": "FM_h",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 14, 14, 128]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_419": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_420": {
                "variable": {
                    "value": "adv_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_422": {
                "variable": {
                    "value": "x_sb",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_423": {
                "variable": {
                    "value": "x_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x_sb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, image_size, image_size, 3])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "N_GPUS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(_GPUS.split(','))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_424": {
                "variable": {
                    "value": "adv_x_sb",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_425": {
                "variable": {
                    "value": "adv_x_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "adv_x_sb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, image_size, image_size, 3])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "N_GPUS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(_GPUS.split(','))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_427": {
                "variable": {
                    "value": "x_test",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_429": {
                "variable": {
                    "value": "y_sb",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_430": {
                "variable": {
                    "value": "y_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "y_sb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 10])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "N_GPUS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(_GPUS.split(','))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_431": {
                "variable": {
                    "value": "adv_y_sb",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_434": {
                "variable": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_437": {
                "variable": {
                    "value": "_split_adv_y_sb",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "adv_y_sb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 10])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "N_AUX_GPUS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(_AUX_GPUS.split(','))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdamOptimizer_446": {
                "variable": {
                    "value": "pretrain_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_447": {
                "variable": {
                    "value": "train_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_559": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack(all_train_loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_566": {
                "variable": {
                    "value": "_update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_575": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_577": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(log_device_placement=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_613": {
                "variable": {
                    "value": "x_attacks",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x_sb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, image_size, image_size, 3])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "N_AUX_GPUS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(_AUX_GPUS.split(','))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_615": {
                "variable": {
                    "value": "x_test_split",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, image_size, image_size, 3])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "aux_dup_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "N_GPUS",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_625": {
                "variable": {
                    "value": "mu_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_676": {
                "variable": {
                    "value": "adv_super_batch_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "adv_concat_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_684": {
                "variable": {
                    "value": "pretrain_var_list",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "AECODER_VARIABLES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'AECODER_VARIABLES'",
                            "Constant"
                        ]
                    ]
                }
            },
            "get_collection_689": {
                "variable": {
                    "value": "train_var_list",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "CONV_VARIABLES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'CONV_VARIABLES'",
                            "Constant"
                        ]
                    ]
                }
            },
            "global_variables_697": {
                "variable": {
                    "value": "vl",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_712": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.all_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "initialize_all_variables_715": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_checkpoint_state_720": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.checkpoint_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_932": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_120": {
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "shape + [num_channels // num_units]",
                            "BinOp"
                        ],
                        [
                            "kernel1.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_150": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_246": {
                "name_or_scope": {
                    "value": "scope_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[0]",
                            "Subscript"
                        ],
                        [
                            "scopes[0]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_255": {
                "name_or_scope": {
                    "value": "scope_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[1]",
                            "Subscript"
                        ],
                        [
                            "scopes[1]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_266": {
                "name_or_scope": {
                    "value": "scope_conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[2]",
                            "Subscript"
                        ],
                        [
                            "scopes[2]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_276": {
                "name_or_scope": {
                    "value": "scope_local4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[3]",
                            "Subscript"
                        ],
                        [
                            "scopes[3]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_285": {
                "name_or_scope": {
                    "value": "scope_local5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[4]",
                            "Subscript"
                        ],
                        [
                            "scopes[4]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_299": {
                "name_or_scope": {
                    "value": "scope_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[0]",
                            "Subscript"
                        ],
                        [
                            "scopes[0]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_308": {
                "name_or_scope": {
                    "value": "scope_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[1]",
                            "Subscript"
                        ],
                        [
                            "scopes[1]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_319": {
                "name_or_scope": {
                    "value": "scope_conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[2]",
                            "Subscript"
                        ],
                        [
                            "scopes[2]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_330": {
                "name_or_scope": {
                    "value": "scope_local4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[3]",
                            "Subscript"
                        ],
                        [
                            "scopes[3]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_339": {
                "name_or_scope": {
                    "value": "scope_local5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[4]",
                            "Subscript"
                        ],
                        [
                            "scopes[4]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "Graph_354": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_354": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_508": {
                "key": {
                    "value": "AECODER_VARIABLES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'AECODER_VARIABLES'",
                            "Constant"
                        ]
                    ]
                }
            },
            "concat_518": {
                "variable": {
                    "value": "concat_pretrain_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "expand_pretrain_grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.expand_dims(g, 0) for g in all_pretrain_grads[var_name]]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_519": {
                "variable": {
                    "value": "reduce_pretrain_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "concat_pretrain_grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(expand_pretrain_grads, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_534": {
                "key": {
                    "value": "CONV_VARIABLES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'CONV_VARIABLES'",
                            "Constant"
                        ]
                    ]
                }
            },
            "concat_544": {
                "variable": {
                    "value": "concat_train_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "expand_train_grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.expand_dims(g, 0) for g in all_train_grads[var_name]]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_545": {
                "variable": {
                    "value": "reduce_train_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "concat_train_grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(expand_train_grads, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_605": {
                "variable": {
                    "value": "test_softmax_y_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "test_y_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inference(test_x_image, FM_h, params, scopes, training=True, bn_index=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_125": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "l2_loss_149": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_on_cpu(name, shape, initializer=tf.contrib.layers.xavier_initializer_conv2d())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name, shape, initializer=initializer, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(AECODER_VARIABLES)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(CONV_VARIABLES)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_247": {
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "params[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_278": {
                "a": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pool3, [-1, int(image_size / 4) ** 2 * 256])",
                            "Call"
                        ],
                        [
                            "tf.reshape(pool3, [-1, int(image_size / 4) ** 2 * 256])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "params[6]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_286": {
                "a": {
                    "value": "local4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(local4, -1, 1)",
                            "Call"
                        ],
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(local4, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "params[8]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_332": {
                "a": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pool3, [-1, int(image_size / 4) ** 2 * 256])",
                            "Call"
                        ],
                        [
                            "tf.reshape(pool3, [-1, int(image_size / 4) ** 2 * 256])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "params[6]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_340": {
                "a": {
                    "value": "local4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(local4, -1, 1)",
                            "Call"
                        ],
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(local4, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "params[8]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_359": {
                "name_or_scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_361": {
                "name_or_scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_363": {
                "name_or_scope": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_365": {
                "name_or_scope": {
                    "value": "local4",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_367": {
                "name_or_scope": {
                    "value": "local5",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_373": {
                "name_or_scope": {
                    "value": "scope_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[0]",
                            "Subscript"
                        ],
                        [
                            "scopes[0]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_388": {
                "name_or_scope": {
                    "value": "scope_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[1]",
                            "Subscript"
                        ],
                        [
                            "scopes[1]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_395": {
                "name_or_scope": {
                    "value": "scope_conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[2]",
                            "Subscript"
                        ],
                        [
                            "scopes[2]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_402": {
                "name_or_scope": {
                    "value": "scope_local4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[3]",
                            "Subscript"
                        ],
                        [
                            "scopes[3]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_407": {
                "name_or_scope": {
                    "value": "scope_local5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[4]",
                            "Subscript"
                        ],
                        [
                            "scopes[4]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "get_collection_488": {
                "variable": {
                    "value": "pretrain_var_list",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "AECODER_VARIABLES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'AECODER_VARIABLES'",
                            "Constant"
                        ]
                    ]
                }
            },
            "get_collection_489": {
                "variable": {
                    "value": "train_var_list",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "CONV_VARIABLES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'CONV_VARIABLES'",
                            "Constant"
                        ]
                    ]
                }
            },
            "stack_559": {
                "values": {
                    "value": "all_train_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "control_dependencies_570": {
                "control_inputs": {
                    "value": "_update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_601": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_378": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_393": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_400": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_405": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_411": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "concat_440": {
                "values": {
                    "value": "[_split_adv_y_sb[i + N_GPUS * atk_index] for atk_index in range(len(attacks))]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_453": {
                "device_name": {
                    "value": "'/gpu:{}'.format(gpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_517": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_543": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_673": {
                "values": {
                    "value": "[attack_tensor_training_dict[atk][i] for atk in attacks]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "all_variables_712": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_458": {
                "name_or_scope": {
                    "value": "scope_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[0]",
                            "Subscript"
                        ],
                        [
                            "scopes[0]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "get_default_graph_703": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_636": {
                "device_name": {
                    "value": "'/gpu:{}'.format(AUX_GPU_IDX[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_647": {
                "device_name": {
                    "value": "'/gpu:{}'.format(AUX_GPU_IDX[i + 1 * aux_dup_count])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_461": {
                "input": {
                    "value": "adv_x_list[bi]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_466": {
                "input": {
                    "value": "x_list[bi]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_659": {
                "device_name": {
                    "value": "'/gpu:{}'.format(AUX_GPU_IDX[i + 2 * aux_dup_count])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/StoBatchCIFAR10/DPALPixelDP_testing.py": {
        "tensorflow": {
            "reduce_max_97": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(inputs, shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_101": {
                "variable": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "_x.get_shape()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_104": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_142": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "shape + [num_channels // num_units]",
                            "BinOp"
                        ],
                        [
                            "kernel1.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "clip_by_value_227": {
                "variable": {
                    "value": "local4",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "local4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(local4, -1, 1)",
                            "Call"
                        ],
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(local4, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_281": {
                "variable": {
                    "value": "local4",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "local4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(local4, -1, 1)",
                            "Call"
                        ],
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(local4, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_to_collections_124": {
                "names": {
                    "value": "collect",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_on_cpu(name, shape, initializer=tf.contrib.layers.xavier_initializer_conv2d())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name, shape, initializer=initializer, dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_126": {
                "variable": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_loss(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collections_143": {
                "names": {
                    "value": "collect",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_on_cpu(name, shape, initializer=tf.contrib.layers.xavier_initializer_conv2d())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name, shape, initializer=initializer, dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool_148": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, s, s, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, s, s, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_192": {
                "variable": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(images, params[0], [1, 2, 2, 1], padding='SAME') + perturbH",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images + adv_noise, params[0], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "params[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_193": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_194": {
                "variable": {
                    "value": "norm1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(pre_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(pre_activation)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv1bn{}'.format(bn_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_200": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv1, scale=True, training=training, reuse=tf.AUTO_REUSE, name='conv1bn{}'.format(bn_index))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1, scale=True, training=False, reuse=tf.AUTO_REUSE, name='conv1bn{}'.format(bn_index))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "params[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_201": {
                "variable": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(images, params[0], [1, 2, 2, 1], padding='SAME') + perturbH",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images + adv_noise, params[0], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "params[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_202": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_204": {
                "variable": {
                    "value": "current",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(conv2, norm1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_normalization_205": {
                "variable": {
                    "value": "norm2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "current",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((conv2, norm1), axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat((conv2, norm1), axis=3)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv2bn{}'.format(bn_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_211": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(current, scale=True, training=training, reuse=tf.AUTO_REUSE, name='conv2bn{}'.format(bn_index))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(current, scale=True, training=False, reuse=tf.AUTO_REUSE, name='conv2bn{}'.format(bn_index))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "params[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_212": {
                "variable": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(images, params[0], [1, 2, 2, 1], padding='SAME') + perturbH",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images + adv_noise, params[0], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "params[5]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_213": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_214": {
                "variable": {
                    "value": "norm3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(pre_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(pre_activation)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv3bn{}'.format(bn_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_221": {
                "variable": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "avg_pool(norm3, 2)",
                            "Call"
                        ],
                        [
                            "avg_pool(norm3, 2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, int(image_size / 4) ** 2 * 256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_222": {
                "variable": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(h_pool2_flat, params[6])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "params[7]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "batch_normalization_223": {
                "variable": {
                    "value": "BN_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(h_pool2_flat, params[6]), params[7])",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(h_pool2_flat, params[6]), params[7])",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'local4bn{}'.format(bn_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_230": {
                "variable": {
                    "value": "softmax_linear",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(local4, params[8])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "params[9]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "conv2d_244": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images + adv_noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "filters": {
                    "value": "params[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_245": {
                "variable": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(images, params[0], [1, 2, 2, 1], padding='SAME') + perturbH",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images + adv_noise, params[0], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "params[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_246": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_247": {
                "variable": {
                    "value": "norm1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(pre_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(pre_activation)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv1bn{}'.format(bn_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_253": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv1, scale=True, training=training, reuse=tf.AUTO_REUSE, name='conv1bn{}'.format(bn_index))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1, scale=True, training=False, reuse=tf.AUTO_REUSE, name='conv1bn{}'.format(bn_index))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "params[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_254": {
                "variable": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(images, params[0], [1, 2, 2, 1], padding='SAME') + perturbH",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images + adv_noise, params[0], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "params[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_255": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_257": {
                "variable": {
                    "value": "current",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(conv2, norm1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_normalization_258": {
                "variable": {
                    "value": "norm2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "current",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((conv2, norm1), axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat((conv2, norm1), axis=3)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv2bn{}'.format(bn_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_264": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(current, scale=True, training=training, reuse=tf.AUTO_REUSE, name='conv2bn{}'.format(bn_index))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(current, scale=True, training=False, reuse=tf.AUTO_REUSE, name='conv2bn{}'.format(bn_index))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "params[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_265": {
                "variable": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(images, params[0], [1, 2, 2, 1], padding='SAME') + perturbH",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images + adv_noise, params[0], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "params[5]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_266": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_268": {
                "variable": {
                    "value": "norm3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(pre_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(pre_activation)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv3bn{}'.format(bn_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_275": {
                "variable": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "avg_pool(norm3, 2)",
                            "Call"
                        ],
                        [
                            "avg_pool(norm3, 2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, int(image_size / 4) ** 2 * 256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_276": {
                "variable": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(h_pool2_flat, params[6])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "params[7]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "batch_normalization_277": {
                "variable": {
                    "value": "BN_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(h_pool2_flat, params[6]), params[7])",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(h_pool2_flat, params[6]), params[7])",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'local4bn{}'.format(bn_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_284": {
                "variable": {
                    "value": "softmax_linear",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(local4, params[8])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "params[9]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_290": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_inference(x, params, scopes, image_size, adv_noise, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_299": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_326": {
                "variable": {
                    "value": "w_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "kernel1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('kernel1', shape=[4, 4, 3, 128], stddev=np.sqrt(2.0 / (5 * 5 * 256)) / math.ceil(5 / 2), wd=0.0, collect=[AECODER_VARIABLES])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_327": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "w_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(kernel1, [-1, shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "svd_328": {
                "variable": {
                    "value": "sing_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(w_t)",
                            "Call"
                        ]
                    ]
                },
                "compute_uv": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_329": {
                "variable": {
                    "value": "sensitivity",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sing_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.svd(w, compute_uv=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_362": {
                "variable": {
                    "value": "FM_h",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 14, 14, 128]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_363": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_364": {
                "variable": {
                    "value": "adv_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_366": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_368": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_375": {
                "variable": {
                    "value": "softmax_y_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "y_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inference(x_image, FM_h, params, scopes, training=True, bn_index=bi)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_378": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_380": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(log_device_placement=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_403": {
                "variable": {
                    "value": "mu_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_434": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.all_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reset_default_graph_524": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_642": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_97": {
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "shape + [num_channels // num_units]",
                            "BinOp"
                        ],
                        [
                            "kernel1.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_127": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_190": {
                "name_or_scope": {
                    "value": "scope_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[0]",
                            "Subscript"
                        ],
                        [
                            "scopes[0]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_199": {
                "name_or_scope": {
                    "value": "scope_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[1]",
                            "Subscript"
                        ],
                        [
                            "scopes[1]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_210": {
                "name_or_scope": {
                    "value": "scope_conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[2]",
                            "Subscript"
                        ],
                        [
                            "scopes[2]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_220": {
                "name_or_scope": {
                    "value": "scope_local4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[3]",
                            "Subscript"
                        ],
                        [
                            "scopes[3]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_229": {
                "name_or_scope": {
                    "value": "scope_local5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[4]",
                            "Subscript"
                        ],
                        [
                            "scopes[4]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_243": {
                "name_or_scope": {
                    "value": "scope_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[0]",
                            "Subscript"
                        ],
                        [
                            "scopes[0]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_252": {
                "name_or_scope": {
                    "value": "scope_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[1]",
                            "Subscript"
                        ],
                        [
                            "scopes[1]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_263": {
                "name_or_scope": {
                    "value": "scope_conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[2]",
                            "Subscript"
                        ],
                        [
                            "scopes[2]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_274": {
                "name_or_scope": {
                    "value": "scope_local4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[3]",
                            "Subscript"
                        ],
                        [
                            "scopes[3]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_283": {
                "name_or_scope": {
                    "value": "scope_local5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[4]",
                            "Subscript"
                        ],
                        [
                            "scopes[4]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "Graph_298": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_102": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "l2_loss_126": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_on_cpu(name, shape, initializer=tf.contrib.layers.xavier_initializer_conv2d())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name, shape, initializer=initializer, dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_191": {
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "params[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_222": {
                "a": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pool3, [-1, int(image_size / 4) ** 2 * 256])",
                            "Call"
                        ],
                        [
                            "tf.reshape(pool3, [-1, int(image_size / 4) ** 2 * 256])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "params[6]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_230": {
                "a": {
                    "value": "local4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(local4, -1, 1)",
                            "Call"
                        ],
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(local4, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "params[8]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_276": {
                "a": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pool3, [-1, int(image_size / 4) ** 2 * 256])",
                            "Call"
                        ],
                        [
                            "tf.reshape(pool3, [-1, int(image_size / 4) ** 2 * 256])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "params[6]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_284": {
                "a": {
                    "value": "local4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(local4, -1, 1)",
                            "Call"
                        ],
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(local4, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "params[8]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_303": {
                "name_or_scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_305": {
                "name_or_scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_307": {
                "name_or_scope": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_309": {
                "name_or_scope": {
                    "value": "local4",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_311": {
                "name_or_scope": {
                    "value": "local5",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_317": {
                "name_or_scope": {
                    "value": "scope_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[0]",
                            "Subscript"
                        ],
                        [
                            "scopes[0]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_332": {
                "name_or_scope": {
                    "value": "scope_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[1]",
                            "Subscript"
                        ],
                        [
                            "scopes[1]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_339": {
                "name_or_scope": {
                    "value": "scope_conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[2]",
                            "Subscript"
                        ],
                        [
                            "scopes[2]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_346": {
                "name_or_scope": {
                    "value": "scope_local4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[3]",
                            "Subscript"
                        ],
                        [
                            "scopes[3]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_351": {
                "name_or_scope": {
                    "value": "scope_local5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[4]",
                            "Subscript"
                        ],
                        [
                            "scopes[4]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "constant_initializer_322": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_337": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_344": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_349": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_355": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "all_variables_434": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/StoBatchCIFAR10/StoBatch_cifar10.py": {
        "tensorflow": {
            "DEFINE_string_63": {
                "name": {
                    "value": "checkpoint_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "os.getcwd() + dirCheckpoint",
                    "type": "BinOp",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where to read model checkpoints.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_max_120": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(inputs, shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_124": {
                "variable": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "_x.get_shape()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_127": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_165": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "shape + [num_channels // num_units]",
                            "BinOp"
                        ],
                        [
                            "kernel1.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "clip_by_value_283": {
                "variable": {
                    "value": "local4",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "local4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(local4, -1, 1)",
                            "Call"
                        ],
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(local4, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_337": {
                "variable": {
                    "value": "local4",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "local4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(local4, -1, 1)",
                            "Call"
                        ],
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(local4, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_to_collections_147": {
                "names": {
                    "value": "collect",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_on_cpu(name, shape, initializer=tf.contrib.layers.xavier_initializer_conv2d())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name, shape, initializer=initializer, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(AECODER_VARIABLES)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(CONV_VARIABLES)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_149": {
                "variable": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_loss(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collections_166": {
                "names": {
                    "value": "collect",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_on_cpu(name, shape, initializer=tf.contrib.layers.xavier_initializer_conv2d())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name, shape, initializer=initializer, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(AECODER_VARIABLES)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(CONV_VARIABLES)",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool_171": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, s, s, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, s, s, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_248": {
                "variable": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(images, params[0], [1, 2, 2, 1], padding='SAME') + perturbH",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images + adv_noise, params[0], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "params[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_249": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_250": {
                "variable": {
                    "value": "norm1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(pre_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(pre_activation)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv1bn{}'.format(bn_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_256": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv1, scale=True, training=training, reuse=tf.AUTO_REUSE, name='conv1bn{}'.format(bn_index))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1, scale=True, training=False, reuse=tf.AUTO_REUSE, name='conv1bn{}'.format(bn_index))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "params[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_257": {
                "variable": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(images, params[0], [1, 2, 2, 1], padding='SAME') + perturbH",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images + adv_noise, params[0], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "params[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_258": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_260": {
                "variable": {
                    "value": "current",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(conv2, norm1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_normalization_261": {
                "variable": {
                    "value": "norm2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "current",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((conv2, norm1), axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat((conv2, norm1), axis=3)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv2bn{}'.format(bn_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_267": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(current, scale=True, training=training, reuse=tf.AUTO_REUSE, name='conv2bn{}'.format(bn_index))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(current, scale=True, training=False, reuse=tf.AUTO_REUSE, name='conv2bn{}'.format(bn_index))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "params[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_268": {
                "variable": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(images, params[0], [1, 2, 2, 1], padding='SAME') + perturbH",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images + adv_noise, params[0], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "params[5]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_269": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_270": {
                "variable": {
                    "value": "norm3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(pre_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(pre_activation)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv3bn{}'.format(bn_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_277": {
                "variable": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "avg_pool(norm3, 2)",
                            "Call"
                        ],
                        [
                            "avg_pool(norm3, 2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, int(image_size / 4) ** 2 * 256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_278": {
                "variable": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(h_pool2_flat, params[6])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "params[7]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "batch_normalization_279": {
                "variable": {
                    "value": "BN_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(h_pool2_flat, params[6]), params[7])",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(h_pool2_flat, params[6]), params[7])",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'local4bn{}'.format(bn_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_286": {
                "variable": {
                    "value": "softmax_linear",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(local4, params[8])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "params[9]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "conv2d_300": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images + adv_noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "filters": {
                    "value": "params[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_301": {
                "variable": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(images, params[0], [1, 2, 2, 1], padding='SAME') + perturbH",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images + adv_noise, params[0], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "params[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_302": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_303": {
                "variable": {
                    "value": "norm1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(pre_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(pre_activation)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv1bn{}'.format(bn_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_309": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv1, scale=True, training=training, reuse=tf.AUTO_REUSE, name='conv1bn{}'.format(bn_index))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1, scale=True, training=False, reuse=tf.AUTO_REUSE, name='conv1bn{}'.format(bn_index))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "params[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_310": {
                "variable": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(images, params[0], [1, 2, 2, 1], padding='SAME') + perturbH",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images + adv_noise, params[0], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "params[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_311": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_313": {
                "variable": {
                    "value": "current",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(conv2, norm1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_normalization_314": {
                "variable": {
                    "value": "norm2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "current",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((conv2, norm1), axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat((conv2, norm1), axis=3)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv2bn{}'.format(bn_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_320": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(current, scale=True, training=training, reuse=tf.AUTO_REUSE, name='conv2bn{}'.format(bn_index))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(current, scale=True, training=False, reuse=tf.AUTO_REUSE, name='conv2bn{}'.format(bn_index))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "params[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_321": {
                "variable": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(images, params[0], [1, 2, 2, 1], padding='SAME') + perturbH",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images + adv_noise, params[0], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "params[5]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_322": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_324": {
                "variable": {
                    "value": "norm3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(pre_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(pre_activation)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv3bn{}'.format(bn_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_331": {
                "variable": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "avg_pool(norm3, 2)",
                            "Call"
                        ],
                        [
                            "avg_pool(norm3, 2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, int(image_size / 4) ** 2 * 256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_332": {
                "variable": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(h_pool2_flat, params[6])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "params[7]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "batch_normalization_333": {
                "variable": {
                    "value": "BN_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(h_pool2_flat, params[6]), params[7])",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(h_pool2_flat, params[6]), params[7])",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'local4bn{}'.format(bn_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_340": {
                "variable": {
                    "value": "softmax_linear",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(local4, params[8])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "params[9]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_346": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_inference(x, params, scopes, image_size, adv_noise, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_355": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_382": {
                "variable": {
                    "value": "w_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "kernel1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('kernel1', shape=[4, 4, 3, 128], stddev=np.sqrt(2.0 / (5 * 5 * 256)) / math.ceil(5 / 2), wd=0.0, collect=[AECODER_VARIABLES])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_383": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "w_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(kernel1, [-1, shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "svd_384": {
                "variable": {
                    "value": "sing_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(w_t)",
                            "Call"
                        ]
                    ]
                },
                "compute_uv": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_385": {
                "variable": {
                    "value": "sensitivity",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sing_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.svd(w, compute_uv=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_418": {
                "variable": {
                    "value": "FM_h",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 14, 14, 128]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_419": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_420": {
                "variable": {
                    "value": "adv_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_422": {
                "variable": {
                    "value": "x_sb",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_423": {
                "variable": {
                    "value": "x_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x_sb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, image_size, image_size, 3])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "N_GPUS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(_GPUS.split(','))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_424": {
                "variable": {
                    "value": "adv_x_sb",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_425": {
                "variable": {
                    "value": "adv_x_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "adv_x_sb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, image_size, image_size, 3])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "N_GPUS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(_GPUS.split(','))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_427": {
                "variable": {
                    "value": "x_test",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_429": {
                "variable": {
                    "value": "y_sb",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_430": {
                "variable": {
                    "value": "y_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "y_sb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 10])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "N_GPUS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(_GPUS.split(','))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_431": {
                "variable": {
                    "value": "adv_y_sb",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_434": {
                "variable": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_437": {
                "variable": {
                    "value": "_split_adv_y_sb",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "adv_y_sb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 10])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "N_AUX_GPUS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(_AUX_GPUS.split(','))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdamOptimizer_446": {
                "variable": {
                    "value": "pretrain_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_447": {
                "variable": {
                    "value": "train_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_559": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack(all_train_loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_566": {
                "variable": {
                    "value": "_update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_575": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_577": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(log_device_placement=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_614": {
                "variable": {
                    "value": "x_attacks",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x_sb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, image_size, image_size, 3])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "N_AUX_GPUS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(_AUX_GPUS.split(','))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_616": {
                "variable": {
                    "value": "x_test_split",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, image_size, image_size, 3])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "aux_dup_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "N_GPUS",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_626": {
                "variable": {
                    "value": "mu_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_677": {
                "variable": {
                    "value": "adv_super_batch_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "adv_concat_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_685": {
                "variable": {
                    "value": "pretrain_var_list",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "AECODER_VARIABLES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'AECODER_VARIABLES'",
                            "Constant"
                        ]
                    ]
                }
            },
            "get_collection_690": {
                "variable": {
                    "value": "train_var_list",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "CONV_VARIABLES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'CONV_VARIABLES'",
                            "Constant"
                        ]
                    ]
                }
            },
            "global_variables_698": {
                "variable": {
                    "value": "vl",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_713": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.all_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "initialize_all_variables_716": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_checkpoint_state_721": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.checkpoint_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_933": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_120": {
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "shape + [num_channels // num_units]",
                            "BinOp"
                        ],
                        [
                            "kernel1.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_150": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_246": {
                "name_or_scope": {
                    "value": "scope_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[0]",
                            "Subscript"
                        ],
                        [
                            "scopes[0]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_255": {
                "name_or_scope": {
                    "value": "scope_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[1]",
                            "Subscript"
                        ],
                        [
                            "scopes[1]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_266": {
                "name_or_scope": {
                    "value": "scope_conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[2]",
                            "Subscript"
                        ],
                        [
                            "scopes[2]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_276": {
                "name_or_scope": {
                    "value": "scope_local4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[3]",
                            "Subscript"
                        ],
                        [
                            "scopes[3]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_285": {
                "name_or_scope": {
                    "value": "scope_local5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[4]",
                            "Subscript"
                        ],
                        [
                            "scopes[4]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_299": {
                "name_or_scope": {
                    "value": "scope_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[0]",
                            "Subscript"
                        ],
                        [
                            "scopes[0]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_308": {
                "name_or_scope": {
                    "value": "scope_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[1]",
                            "Subscript"
                        ],
                        [
                            "scopes[1]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_319": {
                "name_or_scope": {
                    "value": "scope_conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[2]",
                            "Subscript"
                        ],
                        [
                            "scopes[2]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_330": {
                "name_or_scope": {
                    "value": "scope_local4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[3]",
                            "Subscript"
                        ],
                        [
                            "scopes[3]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_339": {
                "name_or_scope": {
                    "value": "scope_local5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[4]",
                            "Subscript"
                        ],
                        [
                            "scopes[4]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "Graph_354": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_354": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_508": {
                "key": {
                    "value": "AECODER_VARIABLES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'AECODER_VARIABLES'",
                            "Constant"
                        ]
                    ]
                }
            },
            "concat_518": {
                "variable": {
                    "value": "concat_pretrain_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "expand_pretrain_grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.expand_dims(g, 0) for g in all_pretrain_grads[var_name]]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_519": {
                "variable": {
                    "value": "reduce_pretrain_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "concat_pretrain_grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(expand_pretrain_grads, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_534": {
                "key": {
                    "value": "CONV_VARIABLES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'CONV_VARIABLES'",
                            "Constant"
                        ]
                    ]
                }
            },
            "concat_544": {
                "variable": {
                    "value": "concat_train_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "expand_train_grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.expand_dims(g, 0) for g in all_train_grads[var_name]]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_545": {
                "variable": {
                    "value": "reduce_train_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "concat_train_grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(expand_train_grads, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_606": {
                "variable": {
                    "value": "test_softmax_y_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "test_y_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inference(test_x_image, FM_h, params, scopes, training=True, bn_index=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_125": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "l2_loss_149": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_on_cpu(name, shape, initializer=tf.contrib.layers.xavier_initializer_conv2d())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name, shape, initializer=initializer, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(AECODER_VARIABLES)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(CONV_VARIABLES)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_247": {
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "params[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_278": {
                "a": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pool3, [-1, int(image_size / 4) ** 2 * 256])",
                            "Call"
                        ],
                        [
                            "tf.reshape(pool3, [-1, int(image_size / 4) ** 2 * 256])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "params[6]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_286": {
                "a": {
                    "value": "local4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(local4, -1, 1)",
                            "Call"
                        ],
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(local4, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "params[8]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_332": {
                "a": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pool3, [-1, int(image_size / 4) ** 2 * 256])",
                            "Call"
                        ],
                        [
                            "tf.reshape(pool3, [-1, int(image_size / 4) ** 2 * 256])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "params[6]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_340": {
                "a": {
                    "value": "local4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(local4, -1, 1)",
                            "Call"
                        ],
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(local4, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "params[8]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_359": {
                "name_or_scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_361": {
                "name_or_scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_363": {
                "name_or_scope": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_365": {
                "name_or_scope": {
                    "value": "local4",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_367": {
                "name_or_scope": {
                    "value": "local5",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_373": {
                "name_or_scope": {
                    "value": "scope_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[0]",
                            "Subscript"
                        ],
                        [
                            "scopes[0]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_388": {
                "name_or_scope": {
                    "value": "scope_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[1]",
                            "Subscript"
                        ],
                        [
                            "scopes[1]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_395": {
                "name_or_scope": {
                    "value": "scope_conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[2]",
                            "Subscript"
                        ],
                        [
                            "scopes[2]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_402": {
                "name_or_scope": {
                    "value": "scope_local4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[3]",
                            "Subscript"
                        ],
                        [
                            "scopes[3]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_407": {
                "name_or_scope": {
                    "value": "scope_local5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[4]",
                            "Subscript"
                        ],
                        [
                            "scopes[4]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "get_collection_488": {
                "variable": {
                    "value": "pretrain_var_list",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "AECODER_VARIABLES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'AECODER_VARIABLES'",
                            "Constant"
                        ]
                    ]
                }
            },
            "get_collection_489": {
                "variable": {
                    "value": "train_var_list",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "CONV_VARIABLES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'CONV_VARIABLES'",
                            "Constant"
                        ]
                    ]
                }
            },
            "stack_559": {
                "values": {
                    "value": "all_train_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "control_dependencies_570": {
                "control_inputs": {
                    "value": "_update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_602": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_378": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_393": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_400": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_405": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_411": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "concat_440": {
                "values": {
                    "value": "[_split_adv_y_sb[i + N_GPUS * atk_index] for atk_index in range(len(attacks))]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_453": {
                "device_name": {
                    "value": "'/gpu:{}'.format(gpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_517": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_543": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_674": {
                "values": {
                    "value": "[attack_tensor_training_dict[atk][i] for atk in attacks]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "all_variables_713": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_458": {
                "name_or_scope": {
                    "value": "scope_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[0]",
                            "Subscript"
                        ],
                        [
                            "scopes[0]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "get_default_graph_704": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_637": {
                "device_name": {
                    "value": "'/gpu:{}'.format(AUX_GPU_IDX[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_648": {
                "device_name": {
                    "value": "'/gpu:{}'.format(AUX_GPU_IDX[i + 1 * aux_dup_count])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_461": {
                "input": {
                    "value": "adv_x_list[bi]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_466": {
                "input": {
                    "value": "x_list[bi]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_660": {
                "device_name": {
                    "value": "'/gpu:{}'.format(AUX_GPU_IDX[i + 2 * aux_dup_count])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/StoBatchCIFAR10/StoBatch_cifar10_testing.py": {
        "tensorflow": {
            "reduce_max_97": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(inputs, shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_101": {
                "variable": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "_x.get_shape()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_104": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_142": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "shape + [num_channels // num_units]",
                            "BinOp"
                        ],
                        [
                            "kernel1.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "clip_by_value_227": {
                "variable": {
                    "value": "local4",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "local4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(local4, -1, 1)",
                            "Call"
                        ],
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(local4, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_281": {
                "variable": {
                    "value": "local4",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "local4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(local4, -1, 1)",
                            "Call"
                        ],
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(local4, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_to_collections_124": {
                "names": {
                    "value": "collect",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_on_cpu(name, shape, initializer=tf.contrib.layers.xavier_initializer_conv2d())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name, shape, initializer=initializer, dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_126": {
                "variable": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_loss(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collections_143": {
                "names": {
                    "value": "collect",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_on_cpu(name, shape, initializer=tf.contrib.layers.xavier_initializer_conv2d())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name, shape, initializer=initializer, dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool_148": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, s, s, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, s, s, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_192": {
                "variable": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(images, params[0], [1, 2, 2, 1], padding='SAME') + perturbH",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images + adv_noise, params[0], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "params[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_193": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_194": {
                "variable": {
                    "value": "norm1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(pre_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(pre_activation)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv1bn{}'.format(bn_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_200": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv1, scale=True, training=training, reuse=tf.AUTO_REUSE, name='conv1bn{}'.format(bn_index))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1, scale=True, training=False, reuse=tf.AUTO_REUSE, name='conv1bn{}'.format(bn_index))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "params[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_201": {
                "variable": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(images, params[0], [1, 2, 2, 1], padding='SAME') + perturbH",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images + adv_noise, params[0], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "params[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_202": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_204": {
                "variable": {
                    "value": "current",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(conv2, norm1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_normalization_205": {
                "variable": {
                    "value": "norm2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "current",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((conv2, norm1), axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat((conv2, norm1), axis=3)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv2bn{}'.format(bn_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_211": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(current, scale=True, training=training, reuse=tf.AUTO_REUSE, name='conv2bn{}'.format(bn_index))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(current, scale=True, training=False, reuse=tf.AUTO_REUSE, name='conv2bn{}'.format(bn_index))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "params[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_212": {
                "variable": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(images, params[0], [1, 2, 2, 1], padding='SAME') + perturbH",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images + adv_noise, params[0], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "params[5]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_213": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_214": {
                "variable": {
                    "value": "norm3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(pre_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(pre_activation)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv3bn{}'.format(bn_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_221": {
                "variable": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "avg_pool(norm3, 2)",
                            "Call"
                        ],
                        [
                            "avg_pool(norm3, 2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, int(image_size / 4) ** 2 * 256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_222": {
                "variable": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(h_pool2_flat, params[6])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "params[7]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "batch_normalization_223": {
                "variable": {
                    "value": "BN_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(h_pool2_flat, params[6]), params[7])",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(h_pool2_flat, params[6]), params[7])",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'local4bn{}'.format(bn_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_230": {
                "variable": {
                    "value": "softmax_linear",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(local4, params[8])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "params[9]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "conv2d_244": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images + adv_noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "filters": {
                    "value": "params[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_245": {
                "variable": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(images, params[0], [1, 2, 2, 1], padding='SAME') + perturbH",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images + adv_noise, params[0], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "params[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_246": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_247": {
                "variable": {
                    "value": "norm1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(pre_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(pre_activation)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv1bn{}'.format(bn_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_253": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv1, scale=True, training=training, reuse=tf.AUTO_REUSE, name='conv1bn{}'.format(bn_index))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1, scale=True, training=False, reuse=tf.AUTO_REUSE, name='conv1bn{}'.format(bn_index))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "params[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_254": {
                "variable": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(images, params[0], [1, 2, 2, 1], padding='SAME') + perturbH",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images + adv_noise, params[0], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "params[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_255": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_257": {
                "variable": {
                    "value": "current",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(conv2, norm1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_normalization_258": {
                "variable": {
                    "value": "norm2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "current",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((conv2, norm1), axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat((conv2, norm1), axis=3)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv2bn{}'.format(bn_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_264": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(current, scale=True, training=training, reuse=tf.AUTO_REUSE, name='conv2bn{}'.format(bn_index))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(current, scale=True, training=False, reuse=tf.AUTO_REUSE, name='conv2bn{}'.format(bn_index))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "params[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_265": {
                "variable": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(images, params[0], [1, 2, 2, 1], padding='SAME') + perturbH",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images + adv_noise, params[0], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, params[2], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, params[4], [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "params[5]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_266": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, params[5])",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_268": {
                "variable": {
                    "value": "norm3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(pre_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(pre_activation)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv3bn{}'.format(bn_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_275": {
                "variable": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "avg_pool(norm3, 2)",
                            "Call"
                        ],
                        [
                            "avg_pool(norm3, 2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, int(image_size / 4) ** 2 * 256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_276": {
                "variable": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(h_pool2_flat, params[6])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "params[7]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "batch_normalization_277": {
                "variable": {
                    "value": "BN_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(h_pool2_flat, params[6]), params[7])",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(h_pool2_flat, params[6]), params[7])",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'local4bn{}'.format(bn_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_284": {
                "variable": {
                    "value": "softmax_linear",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(local4, params[8])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "params[9]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_290": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_inference(x, params, scopes, image_size, adv_noise, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_299": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_326": {
                "variable": {
                    "value": "w_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "kernel1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('kernel1', shape=[4, 4, 3, 128], stddev=np.sqrt(2.0 / (5 * 5 * 256)) / math.ceil(5 / 2), wd=0.0, collect=[AECODER_VARIABLES])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_327": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "w_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(kernel1, [-1, shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "svd_328": {
                "variable": {
                    "value": "sing_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(w_t)",
                            "Call"
                        ]
                    ]
                },
                "compute_uv": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_329": {
                "variable": {
                    "value": "sensitivity",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sing_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.svd(w, compute_uv=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_362": {
                "variable": {
                    "value": "FM_h",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 14, 14, 128]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_363": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_364": {
                "variable": {
                    "value": "adv_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_366": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_368": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_375": {
                "variable": {
                    "value": "softmax_y_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "y_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inference(x_image, FM_h, params, scopes, training=True, bn_index=bi)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_378": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_380": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(log_device_placement=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_403": {
                "variable": {
                    "value": "mu_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_434": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.all_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reset_default_graph_524": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_642": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_97": {
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "shape + [num_channels // num_units]",
                            "BinOp"
                        ],
                        [
                            "kernel1.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_127": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_190": {
                "name_or_scope": {
                    "value": "scope_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[0]",
                            "Subscript"
                        ],
                        [
                            "scopes[0]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_199": {
                "name_or_scope": {
                    "value": "scope_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[1]",
                            "Subscript"
                        ],
                        [
                            "scopes[1]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_210": {
                "name_or_scope": {
                    "value": "scope_conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[2]",
                            "Subscript"
                        ],
                        [
                            "scopes[2]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_220": {
                "name_or_scope": {
                    "value": "scope_local4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[3]",
                            "Subscript"
                        ],
                        [
                            "scopes[3]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_229": {
                "name_or_scope": {
                    "value": "scope_local5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[4]",
                            "Subscript"
                        ],
                        [
                            "scopes[4]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_243": {
                "name_or_scope": {
                    "value": "scope_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[0]",
                            "Subscript"
                        ],
                        [
                            "scopes[0]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_252": {
                "name_or_scope": {
                    "value": "scope_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[1]",
                            "Subscript"
                        ],
                        [
                            "scopes[1]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_263": {
                "name_or_scope": {
                    "value": "scope_conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[2]",
                            "Subscript"
                        ],
                        [
                            "scopes[2]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_274": {
                "name_or_scope": {
                    "value": "scope_local4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[3]",
                            "Subscript"
                        ],
                        [
                            "scopes[3]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_283": {
                "name_or_scope": {
                    "value": "scope_local5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[4]",
                            "Subscript"
                        ],
                        [
                            "scopes[4]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "Graph_298": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_102": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "l2_loss_126": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_on_cpu(name, shape, initializer=tf.contrib.layers.xavier_initializer_conv2d())",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name, shape, initializer=initializer, dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_191": {
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "params[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_222": {
                "a": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pool3, [-1, int(image_size / 4) ** 2 * 256])",
                            "Call"
                        ],
                        [
                            "tf.reshape(pool3, [-1, int(image_size / 4) ** 2 * 256])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "params[6]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_230": {
                "a": {
                    "value": "local4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(local4, -1, 1)",
                            "Call"
                        ],
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(local4, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "params[8]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_276": {
                "a": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pool3, [-1, int(image_size / 4) ** 2 * 256])",
                            "Call"
                        ],
                        [
                            "tf.reshape(pool3, [-1, int(image_size / 4) ** 2 * 256])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "params[6]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_284": {
                "a": {
                    "value": "local4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(local4, -1, 1)",
                            "Call"
                        ],
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(local4, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "params[8]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_303": {
                "name_or_scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_305": {
                "name_or_scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_307": {
                "name_or_scope": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_309": {
                "name_or_scope": {
                    "value": "local4",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_311": {
                "name_or_scope": {
                    "value": "local5",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_317": {
                "name_or_scope": {
                    "value": "scope_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[0]",
                            "Subscript"
                        ],
                        [
                            "scopes[0]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_332": {
                "name_or_scope": {
                    "value": "scope_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[1]",
                            "Subscript"
                        ],
                        [
                            "scopes[1]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_339": {
                "name_or_scope": {
                    "value": "scope_conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[2]",
                            "Subscript"
                        ],
                        [
                            "scopes[2]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_346": {
                "name_or_scope": {
                    "value": "scope_local4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[3]",
                            "Subscript"
                        ],
                        [
                            "scopes[3]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_351": {
                "name_or_scope": {
                    "value": "scope_local5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes[4]",
                            "Subscript"
                        ],
                        [
                            "scopes[4]",
                            "Subscript"
                        ],
                        [
                            "scope",
                            "Name"
                        ]
                    ]
                }
            },
            "constant_initializer_322": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_337": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_344": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_349": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_355": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "all_variables_434": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/StoBatchCIFAR10/accountant.py": {
        "tensorflow": {
            "Variable_55": {
                "variable": {
                    "value": "self._eps_squared_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([1])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "eps_squared_sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_57": {
                "variable": {
                    "value": "self._delta_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([1])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "delta_sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_346": {
                "variable": {
                    "value": "binomial",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "self._binomial_table",
                    "type": "Attribute",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[t + 1, t + 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_352": {
                "variable": {
                    "value": "exponents",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[j * (j + 1.0 - 2.0 * s) / (2.0 * sigma * sigma) for j in range(t + 1)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_355": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "binomial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(self._binomial_table, [0, 0], [t + 1, t + 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "signs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy.zeros((t + 1, t + 1), dtype=numpy.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_360": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(binomial, signs)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.exp(exponents)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_363": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(x, tf.exp(exponents))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_380": {
                "variable": {
                    "value": "binomial_table",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "self._binomial_table",
                    "type": "Attribute",
                    "possible_values": []
                },
                "begin": {
                    "value": "[moment_order, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, moment_order + 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_383": {
                "variable": {
                    "value": "qs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.constant([i * 1.0 for i in range(moment_order + 1)], dtype=tf.float64) * tf.cast(tf.log(q), dtype=tf.float64)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_387": {
                "variable": {
                    "value": "term0",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "binomial_table * qs * moments0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_389": {
                "variable": {
                    "value": "term1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "binomial_table * qs * moments1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_88": {
                "variable": {
                    "value": "amortize_eps",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.log(1.0 + amortize_ratio * (tf.exp(eps) - 1.0))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_90": {
                "variable": {
                    "value": "amortize_delta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "amortize_ratio * delta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "group_226": {
                "*inputs": {
                    "value": "*moments_accum_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "squeeze_390": {
                "input": {
                    "value": "tf.log(tf.cast(q * term0 + (1.0 - q) * term1, tf.float64))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_op_398": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_55": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_57": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_79": {
                "control_inputs": {
                    "value": "[tf.Assert(tf.greater(delta, 0), ['delta needs to be greater than 0'])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "group_91": {
                "*inputs": {
                    "value": "*[tf.assign_add(self._eps_squared_sum, tf.square(amortize_eps)), tf.assign_add(self._delta_sum, amortize_delta)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Variable_181": {
                "initial_value": {
                    "value": "numpy.float64(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "'log_moments-%d' % moment_order",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_360": {
                "x": {
                    "value": "exponents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([j * (j + 1.0 - 2.0 * s) / (2.0 * sigma * sigma) for j in range(t + 1)], dtype=tf.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_390": {
                "x": {
                    "value": "tf.cast(q * term0 + (1.0 - q) * term1, tf.float64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_88": {
                "x": {
                    "value": "1.0 + amortize_ratio * (tf.exp(eps) - 1.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_220": {
                "x": {
                    "value": "num_examples",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_add_225": {
                "ref": {
                    "value": "self._log_moments[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "moment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._compute_log_moment(sigma, q, self._moment_orders[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_383": {
                "value": {
                    "value": "[i * 1.0 for i in range(moment_order + 1)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_384": {
                "x": {
                    "value": "tf.log(q)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_390": {
                "x": {
                    "value": "q * term0 + (1.0 - q) * term1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Assert_80": {
                "condition": {
                    "value": "tf.greater(delta, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['delta needs to be greater than 0']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_82": {
                "x": {
                    "value": "num_examples",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_385": {
                "x": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(num_examples, tf.float64) * 1.0 / self._total_examples",
                            "BinOp"
                        ]
                    ]
                }
            },
            "greater_80": {
                "x": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_deltas",
                            "Name"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "assign_add_91": {
                "ref": {
                    "value": "self._eps_squared_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.square(amortize_eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_add_93": {
                "ref": {
                    "value": "self._delta_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "amortize_delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(amortize_ratio * delta, [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "square_92": {
                "x": {
                    "value": "amortize_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.log(1.0 + amortize_ratio * (tf.exp(eps) - 1.0)), [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_89": {
                "x": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_eps",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/StoBatchCIFAR10/cifar10.py": {
        "tensorflow": {
            "cast_225": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.argmax(tf.cast(labels, tf.int64), 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_226": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.argmax(tf.cast(labels, tf.int64), 1)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "cross_entropy_per_example",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_228": {
                "variable": {
                    "value": "cross_entropy_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=logits, name='cross_entropy_per_example')",
                            "Call"
                        ],
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=logits, name='cross_entropy_per_example')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "cross_entropy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_248": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.argmax(tf.cast(labels, tf.int64), 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_249": {
                "variable": {
                    "value": "b_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "b_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(b_labels, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_252": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "adv_logits.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_254": {
                "variable": {
                    "value": "relu_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adv_logits >= zeros",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "adv_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.zeros_like(adv_logits, dtype=adv_logits.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_255": {
                "variable": {
                    "value": "neg_abs_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adv_logits >= zeros",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "-adv_logits",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "adv_logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_256": {
                "variable": {
                    "value": "Taylor_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "relu_logits - adv_logits * b_labels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "math.log(2.0) + 0.5 * neg_abs_logits + 1.0 / 8.0 * neg_abs_logits ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_259": {
                "variable": {
                    "value": "zeros2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "logits.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_261": {
                "variable": {
                    "value": "relu_logits_benign",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits >= zeros2",
                            "Compare"
                        ],
                        [
                            "logits >= zeros2",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "zeros2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.zeros_like(logits, dtype=logits.dtype)",
                            "Call"
                        ],
                        [
                            "array_ops.zeros_like(logits, dtype=logits.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_262": {
                "variable": {
                    "value": "neg_abs_logits_benign",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits >= zeros2",
                            "Compare"
                        ],
                        [
                            "logits >= zeros2",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "-logits",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_263": {
                "variable": {
                    "value": "Taylor_benign",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "relu_logits_benign - logits * labels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "math.log(2.0) + 0.5 * neg_abs_logits_benign + 1.0 / 8.0 * neg_abs_logits_benign ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_265": {
                "variable": {
                    "value": "zeros1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "perturbW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.where(cond1, perturbW, -perturbW)",
                            "Call"
                        ],
                        [
                            "array_ops.where(cond1, perturbW, -perturbW)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "perturbW.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_267": {
                "variable": {
                    "value": "perturbW",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "perturbW >= zeros1",
                            "Compare"
                        ],
                        [
                            "perturbW >= zeros1",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "perturbW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.where(cond1, perturbW, -perturbW)",
                            "Call"
                        ],
                        [
                            "array_ops.where(cond1, perturbW, -perturbW)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-perturbW",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_290": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.argmax(tf.cast(labels, tf.int64), 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_293": {
                "variable": {
                    "value": "zeros2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "logits.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_295": {
                "variable": {
                    "value": "relu_logits_benign",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits >= zeros2",
                            "Compare"
                        ],
                        [
                            "logits >= zeros2",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "zeros2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.zeros_like(logits, dtype=logits.dtype)",
                            "Call"
                        ],
                        [
                            "array_ops.zeros_like(logits, dtype=logits.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_296": {
                "variable": {
                    "value": "neg_abs_logits_benign",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits >= zeros2",
                            "Compare"
                        ],
                        [
                            "logits >= zeros2",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "-logits",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_297": {
                "variable": {
                    "value": "Taylor_benign",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "relu_logits_benign - logits * labels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "math.log(2.0) + 0.5 * neg_abs_logits_benign + 1.0 / 8.0 * neg_abs_logits_benign ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_299": {
                "variable": {
                    "value": "zeros1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "perturbW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.where(cond1, perturbW, -perturbW)",
                            "Call"
                        ],
                        [
                            "array_ops.where(cond1, perturbW, -perturbW)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "perturbW.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_301": {
                "variable": {
                    "value": "perturbW",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "perturbW >= zeros1",
                            "Compare"
                        ],
                        [
                            "perturbW >= zeros1",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "perturbW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.where(cond1, perturbW, -perturbW)",
                            "Call"
                        ],
                        [
                            "array_ops.where(cond1, perturbW, -perturbW)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-perturbW",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_322": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cast(labels, tf.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_324": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.argmax(tf.cast(labels, tf.int64), 1)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "cross_entropy_per_example",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_325": {
                "variable": {
                    "value": "cross_entropy_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=logits, name='cross_entropy_per_example')",
                            "Call"
                        ],
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=logits, name='cross_entropy_per_example')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "cross_entropy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_344": {
                "variable": {
                    "value": "loss_averages",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "avg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_345": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_388": {
                "variable": {
                    "value": "variable_averages",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "MOVING_AVERAGE_DECAY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9999",
                            "Constant"
                        ]
                    ]
                },
                "num_updates": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exponential_decay_416": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "INITIAL_LEARNING_RATE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "decay_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(num_batches_per_epoch * NUM_EPOCHS_PER_DECAY)",
                            "Call"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "LEARNING_RATE_DECAY_FACTOR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_439": {
                "variable": {
                    "value": "variable_averages",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "MOVING_AVERAGE_DECAY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9999",
                            "Constant"
                        ]
                    ]
                },
                "num_updates": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "histogram_118": {
                "name": {
                    "value": "tensor_name + '/activations'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_119": {
                "name": {
                    "value": "tensor_name + '/sparsity'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.nn.zero_fraction(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_135": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float16 if FLAGS.use_fp16 else tf.float32",
                            "IfExp"
                        ],
                        [
                            "tf.float16 if FLAGS.use_fp16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "multiply_161": {
                "variable": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_loss(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_184": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_185": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.argmax(tf.cast(labels, tf.int64), 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_208": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_209": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.argmax(tf.cast(labels, tf.int64), 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_to_collection_229": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "cross_entropy_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(cross_entropy, name='cross_entropy')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(adv_loss, name='cross_entropy') + tf.reduce_mean(perturbW, name='perturbW')",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(Taylor_benign, name='cross_entropy') + tf.reduce_mean(perturbW, name='perturbW')",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(cross_entropy, name='cross_entropy')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_233": {
                "inputs": {
                    "value": "tf.get_collection('losses')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_274": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "cross_entropy_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(cross_entropy, name='cross_entropy')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(adv_loss, name='cross_entropy') + tf.reduce_mean(perturbW, name='perturbW')",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(Taylor_benign, name='cross_entropy') + tf.reduce_mean(perturbW, name='perturbW')",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(cross_entropy, name='cross_entropy')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_276": {
                "inputs": {
                    "value": "tf.get_collection('losses')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_305": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "cross_entropy_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(cross_entropy, name='cross_entropy')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(adv_loss, name='cross_entropy') + tf.reduce_mean(perturbW, name='perturbW')",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(Taylor_benign, name='cross_entropy') + tf.reduce_mean(perturbW, name='perturbW')",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(cross_entropy, name='cross_entropy')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_307": {
                "inputs": {
                    "value": "tf.get_collection('losses')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_326": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "cross_entropy_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(cross_entropy, name='cross_entropy')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(adv_loss, name='cross_entropy') + tf.reduce_mean(perturbW, name='perturbW')",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(Taylor_benign, name='cross_entropy') + tf.reduce_mean(perturbW, name='perturbW')",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(cross_entropy, name='cross_entropy')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_330": {
                "inputs": {
                    "value": "tf.get_collection('losses')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_373": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(INITIAL_LEARNING_RATE, global_step, decay_steps, LEARNING_RATE_DECAY_FACTOR, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_380": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(INITIAL_LEARNING_RATE, global_step, decay_steps, LEARNING_RATE_DECAY_FACTOR, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_op_394": {
                "variable": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_421": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(INITIAL_LEARNING_RATE, global_step, decay_steps, LEARNING_RATE_DECAY_FACTOR, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_428": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(INITIAL_LEARNING_RATE, global_step, decay_steps, LEARNING_RATE_DECAY_FACTOR, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_norm_431": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.compute_gradients(total_loss)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_norm(grads, clip_bound)",
                            "Call"
                        ],
                        [
                            "grads + tf.random_normal(shape=tf.shape(grads), mean=0.0, stddev=sigma * sensitivity ** 2, dtype=tf.float32)",
                            "BinOp"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "clip_bound",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_op_443": {
                "variable": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zero_fraction_120": {
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_133": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_159": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float16 if FLAGS.use_fp16 else tf.float32",
                            "IfExp"
                        ],
                        [
                            "tf.float16 if FLAGS.use_fp16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "add_to_collection_162": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_233": {
                "key": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_272": {
                "input_tensor": {
                    "value": "perturbW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.where(cond1, perturbW, -perturbW)",
                            "Call"
                        ],
                        [
                            "array_ops.where(cond1, perturbW, -perturbW)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "perturbW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_276": {
                "key": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_303": {
                "input_tensor": {
                    "value": "perturbW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.where(cond1, perturbW, -perturbW)",
                            "Call"
                        ],
                        [
                            "array_ops.where(cond1, perturbW, -perturbW)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "perturbW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_307": {
                "key": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_322": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.argmax(tf.cast(labels, tf.int64), 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_330": {
                "key": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_353": {
                "name": {
                    "value": "l.op.name + ' (raw)'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "losses + [total_loss]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_354": {
                "name": {
                    "value": "l.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "loss_averages.average(l)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_379": {
                "control_inputs": {
                    "value": "[loss_averages_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_393": {
                "control_inputs": {
                    "value": "[apply_gradient_op, variables_averages_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_427": {
                "control_inputs": {
                    "value": "[loss_averages_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trainable_variables_440": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_442": {
                "control_inputs": {
                    "value": "[apply_gradient_op, variables_averages_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_loss_161": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, initializer=initializer, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu(name, shape, tf.truncated_normal_initializer(stddev=stddev, dtype=dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_433": {
                "input": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.compute_gradients(total_loss)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_norm(grads, clip_bound)",
                            "Call"
                        ],
                        [
                            "grads + tf.random_normal(shape=tf.shape(grads), mean=0.0, stddev=sigma * sensitivity ** 2, dtype=tf.float32)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/StoBatchCIFAR10/cifar10_input.py": {
        "tensorflow": {
            "FixedLengthRecordReader_70": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "record_bytes": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(value, tf.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "decode_raw_74": {
                "variable": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_77": {
                "variable": {
                    "value": "result.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.strided_slice(record_bytes, [0], [label_bytes])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_82": {
                "variable": {
                    "value": "depth_major",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.strided_slice(record_bytes, [label_bytes], [label_bytes + image_bytes])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[result.depth, result.height, result.width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_87": {
                "variable": {
                    "value": "result.uint8image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "depth_major",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.strided_slice(record_bytes, [label_bytes], [label_bytes + image_bytes]), [result.depth, result.height, result.width])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "string_input_producer_149": {
                "variable": {
                    "value": "filename_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "filenames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[os.path.join(data_dir, 'data_batch_%d.bin' % i) for i in xrange(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[os.path.join(data_dir, 'data_batch_%d.bin' % i) for i in xrange(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[os.path.join(data_dir, 'test_batch.bin')]",
                            "List"
                        ]
                    ]
                }
            },
            "cast_153": {
                "variable": {
                    "value": "reshaped_image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "read_input.uint8image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_flip_left_right_160": {
                "variable": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "reshaped_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(read_input.uint8image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(read_input.uint8image, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_brightness_166": {
                "variable": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_flip_left_right(reshaped_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "distorted_image / 127.5 - 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.random_crop(distorted_image + W_conv1Noise, [height, width, 3])",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "63",
                    "type": "int",
                    "possible_values": []
                }
            },
            "random_contrast_168": {
                "variable": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_flip_left_right(reshaped_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "distorted_image / 127.5 - 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.random_crop(distorted_image + W_conv1Noise, [height, width, 3])",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_crop_185": {
                "variable": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "distorted_image + W_conv1Noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "[height, width, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "per_image_standardization_188": {
                "variable": {
                    "value": "float_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_flip_left_right(reshaped_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "distorted_image / 127.5 - 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.random_crop(distorted_image + W_conv1Noise, [height, width, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "string_input_producer_233": {
                "variable": {
                    "value": "filename_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "filenames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[os.path.join(data_dir, 'data_batch_%d.bin' % i) for i in xrange(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[os.path.join(data_dir, 'data_batch_%d.bin' % i) for i in xrange(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[os.path.join(data_dir, 'test_batch.bin')]",
                            "List"
                        ]
                    ]
                }
            },
            "cast_237": {
                "variable": {
                    "value": "reshaped_image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "read_input.uint8image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "per_image_standardization_249": {
                "variable": {
                    "value": "float_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "resized_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_image_with_crop_or_pad(reshaped_image, height, width)",
                            "Call"
                        ],
                        [
                            "resized_image / 127.5 - 1.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shuffle_batch_112": {
                "variable": {
                    "value": "(images, label_batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "num_preprocess_threads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "capacity": {
                    "value": "min_queue_examples + 3 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "min_queue_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(NUM_EXAMPLES_PER_EPOCH_FOR_TRAIN * min_fraction_of_examples_in_queue)",
                            "Call"
                        ],
                        [
                            "int(num_examples_per_epoch * min_fraction_of_examples_in_queue)",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_119": {
                "variable": {
                    "value": "(images, label_batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "num_preprocess_threads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "capacity": {
                    "value": "min_queue_examples + 3 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "image_126": {
                "name": {
                    "value": "images",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "strided_slice_78": {
                "input_": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(value, tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[label_bytes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "strided_slice_83": {
                "input_": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(value, tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[label_bytes]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[label_bytes + image_bytes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_128": {
                "tensor": {
                    "value": "label_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Exists_145": {
                "filename": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filenames",
                            "Name"
                        ],
                        [
                            "filenames",
                            "Name"
                        ]
                    ]
                }
            },
            "Exists_229": {
                "filename": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filenames",
                            "Name"
                        ],
                        [
                            "filenames",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/StoBatchCIFAR10/cleverhans/attacks.py": {
        "tensorflow": {
            "placeholder_125": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "x_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None] + list(x_val.shape)[1:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "while_loop_472": {
                "variable": {
                    "value": "(_, eta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": []
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[tf.zeros([]), eta]",
                    "type": "List",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_608": {
                "variable": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(self.tf_dtype, shape=x_shape)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x_single, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "while_loop_667": {
                "variable": {
                    "value": "(_, adv_x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": []
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[tf.zeros([]), adv_x, momentum]",
                    "type": "List",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "py_func_1049": {
                "variable": {
                    "value": "wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "cw_wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x, labels]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_1181": {
                "variable": {
                    "value": "wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "ead_wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x, labels]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_1268": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.top_k(logits, k=self.nb_candidate)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.nb_candidate]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_1272": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "jacobian_graph(preds, x, self.nb_candidate)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "py_func_1281": {
                "variable": {
                    "value": "wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "deepfool_wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_1375": {
                "variable": {
                    "value": "wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lbfgs_wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x, self.y_target]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_1534": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_module.attack_softmax_cross_entropy(y, preds, mean=False)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ],
                        [
                            "-reduce_sum(tf.square(a_feat - g_feat), axis)",
                            "UnaryOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "FGM.generate(x + e, **fgm_params)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "adv_x + scaled_signed_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "pgd_attack(loss_fn, x, y_attack, epsilon, num_steps=num_steps, optimizer=optimizer, early_stop_loss_threshold=early_stop_loss_threshold, is_debug=is_debug)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_1547": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "FGM.generate(x + e, **fgm_params)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "adv_x + scaled_signed_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "pgd_attack(loss_fn, x, y_attack, epsilon, num_steps=num_steps, optimizer=optimizer, early_stop_loss_threshold=early_stop_loss_threshold, is_debug=is_debug)",
                            "Call"
                        ]
                    ]
                }
            },
            "while_loop_1589": {
                "variable": {
                    "value": "(_, eta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": []
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[tf.zeros([]), eta]",
                    "type": "List",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "as_dtype_35": {
                "variable": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type_value": {
                    "value": "dtypestr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_423": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_477": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "FGM.generate(x + e, **fgm_params)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "adv_x + scaled_signed_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "pgd_attack(loss_fn, x, y_attack, epsilon, num_steps=num_steps, optimizer=optimizer, early_stop_loss_threshold=early_stop_loss_threshold, is_debug=is_debug)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_630": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_module.attack_softmax_cross_entropy(y, preds, mean=False)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ],
                        [
                            "-reduce_sum(tf.square(a_feat - g_feat), axis)",
                            "UnaryOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "ax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ax + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "x + utils_tf.clip_eta(ax - x, self.ord, self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(ax, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(ax)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_634": {
                "variable": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grad.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_663": {
                "variable": {
                    "value": "ax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ax + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "x + utils_tf.clip_eta(ax - x, self.ord, self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(ax, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(ax)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_1545": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "FGM.generate(x + e, **fgm_params)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "adv_x + scaled_signed_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "pgd_attack(loss_fn, x, y_attack, epsilon, num_steps=num_steps, optimizer=optimizer, early_stop_loss_threshold=early_stop_loss_threshold, is_debug=is_debug)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_1594": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "FGM.generate(x + e, **fgm_params)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "adv_x + scaled_signed_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "pgd_attack(loss_fn, x, y_attack, epsilon, num_steps=num_steps, optimizer=optimizer, early_stop_loss_threshold=early_stop_loss_threshold, is_debug=is_debug)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_session_37": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_116": {
                "variable": {
                    "value": "new_kwargs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "given_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.feedable_kwargs[name]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None] + list(value.shape[1:])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_float_436": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(model_preds, preds_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_437": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.y_target",
                            "Attribute"
                        ],
                        [
                            "self.y",
                            "Attribute"
                        ],
                        [
                            "tf.to_float(tf.equal(model_preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / reduce_sum(y, 1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "kwargs.pop('y', [None] * batch_size)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "less_457": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xrange(nb_s)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.nb_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_464": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "FGM.generate(x + e, **fgm_params)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "adv_x + scaled_signed_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "pgd_attack(loss_fn, x, y_attack, epsilon, num_steps=num_steps, optimizer=optimizer, early_stop_loss_threshold=early_stop_loss_threshold, is_debug=is_debug)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_620": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xrange(nb_s)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.nb_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_641": {
                "variable": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decay_factor * m + grad",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_by_value_661": {
                "variable": {
                    "value": "ax",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "ax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ax + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "x + utils_tf.clip_eta(ax - x, self.ord, self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(ax, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(ax)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_783": {
                "variable": {
                    "value": "self.y_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func": {
                    "value": "random_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[labels]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_821": {
                "variable": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "jsma_wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x, self.y_target]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_840": {
                "variable": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "jsma_wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_1537": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad / tf.maximum(avoid_zero_div, reduce_mean(tf.abs(grad), red_ind, keepdims=True))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_1579": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(self.tf_dtype, shape=x_shape)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x_single, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "less_1583": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xrange(nb_s)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.nb_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_118": {
                "variable": {
                    "value": "new_kwargs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "given_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.feedable_kwargs[name]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_228": {
                "variable": {
                    "value": "original_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(preds, preds_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_229": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "original_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_420": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(self.tf_dtype, shape=x_shape)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x_single, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_423": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(self.tf_dtype, shape=x_shape)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x_single, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_472": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_635": {
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(1e-12, grad.dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "reduce_mean(tf.abs(grad), red_ind, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_643": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(1e-12, grad.dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "reduce_sum(tf.abs(m), red_ind, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_668": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "top_k_1269": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_logits(x)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.nb_candidate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_1531": {
                "x": {
                    "value": "a_feat - g_feat",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_1589": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_436": {
                "x": {
                    "value": "model_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_probs(x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "preds_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_max(preds, 1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "reduce_max(model_preds, 1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_649": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(avoid_zero_div, square)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_228": {
                "x": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_probs(x)",
                            "Call"
                        ],
                        [
                            "self.model.get_probs(ax)",
                            "Call"
                        ],
                        [
                            "self.model.get_probs(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.top_k(logits, k=self.nb_candidate)[0], [-1, self.nb_candidate])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "preds_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_max(preds, 1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "reduce_max(model_preds, 1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_637": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad / tf.maximum(avoid_zero_div, reduce_mean(tf.abs(grad), red_ind, keepdims=True))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_645": {
                "x": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decay_factor * m + grad",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_648": {
                "x": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decay_factor * m + grad",
                            "BinOp"
                        ]
                    ]
                }
            },
            "maximum_649": {
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(1e-12, grad.dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_sum(tf.square(m), red_ind, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/StoBatchCIFAR10/cleverhans/attacks_tf.py": {
        "tensorflow": {
            "as_dtype_22": {
                "variable": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gradients_85": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_module.attack_softmax_cross_entropy(y, preds, mean=False)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ],
                        [
                            "reduce_mean(wrapped_loss_fn(perturbation), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss], 'Total batch loss')",
                            "Call"
                        ],
                        [
                            "highest_nonlabel_logits - label_logits",
                            "BinOp"
                        ],
                        [
                            "self.sess.run(self.loss, feed_dict={self.x: adv_x.reshape(oimgs.shape), self.targeted_label: targets, self.ori_img: oimgs, self.const: CONST})",
                            "Call"
                        ],
                        [
                            "reduce_mean(loss_fn(x), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [height, height], [width, width], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(x, angle, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.transform(x, theta, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ],
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "constant_499": {
                "variable": {
                    "value": "zero_diagonal",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones((nb_features, nb_features), int)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "while_loop_610": {
                "variable": {
                    "value": "(x_adv, _, _, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": []
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[x, y_target, search_domain, 0, True]",
                    "type": "List",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "while_loop_1893": {
                "variable": {
                    "value": "(_, final_perturbation, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mod_not_done & (reduce_sum(domain_in, axis=1) >= 2)",
                            "BinOp"
                        ]
                    ]
                },
                "body": {
                    "value": "loop_body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[tf.constant(0.0), init_perturbation, flat_init_optim_state]",
                    "type": "List",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "one_hot_1920": {
                "variable": {
                    "value": "logit_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_1936": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([1, 0, -dx * height, 0, 1, -dy * width, 0, 0] * batch_size, dtype=np.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, 8)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_1939": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [height, height], [width, width], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(x, angle, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.transform(x, theta, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ],
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [height, height], [width, width], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_1990": {
                "variable": {
                    "value": "adv_xs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "adv_xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(adv_xs)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_1991": {
                "variable": {
                    "value": "accs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "accs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(accs)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_75": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(preds, preds_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_76": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / reduce_sum(y, 1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / reduce_sum(y, 1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sign_89": {
                "variable": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sess.run(self.grad, feed_dict={self.x: adv_x.reshape(oimgs.shape), self.targeted_label: targets, self.ori_img: oimgs, self.const: CONST})",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_95": {
                "variable": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(grad)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(normalized_grad)",
                            "Call"
                        ],
                        [
                            "grad / avoid_nan_norm",
                            "BinOp"
                        ],
                        [
                            "grad / tf.sqrt(square)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_by_value_124": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "x + d",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "copy.copy(sample)",
                            "Call"
                        ],
                        [
                            "np.reshape(adv_x, (1, nb_features))",
                            "Call"
                        ],
                        [
                            "apply_perturbations(i, j, adv_x, increase, theta, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "copy.copy(sample)",
                            "Call"
                        ],
                        [
                            "np.clip((1 + overshoot) * r_tot + sample, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "np.clip(r_tot + sample, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "adv_x.reshape(oimgs.shape)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.clip_min * np.ones(oimgs.shape[:])",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.clip_max * np.ones(oimgs.shape[:])",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gradients_288": {
                "variable": {
                    "value": "(derivatives,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "predictions[:, class_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [height, height], [width, width], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(x, angle, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.transform(x, theta, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ],
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_505": {
                "variable": {
                    "value": "search_domain",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(x < clip_max, tf_dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_508": {
                "variable": {
                    "value": "search_domain",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(x > clip_min, tf_dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_527": {
                "variable": {
                    "value": "preds_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.argmax(preds, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(grads)",
                            "Call"
                        ],
                        [
                            "int(y_target.shape[-1].value)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_534": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack(list_derivatives)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nb_classes, -1, nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_541": {
                "variable": {
                    "value": "target_class",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(y_in, perm=[1, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nb_classes, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_543": {
                "variable": {
                    "value": "other_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(target_class, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_577": {
                "variable": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(scores, shape=[-1, nb_features * nb_features])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mod_580": {
                "variable": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(scores)",
                            "Call"
                        ],
                        [
                            "tf.argmax(tf.reshape(scores, shape=[-1, nb_features * nb_features]), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.product(adv_x.shape[1:])",
                            "Call"
                        ],
                        [
                            "int(np.product(x.shape[1:]).value)",
                            "Call"
                        ]
                    ]
                }
            },
            "floordiv_581": {
                "variable": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(scores)",
                            "Call"
                        ],
                        [
                            "tf.argmax(tf.reshape(scores, shape=[-1, nb_features * nb_features]), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.product(adv_x.shape[1:])",
                            "Call"
                        ],
                        [
                            "int(np.product(x.shape[1:]).value)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_582": {
                "variable": {
                    "value": "p1_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.mod(best, nb_features)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.product(adv_x.shape[1:])",
                            "Call"
                        ],
                        [
                            "int(np.product(x.shape[1:]).value)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_583": {
                "variable": {
                    "value": "p2_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.floordiv(best, nb_features)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.product(adv_x.shape[1:])",
                            "Call"
                        ],
                        [
                            "int(np.product(x.shape[1:]).value)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_586": {
                "variable": {
                    "value": "mod_not_done",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "reduce_sum(y_in * preds_onehot, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_590": {
                "variable": {
                    "value": "cond_float",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(cond, tf_dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_596": {
                "variable": {
                    "value": "to_mod_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "to_mod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(p1_one_hot + p2_one_hot) * cond_float",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1] + x_in.shape[1:].as_list()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_604": {
                "variable": {
                    "value": "i_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i_in",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_742": {
                "variable": {
                    "value": "modifier",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape, dtype=np_dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_745": {
                "variable": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "timg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_746": {
                "variable": {
                    "value": "self.tlab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((batch_size, num_labels))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "tlab",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_748": {
                "variable": {
                    "value": "self.const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "const",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_752": {
                "variable": {
                    "value": "self.assign_timg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_timg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_753": {
                "variable": {
                    "value": "self.assign_tlab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, num_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_tlab",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_755": {
                "variable": {
                    "value": "self.assign_const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_const",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_791": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_793": {
                "variable": {
                    "value": "end_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_802": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[modifier] + new_vars",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_1021": {
                "variable": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_1028": {
                "variable": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "timg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_1029": {
                "variable": {
                    "value": "self.newimg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "newimg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_1031": {
                "variable": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "slack",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_1033": {
                "variable": {
                    "value": "self.tlab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((batch_size, num_labels))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "tlab",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_1035": {
                "variable": {
                    "value": "self.const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "const",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_1039": {
                "variable": {
                    "value": "self.assign_timg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_timg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_1040": {
                "variable": {
                    "value": "self.assign_newimg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_newimg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_1042": {
                "variable": {
                    "value": "self.assign_slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_slack",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_1044": {
                "variable": {
                    "value": "self.assign_tlab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, num_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_tlab",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_1046": {
                "variable": {
                    "value": "self.assign_const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_const",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_1049": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_1050": {
                "variable": {
                    "value": "self.global_step_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_1054": {
                "variable": {
                    "value": "self.zt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.global_step_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.global_step_t + tf.cast(3, tf_dtype)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_1056": {
                "variable": {
                    "value": "cond1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(tf.subtract(self.slack, self.timg), self.beta_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_1058": {
                "variable": {
                    "value": "cond2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less_equal(tf.abs(tf.subtract(self.slack, self.timg)), self.beta_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_1061": {
                "variable": {
                    "value": "cond3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(tf.subtract(self.slack, self.timg), tf.negative(self.beta_t))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_1064": {
                "variable": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(self.slack, self.beta_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(self.clip_max, tf_dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_1066": {
                "variable": {
                    "value": "lower",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(self.slack, self.beta_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(self.clip_min, tf_dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_1069": {
                "variable": {
                    "value": "self.assign_newimg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "cond1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.greater(tf.subtract(self.slack, self.timg), self.beta_t), tf_dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(tf.subtract(self.slack, self.beta_t), tf.cast(self.clip_max, tf_dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_1078": {
                "variable": {
                    "value": "self.setter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.newimg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.assign_newimg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_1079": {
                "variable": {
                    "value": "self.setter_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.assign_slack",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "polynomial_decay_1132": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "self.MAX_ITERATIONS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "end_learning_rate": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "power": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_1141": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_1145": {
                "variable": {
                    "value": "end_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_1155": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.global_step] + [self.slack] + [self.newimg] + new_vars",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Variable_1495": {
                "variable": {
                    "value": "self.ori_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(self.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "ori_img",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_1497": {
                "variable": {
                    "value": "self.const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(self.batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "const",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gradients_1505": {
                "variable": {
                    "value": "(self.grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_1788": {
                "variable": {
                    "value": "(_, all_grads)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mod_not_done & (reduce_sum(domain_in, axis=1) >= 2)",
                            "BinOp"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[0, tf.TensorArray(size=self._num_iters, dtype=tf_dtype)]",
                    "type": "List",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_1807": {
                "variable": {
                    "value": "clipped_perturbation",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "perturbation",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-epsilon",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-09",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_1809": {
                "variable": {
                    "value": "new_image",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "input_image + clipped_perturbation",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "assert_less_equal_1901": {
                "variable": {
                    "value": "check_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "final_perturbation",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "perturbation_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epsilon * 1.1",
                            "BinOp"
                        ]
                    ]
                },
                "message": {
                    "value": "'final_perturbation must change no pixel by more than %s' % perturbation_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_op_1906": {
                "variable": {
                    "value": "check_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stop_gradient_1910": {
                "input": {
                    "value": "adversarial_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_image + final_perturbation",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_float_1960": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(preds, preds_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_1961": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / reduce_sum(y, 1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / reduce_sum(y, 1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gather_1992": {
                "params": {
                    "value": "adv_xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(adv_xs)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.argmin(accs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_99": {
                "variable": {
                    "value": "avoid_nan_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "Constant"
                        ],
                        [
                            "1e-12",
                            "Constant"
                        ]
                    ]
                },
                "y": {
                    "value": "reduce_sum(tf.abs(grad), reduction_indices=red_ind, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_155": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stop_gradient_162": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Hd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(kl, d)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clip_by_value_166": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "x + d",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "copy.copy(sample)",
                            "Call"
                        ],
                        [
                            "np.reshape(adv_x, (1, nb_features))",
                            "Call"
                        ],
                        [
                            "apply_perturbations(i, j, adv_x, increase, theta, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "copy.copy(sample)",
                            "Call"
                        ],
                        [
                            "np.clip((1 + overshoot) * r_tot + sample, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "np.clip(r_tot + sample, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "adv_x.reshape(oimgs.shape)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.clip_min * np.ones(oimgs.shape[:])",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.clip_max * np.ones(oimgs.shape[:])",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "logical_and_521": {
                "x": {
                    "value": "tf.less(i_in, max_iters)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "cond_in",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gradients_532": {
                "variable": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "preds[:, class_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "x_in",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "minimum_599": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.clip_max * np.ones(oimgs.shape[:])",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "x_in + to_mod_reshape * theta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_601": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.clip_min * np.ones(oimgs.shape[:])",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "x_in - to_mod_reshape * theta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_779": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ZERO()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "other - real + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_782": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ZERO()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "real - other + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_1070": {
                "x": {
                    "value": "cond2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.less_equal(tf.abs(tf.subtract(self.slack, self.timg)), self.beta_t), tf_dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_1071": {
                "x": {
                    "value": "cond3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.less(tf.subtract(self.slack, self.timg), tf.negative(self.beta_t)), tf_dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "lower",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.add(self.slack, self.beta_t), tf.cast(self.clip_min, tf_dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_1074": {
                "x": {
                    "value": "self.zt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.assign_newimg - self.newimg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_1115": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ZERO()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "other - real + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_1116": {
                "variable": {
                    "value": "loss1_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ZERO()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "other_y - real_y + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_1119": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ZERO()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "real - other + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_1120": {
                "variable": {
                    "value": "loss1_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ZERO()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "real_y - other_y + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_1651": {
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_module.attack_softmax_cross_entropy(y, preds, mean=False)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ],
                        [
                            "reduce_mean(wrapped_loss_fn(perturbation), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss], 'Total batch loss')",
                            "Call"
                        ],
                        [
                            "highest_nonlabel_logits - label_logits",
                            "BinOp"
                        ],
                        [
                            "self.sess.run(self.loss, feed_dict={self.x: adv_x.reshape(oimgs.shape), self.targeted_label: targets, self.ori_img: oimgs, self.const: CONST})",
                            "Call"
                        ],
                        [
                            "reduce_mean(loss_fn(x), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [height, height], [width, width], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(x, angle, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.transform(x, theta, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ],
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_1768": {
                "variable": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1] + static_x_shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_1776": {
                "variable": {
                    "value": "delta_x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[delta_x, -delta_x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_1777": {
                "variable": {
                    "value": "loss_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "loss_fn(x + delta_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2 * self._num_samples] + [1] * (len(x_shape) - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_1781": {
                "variable": {
                    "value": "avg_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "avg_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_sum(all_grads.stack(), axis=0)",
                            "Call"
                        ],
                        [
                            "reduce_mean(loss_vals * delta_x, axis=0) / delta",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(avg_grad, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "control_dependencies_1803": {
                "control_inputs": {
                    "value": "[tf.assert_less_equal(input_image, 1.0), tf.assert_greater_equal(input_image, 0.0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Print_1854": {
                "variable": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Print(input_image, [], 'Starting PGD attack with epsilon: %s' % epsilon)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "'Starting PGD attack with epsilon: %s' % epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_1859": {
                "input": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Print(input_image, [], 'Starting PGD attack with epsilon: %s' % epsilon)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_1882": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(num_iterations)",
                            "Call"
                        ],
                        [
                            "tf.identity(i)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.less(loss, early_stop_loss_threshold), lambda : float(num_steps), lambda : i)",
                            "Call"
                        ],
                        [
                            "range(0, len(imgs), self.batch_size)",
                            "Call"
                        ],
                        [
                            "range(0, len(imgs) // batch_size)",
                            "Call"
                        ],
                        [
                            "range(self.batch_size)",
                            "Call"
                        ],
                        [
                            "xrange(len(x))",
                            "Call"
                        ],
                        [
                            "xrange(len(x))",
                            "Call"
                        ]
                    ]
                }
            },
            "less_1890": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(num_iterations)",
                            "Call"
                        ],
                        [
                            "tf.identity(i)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.less(loss, early_stop_loss_threshold), lambda : float(num_steps), lambda : i)",
                            "Call"
                        ],
                        [
                            "range(0, len(imgs), self.batch_size)",
                            "Call"
                        ],
                        [
                            "range(0, len(imgs) // batch_size)",
                            "Call"
                        ],
                        [
                            "range(self.batch_size)",
                            "Call"
                        ],
                        [
                            "xrange(len(x))",
                            "Call"
                        ],
                        [
                            "xrange(len(x))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "num_steps",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "control_dependencies_1908": {
                "control_inputs": {
                    "value": "[check_diff]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmin_1992": {
                "input": {
                    "value": "accs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(accs)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_75": {
                "x": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_probs(x_in)",
                            "Call"
                        ],
                        [
                            "model.get_probs(x)",
                            "Call"
                        ],
                        [
                            "np.atleast_1d(utils_tf.model_argmax(self.sess, self.x, self.model_preds, adv_x))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "preds_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_max(preds, 1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "reduce_max(preds, 1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_107": {
                "variable": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "Constant"
                        ],
                        [
                            "1e-12",
                            "Constant"
                        ]
                    ]
                },
                "y": {
                    "value": "reduce_sum(tf.square(grad), reduction_indices=red_ind, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_156": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [height, height], [width, width], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(x, angle, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.transform(x, theta, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ],
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cast_506": {
                "x": {
                    "value": "x < clip_max",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_509": {
                "x": {
                    "value": "x > clip_min",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "less_521": {
                "x": {
                    "value": "i_in",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "max_iters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.floor(nb_features * gamma / 2)",
                            "Call"
                        ],
                        [
                            "np.floor(nb_features * gamma / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_527": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_probs(x_in)",
                            "Call"
                        ],
                        [
                            "model.get_probs(x)",
                            "Call"
                        ],
                        [
                            "np.atleast_1d(utils_tf.model_argmax(self.sess, self.x, self.model_preds, adv_x))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_535": {
                "values": {
                    "value": "list_derivatives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "transpose_542": {
                "a": {
                    "value": "y_in",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "not_equal_543": {
                "x": {
                    "value": "target_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(y_in, perm=[1, 0]), shape=[nb_classes, -1, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_552": {
                "x": {
                    "value": "tf.equal(domain_in, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_557": {
                "tensor": {
                    "value": "target_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_target",
                            "Name"
                        ],
                        [
                            "target_tmp - increase_coef * reduce_max(tf.abs(grads_target), axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, nb_features, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_558": {
                "tensor": {
                    "value": "target_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_target",
                            "Name"
                        ],
                        [
                            "target_tmp - increase_coef * reduce_max(tf.abs(grads_target), axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_563": {
                "tensor": {
                    "value": "other_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_other",
                            "Name"
                        ],
                        [
                            "other_tmp + increase_coef * reduce_max(tf.abs(grads_other), axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, nb_features, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_564": {
                "tensor": {
                    "value": "other_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_other",
                            "Name"
                        ],
                        [
                            "other_tmp + increase_coef * reduce_max(tf.abs(grads_other), axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_578": {
                "tensor": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores_mask * (-target_sum * other_sum)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(scores_mask, tf_dtype) * (-target_sum * other_sum) * zero_diagonal",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, nb_features * nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_590": {
                "x": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mod_not_done & (reduce_sum(domain_in, axis=1) >= 2)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "square_770": {
                "x": {
                    "value": "self.newimg - self.other",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "greater_1056": {
                "x": {
                    "value": "tf.subtract(self.slack, self.timg)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_equal_1058": {
                "x": {
                    "value": "tf.abs(tf.subtract(self.slack, self.timg))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_1061": {
                "x": {
                    "value": "tf.subtract(self.slack, self.timg)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.negative(self.beta_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_1064": {
                "x": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_1065": {
                "x": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_1066": {
                "x": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_1067": {
                "x": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "square_1086": {
                "x": {
                    "value": "self.newimg - self.timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_1088": {
                "x": {
                    "value": "self.slack - self.timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_1090": {
                "x": {
                    "value": "self.newimg - self.timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_1092": {
                "x": {
                    "value": "self.slack - self.timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_1094": {
                "x": {
                    "value": "self.l1dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_1096": {
                "x": {
                    "value": "self.l1dist_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_1130": {
                "x": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.loss21",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_1502": {
                "x": {
                    "value": "self.x - self.ori_img",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_1702": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_1703": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sign_1752": {
                "x": {
                    "value": "tf.random_uniform([self._num_samples] + x_shape[1:], minval=-1.0, maxval=1.0, dtype=tf_dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_1853": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Print_1878": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_module.attack_softmax_cross_entropy(y, preds, mean=False)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ],
                        [
                            "reduce_mean(wrapped_loss_fn(perturbation), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss], 'Total batch loss')",
                            "Call"
                        ],
                        [
                            "highest_nonlabel_logits - label_logits",
                            "BinOp"
                        ],
                        [
                            "self.sess.run(self.loss, feed_dict={self.x: adv_x.reshape(oimgs.shape), self.targeted_label: targets, self.ori_img: oimgs, self.const: CONST})",
                            "Call"
                        ],
                        [
                            "reduce_mean(loss_fn(x), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[loss]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "Total batch loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_1881": {
                "control_inputs": {
                    "value": "[loss]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_1884": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.less(loss, early_stop_loss_threshold)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : float(num_steps)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : i",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "equal_1960": {
                "x": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_probs(x_in)",
                            "Call"
                        ],
                        [
                            "model.get_probs(x)",
                            "Call"
                        ],
                        [
                            "np.atleast_1d(utils_tf.model_argmax(self.sess, self.x, self.model_preds, adv_x))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "preds_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_max(preds, 1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "reduce_max(preds, 1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "count_nonzero_1987": {
                "input": {
                    "value": "tf.equal(tf.argmax(y, axis=-1), tf.argmax(preds_adv, axis=-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_161": {
                "ys": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils_tf.kl_with_logits(logits, logits_d)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal(tf.shape(x), dtype=tf_dtype)",
                            "Call"
                        ],
                        [
                            "xi * utils_tf.l2_batch_normalize(d)",
                            "BinOp"
                        ],
                        [
                            "tf.stop_gradient(Hd)",
                            "Call"
                        ],
                        [
                            "eps * utils_tf.l2_batch_normalize(d)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "equal_552": {
                "x": {
                    "value": "domain_in",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_556": {
                "x": {
                    "value": "grads_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_sum(grads * target_class, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_562": {
                "x": {
                    "value": "grads_other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_sum(grads * other_classes, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_573": {
                "x": {
                    "value": "scores_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(target_sum > 0) & (other_sum < 0)",
                            "BinOp"
                        ],
                        [
                            "(target_sum < 0) & (other_sum > 0)",
                            "BinOp"
                        ],
                        [
                            "(target_sum > 0) & (other_sum < 0)",
                            "BinOp"
                        ],
                        [
                            "(target_sum < 0) & (other_sum > 0)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_760": {
                "x": {
                    "value": "modifier + self.timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_1055": {
                "x": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_1056": {
                "x": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_1058": {
                "x": {
                    "value": "tf.subtract(self.slack, self.timg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_1061": {
                "x": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "negative_1062": {
                "x": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assert_less_equal_1804": {
                "x": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Print(input_image, [], 'Starting PGD attack with epsilon: %s' % epsilon)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "assert_greater_equal_1805": {
                "x": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Print(input_image, [], 'Starting PGD attack with epsilon: %s' % epsilon)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "device_1877": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_1896": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "equal_1987": {
                "x": {
                    "value": "tf.argmax(y, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(preds_adv, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_100": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sess.run(self.grad, feed_dict={self.x: adv_x.reshape(oimgs.shape), self.targeted_label: targets, self.ori_img: oimgs, self.const: CONST})",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_111": {
                "x": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(avoid_zero_div, reduce_sum(tf.square(grad), reduction_indices=red_ind, keepdims=True))",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_665": {
                "x": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.stack(list_derivatives), shape=[nb_classes, -1, nb_features])",
                            "Call"
                        ],
                        [
                            "self._compute_gradients(loss_fn, x, optim_state)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_790": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "subtract_1058": {
                "x": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_1140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_1723": {
                "x": {
                    "value": "self._beta1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_optim_state['t']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pow_1724": {
                "x": {
                    "value": "self._beta2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_optim_state['t']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "TensorArray_1792": {
                "size": {
                    "value": "self._num_iters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "less_1885": {
                "x": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_module.attack_softmax_cross_entropy(y, preds, mean=False)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ],
                        [
                            "reduce_mean(wrapped_loss_fn(perturbation), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss], 'Total batch loss')",
                            "Call"
                        ],
                        [
                            "highest_nonlabel_logits - label_logits",
                            "BinOp"
                        ],
                        [
                            "self.sess.run(self.loss, feed_dict={self.x: adv_x.reshape(oimgs.shape), self.targeted_label: targets, self.ori_img: oimgs, self.const: CONST})",
                            "Call"
                        ],
                        [
                            "reduce_mean(loss_fn(x), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "early_stop_loss_threshold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "argmax_1987": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / reduce_sum(y, 1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / reduce_sum(y, 1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_1988": {
                "input": {
                    "value": "preds_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_logits(adv_xs[-1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "square_108": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sess.run(self.grad, feed_dict={self.x: adv_x.reshape(oimgs.shape), self.targeted_label: targets, self.ori_img: oimgs, self.const: CONST})",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_767": {
                "x": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_1726": {
                "x": {
                    "value": "u_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_optim_state['u'][i] / (1.0 - tf.pow(self._beta2, t))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/StoBatchCIFAR10/cleverhans/attacks_tfe.py": {
        "tensorflow": {
            "as_dtype_42": {
                "variable": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type_value": {
                    "value": "dtypestr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sign_157": {
                "variable": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tape.gradient(loss, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_163": {
                "variable": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(grad)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(normalized_grad)",
                            "Call"
                        ],
                        [
                            "grad / avoid_nan_norm",
                            "BinOp"
                        ],
                        [
                            "grad / tf.sqrt(square)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_by_value_193": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.generate(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "x + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientTape_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "maximum_167": {
                "variable": {
                    "value": "avoid_nan_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "Constant"
                        ],
                        [
                            "1e-12",
                            "Constant"
                        ]
                    ]
                },
                "y": {
                    "value": "reduce_sum(tf.abs(grad), reduction_indices=red_ind, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_175": {
                "variable": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "Constant"
                        ],
                        [
                            "1e-12",
                            "Constant"
                        ]
                    ]
                },
                "y": {
                    "value": "reduce_sum(tf.square(grad), reduction_indices=red_ind, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_168": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tape.gradient(loss, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_179": {
                "x": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(avoid_zero_div, reduce_sum(tf.square(grad), reduction_indices=red_ind, keepdims=True))",
                            "Call"
                        ]
                    ]
                }
            },
            "square_176": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tape.gradient(loss, x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/StoBatchCIFAR10/cleverhans/augmentation.py": {
        "tensorflow": {
            "pad_22": {
                "variable": {
                    "value": "xp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(random_crop_and_flip_image, x)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[pad[0], pad[0]], [pad[1], pad[1]], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'REFLECT'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "random_flip_left_right_17": {
                "image": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(random_crop_and_flip_image, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_crop_23": {
                "value": {
                    "value": "xp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[pad[0], pad[0]], [pad[1], pad[1]], [0, 0]], mode)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "tf.shape(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "map_fn_50": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "random_crop_and_flip_image",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(random_crop_and_flip_image, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_23": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(random_crop_and_flip_image, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_27": {
                "device_name": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/CPU:0'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "map_fn_28": {
                "fn": {
                    "value": "func",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(random_crop_and_flip_image, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_32": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(random_crop_and_flip_image, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_33": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(random_crop_and_flip_image, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_crop_41": {
                "value": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[rows, cols, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_flip_left_right_44": {
                "image": {
                    "value": "_rand_crop_img(_pad_img(img))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_49": {
                "device_name": {
                    "value": "/CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/StoBatchCIFAR10/cleverhans/compat.py": {
        "tensorflow": {
            "stop_gradient_107": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(labels)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_v2_108": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(labels)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_116": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(labels)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/StoBatchCIFAR10/cleverhans/evaluation.py": {
        "tensorflow": {
            "equal_337": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y_batch, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(predictions, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_337": {
                "input": {
                    "value": "y_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.make_label_placeholder()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_338": {
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_probs(x_batch)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_139": {
                "device_name": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "devices",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/StoBatchCIFAR10/cleverhans/loss.py": {
        "tensorflow": {
            "maximum_128": {
                "variable": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.distributions.Beta(self.beta, self.beta)",
                            "Call"
                        ],
                        [
                            "mix.sample([tf.shape(x)[0]] + [1] * (len(x.shape) - 1))",
                            "Call"
                        ],
                        [
                            "tf.maximum(mix, 1 - mix)",
                            "Call"
                        ],
                        [
                            "tf.distributions.Beta(self.beta, self.beta)",
                            "Call"
                        ],
                        [
                            "mix.sample([tf.shape(x)[0]] + [1] * (len(x.shape) - 1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1 - mix",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_132": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "softmax_cross_entropy_with_logits(labels=ym, logits=logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_155": {
                "variable": {
                    "value": "pairing_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pairing_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.reduce_mean(tf.square(a - b)) for (a, b) in zip(d1[Model.O_FEATURES], d2[Model.O_FEATURES])]",
                            "ListComp"
                        ],
                        [
                            "tf.reduce_mean(pairing_loss)",
                            "Call"
                        ],
                        [
                            "[tf.reduce_mean(tf.square(a - b)) for (a, b) in zip(d1[Model.O_FEATURES], d2[Model.O_FEATURES])]",
                            "ListComp"
                        ],
                        [
                            "tf.reduce_mean(pairing_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_156": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "softmax_cross_entropy_with_logits(labels=y, logits=d1[Model.O_LOGITS])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_168": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "terms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[weight * loss for (weight, loss) in safe_zip(weights, losses)]",
                            "ListComp"
                        ],
                        [
                            "[tf.nn.l2_loss(param) for param in self.model.get_params() if len(param.get_shape()) > 1]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "reduce_mean_250": {
                "variable": {
                    "value": "pairing_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pairing_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.reduce_mean(tf.square(a - b)) for (a, b) in zip(d1[Model.O_FEATURES], d2[Model.O_FEATURES])]",
                            "ListComp"
                        ],
                        [
                            "tf.reduce_mean(pairing_loss)",
                            "Call"
                        ],
                        [
                            "[tf.reduce_mean(tf.square(a - b)) for (a, b) in zip(d1[Model.O_FEATURES], d2[Model.O_FEATURES])]",
                            "ListComp"
                        ],
                        [
                            "tf.reduce_mean(pairing_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "Beta_275": {
                "variable": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": []
                },
                "concentration1": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "concentration0": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_75": {
                "inputs": {
                    "value": "terms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[weight * loss for (weight, loss) in safe_zip(weights, losses)]",
                            "ListComp"
                        ],
                        [
                            "[tf.nn.l2_loss(param) for param in self.model.get_params() if len(param.get_shape()) > 1]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Beta_126": {
                "variable": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": []
                },
                "concentration1": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "concentration0": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_158": {
                "input_tensor": {
                    "value": "softmax_cross_entropy_with_logits(labels=y, logits=d2[Model.O_LOGITS])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_184": {
                "input_tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softmax_cross_entropy_with_logits(logits=logits, labels=y)",
                            "Call"
                        ],
                        [
                            "tf.add_n(terms)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_124": {
                "device_name": {
                    "value": "/CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_152": {
                "input_tensor": {
                    "value": "tf.square(a - b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_loss_165": {
                "t": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_247": {
                "input_tensor": {
                    "value": "tf.square(a - b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_107": {
                "input_tensor": {
                    "value": "softmax_cross_entropy_with_logits(labels=y, logits=logit)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_152": {
                "x": {
                    "value": "a - b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_247": {
                "x": {
                    "value": "a - b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_100": {
                "x": {
                    "value": "y.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_213": {
                "x": {
                    "value": "y.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_276": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x, self.attack(x))",
                            "Tuple"
                        ],
                        [
                            "(x,)",
                            "Tuple"
                        ],
                        [
                            "(x, self.attack(x))",
                            "Tuple"
                        ],
                        [
                            "(x,)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "shape_127": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x, self.attack(x))",
                            "Tuple"
                        ],
                        [
                            "(x,)",
                            "Tuple"
                        ],
                        [
                            "(x, self.attack(x))",
                            "Tuple"
                        ],
                        [
                            "(x,)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "cast_102": {
                "x": {
                    "value": "y.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_215": {
                "x": {
                    "value": "y.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/StoBatchCIFAR10/cleverhans/model.py": {
        "tensorflow": {
            "get_collection_85": {
                "variable": {
                    "value": "scope_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_90": {
                "variable": {
                    "value": "scope_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "executing_eagerly_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_58": {
                "logits": {
                    "value": "d[self.O_LOGITS]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.fprop(x, **kwargs)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/StoBatchCIFAR10/cleverhans/model_backup.py": {
        "tensorflow": {
            "get_collection_85": {
                "variable": {
                    "value": "scope_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_90": {
                "variable": {
                    "value": "scope_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "executing_eagerly_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_58": {
                "logits": {
                    "value": "d[self.O_LOGITS]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.fprop(x, **kwargs)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/StoBatchCIFAR10/cleverhans/picklable_model.py": {
        "tensorflow": {
            "matmul_198": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W.var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_268": {
                "variable": {
                    "value": "dummy_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.get_output_shape()",
                            "Call"
                        ],
                        [
                            "list(input_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_276": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.kernels.var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1,) + tuple(self.strides) + (1,)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_303": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "to_float_401": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x >= 0.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "softmax_433": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_470": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sqrt_471": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(tf.square(x - mean))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_746": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_748": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size,) + self.expanded_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "moments_749": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_751": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(x)",
                            "Call"
                        ],
                        [
                            "tf.shape(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_780": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "moments_782": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_137": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "tuple(self.input_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_250": {
                "variable": {
                    "value": "squared_norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(init)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "(0, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_251": {
                "variable": {
                    "value": "denom",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1e-07 + squared_norms",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_319": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.less(x, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "self.leak * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_339": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tanh_358": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "elu_380": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tanh_423": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "placeholder_440": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.output_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_454": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.output_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Print_472": {
                "input_": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "data": {
                    "value": "[tf.reduce_min(x), mean, tf.reduce_max(x), std]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "Print layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "map_fn_566": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda ex: tf.image.per_image_standardization(ex)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "avg_pool_690": {
                "variable": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ],
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ],
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_694": {
                "variable": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_714": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "avg_pool_846": {
                "variable": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ],
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ],
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_850": {
                "variable": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_471": {
                "input_tensor": {
                    "value": "tf.square(x - mean)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_565": {
                "device_name": {
                    "value": "/CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_631": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "rate": {
                    "value": "include_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.include_prob",
                            "Attribute"
                        ],
                        [
                            "dropout_dict[self.name]",
                            "Subscript"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "rsqrt_750": {
                "x": {
                    "value": "var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rsqrt_783": {
                "x": {
                    "value": "var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_143": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.layers[-1].get_output_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_183": {
                "x": {
                    "value": "1e-07 + tf.reduce_sum(tf.square(init), axis=0, keep_dims=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_250": {
                "x": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal([dim, self.num_hid], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "init / tf.sqrt(1e-07 + tf.reduce_sum(tf.square(init), axis=0, keep_dims=True))",
                            "BinOp"
                        ],
                        [
                            "init * self.init_scale",
                            "BinOp"
                        ],
                        [
                            "tf.random_uniform([dim, self.num_hid], dtype=tf.float32, minval=-scale, maxval=scale)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(kernel_shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.init_scale * init / denom",
                            "BinOp"
                        ],
                        [
                            "tf.random_normal(kernel_shape, dtype=tf.float32, stddev=np.sqrt(2.0 / fan_out))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(kernel_shape, dtype=tf.float32, minval=-scale, maxval=scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "less_319": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "square_471": {
                "x": {
                    "value": "x - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_min_473": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_max_473": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "per_image_standardization_567": {
                "image": {
                    "value": "ex",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_183": {
                "input_tensor": {
                    "value": "tf.square(init)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_403": {
                "x": {
                    "value": "(1.0 - mask) * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_183": {
                "x": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal([dim, self.num_hid], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "init / tf.sqrt(1e-07 + tf.reduce_sum(tf.square(init), axis=0, keep_dims=True))",
                            "BinOp"
                        ],
                        [
                            "init * self.init_scale",
                            "BinOp"
                        ],
                        [
                            "tf.random_uniform([dim, self.num_hid], dtype=tf.float32, minval=-scale, maxval=scale)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(kernel_shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.init_scale * init / denom",
                            "BinOp"
                        ],
                        [
                            "tf.random_normal(kernel_shape, dtype=tf.float32, stddev=np.sqrt(2.0 / fan_out))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(kernel_shape, dtype=tf.float32, minval=-scale, maxval=scale)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/StoBatchCIFAR10/cleverhans/serial.py": {
        "tensorflow": {
            "Variable_39": {
                "variable": {
                    "value": "self.var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "get_default_session_42": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_49": {
                "variable": {
                    "value": "self.var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "d['var']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_default_session_50": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_session_84": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_session_97": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/StoBatchCIFAR10/cleverhans/tests/test_dropout.py": {
        "tensorflow": {
            "constant_11": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_13": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_31": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_33": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_51": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_54": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/StoBatchCIFAR10/cleverhans/tests/test_serial.py": {
        "tensorflow": {
            "Session_12": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_18": {
                "ref": {
                    "value": "xv.var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "np.ones(1) * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/StoBatchCIFAR10/cleverhans/tests/test_utils_tf.py": {
        "tensorflow": {
            "Session_12": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_18": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(5, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_30": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[2.0], [3.0], [4.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_39": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "clipped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip_eta(eta, ord_arg, eps)",
                            "Call"
                        ],
                        [
                            "self.sess.run(clipped)",
                            "Call"
                        ],
                        [
                            "clip_eta(eta * sign, ord_arg, eps)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros((5, 3))",
                            "Call"
                        ],
                        [
                            "tf.constant([[2.0], [3.0], [4.0]])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/StoBatchCIFAR10/cleverhans/train.py": {
        "tensorflow": {
            "placeholder_147": {
                "variable": {
                    "value": "epoch_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_148": {
                "variable": {
                    "value": "batch_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdamOptimizer_108": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_153": {
                "variable": {
                    "value": "ema",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "ema_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ema_decay(epoch_tf, batch_tf)",
                            "Call"
                        ],
                        [
                            "0.998",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "placeholder_122": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x_train.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + x_train.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_123": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x_train.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + y_train.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_144": {
                "control_inputs": {
                    "value": "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_121": {
                "device_name": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_collection_144": {
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_154": {
                "control_inputs": {
                    "value": "[train_step]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_160": {
                "initial_value": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "assign_163": {
                "ref": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "control_dependencies_165": {
                "control_inputs": {
                    "value": "param_to_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.assign(tmp, param) for (tmp, param) in safe_zip(tmp_params, var_list)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "control_dependencies_168": {
                "control_inputs": {
                    "value": "avg_to_param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.assign(param, avg) for (param, avg) in safe_zip(var_list, avg_params)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "global_variables_initializer_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_n_322": {
                "inputs": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[g for (g, _) in grad_and_vars]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "assign_166": {
                "ref": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "avg",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "assign_169": {
                "ref": {
                    "value": "avg",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/StoBatchCIFAR10/cleverhans/utils.py": {
        "tensorflow": {
            "placeholder_267": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, height, width, channels]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_normalize_279": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "adv_x - x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_280": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.lin_space(float(min_epsilon), float(max_epsilon), num_points)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(num_points, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/StoBatchCIFAR10/cleverhans/utils_pytorch.py": {
        "tensorflow": {
            "get_default_graph_29": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RegisterGradient_26": {
                "op_type": {
                    "value": "rnd_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'PyFuncGrad-' + '%0x' % getrandbits(30 * 4)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "py_func_34": {
                "func": {
                    "value": "func",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "Tout": {
                    "value": "Tout",
                    "type": "variable",
                    "possible_values": []
                },
                "stateful": {
                    "value": "stateful",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "py_func_73": {
                "func": {
                    "value": "_bprop_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[op.inputs[0], grads_in]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32]",
                    "type": "List",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Tensor_53": {
                "variable": {
                    "value": "x_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_63": {
                "variable": {
                    "value": "grads_in_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_68": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch_state['logits'] * grads_in_tensor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/StoBatchCIFAR10/cleverhans/utils_tf.py": {
        "tensorflow": {
            "global_variables_59": {
                "variable": {
                    "value": "global_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_434": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_131": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_218": {
                "variable": {
                    "value": "correct_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(predictions, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_221": {
                "variable": {
                    "value": "correct_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y, axis=tf.rank(y) - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(predictions, axis=tf.rank(predictions) - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_277": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_325": {
                "variable": {
                    "value": "x_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + reduce_max(tf.abs(x), 1, keepdims=True))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "flatten_326": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + reduce_max(tf.abs(x), 1, keepdims=True))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rsqrt_329": {
                "variable": {
                    "value": "x_inv_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "np.sqrt(epsilon) + square_sum",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_330": {
                "variable": {
                    "value": "x_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + reduce_max(tf.abs(x), 1, keepdims=True))",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "x_inv_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.rsqrt(np.sqrt(epsilon) + square_sum)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_339": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "p_logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_softmax_340": {
                "variable": {
                    "value": "p_log",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "p_logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_softmax_341": {
                "variable": {
                    "value": "q_log",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "q_logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_by_value_363": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(eta, -eps, eps)",
                            "Call"
                        ],
                        [
                            "eta * factor",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-eps",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "minimum_378": {
                "variable": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "eps / norm",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_variable_initialized_62": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "control_dependencies_137": {
                "control_inputs": {
                    "value": "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_182": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_324": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_331": {
                "tensor": {
                    "value": "x_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(x, x_inv_norm)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "x_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(x)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_338": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "add_loss_344": {
                "loss": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_mean(reduce_sum(p * (p_log - q_log), axis=1), name=name)",
                            "Call"
                        ],
                        [
                            "model_loss(y, predictions)",
                            "Call"
                        ],
                        [
                            "(loss + model_loss(y, predictions_adv)) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "loss_collection": {
                    "value": "loss_collection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphKeys.REGULARIZATION_LOSSES",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "maximum_366": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "Constant"
                        ]
                    ]
                },
                "y": {
                    "value": "reduce_sum(tf.abs(eta), reduc_ind, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_479": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_71": {
                "var_list": {
                    "value": "not_initialized_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[var for (var, init) in zip(global_vars, is_initialized) if not init]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "get_collection_137": {
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_218": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_219": {
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_221": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "tf.rank(y) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_222": {
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "tf.rank(predictions) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_328": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + reduce_max(tf.abs(x), 1, keepdims=True))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_372": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(avoid_zero_div, reduce_sum(tf.square(eta), reduc_ind, keepdims=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_327": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + reduce_max(tf.abs(x), 1, keepdims=True))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "global_variables_initializer_440": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_440": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_446": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_367": {
                "x": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(eta, -eps, eps)",
                            "Call"
                        ],
                        [
                            "eta * factor",
                            "BinOp"
                        ]
                    ]
                }
            },
            "maximum_372": {
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "Constant"
                        ]
                    ]
                },
                "y": {
                    "value": "reduce_sum(tf.square(eta), reduc_ind, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rank_221": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rank_223": {
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_373": {
                "x": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(eta, -eps, eps)",
                            "Call"
                        ],
                        [
                            "eta * factor",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/StoBatchCIFAR10/cleverhans/utils_tfe.py": {
        "tensorflow": {
            "AdamOptimizer_69": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_214": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_119": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_194": {
                "variable": {
                    "value": "cur_corr_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(batch_y, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(predictions, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_187": {
                "ref": {
                    "value": "batch_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfe.Variable(X_train[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tfe.Variable(X_test[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "X_cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((args.batch_size,) + X_test.shape[1:], dtype=X_test.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_188": {
                "ref": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfe.Variable(Y_train[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tfe.Variable(Y_test[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "Y_cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((args.batch_size,) + Y_test.shape[1:], dtype=Y_test.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_230": {
                "input": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(tf_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_232": {
                "input": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(tf_samples)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "assign_91": {
                "ref": {
                    "value": "batch_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfe.Variable(X_train[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tfe.Variable(X_test[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "X_train[index_shuf[start:end]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "assign_92": {
                "ref": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfe.Variable(Y_train[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tfe.Variable(Y_test[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "Y_train[index_shuf[start:end]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_194": {
                "input": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfe.Variable(Y_train[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tfe.Variable(Y_test[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_195": {
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch_adv_x)",
                            "Call"
                        ],
                        [
                            "model(batch_x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "GradientTape_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/StoBatchCIFAR10/mlp.py": {
        "tensorflow": {
            "relu_70": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.conv2d(v, W, strides=[1, 2, 2, 1], padding='SAME') + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "batch_normalization_71": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.conv2d(v, W, strides=[1, 2, 2, 1], padding='SAME') + b)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, scale=True, training=True, reuse=tf.AUTO_REUSE, name='aebn{}'.format(bn_index))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.conv2d(v, W, strides=[1, 2, 2, 1], padding='SAME') + b)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, scale=True, training=True, reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.nn.conv2d(v, self.W, strides=[1, 2, 2, 1], padding='SAME'), self.b)",
                            "Call"
                        ],
                        [
                            "h / max",
                            "BinOp"
                        ]
                    ]
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'aebn{}'.format(bn_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_78": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.conv2d(v, W, strides=[1, 2, 2, 1], padding='SAME') + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "batch_normalization_79": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.conv2d(v, W, strides=[1, 2, 2, 1], padding='SAME') + b)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, scale=True, training=True, reuse=tf.AUTO_REUSE, name='aebn{}'.format(bn_index))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.conv2d(v, W, strides=[1, 2, 2, 1], padding='SAME') + b)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, scale=True, training=True, reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.nn.conv2d(v, self.W, strides=[1, 2, 2, 1], padding='SAME'), self.b)",
                            "Call"
                        ],
                        [
                            "h / max",
                            "BinOp"
                        ]
                    ]
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_87": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.conv2d(v, self.W, strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_88": {
                "variable": {
                    "value": "max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.conv2d(v, W, strides=[1, 2, 2, 1], padding='SAME') + b)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, scale=True, training=True, reuse=tf.AUTO_REUSE, name='aebn{}'.format(bn_index))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.conv2d(v, W, strides=[1, 2, 2, 1], padding='SAME') + b)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, scale=True, training=True, reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.nn.conv2d(v, self.W, strides=[1, 2, 2, 1], padding='SAME'), self.b)",
                            "Call"
                        ],
                        [
                            "h / max",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_by_value_91": {
                "variable": {
                    "value": "Chebyshev_h",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "self.dpChebyshev(h, Delta, epsilon, batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_116": {
                "variable": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(rc_v - self.input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_117": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_like_127": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rc_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decode(xShape, propup, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "self.decode2(xShape, propup, W, b, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "self.decode2(xShape, propup, W, b, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_129": {
                "variable": {
                    "value": "relu_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rc_v >= zeros",
                            "Compare"
                        ],
                        [
                            "rc_v >= zeros",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "rc_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decode(xShape, propup, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "self.decode2(xShape, propup, W, b, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "self.decode2(xShape, propup, W, b, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.zeros_like(rc_v, dtype=self.input.dtype)",
                            "Call"
                        ],
                        [
                            "array_ops.zeros_like(rc_v, dtype=self.input.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_130": {
                "variable": {
                    "value": "neg_abs_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rc_v >= zeros",
                            "Compare"
                        ],
                        [
                            "rc_v >= zeros",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "-rc_v",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "rc_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decode(xShape, propup, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "self.decode2(xShape, propup, W, b, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "self.decode2(xShape, propup, W, b, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_132": {
                "variable": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "math_ops.add(relu_logits - rc_v * (self.input + perturbFMx), math.log(2.0) + 0.5 * neg_abs_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_143": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rc_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decode(xShape, propup, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "self.decode2(xShape, propup, W, b, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "self.decode2(xShape, propup, W, b, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_145": {
                "variable": {
                    "value": "relu_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rc_v >= zeros",
                            "Compare"
                        ],
                        [
                            "rc_v >= zeros",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "rc_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decode(xShape, propup, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "self.decode2(xShape, propup, W, b, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "self.decode2(xShape, propup, W, b, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.zeros_like(rc_v, dtype=self.input.dtype)",
                            "Call"
                        ],
                        [
                            "array_ops.zeros_like(rc_v, dtype=self.input.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_146": {
                "variable": {
                    "value": "neg_abs_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rc_v >= zeros",
                            "Compare"
                        ],
                        [
                            "rc_v >= zeros",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "-rc_v",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "rc_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decode(xShape, propup, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "self.decode2(xShape, propup, W, b, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "self.decode2(xShape, propup, W, b, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_148": {
                "variable": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "math_ops.add(relu_logits - rc_v * (self.input + perturbFMx), math.log(2.0) + 0.5 * neg_abs_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_44": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([filter_size, filter_size, n_filter_in, n_filter_out], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_46": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_filter_out])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_63": {
                "variable": {
                    "value": "perturbFM",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "perturbFM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.laplace(0.0, 1.0 / (epsilon * batch_size), 1).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(perturbFM, Delta)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "Delta",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_by_value_73": {
                "t": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.conv2d(v, W, strides=[1, 2, 2, 1], padding='SAME') + b)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, scale=True, training=True, reuse=tf.AUTO_REUSE, name='aebn{}'.format(bn_index))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.conv2d(v, W, strides=[1, 2, 2, 1], padding='SAME') + b)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, scale=True, training=True, reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.nn.conv2d(v, self.W, strides=[1, 2, 2, 1], padding='SAME'), self.b)",
                            "Call"
                        ],
                        [
                            "h / max",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_81": {
                "t": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.conv2d(v, W, strides=[1, 2, 2, 1], padding='SAME') + b)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, scale=True, training=True, reuse=tf.AUTO_REUSE, name='aebn{}'.format(bn_index))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.conv2d(v, W, strides=[1, 2, 2, 1], padding='SAME') + b)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, scale=True, training=True, reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.nn.conv2d(v, self.W, strides=[1, 2, 2, 1], padding='SAME'), self.b)",
                            "Call"
                        ],
                        [
                            "h / max",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_87": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_97": {
                "x": {
                    "value": "tf.nn.conv2d_transpose(propup, self.W, tf.stack([xShape, self.inputShape[1], self.inputShape[2], self.inputShape[3]]), strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_108": {
                "input": {
                    "value": "upsample3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(propup, size=(self.inputShape[1], self.inputShape[2]), method=tf.image.ResizeMethod.NEAREST_NEIGHBOR)",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "tf.transpose(W, perm=[1, 0, 3, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_116": {
                "x": {
                    "value": "rc_v - self.input",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_132": {
                "x": {
                    "value": "relu_logits - rc_v * (self.input + perturbFMx)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "math.log(2.0) + 0.5 * neg_abs_logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_148": {
                "x": {
                    "value": "relu_logits - rc_v * (self.input + perturbFMx)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "math.log(2.0) + 0.5 * neg_abs_logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "truncated_normal_44": {
                "shape": {
                    "value": "[filter_size, filter_size, n_filter_in, n_filter_out]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_46": {
                "shape": {
                    "value": "[n_filter_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_70": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([filter_size, filter_size, n_filter_in, n_filter_out], stddev=0.1), dtype=tf.float32, name='W')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_78": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([filter_size, filter_size, n_filter_in, n_filter_out], stddev=0.1), dtype=tf.float32, name='W')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_97": {
                "input": {
                    "value": "propup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.propup(self.input)",
                            "Call"
                        ],
                        [
                            "self.propup(self.input + perturbFMx, W, b, bn_index) + perturbFM_h",
                            "BinOp"
                        ],
                        [
                            "self.propup_original(self.input + perturbFMx, W, b) + perturbFM_h",
                            "BinOp"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "tf.stack([xShape, self.inputShape[1], self.inputShape[2], self.inputShape[3]])",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_65": {
                "x": {
                    "value": "coefficients[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "x ** 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_98": {
                "values": {
                    "value": "[xShape, self.inputShape[1], self.inputShape[2], self.inputShape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_108": {
                "a": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([filter_size, filter_size, n_filter_in, n_filter_out], stddev=0.1), dtype=tf.float32, name='W')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/StoBatchCIFAR10/utils.py": {
        "tensorflow": {
            "shape_78": {
                "variable": {
                    "value": "saved_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.name.rsplit(':', 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_79": {
                "variable": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "saved_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(t)",
                            "Call"
                        ],
                        [
                            "tf.shape(t)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_80": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.name.rsplit(':', 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat(axis=0, values=[batch_size, [-1]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "fill_81": {
                "variable": {
                    "value": "upper_bound_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "tf.slice(saved_shape, [0], [1])",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.constant(1.0 / upper_bound)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rsqrt_84": {
                "variable": {
                    "value": "l2norm_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(t2 * t2, [1]) + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_86": {
                "variable": {
                    "value": "clipped_t",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.diag(scale)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(t, tf.concat(axis=0, values=[batch_size, [-1]]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(t, tf.concat(axis=0, values=[tf.slice(saved_shape, [0], [1]), -1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_87": {
                "variable": {
                    "value": "clipped_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "clipped_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.diag(scale), t2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(clipped_t, saved_shape, name=name)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "saved_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(t)",
                            "Call"
                        ],
                        [
                            "tf.shape(t)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_110": {
                "variable": {
                    "value": "saved_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.name.rsplit(':', 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_111": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.name.rsplit(':', 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat(axis=0, values=[tf.slice(saved_shape, [0], [1]), -1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_112": {
                "variable": {
                    "value": "t_abs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(t, tf.concat(axis=0, values=[batch_size, [-1]]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(t, tf.concat(axis=0, values=[tf.slice(saved_shape, [0], [1]), -1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_155": {
                "value": {
                    "value": "table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy.zeros((m + 1, m + 1), dtype=numpy.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_76": {
                "values": {
                    "value": "[t, upper_bound]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "batch_clip_by_l2norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_108": {
                "values": {
                    "value": "[t, threshold_ratio]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "soft_thresholding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_117": {
                "tensor": {
                    "value": "t_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(t2) * tf.nn.relu(t_abs - tf.reduce_mean(t_abs, [0], keep_dims=True) * threshold_ratio)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "saved_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(t)",
                            "Call"
                        ],
                        [
                            "tf.shape(t)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_131": {
                "values": {
                    "value": "[t, sigma]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "add_gaussian_noise",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_80": {
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_size, [-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_81": {
                "input_": {
                    "value": "saved_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(t)",
                            "Call"
                        ],
                        [
                            "tf.shape(t)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_82": {
                "value": {
                    "value": "1.0 / upper_bound",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_85": {
                "x": {
                    "value": "l2norm_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.rsqrt(tf.reduce_sum(t2 * t2, [1]) + 1e-06)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "upper_bound_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill(tf.slice(saved_shape, [0], [1]), tf.constant(1.0 / upper_bound))",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_86": {
                "diagonal": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(l2norm_inv, upper_bound_inv) * upper_bound",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_111": {
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.slice(saved_shape, [0], [1]), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sign_113": {
                "x": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(t, tf.concat(axis=0, values=[batch_size, [-1]]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(t, tf.concat(axis=0, values=[tf.slice(saved_shape, [0], [1]), -1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_113": {
                "features": {
                    "value": "t_abs - tf.reduce_mean(t_abs, [0], keep_dims=True) * threshold_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_84": {
                "input_tensor": {
                    "value": "t2 * t2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_133": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.name.rsplit(':', 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_111": {
                "input_": {
                    "value": "saved_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(t)",
                            "Call"
                        ],
                        [
                            "tf.shape(t)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_114": {
                "input_tensor": {
                    "value": "t_abs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(t2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/StoBatchTinyImageNet/SSGD_loss.py": {
        "tensorflow": {
            "argmax_26": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cast(labels, tf.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_28": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(tf.cast(labels, tf.int64), 1)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "cross_entropy_per_example",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_29": {
                "variable": {
                    "value": "cross_entropy_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=logits, name='cross_entropy_per_example')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "cross_entropy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_30": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "cross_entropy_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(cross_entropy, name='cross_entropy')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_34": {
                "inputs": {
                    "value": "tf.get_collection('losses')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_26": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(tf.cast(labels, tf.int64), 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_34": {
                "key": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/StoBatchTinyImageNet/SecureSGD_resnet_pretrain.py": {
        "tensorflow": {
            "set_verbosity_37": {
                "level": {
                    "value": "tf.compat.v1.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_verbosity_38": {
                "level": {
                    "value": "tf.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_96": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fixed_padding(inputs, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + dp_mult + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, True, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + dp_mult + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, False, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_119": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fixed_padding(inputs, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + dp_mult + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, True, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + dp_mult + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, False, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_84": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fixed_padding(inputs, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + dp_mult + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, True, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + dp_mult + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, False, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "pre_define_vars['kernel1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, train_params.enc_stride, train_params.enc_stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_108": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fixed_padding(inputs, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + dp_mult + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, True, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + dp_mult + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, False, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "pre_define_vars['kernel1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, train_params.enc_stride, train_params.enc_stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_126": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_159": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_177": {
                "variable": {
                    "value": "w_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "kernel1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel1', shape=[train_params.enc_kernel_size, train_params.enc_kernel_size, 3, train_params.enc_filters], dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer_conv2d())",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_178": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "w_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(kernel1, [-1, shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "svd_179": {
                "variable": {
                    "value": "sing_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(w_t)",
                            "Call"
                        ]
                    ]
                },
                "compute_uv": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_180": {
                "variable": {
                    "value": "sensitivityW",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sing_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.svd(w, compute_uv=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_200": {
                "variable": {
                    "value": "x_sb",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, train_params.image_size, train_params.image_size, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_sb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_201": {
                "variable": {
                    "value": "x_test",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, train_params.image_size, train_params.image_size, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_test",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_203": {
                "variable": {
                    "value": "y_sb",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, train_params.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y_sb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_204": {
                "variable": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, train_params.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y_test",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_206": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, train_params.enc_h_size, train_params.enc_h_size, train_params.enc_filters]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "noise",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_208": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_209": {
                "variable": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_217": {
                "variable": {
                    "value": "train_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(), name='learning_rate')",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_248": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y_logits_test, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y_sb, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_249": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_256": {
                "variable": {
                    "value": "all_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_307": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.all_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConfigProto_310": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_312": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(log_device_placement=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "initialize_all_variables_318": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_599": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "enc_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_105": {
                "name_or_scope": {
                    "value": "enc_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_158": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_166": {
                "variable": {
                    "value": "kernel1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[train_params.enc_kernel_size, train_params.enc_kernel_size, 3, train_params.enc_filters]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer_conv2d()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_169": {
                "variable": {
                    "value": "biases1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[train_params.enc_filters]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_187": {
                "variable": {
                    "value": "final_w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[train_params.hk, train_params.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(-stdv, stdv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_189": {
                "variable": {
                    "value": "final_b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[train_params.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_222": {
                "variable": {
                    "value": "y_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "y_logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_228": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lossDPSGD(y_logits, y_sb)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_231": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lossDPSGD(y_logits, y_sb)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "h_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                }
            },
            "sign_235": {
                "variable": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stop_gradient_236": {
                "variable": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(grad)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(normalized_grad)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_238": {
                "variable": {
                    "value": "sum_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "normalized_grad_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(tf.reduce_mean(normalized_grad, axis=0)) ** 2",
                            "BinOp"
                        ],
                        [
                            "train_params.enc_h_size * train_params.enc_h_size * train_params.enc_filters * normalized_grad_r / sum_r",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "(0, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_241": {
                "variable": {
                    "value": "grad_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "normalized_grad_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(tf.reduce_mean(normalized_grad, axis=0)) ** 2",
                            "BinOp"
                        ],
                        [
                            "train_params.enc_h_size * train_params.enc_h_size * train_params.enc_filters * normalized_grad_r / sum_r",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape_grad[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_242": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "grad_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(normalized_grad_r, [-1, shape_grad[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "svd_243": {
                "variable": {
                    "value": "sing_g_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(grad_t)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_norm(tf.gradients(loss, var)[0], train_params.clip_bound)",
                            "Call"
                        ],
                        [
                            "g + tf.random_normal(shape=tf.shape(g), mean=0.0, stddev=train_params.sigma * train_params.sensitivity ** 2, dtype=tf.float32)",
                            "BinOp"
                        ]
                    ]
                },
                "compute_uv": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_244": {
                "variable": {
                    "value": "sensitivity_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sing_g_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.svd(g, compute_uv=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_247": {
                "variable": {
                    "value": "y_softmax_test",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "y_logits_test",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "global_variables_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_290": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_165": {
                "name_or_scope": {
                    "value": "enc_layer",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_185": {
                "name_or_scope": {
                    "value": "fc2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_219": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_248": {
                "input": {
                    "value": "y_sb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, train_params.num_classes], name='y_sb')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_249": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(y_logits_test, 1), tf.argmax(y_sb, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_288": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_norm_296": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.gradients(loss, var)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "train_params.clip_bound",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_301": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_338": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_225": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_237": {
                "x": {
                    "value": "tf.reduce_mean(normalized_grad, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_variables_307": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_170": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_188": {
                "minval": {
                    "value": "-stdv",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "stdv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / math.sqrt(train_params.hk)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_initializer_190": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_mean_237": {
                "input_tensor": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(grad)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(normalized_grad)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gradients_296": {
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lossDPSGD(y_logits, y_sb)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.global_variables()",
                            "Call"
                        ],
                        [
                            "train_vars",
                            "Name"
                        ],
                        [
                            "tf.global_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_297": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(grad_t)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_norm(tf.gradients(loss, var)[0], train_params.clip_bound)",
                            "Call"
                        ],
                        [
                            "g + tf.random_normal(shape=tf.shape(g), mean=0.0, stddev=train_params.sigma * train_params.sensitivity ** 2, dtype=tf.float32)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/StoBatchTinyImageNet/SecureSGD_resnet_pretrain_testing.py": {
        "tensorflow": {
            "set_verbosity_39": {
                "level": {
                    "value": "tf.compat.v1.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_verbosity_40": {
                "level": {
                    "value": "tf.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_98": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fixed_padding(inputs, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + dp_mult + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, True, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + dp_mult + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, False, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_121": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fixed_padding(inputs, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + dp_mult + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, True, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + dp_mult + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, False, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_86": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fixed_padding(inputs, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + dp_mult + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, True, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + dp_mult + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, False, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "pre_define_vars['kernel1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, train_params.enc_stride, train_params.enc_stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_110": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fixed_padding(inputs, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + dp_mult + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, True, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + dp_mult + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, False, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "pre_define_vars['kernel1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, train_params.enc_stride, train_params.enc_stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_128": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_161": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_196": {
                "variable": {
                    "value": "x_sb",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, train_params.image_size, train_params.image_size, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_sb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_197": {
                "variable": {
                    "value": "x_test",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, train_params.image_size, train_params.image_size, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_test",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_199": {
                "variable": {
                    "value": "y_sb",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, train_params.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y_sb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_200": {
                "variable": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, train_params.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y_test",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_202": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, train_params.enc_h_size, train_params.enc_h_size, train_params.enc_filters]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "noise",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_204": {
                "variable": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "equal_211": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y_logits_test, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y_sb, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_212": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_216": {
                "variable": {
                    "value": "all_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_251": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.all_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConfigProto_254": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_256": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(log_device_placement=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_checkpoint_state_261": {
                "variable": {
                    "value": "ckpts",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_path_read",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(os.getcwd() + test_params.check_point_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_282": {
                "variable": {
                    "value": "mu_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "run_462": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_83": {
                "name_or_scope": {
                    "value": "enc_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_107": {
                "name_or_scope": {
                    "value": "enc_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_160": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_168": {
                "variable": {
                    "value": "kernel1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[train_params.enc_kernel_size, train_params.enc_kernel_size, 3, train_params.enc_filters]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer_conv2d()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_171": {
                "variable": {
                    "value": "biases1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[train_params.enc_filters]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_183": {
                "variable": {
                    "value": "final_w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[train_params.hk, train_params.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(-stdv, stdv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_185": {
                "variable": {
                    "value": "final_b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[train_params.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_210": {
                "variable": {
                    "value": "y_softmax_test",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "y_logits_test",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "global_variables_222": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_167": {
                "name_or_scope": {
                    "value": "enc_layer",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_181": {
                "name_or_scope": {
                    "value": "fc2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_207": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_211": {
                "input": {
                    "value": "y_sb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, train_params.num_classes], name='y_sb')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_212": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(y_logits_test, 1), tf.argmax(y_sb, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_285": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_292": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_299": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "all_variables_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_172": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_184": {
                "minval": {
                    "value": "-stdv",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "stdv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / math.sqrt(train_params.hk)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_initializer_186": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/StoBatchTinyImageNet/StoBatch_resnet_pretrain.py": {
        "tensorflow": {
            "set_verbosity_51": {
                "level": {
                    "value": "tf.compat.v1.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_verbosity_52": {
                "level": {
                    "value": "tf.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_108": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fixed_padding(inputs, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + perturbH + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, True, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + perturbH + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, False, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs + adv_noise, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, False, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_130": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fixed_padding(inputs, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + perturbH + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, True, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + perturbH + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, False, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs + adv_noise, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, False, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_152": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fixed_padding(inputs, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + perturbH + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, True, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + perturbH + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, False, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs + adv_noise, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, False, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_98": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fixed_padding(inputs, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + perturbH + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, True, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + perturbH + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, False, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs + adv_noise, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, False, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "pre_define_vars['kernel1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, train_params.enc_stride, train_params.enc_stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_120": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fixed_padding(inputs, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + perturbH + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, True, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + perturbH + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, False, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs + adv_noise, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, False, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "pre_define_vars['kernel1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, train_params.enc_stride, train_params.enc_stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_142": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fixed_padding(inputs, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + perturbH + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, True, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + perturbH + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, False, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs + adv_noise, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, False, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "pre_define_vars['kernel1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, train_params.enc_stride, train_params.enc_stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_160": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adv_inference(inputs, adv_noise, keep_prob, pre_define_vars, resnet_params, train_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_197": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_217": {
                "variable": {
                    "value": "w_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "kernel1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel1', shape=[train_params.enc_kernel_size, train_params.enc_kernel_size, 3, train_params.enc_filters], dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer_conv2d())",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_218": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "w_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(kernel1, [-1, shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "svd_219": {
                "variable": {
                    "value": "sing_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(w_t)",
                            "Call"
                        ]
                    ]
                },
                "compute_uv": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_220": {
                "variable": {
                    "value": "sensitivity",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sing_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.svd(w, compute_uv=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_240": {
                "variable": {
                    "value": "x_sb",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, train_params.image_size, train_params.image_size, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_sb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_241": {
                "variable": {
                    "value": "x_sb_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, train_params.image_size, train_params.image_size, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_sb_adv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_242": {
                "variable": {
                    "value": "x_test",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, train_params.image_size, train_params.image_size, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_test",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_244": {
                "variable": {
                    "value": "y_sb",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, train_params.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y_sb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_245": {
                "variable": {
                    "value": "y_sb_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, train_params.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y_sb_adv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_246": {
                "variable": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, train_params.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y_test",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_248": {
                "variable": {
                    "value": "FM_h",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, train_params.enc_h_size, train_params.enc_h_size, train_params.enc_filters]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "FM_h",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_249": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, train_params.image_size, train_params.image_size, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "noise",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_250": {
                "variable": {
                    "value": "adv_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, train_params.image_size, train_params.image_size, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "adv_noise",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_252": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_253": {
                "variable": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_261": {
                "variable": {
                    "value": "pretrain_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(), name='learning_rate')",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_262": {
                "variable": {
                    "value": "train_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(), name='learning_rate')",
                            "Call"
                        ]
                    ]
                }
            },
            "split_299": {
                "variable": {
                    "value": "x_sb_tests",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x_sb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, train_params.image_size, train_params.image_size, 3], name='x_sb')",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "N_ALL_GPUS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "N_GPUS + N_AUX_GPUS",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_306": {
                "variable": {
                    "value": "y_softmax_test_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "y_softmax_test_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_309": {
                "variable": {
                    "value": "all_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_407": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.all_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConfigProto_410": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_412": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(log_device_placement=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_435": {
                "variable": {
                    "value": "x_attacks",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x_sb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, train_params.image_size, train_params.image_size, 3], name='x_sb')",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_450": {
                "variable": {
                    "value": "mu_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_486": {
                "variable": {
                    "value": "adv_tensors_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[attack_tensor_training_dict[x] for x in train_params.attacks]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "initialize_all_variables_491": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_920": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_95": {
                "name_or_scope": {
                    "value": "enc_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_117": {
                "name_or_scope": {
                    "value": "enc_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_139": {
                "name_or_scope": {
                    "value": "enc_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_196": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_204": {
                "variable": {
                    "value": "kernel1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[train_params.enc_kernel_size, train_params.enc_kernel_size, 3, train_params.enc_filters]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer_conv2d()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_207": {
                "variable": {
                    "value": "biases1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[train_params.enc_filters]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_227": {
                "variable": {
                    "value": "final_w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[train_params.hk, train_params.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(-stdv, stdv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_229": {
                "variable": {
                    "value": "final_b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[train_params.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_283": {
                "variable": {
                    "value": "y_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "y_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inference(x_sb + noise, FM_h, keep_prob, pre_define_vars, resnet_params, train_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_286": {
                "variable": {
                    "value": "y_softmax_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "y_logits_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inference(x_sb_adv + adv_noise, FM_h, keep_prob, pre_define_vars, resnet_params, train_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_315": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_350": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_372": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack(all_train_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_373": {
                "variable": {
                    "value": "total_pretrain_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pretrain_cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(pretrain_adv + pretrain_benign)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_203": {
                "name_or_scope": {
                    "value": "enc_layer",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_225": {
                "name_or_scope": {
                    "value": "fc2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_265": {
                "device_name": {
                    "value": "'/gpu:{}'.format(GPU_IDX[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_278": {
                "variable": {
                    "value": "pretrain_cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pretrain_adv + pretrain_benign",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_348": {
                "device_name": {
                    "value": "'/gpu:{}'.format(GPU_IDX[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_454": {
                "device_name": {
                    "value": "'/gpu:{}'.format(AUX_GPU_IDX[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_465": {
                "device_name": {
                    "value": "'/gpu:{}'.format(AUX_GPU_IDX[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_476": {
                "device_name": {
                    "value": "'/gpu:{}'.format(AUX_GPU_IDX[2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_511": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_267": {
                "name_or_scope": {
                    "value": "enc_layer",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_302": {
                "device_name": {
                    "value": "'/gpu:{}'.format(gpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_356": {
                "control_inputs": {
                    "value": "enc_update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[op for op in update_ops if 'enc_layer' in op.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "control_dependencies_362": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_372": {
                "values": {
                    "value": "all_train_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "placeholder_386": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "v.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_390": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "v.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "all_variables_407": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_208": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_228": {
                "minval": {
                    "value": "-stdv",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "stdv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / math.sqrt(train_params.hk)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_initializer_230": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_305": {
                "logits": {
                    "value": "y_logits_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_inference(x_sb_tests[gpu] + noise, FM_h, keep_prob, pre_define_vars, resnet_params, train_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_270": {
                "input": {
                    "value": "x_sb_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, train_params.image_size, train_params.image_size, 3], name='x_sb_adv')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_275": {
                "input": {
                    "value": "x_sb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, train_params.image_size, train_params.image_size, 3], name='x_sb')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/StoBatchTinyImageNet/StoBatch_resnet_pretrain_testing.py": {
        "tensorflow": {
            "set_verbosity_45": {
                "level": {
                    "value": "tf.compat.v1.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_verbosity_46": {
                "level": {
                    "value": "tf.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_102": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fixed_padding(inputs, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + perturbH + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, True, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + perturbH + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, False, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs + adv_noise, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, False, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_124": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fixed_padding(inputs, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + perturbH + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, True, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + perturbH + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, False, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs + adv_noise, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, False, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_146": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fixed_padding(inputs, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + perturbH + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, True, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + perturbH + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, False, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs + adv_noise, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, False, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_92": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fixed_padding(inputs, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + perturbH + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, True, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + perturbH + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, False, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs + adv_noise, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, False, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "pre_define_vars['kernel1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, train_params.enc_stride, train_params.enc_stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_114": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fixed_padding(inputs, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + perturbH + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, True, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + perturbH + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, False, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs + adv_noise, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, False, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "pre_define_vars['kernel1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, train_params.enc_stride, train_params.enc_stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_136": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fixed_padding(inputs, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + perturbH + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, True, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + perturbH + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, False, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ],
                        [
                            "fixed_padding(inputs + adv_noise, pre_define_vars['kernel1'].shape[0], _DATA_FORMAT)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, pre_define_vars['kernel1'], [1, train_params.enc_stride, train_params.enc_stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "inputs + pre_define_vars['biases1']",
                            "BinOp"
                        ],
                        [
                            "resnet18_builder_mod(inputs, keep_prob, False, _DATA_FORMAT, resnet_params.num_filters, resnet_params.resnet_version, resnet_params.first_pool_size, resnet_params.first_pool_stride, resnet_params.block_sizes, resnet_params.bottleneck, resnet_params.block_fn, resnet_params.block_strides, resnet_params.pre_activation, train_params.num_classes, train_params.hk)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inputs, -1, 1)",
                            "Call"
                        ],
                        [
                            "_fc(inputs, train_params.num_classes, None, reuse=tf.AUTO_REUSE, name='fc2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "pre_define_vars['kernel1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, train_params.enc_stride, train_params.enc_stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_153": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adv_inference(inputs, adv_noise, keep_prob, pre_define_vars, resnet_params, train_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_190": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_225": {
                "variable": {
                    "value": "x_sb",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, train_params.image_size, train_params.image_size, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_sb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_226": {
                "variable": {
                    "value": "x_test",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, train_params.image_size, train_params.image_size, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_test",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_228": {
                "variable": {
                    "value": "y_sb",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, train_params.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y_sb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_229": {
                "variable": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, train_params.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y_test",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_231": {
                "variable": {
                    "value": "FM_h",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, train_params.enc_h_size, train_params.enc_h_size, train_params.enc_filters]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "FM_h",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_232": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, train_params.image_size, train_params.image_size, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "noise",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_233": {
                "variable": {
                    "value": "adv_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, train_params.image_size, train_params.image_size, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "adv_noise",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_235": {
                "variable": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_243": {
                "variable": {
                    "value": "all_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_283": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_285": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(log_device_placement=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_289": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.all_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_293": {
                "variable": {
                    "value": "ckpts",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_path_read",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(os.getcwd() + test_params.check_point_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_317": {
                "variable": {
                    "value": "mu_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "run_479": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_89": {
                "name_or_scope": {
                    "value": "enc_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_111": {
                "name_or_scope": {
                    "value": "enc_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_133": {
                "name_or_scope": {
                    "value": "enc_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_189": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_197": {
                "variable": {
                    "value": "kernel1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[train_params.enc_kernel_size, train_params.enc_kernel_size, 3, train_params.enc_filters]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer_conv2d()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_200": {
                "variable": {
                    "value": "biases1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[train_params.enc_filters]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_212": {
                "variable": {
                    "value": "final_w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[train_params.hk, train_params.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(-stdv, stdv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_214": {
                "variable": {
                    "value": "final_b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[train_params.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_240": {
                "variable": {
                    "value": "y_softmax_test_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "y_logits_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_inference(x_sb + noise, FM_h, keep_prob, pre_define_vars, resnet_params, train_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_249": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_196": {
                "name_or_scope": {
                    "value": "enc_layer",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_210": {
                "name_or_scope": {
                    "value": "fc2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_238": {
                "device_name": {
                    "value": "GPU_NAME[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_320": {
                "device_name": {
                    "value": "GPU_NAME[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_327": {
                "device_name": {
                    "value": "GPU_NAME[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_334": {
                "device_name": {
                    "value": "GPU_NAME[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "all_variables_289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_201": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_213": {
                "minval": {
                    "value": "-stdv",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "stdv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / math.sqrt(train_params.hk)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_initializer_215": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/StoBatchTinyImageNet/accountant.py": {
        "tensorflow": {
            "Variable_55": {
                "variable": {
                    "value": "self._eps_squared_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([1])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "eps_squared_sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_57": {
                "variable": {
                    "value": "self._delta_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([1])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "delta_sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_346": {
                "variable": {
                    "value": "binomial",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "self._binomial_table",
                    "type": "Attribute",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[t + 1, t + 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_352": {
                "variable": {
                    "value": "exponents",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[j * (j + 1.0 - 2.0 * s) / (2.0 * sigma * sigma) for j in range(t + 1)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_355": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "binomial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(self._binomial_table, [0, 0], [t + 1, t + 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "signs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy.zeros((t + 1, t + 1), dtype=numpy.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_360": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(binomial, signs)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.exp(exponents)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_363": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(x, tf.exp(exponents))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_380": {
                "variable": {
                    "value": "binomial_table",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "self._binomial_table",
                    "type": "Attribute",
                    "possible_values": []
                },
                "begin": {
                    "value": "[moment_order, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, moment_order + 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_383": {
                "variable": {
                    "value": "qs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.constant([i * 1.0 for i in range(moment_order + 1)], dtype=tf.float64) * tf.cast(tf.log(q), dtype=tf.float64)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_387": {
                "variable": {
                    "value": "term0",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "binomial_table * qs * moments0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_389": {
                "variable": {
                    "value": "term1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "binomial_table * qs * moments1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_88": {
                "variable": {
                    "value": "amortize_eps",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.log(1.0 + amortize_ratio * (tf.exp(eps) - 1.0))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_90": {
                "variable": {
                    "value": "amortize_delta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "amortize_ratio * delta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "group_226": {
                "*inputs": {
                    "value": "*moments_accum_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "squeeze_390": {
                "input": {
                    "value": "tf.log(tf.cast(q * term0 + (1.0 - q) * term1, tf.float64))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_op_398": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_55": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_57": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_79": {
                "control_inputs": {
                    "value": "[tf.Assert(tf.greater(delta, 0), ['delta needs to be greater than 0'])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "group_91": {
                "*inputs": {
                    "value": "*[tf.assign_add(self._eps_squared_sum, tf.square(amortize_eps)), tf.assign_add(self._delta_sum, amortize_delta)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Variable_181": {
                "initial_value": {
                    "value": "numpy.float64(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "'log_moments-%d' % moment_order",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_360": {
                "x": {
                    "value": "exponents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([j * (j + 1.0 - 2.0 * s) / (2.0 * sigma * sigma) for j in range(t + 1)], dtype=tf.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_390": {
                "x": {
                    "value": "tf.cast(q * term0 + (1.0 - q) * term1, tf.float64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_88": {
                "x": {
                    "value": "1.0 + amortize_ratio * (tf.exp(eps) - 1.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_220": {
                "x": {
                    "value": "num_examples",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_add_225": {
                "ref": {
                    "value": "self._log_moments[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "moment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._compute_log_moment(sigma, q, self._moment_orders[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_383": {
                "value": {
                    "value": "[i * 1.0 for i in range(moment_order + 1)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_384": {
                "x": {
                    "value": "tf.log(q)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_390": {
                "x": {
                    "value": "q * term0 + (1.0 - q) * term1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Assert_80": {
                "condition": {
                    "value": "tf.greater(delta, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['delta needs to be greater than 0']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_82": {
                "x": {
                    "value": "num_examples",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_385": {
                "x": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(num_examples, tf.float64) * 1.0 / self._total_examples",
                            "BinOp"
                        ]
                    ]
                }
            },
            "greater_80": {
                "x": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_deltas",
                            "Name"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "assign_add_91": {
                "ref": {
                    "value": "self._eps_squared_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.square(amortize_eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_add_93": {
                "ref": {
                    "value": "self._delta_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "amortize_delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(amortize_ratio * delta, [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "square_92": {
                "x": {
                    "value": "amortize_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.log(1.0 + amortize_ratio * (tf.exp(eps) - 1.0)), [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_89": {
                "x": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_eps",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/StoBatchTinyImageNet/cleverhans/attacks.py": {
        "tensorflow": {
            "placeholder_125": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "x_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None] + list(x_val.shape)[1:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "while_loop_472": {
                "variable": {
                    "value": "(_, eta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": []
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[tf.zeros([]), eta]",
                    "type": "List",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_608": {
                "variable": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(self.tf_dtype, shape=x_shape)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x_single, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "while_loop_667": {
                "variable": {
                    "value": "(_, adv_x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": []
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[tf.zeros([]), adv_x, momentum]",
                    "type": "List",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "py_func_1049": {
                "variable": {
                    "value": "wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "cw_wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x, labels]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_1181": {
                "variable": {
                    "value": "wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "ead_wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x, labels]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_1268": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.top_k(logits, k=self.nb_candidate)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.nb_candidate]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_1272": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "jacobian_graph(preds, x, self.nb_candidate)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "py_func_1281": {
                "variable": {
                    "value": "wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "deepfool_wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_1375": {
                "variable": {
                    "value": "wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lbfgs_wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x, self.y_target]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_1534": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_module.attack_softmax_cross_entropy(y, preds, mean=False)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ],
                        [
                            "-reduce_sum(tf.square(a_feat - g_feat), axis)",
                            "UnaryOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "FGM.generate(x + e, **fgm_params)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "adv_x + scaled_signed_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "pgd_attack(loss_fn, x, y_attack, epsilon, num_steps=num_steps, optimizer=optimizer, early_stop_loss_threshold=early_stop_loss_threshold, is_debug=is_debug)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_1547": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "FGM.generate(x + e, **fgm_params)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "adv_x + scaled_signed_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "pgd_attack(loss_fn, x, y_attack, epsilon, num_steps=num_steps, optimizer=optimizer, early_stop_loss_threshold=early_stop_loss_threshold, is_debug=is_debug)",
                            "Call"
                        ]
                    ]
                }
            },
            "while_loop_1589": {
                "variable": {
                    "value": "(_, eta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": []
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[tf.zeros([]), eta]",
                    "type": "List",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "as_dtype_35": {
                "variable": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type_value": {
                    "value": "dtypestr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_423": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_477": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "FGM.generate(x + e, **fgm_params)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "adv_x + scaled_signed_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "pgd_attack(loss_fn, x, y_attack, epsilon, num_steps=num_steps, optimizer=optimizer, early_stop_loss_threshold=early_stop_loss_threshold, is_debug=is_debug)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_630": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_module.attack_softmax_cross_entropy(y, preds, mean=False)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ],
                        [
                            "-reduce_sum(tf.square(a_feat - g_feat), axis)",
                            "UnaryOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "ax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ax + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "x + utils_tf.clip_eta(ax - x, self.ord, self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(ax, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(ax)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_634": {
                "variable": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grad.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_663": {
                "variable": {
                    "value": "ax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ax + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "x + utils_tf.clip_eta(ax - x, self.ord, self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(ax, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(ax)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_1545": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "FGM.generate(x + e, **fgm_params)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "adv_x + scaled_signed_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "pgd_attack(loss_fn, x, y_attack, epsilon, num_steps=num_steps, optimizer=optimizer, early_stop_loss_threshold=early_stop_loss_threshold, is_debug=is_debug)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_1594": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "FGM.generate(x + e, **fgm_params)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "adv_x + scaled_signed_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "pgd_attack(loss_fn, x, y_attack, epsilon, num_steps=num_steps, optimizer=optimizer, early_stop_loss_threshold=early_stop_loss_threshold, is_debug=is_debug)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_session_37": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_116": {
                "variable": {
                    "value": "new_kwargs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "given_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.feedable_kwargs[name]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None] + list(value.shape[1:])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_float_436": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(model_preds, preds_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_437": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.y_target",
                            "Attribute"
                        ],
                        [
                            "self.y",
                            "Attribute"
                        ],
                        [
                            "tf.to_float(tf.equal(model_preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / reduce_sum(y, 1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "kwargs.pop('y', [None] * batch_size)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "less_457": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xrange(nb_s)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.nb_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_464": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "FGM.generate(x + e, **fgm_params)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "adv_x + scaled_signed_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(adv_x)",
                            "Call"
                        ],
                        [
                            "x + eta",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "pgd_attack(loss_fn, x, y_attack, epsilon, num_steps=num_steps, optimizer=optimizer, early_stop_loss_threshold=early_stop_loss_threshold, is_debug=is_debug)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_620": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xrange(nb_s)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.nb_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_641": {
                "variable": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decay_factor * m + grad",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_by_value_661": {
                "variable": {
                    "value": "ax",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "ax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ax + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "x + utils_tf.clip_eta(ax - x, self.ord, self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(ax, self.clip_min, self.clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(ax)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_783": {
                "variable": {
                    "value": "self.y_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func": {
                    "value": "random_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[labels]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_821": {
                "variable": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "jsma_wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x, self.y_target]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_840": {
                "variable": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "jsma_wrap",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_1537": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad / tf.maximum(avoid_zero_div, reduce_mean(tf.abs(grad), red_ind, keepdims=True))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_1579": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(self.tf_dtype, shape=x_shape)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x_single, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "less_1583": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xrange(nb_s)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.nb_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_118": {
                "variable": {
                    "value": "new_kwargs[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "given_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.feedable_kwargs[name]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_228": {
                "variable": {
                    "value": "original_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(preds, preds_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_229": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "original_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_420": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(self.tf_dtype, shape=x_shape)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x_single, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_423": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(self.tf_dtype, shape=x_shape)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x_single, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_472": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_635": {
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(1e-12, grad.dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "reduce_mean(tf.abs(grad), red_ind, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_643": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(1e-12, grad.dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "reduce_sum(tf.abs(m), red_ind, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_668": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "top_k_1269": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_logits(x)",
                            "Call"
                        ],
                        [
                            "self.model.get_logits(x)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.nb_candidate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_1531": {
                "x": {
                    "value": "a_feat - g_feat",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_1589": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_436": {
                "x": {
                    "value": "model_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_probs(x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "preds_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_max(preds, 1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "reduce_max(model_preds, 1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_649": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(avoid_zero_div, square)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_228": {
                "x": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_probs(x)",
                            "Call"
                        ],
                        [
                            "self.model.get_probs(ax)",
                            "Call"
                        ],
                        [
                            "self.model.get_probs(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.top_k(logits, k=self.nb_candidate)[0], [-1, self.nb_candidate])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "preds_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_max(preds, 1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "reduce_max(model_preds, 1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_637": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad / tf.maximum(avoid_zero_div, reduce_mean(tf.abs(grad), red_ind, keepdims=True))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_645": {
                "x": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decay_factor * m + grad",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_648": {
                "x": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decay_factor * m + grad",
                            "BinOp"
                        ]
                    ]
                }
            },
            "maximum_649": {
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(1e-12, grad.dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_sum(tf.square(m), red_ind, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/StoBatchTinyImageNet/cleverhans/attacks_tf.py": {
        "tensorflow": {
            "as_dtype_22": {
                "variable": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gradients_85": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_module.attack_softmax_cross_entropy(y, preds, mean=False)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ],
                        [
                            "reduce_mean(wrapped_loss_fn(perturbation), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss], 'Total batch loss')",
                            "Call"
                        ],
                        [
                            "highest_nonlabel_logits - label_logits",
                            "BinOp"
                        ],
                        [
                            "self.sess.run(self.loss, feed_dict={self.x: adv_x.reshape(oimgs.shape), self.targeted_label: targets, self.ori_img: oimgs, self.const: CONST})",
                            "Call"
                        ],
                        [
                            "reduce_mean(loss_fn(x), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [height, height], [width, width], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(x, angle, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.transform(x, theta, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ],
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "constant_499": {
                "variable": {
                    "value": "zero_diagonal",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones((nb_features, nb_features), int)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "while_loop_610": {
                "variable": {
                    "value": "(x_adv, _, _, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": []
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[x, y_target, search_domain, 0, True]",
                    "type": "List",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "while_loop_1893": {
                "variable": {
                    "value": "(_, final_perturbation, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mod_not_done & (reduce_sum(domain_in, axis=1) >= 2)",
                            "BinOp"
                        ]
                    ]
                },
                "body": {
                    "value": "loop_body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[tf.constant(0.0), init_perturbation, flat_init_optim_state]",
                    "type": "List",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "one_hot_1920": {
                "variable": {
                    "value": "logit_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_1936": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([1, 0, -dx * height, 0, 1, -dy * width, 0, 0] * batch_size, dtype=np.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, 8)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_1939": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [height, height], [width, width], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(x, angle, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.transform(x, theta, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ],
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [height, height], [width, width], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_1990": {
                "variable": {
                    "value": "adv_xs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "adv_xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(adv_xs)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_1991": {
                "variable": {
                    "value": "accs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "accs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(accs)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_75": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(preds, preds_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_76": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / reduce_sum(y, 1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / reduce_sum(y, 1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sign_89": {
                "variable": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sess.run(self.grad, feed_dict={self.x: adv_x.reshape(oimgs.shape), self.targeted_label: targets, self.ori_img: oimgs, self.const: CONST})",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_95": {
                "variable": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(grad)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(normalized_grad)",
                            "Call"
                        ],
                        [
                            "grad / avoid_nan_norm",
                            "BinOp"
                        ],
                        [
                            "grad / tf.sqrt(square)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_by_value_124": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "x + d",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "copy.copy(sample)",
                            "Call"
                        ],
                        [
                            "np.reshape(adv_x, (1, nb_features))",
                            "Call"
                        ],
                        [
                            "apply_perturbations(i, j, adv_x, increase, theta, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "copy.copy(sample)",
                            "Call"
                        ],
                        [
                            "np.clip((1 + overshoot) * r_tot + sample, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "np.clip(r_tot + sample, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "adv_x.reshape(oimgs.shape)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.clip_min * np.ones(oimgs.shape[:])",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.clip_max * np.ones(oimgs.shape[:])",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gradients_288": {
                "variable": {
                    "value": "(derivatives,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "predictions[:, class_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [height, height], [width, width], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(x, angle, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.transform(x, theta, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ],
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_505": {
                "variable": {
                    "value": "search_domain",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(x < clip_max, tf_dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_508": {
                "variable": {
                    "value": "search_domain",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(x > clip_min, tf_dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_527": {
                "variable": {
                    "value": "preds_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.argmax(preds, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(grads)",
                            "Call"
                        ],
                        [
                            "int(y_target.shape[-1].value)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_534": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack(list_derivatives)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nb_classes, -1, nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_541": {
                "variable": {
                    "value": "target_class",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(y_in, perm=[1, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nb_classes, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_543": {
                "variable": {
                    "value": "other_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(target_class, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_577": {
                "variable": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(scores, shape=[-1, nb_features * nb_features])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mod_580": {
                "variable": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(scores)",
                            "Call"
                        ],
                        [
                            "tf.argmax(tf.reshape(scores, shape=[-1, nb_features * nb_features]), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.product(adv_x.shape[1:])",
                            "Call"
                        ],
                        [
                            "int(np.product(x.shape[1:]).value)",
                            "Call"
                        ]
                    ]
                }
            },
            "floordiv_581": {
                "variable": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(scores)",
                            "Call"
                        ],
                        [
                            "tf.argmax(tf.reshape(scores, shape=[-1, nb_features * nb_features]), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.product(adv_x.shape[1:])",
                            "Call"
                        ],
                        [
                            "int(np.product(x.shape[1:]).value)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_582": {
                "variable": {
                    "value": "p1_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.mod(best, nb_features)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.product(adv_x.shape[1:])",
                            "Call"
                        ],
                        [
                            "int(np.product(x.shape[1:]).value)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_583": {
                "variable": {
                    "value": "p2_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.floordiv(best, nb_features)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.product(adv_x.shape[1:])",
                            "Call"
                        ],
                        [
                            "int(np.product(x.shape[1:]).value)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_586": {
                "variable": {
                    "value": "mod_not_done",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "reduce_sum(y_in * preds_onehot, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_590": {
                "variable": {
                    "value": "cond_float",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(cond, tf_dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_596": {
                "variable": {
                    "value": "to_mod_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "to_mod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(p1_one_hot + p2_one_hot) * cond_float",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1] + x_in.shape[1:].as_list()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_604": {
                "variable": {
                    "value": "i_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i_in",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_742": {
                "variable": {
                    "value": "modifier",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape, dtype=np_dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_745": {
                "variable": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "timg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_746": {
                "variable": {
                    "value": "self.tlab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((batch_size, num_labels))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "tlab",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_748": {
                "variable": {
                    "value": "self.const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "const",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_752": {
                "variable": {
                    "value": "self.assign_timg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_timg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_753": {
                "variable": {
                    "value": "self.assign_tlab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, num_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_tlab",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_755": {
                "variable": {
                    "value": "self.assign_const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_const",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_791": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_793": {
                "variable": {
                    "value": "end_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_802": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[modifier] + new_vars",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_1021": {
                "variable": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_1028": {
                "variable": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "timg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_1029": {
                "variable": {
                    "value": "self.newimg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "newimg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_1031": {
                "variable": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "slack",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_1033": {
                "variable": {
                    "value": "self.tlab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((batch_size, num_labels))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "tlab",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_1035": {
                "variable": {
                    "value": "self.const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "const",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_1039": {
                "variable": {
                    "value": "self.assign_timg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_timg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_1040": {
                "variable": {
                    "value": "self.assign_newimg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_newimg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_1042": {
                "variable": {
                    "value": "self.assign_slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_slack",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_1044": {
                "variable": {
                    "value": "self.assign_tlab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, num_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_tlab",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_1046": {
                "variable": {
                    "value": "self.assign_const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_const",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_1049": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_1050": {
                "variable": {
                    "value": "self.global_step_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_1054": {
                "variable": {
                    "value": "self.zt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.global_step_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.global_step_t + tf.cast(3, tf_dtype)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_1056": {
                "variable": {
                    "value": "cond1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(tf.subtract(self.slack, self.timg), self.beta_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_1058": {
                "variable": {
                    "value": "cond2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less_equal(tf.abs(tf.subtract(self.slack, self.timg)), self.beta_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_1061": {
                "variable": {
                    "value": "cond3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(tf.subtract(self.slack, self.timg), tf.negative(self.beta_t))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_1064": {
                "variable": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(self.slack, self.beta_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(self.clip_max, tf_dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_1066": {
                "variable": {
                    "value": "lower",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(self.slack, self.beta_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(self.clip_min, tf_dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_1069": {
                "variable": {
                    "value": "self.assign_newimg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "cond1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.greater(tf.subtract(self.slack, self.timg), self.beta_t), tf_dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(tf.subtract(self.slack, self.beta_t), tf.cast(self.clip_max, tf_dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_1078": {
                "variable": {
                    "value": "self.setter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.newimg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.assign_newimg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_1079": {
                "variable": {
                    "value": "self.setter_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.assign_slack",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "polynomial_decay_1132": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "self.MAX_ITERATIONS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "end_learning_rate": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "power": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_1141": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_1145": {
                "variable": {
                    "value": "end_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_1155": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.global_step] + [self.slack] + [self.newimg] + new_vars",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Variable_1495": {
                "variable": {
                    "value": "self.ori_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(self.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "ori_img",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_1497": {
                "variable": {
                    "value": "self.const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(self.batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "const",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gradients_1505": {
                "variable": {
                    "value": "(self.grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_1788": {
                "variable": {
                    "value": "(_, all_grads)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mod_not_done & (reduce_sum(domain_in, axis=1) >= 2)",
                            "BinOp"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[0, tf.TensorArray(size=self._num_iters, dtype=tf_dtype)]",
                    "type": "List",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_1807": {
                "variable": {
                    "value": "clipped_perturbation",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "perturbation",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-epsilon",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-09",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_1809": {
                "variable": {
                    "value": "new_image",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "input_image + clipped_perturbation",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "assert_less_equal_1901": {
                "variable": {
                    "value": "check_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "final_perturbation",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "perturbation_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epsilon * 1.1",
                            "BinOp"
                        ]
                    ]
                },
                "message": {
                    "value": "'final_perturbation must change no pixel by more than %s' % perturbation_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_op_1906": {
                "variable": {
                    "value": "check_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stop_gradient_1910": {
                "input": {
                    "value": "adversarial_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_image + final_perturbation",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_float_1960": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(preds, preds_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_1961": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / reduce_sum(y, 1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / reduce_sum(y, 1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gather_1992": {
                "params": {
                    "value": "adv_xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(adv_xs)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.argmin(accs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_99": {
                "variable": {
                    "value": "avoid_nan_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "Constant"
                        ],
                        [
                            "1e-12",
                            "Constant"
                        ]
                    ]
                },
                "y": {
                    "value": "reduce_sum(tf.abs(grad), reduction_indices=red_ind, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_155": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stop_gradient_162": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Hd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(kl, d)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clip_by_value_166": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "x + d",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "copy.copy(sample)",
                            "Call"
                        ],
                        [
                            "np.reshape(adv_x, (1, nb_features))",
                            "Call"
                        ],
                        [
                            "apply_perturbations(i, j, adv_x, increase, theta, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "copy.copy(sample)",
                            "Call"
                        ],
                        [
                            "np.clip((1 + overshoot) * r_tot + sample, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "np.clip(r_tot + sample, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "adv_x.reshape(oimgs.shape)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.clip_min * np.ones(oimgs.shape[:])",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.clip_max * np.ones(oimgs.shape[:])",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "logical_and_521": {
                "x": {
                    "value": "tf.less(i_in, max_iters)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "cond_in",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gradients_532": {
                "variable": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "preds[:, class_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "x_in",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "minimum_599": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.clip_max * np.ones(oimgs.shape[:])",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "x_in + to_mod_reshape * theta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_601": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.clip_min * np.ones(oimgs.shape[:])",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "x_in - to_mod_reshape * theta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_779": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ZERO()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "other - real + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_782": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ZERO()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "real - other + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_1070": {
                "x": {
                    "value": "cond2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.less_equal(tf.abs(tf.subtract(self.slack, self.timg)), self.beta_t), tf_dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_1071": {
                "x": {
                    "value": "cond3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.less(tf.subtract(self.slack, self.timg), tf.negative(self.beta_t)), tf_dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "lower",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.add(self.slack, self.beta_t), tf.cast(self.clip_min, tf_dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_1074": {
                "x": {
                    "value": "self.zt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.assign_newimg - self.newimg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_1115": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ZERO()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "other - real + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_1116": {
                "variable": {
                    "value": "loss1_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ZERO()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "other_y - real_y + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_1119": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ZERO()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "real - other + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_1120": {
                "variable": {
                    "value": "loss1_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ZERO()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "real_y - other_y + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_1651": {
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_module.attack_softmax_cross_entropy(y, preds, mean=False)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ],
                        [
                            "reduce_mean(wrapped_loss_fn(perturbation), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss], 'Total batch loss')",
                            "Call"
                        ],
                        [
                            "highest_nonlabel_logits - label_logits",
                            "BinOp"
                        ],
                        [
                            "self.sess.run(self.loss, feed_dict={self.x: adv_x.reshape(oimgs.shape), self.targeted_label: targets, self.ori_img: oimgs, self.const: CONST})",
                            "Call"
                        ],
                        [
                            "reduce_mean(loss_fn(x), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [height, height], [width, width], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(x, angle, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.transform(x, theta, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ],
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_1768": {
                "variable": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1] + static_x_shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_1776": {
                "variable": {
                    "value": "delta_x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[delta_x, -delta_x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_1777": {
                "variable": {
                    "value": "loss_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "loss_fn(x + delta_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2 * self._num_samples] + [1] * (len(x_shape) - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_1781": {
                "variable": {
                    "value": "avg_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "avg_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_sum(all_grads.stack(), axis=0)",
                            "Call"
                        ],
                        [
                            "reduce_mean(loss_vals * delta_x, axis=0) / delta",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(avg_grad, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "control_dependencies_1803": {
                "control_inputs": {
                    "value": "[tf.assert_less_equal(input_image, 1.0), tf.assert_greater_equal(input_image, 0.0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Print_1854": {
                "variable": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Print(input_image, [], 'Starting PGD attack with epsilon: %s' % epsilon)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "'Starting PGD attack with epsilon: %s' % epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_1859": {
                "input": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Print(input_image, [], 'Starting PGD attack with epsilon: %s' % epsilon)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_1882": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(num_iterations)",
                            "Call"
                        ],
                        [
                            "tf.identity(i)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.less(loss, early_stop_loss_threshold), lambda : float(num_steps), lambda : i)",
                            "Call"
                        ],
                        [
                            "range(0, len(imgs), self.batch_size)",
                            "Call"
                        ],
                        [
                            "range(0, len(imgs) // batch_size)",
                            "Call"
                        ],
                        [
                            "range(self.batch_size)",
                            "Call"
                        ],
                        [
                            "xrange(len(x))",
                            "Call"
                        ],
                        [
                            "xrange(len(x))",
                            "Call"
                        ]
                    ]
                }
            },
            "less_1890": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(num_iterations)",
                            "Call"
                        ],
                        [
                            "tf.identity(i)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.less(loss, early_stop_loss_threshold), lambda : float(num_steps), lambda : i)",
                            "Call"
                        ],
                        [
                            "range(0, len(imgs), self.batch_size)",
                            "Call"
                        ],
                        [
                            "range(0, len(imgs) // batch_size)",
                            "Call"
                        ],
                        [
                            "range(self.batch_size)",
                            "Call"
                        ],
                        [
                            "xrange(len(x))",
                            "Call"
                        ],
                        [
                            "xrange(len(x))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "num_steps",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "control_dependencies_1908": {
                "control_inputs": {
                    "value": "[check_diff]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmin_1992": {
                "input": {
                    "value": "accs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(accs)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_75": {
                "x": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_probs(x_in)",
                            "Call"
                        ],
                        [
                            "model.get_probs(x)",
                            "Call"
                        ],
                        [
                            "np.atleast_1d(utils_tf.model_argmax(self.sess, self.x, self.model_preds, adv_x))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "preds_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_max(preds, 1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "reduce_max(preds, 1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_107": {
                "variable": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "Constant"
                        ],
                        [
                            "1e-12",
                            "Constant"
                        ]
                    ]
                },
                "y": {
                    "value": "reduce_sum(tf.square(grad), reduction_indices=red_ind, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_156": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [height, height], [width, width], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(x, angle, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.transform(x, theta, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ],
                        [
                            "np.copy(x)",
                            "Call"
                        ],
                        [
                            "np.argmax(x)",
                            "Call"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cast_506": {
                "x": {
                    "value": "x < clip_max",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_509": {
                "x": {
                    "value": "x > clip_min",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "less_521": {
                "x": {
                    "value": "i_in",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "max_iters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.floor(nb_features * gamma / 2)",
                            "Call"
                        ],
                        [
                            "np.floor(nb_features * gamma / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_527": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_probs(x_in)",
                            "Call"
                        ],
                        [
                            "model.get_probs(x)",
                            "Call"
                        ],
                        [
                            "np.atleast_1d(utils_tf.model_argmax(self.sess, self.x, self.model_preds, adv_x))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_535": {
                "values": {
                    "value": "list_derivatives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "transpose_542": {
                "a": {
                    "value": "y_in",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "not_equal_543": {
                "x": {
                    "value": "target_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(y_in, perm=[1, 0]), shape=[nb_classes, -1, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_552": {
                "x": {
                    "value": "tf.equal(domain_in, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_557": {
                "tensor": {
                    "value": "target_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_target",
                            "Name"
                        ],
                        [
                            "target_tmp - increase_coef * reduce_max(tf.abs(grads_target), axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, nb_features, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_558": {
                "tensor": {
                    "value": "target_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_target",
                            "Name"
                        ],
                        [
                            "target_tmp - increase_coef * reduce_max(tf.abs(grads_target), axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_563": {
                "tensor": {
                    "value": "other_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_other",
                            "Name"
                        ],
                        [
                            "other_tmp + increase_coef * reduce_max(tf.abs(grads_other), axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, nb_features, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_564": {
                "tensor": {
                    "value": "other_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_other",
                            "Name"
                        ],
                        [
                            "other_tmp + increase_coef * reduce_max(tf.abs(grads_other), axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_578": {
                "tensor": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores_mask * (-target_sum * other_sum)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(scores_mask, tf_dtype) * (-target_sum * other_sum) * zero_diagonal",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, nb_features * nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_590": {
                "x": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mod_not_done & (reduce_sum(domain_in, axis=1) >= 2)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "square_770": {
                "x": {
                    "value": "self.newimg - self.other",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "greater_1056": {
                "x": {
                    "value": "tf.subtract(self.slack, self.timg)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_equal_1058": {
                "x": {
                    "value": "tf.abs(tf.subtract(self.slack, self.timg))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_1061": {
                "x": {
                    "value": "tf.subtract(self.slack, self.timg)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.negative(self.beta_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_1064": {
                "x": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_1065": {
                "x": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_1066": {
                "x": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_1067": {
                "x": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "square_1086": {
                "x": {
                    "value": "self.newimg - self.timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_1088": {
                "x": {
                    "value": "self.slack - self.timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_1090": {
                "x": {
                    "value": "self.newimg - self.timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_1092": {
                "x": {
                    "value": "self.slack - self.timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_1094": {
                "x": {
                    "value": "self.l1dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_1096": {
                "x": {
                    "value": "self.l1dist_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_1130": {
                "x": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.loss21",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_1502": {
                "x": {
                    "value": "self.x - self.ori_img",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_1702": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_1703": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sign_1752": {
                "x": {
                    "value": "tf.random_uniform([self._num_samples] + x_shape[1:], minval=-1.0, maxval=1.0, dtype=tf_dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_1853": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Print_1878": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_module.attack_softmax_cross_entropy(y, preds, mean=False)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ],
                        [
                            "reduce_mean(wrapped_loss_fn(perturbation), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss], 'Total batch loss')",
                            "Call"
                        ],
                        [
                            "highest_nonlabel_logits - label_logits",
                            "BinOp"
                        ],
                        [
                            "self.sess.run(self.loss, feed_dict={self.x: adv_x.reshape(oimgs.shape), self.targeted_label: targets, self.ori_img: oimgs, self.const: CONST})",
                            "Call"
                        ],
                        [
                            "reduce_mean(loss_fn(x), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[loss]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "Total batch loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_1881": {
                "control_inputs": {
                    "value": "[loss]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_1884": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.less(loss, early_stop_loss_threshold)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : float(num_steps)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : i",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "equal_1960": {
                "x": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_probs(x_in)",
                            "Call"
                        ],
                        [
                            "model.get_probs(x)",
                            "Call"
                        ],
                        [
                            "np.atleast_1d(utils_tf.model_argmax(self.sess, self.x, self.model_preds, adv_x))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "preds_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_max(preds, 1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "reduce_max(preds, 1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "count_nonzero_1987": {
                "input": {
                    "value": "tf.equal(tf.argmax(y, axis=-1), tf.argmax(preds_adv, axis=-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_161": {
                "ys": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils_tf.kl_with_logits(logits, logits_d)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal(tf.shape(x), dtype=tf_dtype)",
                            "Call"
                        ],
                        [
                            "xi * utils_tf.l2_batch_normalize(d)",
                            "BinOp"
                        ],
                        [
                            "tf.stop_gradient(Hd)",
                            "Call"
                        ],
                        [
                            "eps * utils_tf.l2_batch_normalize(d)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "equal_552": {
                "x": {
                    "value": "domain_in",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_556": {
                "x": {
                    "value": "grads_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_sum(grads * target_class, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_562": {
                "x": {
                    "value": "grads_other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_sum(grads * other_classes, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_573": {
                "x": {
                    "value": "scores_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(target_sum > 0) & (other_sum < 0)",
                            "BinOp"
                        ],
                        [
                            "(target_sum < 0) & (other_sum > 0)",
                            "BinOp"
                        ],
                        [
                            "(target_sum > 0) & (other_sum < 0)",
                            "BinOp"
                        ],
                        [
                            "(target_sum < 0) & (other_sum > 0)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_760": {
                "x": {
                    "value": "modifier + self.timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_1055": {
                "x": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_1056": {
                "x": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_1058": {
                "x": {
                    "value": "tf.subtract(self.slack, self.timg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_1061": {
                "x": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "negative_1062": {
                "x": {
                    "value": "self.beta_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assert_less_equal_1804": {
                "x": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Print(input_image, [], 'Starting PGD attack with epsilon: %s' % epsilon)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "assert_greater_equal_1805": {
                "x": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Print(input_image, [], 'Starting PGD attack with epsilon: %s' % epsilon)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "device_1877": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_1896": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "equal_1987": {
                "x": {
                    "value": "tf.argmax(y, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(preds_adv, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_100": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sess.run(self.grad, feed_dict={self.x: adv_x.reshape(oimgs.shape), self.targeted_label: targets, self.ori_img: oimgs, self.const: CONST})",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_111": {
                "x": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(avoid_zero_div, reduce_sum(tf.square(grad), reduction_indices=red_ind, keepdims=True))",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_665": {
                "x": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.stack(list_derivatives), shape=[nb_classes, -1, nb_features])",
                            "Call"
                        ],
                        [
                            "self._compute_gradients(loss_fn, x, optim_state)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_790": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "subtract_1058": {
                "x": {
                    "value": "self.slack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_1140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_1723": {
                "x": {
                    "value": "self._beta1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_optim_state['t']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pow_1724": {
                "x": {
                    "value": "self._beta2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_optim_state['t']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "TensorArray_1792": {
                "size": {
                    "value": "self._num_iters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "less_1885": {
                "x": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_module.attack_softmax_cross_entropy(y, preds, mean=False)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ],
                        [
                            "reduce_mean(wrapped_loss_fn(perturbation), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [loss], 'Total batch loss')",
                            "Call"
                        ],
                        [
                            "highest_nonlabel_logits - label_logits",
                            "BinOp"
                        ],
                        [
                            "self.sess.run(self.loss, feed_dict={self.x: adv_x.reshape(oimgs.shape), self.targeted_label: targets, self.ori_img: oimgs, self.const: CONST})",
                            "Call"
                        ],
                        [
                            "reduce_mean(loss_fn(x), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "early_stop_loss_threshold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "argmax_1987": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / reduce_sum(y, 1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.to_float(tf.equal(preds, preds_max))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y)",
                            "Call"
                        ],
                        [
                            "y / reduce_sum(y, 1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_1988": {
                "input": {
                    "value": "preds_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_logits(adv_xs[-1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "square_108": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sess.run(self.grad, feed_dict={self.x: adv_x.reshape(oimgs.shape), self.targeted_label: targets, self.ori_img: oimgs, self.const: CONST})",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_767": {
                "x": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_1726": {
                "x": {
                    "value": "u_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_optim_state['u'][i] / (1.0 - tf.pow(self._beta2, t))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/StoBatchTinyImageNet/cleverhans/attacks_tfe.py": {
        "tensorflow": {
            "as_dtype_42": {
                "variable": {
                    "value": "self.tf_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type_value": {
                    "value": "dtypestr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sign_157": {
                "variable": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tape.gradient(loss, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_163": {
                "variable": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normalized_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(grad)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(normalized_grad)",
                            "Call"
                        ],
                        [
                            "grad / avoid_nan_norm",
                            "BinOp"
                        ],
                        [
                            "grad / tf.sqrt(square)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_by_value_193": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.generate(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "x + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(adv_x, self.clip_min, self.clip_max)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.clip_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientTape_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "maximum_167": {
                "variable": {
                    "value": "avoid_nan_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "Constant"
                        ],
                        [
                            "1e-12",
                            "Constant"
                        ]
                    ]
                },
                "y": {
                    "value": "reduce_sum(tf.abs(grad), reduction_indices=red_ind, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_175": {
                "variable": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "Constant"
                        ],
                        [
                            "1e-12",
                            "Constant"
                        ]
                    ]
                },
                "y": {
                    "value": "reduce_sum(tf.square(grad), reduction_indices=red_ind, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_168": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tape.gradient(loss, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_179": {
                "x": {
                    "value": "square",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(avoid_zero_div, reduce_sum(tf.square(grad), reduction_indices=red_ind, keepdims=True))",
                            "Call"
                        ]
                    ]
                }
            },
            "square_176": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tape.gradient(loss, x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/StoBatchTinyImageNet/cleverhans/augmentation.py": {
        "tensorflow": {
            "pad_22": {
                "variable": {
                    "value": "xp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(random_crop_and_flip_image, x)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[pad[0], pad[0]], [pad[1], pad[1]], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'REFLECT'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "random_flip_left_right_17": {
                "image": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(random_crop_and_flip_image, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_crop_23": {
                "value": {
                    "value": "xp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[pad[0], pad[0]], [pad[1], pad[1]], [0, 0]], mode)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "tf.shape(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "map_fn_50": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "random_crop_and_flip_image",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(random_crop_and_flip_image, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_23": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(random_crop_and_flip_image, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_27": {
                "device_name": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/CPU:0'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "map_fn_28": {
                "fn": {
                    "value": "func",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(random_crop_and_flip_image, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_32": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(random_crop_and_flip_image, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_33": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(random_crop_and_flip_image, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_crop_41": {
                "value": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[rows, cols, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_flip_left_right_44": {
                "image": {
                    "value": "_rand_crop_img(_pad_img(img))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_49": {
                "device_name": {
                    "value": "/CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/StoBatchTinyImageNet/cleverhans/compat.py": {
        "tensorflow": {
            "stop_gradient_107": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(labels)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_v2_108": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(labels)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_116": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(labels)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/StoBatchTinyImageNet/cleverhans/evaluation.py": {
        "tensorflow": {
            "equal_337": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y_batch, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(predictions, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_337": {
                "input": {
                    "value": "y_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.make_label_placeholder()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_338": {
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_probs(x_batch)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_139": {
                "device_name": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "devices",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/StoBatchTinyImageNet/cleverhans/loss.py": {
        "tensorflow": {
            "maximum_128": {
                "variable": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.distributions.Beta(self.beta, self.beta)",
                            "Call"
                        ],
                        [
                            "mix.sample([tf.shape(x)[0]] + [1] * (len(x.shape) - 1))",
                            "Call"
                        ],
                        [
                            "tf.maximum(mix, 1 - mix)",
                            "Call"
                        ],
                        [
                            "tf.distributions.Beta(self.beta, self.beta)",
                            "Call"
                        ],
                        [
                            "mix.sample([tf.shape(x)[0]] + [1] * (len(x.shape) - 1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1 - mix",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_132": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "softmax_cross_entropy_with_logits(labels=ym, logits=logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_155": {
                "variable": {
                    "value": "pairing_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pairing_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.reduce_mean(tf.square(a - b)) for (a, b) in zip(d1[Model.O_FEATURES], d2[Model.O_FEATURES])]",
                            "ListComp"
                        ],
                        [
                            "tf.reduce_mean(pairing_loss)",
                            "Call"
                        ],
                        [
                            "[tf.reduce_mean(tf.square(a - b)) for (a, b) in zip(d1[Model.O_FEATURES], d2[Model.O_FEATURES])]",
                            "ListComp"
                        ],
                        [
                            "tf.reduce_mean(pairing_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_156": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "softmax_cross_entropy_with_logits(labels=y, logits=d1[Model.O_LOGITS])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_168": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "terms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[weight * loss for (weight, loss) in safe_zip(weights, losses)]",
                            "ListComp"
                        ],
                        [
                            "[tf.nn.l2_loss(param) for param in self.model.get_params() if len(param.get_shape()) > 1]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "reduce_mean_250": {
                "variable": {
                    "value": "pairing_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pairing_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.reduce_mean(tf.square(a - b)) for (a, b) in zip(d1[Model.O_FEATURES], d2[Model.O_FEATURES])]",
                            "ListComp"
                        ],
                        [
                            "tf.reduce_mean(pairing_loss)",
                            "Call"
                        ],
                        [
                            "[tf.reduce_mean(tf.square(a - b)) for (a, b) in zip(d1[Model.O_FEATURES], d2[Model.O_FEATURES])]",
                            "ListComp"
                        ],
                        [
                            "tf.reduce_mean(pairing_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "Beta_275": {
                "variable": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": []
                },
                "concentration1": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "concentration0": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_75": {
                "inputs": {
                    "value": "terms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[weight * loss for (weight, loss) in safe_zip(weights, losses)]",
                            "ListComp"
                        ],
                        [
                            "[tf.nn.l2_loss(param) for param in self.model.get_params() if len(param.get_shape()) > 1]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Beta_126": {
                "variable": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": []
                },
                "concentration1": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "concentration0": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_158": {
                "input_tensor": {
                    "value": "softmax_cross_entropy_with_logits(labels=y, logits=d2[Model.O_LOGITS])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_184": {
                "input_tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softmax_cross_entropy_with_logits(logits=logits, labels=y)",
                            "Call"
                        ],
                        [
                            "tf.add_n(terms)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_124": {
                "device_name": {
                    "value": "/CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_152": {
                "input_tensor": {
                    "value": "tf.square(a - b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_loss_165": {
                "t": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_247": {
                "input_tensor": {
                    "value": "tf.square(a - b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_107": {
                "input_tensor": {
                    "value": "softmax_cross_entropy_with_logits(labels=y, logits=logit)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_152": {
                "x": {
                    "value": "a - b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_247": {
                "x": {
                    "value": "a - b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_100": {
                "x": {
                    "value": "y.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_213": {
                "x": {
                    "value": "y.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_276": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x, self.attack(x))",
                            "Tuple"
                        ],
                        [
                            "(x,)",
                            "Tuple"
                        ],
                        [
                            "(x, self.attack(x))",
                            "Tuple"
                        ],
                        [
                            "(x,)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "shape_127": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x, self.attack(x))",
                            "Tuple"
                        ],
                        [
                            "(x,)",
                            "Tuple"
                        ],
                        [
                            "(x, self.attack(x))",
                            "Tuple"
                        ],
                        [
                            "(x,)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "cast_102": {
                "x": {
                    "value": "y.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_215": {
                "x": {
                    "value": "y.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/StoBatchTinyImageNet/cleverhans/model.py": {
        "tensorflow": {
            "get_collection_85": {
                "variable": {
                    "value": "scope_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_90": {
                "variable": {
                    "value": "scope_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "executing_eagerly_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_58": {
                "logits": {
                    "value": "d[self.O_LOGITS]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.fprop(x, **kwargs)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/StoBatchTinyImageNet/cleverhans/model_backup.py": {
        "tensorflow": {
            "get_collection_85": {
                "variable": {
                    "value": "scope_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_90": {
                "variable": {
                    "value": "scope_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "executing_eagerly_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_58": {
                "logits": {
                    "value": "d[self.O_LOGITS]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.fprop(x, **kwargs)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/StoBatchTinyImageNet/cleverhans/picklable_model.py": {
        "tensorflow": {
            "matmul_198": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W.var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_268": {
                "variable": {
                    "value": "dummy_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.get_output_shape()",
                            "Call"
                        ],
                        [
                            "list(input_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_276": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.kernels.var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1,) + tuple(self.strides) + (1,)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_303": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "to_float_401": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x >= 0.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "softmax_433": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_470": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sqrt_471": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(tf.square(x - mean))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_746": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_748": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size,) + self.expanded_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "moments_749": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_751": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(x)",
                            "Call"
                        ],
                        [
                            "tf.shape(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_780": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "moments_782": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_137": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "tuple(self.input_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_250": {
                "variable": {
                    "value": "squared_norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(init)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "(0, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_251": {
                "variable": {
                    "value": "denom",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1e-07 + squared_norms",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_319": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.less(x, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "self.leak * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_339": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tanh_358": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "elu_380": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tanh_423": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "placeholder_440": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.output_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_454": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.output_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Print_472": {
                "input_": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "data": {
                    "value": "[tf.reduce_min(x), mean, tf.reduce_max(x), std]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "Print layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "map_fn_566": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda ex: tf.image.per_image_standardization(ex)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "avg_pool_690": {
                "variable": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ],
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ],
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_694": {
                "variable": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_714": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "avg_pool_846": {
                "variable": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ],
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ],
                        [
                            "[1, self.stride, self.stride, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_850": {
                "variable": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "orig_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.nn.avg_pool(orig_x, stride, stride, 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(orig_x, [[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, 0], [(out_filter - in_filter) // 2, (out_filter - in_filter) // 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_471": {
                "input_tensor": {
                    "value": "tf.square(x - mean)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_565": {
                "device_name": {
                    "value": "/CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_631": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "rate": {
                    "value": "include_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.include_prob",
                            "Attribute"
                        ],
                        [
                            "dropout_dict[self.name]",
                            "Subscript"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "rsqrt_750": {
                "x": {
                    "value": "var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rsqrt_783": {
                "x": {
                    "value": "var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_143": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.layers[-1].get_output_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_183": {
                "x": {
                    "value": "1e-07 + tf.reduce_sum(tf.square(init), axis=0, keep_dims=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_250": {
                "x": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal([dim, self.num_hid], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "init / tf.sqrt(1e-07 + tf.reduce_sum(tf.square(init), axis=0, keep_dims=True))",
                            "BinOp"
                        ],
                        [
                            "init * self.init_scale",
                            "BinOp"
                        ],
                        [
                            "tf.random_uniform([dim, self.num_hid], dtype=tf.float32, minval=-scale, maxval=scale)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(kernel_shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.init_scale * init / denom",
                            "BinOp"
                        ],
                        [
                            "tf.random_normal(kernel_shape, dtype=tf.float32, stddev=np.sqrt(2.0 / fan_out))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(kernel_shape, dtype=tf.float32, minval=-scale, maxval=scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "less_319": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "square_471": {
                "x": {
                    "value": "x - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_min_473": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_max_473": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "out[layer.parent]",
                            "Subscript"
                        ],
                        [
                            "layer.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.gn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, (batch_size,) + self.expanded_shape)",
                            "Call"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, shape)",
                            "Call"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.rsqrt(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.var + self.beta.var",
                            "BinOp"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.bn2.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu.fprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv2.fprop(x)",
                            "Call"
                        ],
                        [
                            "x + orig_x",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "per_image_standardization_567": {
                "image": {
                    "value": "ex",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_183": {
                "input_tensor": {
                    "value": "tf.square(init)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_403": {
                "x": {
                    "value": "(1.0 - mask) * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_183": {
                "x": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal([dim, self.num_hid], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "init / tf.sqrt(1e-07 + tf.reduce_sum(tf.square(init), axis=0, keep_dims=True))",
                            "BinOp"
                        ],
                        [
                            "init * self.init_scale",
                            "BinOp"
                        ],
                        [
                            "tf.random_uniform([dim, self.num_hid], dtype=tf.float32, minval=-scale, maxval=scale)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(kernel_shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.init_scale * init / denom",
                            "BinOp"
                        ],
                        [
                            "tf.random_normal(kernel_shape, dtype=tf.float32, stddev=np.sqrt(2.0 / fan_out))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(kernel_shape, dtype=tf.float32, minval=-scale, maxval=scale)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/StoBatchTinyImageNet/cleverhans/serial.py": {
        "tensorflow": {
            "Variable_39": {
                "variable": {
                    "value": "self.var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "get_default_session_42": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_49": {
                "variable": {
                    "value": "self.var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "d['var']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_default_session_50": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_session_84": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_session_97": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/StoBatchTinyImageNet/cleverhans/tests/test_dropout.py": {
        "tensorflow": {
            "constant_11": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_13": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_31": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_33": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_51": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_54": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/StoBatchTinyImageNet/cleverhans/tests/test_serial.py": {
        "tensorflow": {
            "Session_12": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_18": {
                "ref": {
                    "value": "xv.var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "np.ones(1) * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/StoBatchTinyImageNet/cleverhans/tests/test_utils_tf.py": {
        "tensorflow": {
            "Session_12": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_18": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(5, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_30": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[2.0], [3.0], [4.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_39": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "clipped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip_eta(eta, ord_arg, eps)",
                            "Call"
                        ],
                        [
                            "self.sess.run(clipped)",
                            "Call"
                        ],
                        [
                            "clip_eta(eta * sign, ord_arg, eps)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros((5, 3))",
                            "Call"
                        ],
                        [
                            "tf.constant([[2.0], [3.0], [4.0]])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/StoBatchTinyImageNet/cleverhans/train.py": {
        "tensorflow": {
            "placeholder_147": {
                "variable": {
                    "value": "epoch_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_148": {
                "variable": {
                    "value": "batch_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdamOptimizer_108": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_153": {
                "variable": {
                    "value": "ema",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "ema_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ema_decay(epoch_tf, batch_tf)",
                            "Call"
                        ],
                        [
                            "0.998",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "placeholder_122": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x_train.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + x_train.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_123": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x_train.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + y_train.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_144": {
                "control_inputs": {
                    "value": "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_121": {
                "device_name": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_collection_144": {
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_154": {
                "control_inputs": {
                    "value": "[train_step]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_160": {
                "initial_value": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "assign_163": {
                "ref": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "control_dependencies_165": {
                "control_inputs": {
                    "value": "param_to_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.assign(tmp, param) for (tmp, param) in safe_zip(tmp_params, var_list)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "control_dependencies_168": {
                "control_inputs": {
                    "value": "avg_to_param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.assign(param, avg) for (param, avg) in safe_zip(var_list, avg_params)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "global_variables_initializer_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_n_322": {
                "inputs": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[g for (g, _) in grad_and_vars]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "assign_166": {
                "ref": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "avg",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "assign_169": {
                "ref": {
                    "value": "avg",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/StoBatchTinyImageNet/cleverhans/utils.py": {
        "tensorflow": {
            "placeholder_267": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, height, width, channels]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_normalize_279": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "adv_x - x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_280": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.lin_space(float(min_epsilon), float(max_epsilon), num_points)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(num_points, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/StoBatchTinyImageNet/cleverhans/utils_pytorch.py": {
        "tensorflow": {
            "get_default_graph_29": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RegisterGradient_26": {
                "op_type": {
                    "value": "rnd_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'PyFuncGrad-' + '%0x' % getrandbits(30 * 4)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "py_func_34": {
                "func": {
                    "value": "func",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "Tout": {
                    "value": "Tout",
                    "type": "variable",
                    "possible_values": []
                },
                "stateful": {
                    "value": "stateful",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "py_func_73": {
                "func": {
                    "value": "_bprop_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[op.inputs[0], grads_in]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32]",
                    "type": "List",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Tensor_53": {
                "variable": {
                    "value": "x_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_63": {
                "variable": {
                    "value": "grads_in_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_68": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch_state['logits'] * grads_in_tensor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/StoBatchTinyImageNet/cleverhans/utils_tf.py": {
        "tensorflow": {
            "global_variables_59": {
                "variable": {
                    "value": "global_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_434": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_131": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_218": {
                "variable": {
                    "value": "correct_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(predictions, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_221": {
                "variable": {
                    "value": "correct_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y, axis=tf.rank(y) - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(predictions, axis=tf.rank(predictions) - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_277": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_325": {
                "variable": {
                    "value": "x_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + reduce_max(tf.abs(x), 1, keepdims=True))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "flatten_326": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + reduce_max(tf.abs(x), 1, keepdims=True))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rsqrt_329": {
                "variable": {
                    "value": "x_inv_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "np.sqrt(epsilon) + square_sum",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_330": {
                "variable": {
                    "value": "x_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + reduce_max(tf.abs(x), 1, keepdims=True))",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "x_inv_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.rsqrt(np.sqrt(epsilon) + square_sum)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_339": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "p_logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_softmax_340": {
                "variable": {
                    "value": "p_log",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "p_logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_softmax_341": {
                "variable": {
                    "value": "q_log",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "q_logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_by_value_363": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(eta, -eps, eps)",
                            "Call"
                        ],
                        [
                            "eta * factor",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-eps",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "minimum_378": {
                "variable": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "eps / norm",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_variable_initialized_62": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "control_dependencies_137": {
                "control_inputs": {
                    "value": "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_182": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_324": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_331": {
                "tensor": {
                    "value": "x_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(x, x_inv_norm)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "x_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(x)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_338": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "add_loss_344": {
                "loss": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_mean(reduce_sum(p * (p_log - q_log), axis=1), name=name)",
                            "Call"
                        ],
                        [
                            "model_loss(y, predictions)",
                            "Call"
                        ],
                        [
                            "(loss + model_loss(y, predictions_adv)) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "loss_collection": {
                    "value": "loss_collection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphKeys.REGULARIZATION_LOSSES",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "maximum_366": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "Constant"
                        ]
                    ]
                },
                "y": {
                    "value": "reduce_sum(tf.abs(eta), reduc_ind, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_479": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_71": {
                "var_list": {
                    "value": "not_initialized_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[var for (var, init) in zip(global_vars, is_initialized) if not init]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "get_collection_137": {
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_218": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_219": {
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_221": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "tf.rank(y) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_222": {
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "tf.rank(predictions) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_328": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + reduce_max(tf.abs(x), 1, keepdims=True))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_372": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(avoid_zero_div, reduce_sum(tf.square(eta), reduc_ind, keepdims=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_327": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "x / (epsilon + reduce_max(tf.abs(x), 1, keepdims=True))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "global_variables_initializer_440": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_440": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_446": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_367": {
                "x": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(eta, -eps, eps)",
                            "Call"
                        ],
                        [
                            "eta * factor",
                            "BinOp"
                        ]
                    ]
                }
            },
            "maximum_372": {
                "x": {
                    "value": "avoid_zero_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "Constant"
                        ]
                    ]
                },
                "y": {
                    "value": "reduce_sum(tf.square(eta), reduc_ind, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rank_221": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rank_223": {
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_373": {
                "x": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(eta, -eps, eps)",
                            "Call"
                        ],
                        [
                            "eta * factor",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "StoBatch/StoBatchTinyImageNet/cleverhans/utils_tfe.py": {
        "tensorflow": {
            "AdamOptimizer_69": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_214": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_119": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_194": {
                "variable": {
                    "value": "cur_corr_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(batch_y, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(predictions, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_187": {
                "ref": {
                    "value": "batch_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfe.Variable(X_train[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tfe.Variable(X_test[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "X_cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((args.batch_size,) + X_test.shape[1:], dtype=X_test.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_188": {
                "ref": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfe.Variable(Y_train[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tfe.Variable(Y_test[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "Y_cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((args.batch_size,) + Y_test.shape[1:], dtype=Y_test.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_230": {
                "input": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(tf_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_232": {
                "input": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(tf_samples)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "assign_91": {
                "ref": {
                    "value": "batch_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfe.Variable(X_train[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tfe.Variable(X_test[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "X_train[index_shuf[start:end]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "assign_92": {
                "ref": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfe.Variable(Y_train[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tfe.Variable(Y_test[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "Y_train[index_shuf[start:end]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_194": {
                "input": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfe.Variable(Y_train[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tfe.Variable(Y_test[0:args.batch_size], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_195": {
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch_adv_x)",
                            "Call"
                        ],
                        [
                            "model(batch_x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "GradientTape_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/StoBatchTinyImageNet/mlp.py": {
        "tensorflow": {
            "relu_70": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.conv2d(v, W, strides=[1, self.strides, self.strides, 1], padding='SAME') + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "batch_normalization_71": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.conv2d(v, W, strides=[1, self.strides, self.strides, 1], padding='SAME') + b)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, scale=True, training=True, trainable=True, reuse=tf.AUTO_REUSE, name='bn_enc')",
                            "Call"
                        ],
                        [
                            "tf.add(tf.nn.conv2d(v, self.W, strides=[1, self.strides, self.strides, 1], padding='SAME'), self.b)",
                            "Call"
                        ],
                        [
                            "h / max",
                            "BinOp"
                        ]
                    ]
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "bn_enc",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_77": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.conv2d(v, self.W, strides=[1, self.strides, self.strides, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_78": {
                "variable": {
                    "value": "max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.conv2d(v, W, strides=[1, self.strides, self.strides, 1], padding='SAME') + b)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, scale=True, training=True, trainable=True, reuse=tf.AUTO_REUSE, name='bn_enc')",
                            "Call"
                        ],
                        [
                            "tf.add(tf.nn.conv2d(v, self.W, strides=[1, self.strides, self.strides, 1], padding='SAME'), self.b)",
                            "Call"
                        ],
                        [
                            "h / max",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_by_value_81": {
                "variable": {
                    "value": "Chebyshev_h",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "self.dpChebyshev(h, Delta, epsilon, batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_105": {
                "variable": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(rc_v - self.input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_106": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_like_122": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rc_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decode(xShape, propup, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "self.decode2(xShape, propup, W, b, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_124": {
                "variable": {
                    "value": "relu_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rc_v >= zeros",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "rc_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decode(xShape, propup, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "self.decode2(xShape, propup, W, b, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.zeros_like(rc_v, dtype=self.input.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_125": {
                "variable": {
                    "value": "neg_abs_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rc_v >= zeros",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "-rc_v",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "rc_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decode(xShape, propup, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "self.decode2(xShape, propup, W, b, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_126": {
                "variable": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "math_ops.add(relu_logits - rc_v * (self.input + perturbFMx), math.log(2.0) + 0.5 * neg_abs_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_43": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([filter_size, filter_size, n_filter_in, n_filter_out], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_45": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_filter_out])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_63": {
                "variable": {
                    "value": "perturbFM",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "perturbFM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.laplace(0.0, 1.0 / (epsilon * batch_size), 1).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(perturbFM, Delta)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "Delta",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_by_value_72": {
                "t": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.conv2d(v, W, strides=[1, self.strides, self.strides, 1], padding='SAME') + b)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, scale=True, training=True, trainable=True, reuse=tf.AUTO_REUSE, name='bn_enc')",
                            "Call"
                        ],
                        [
                            "tf.add(tf.nn.conv2d(v, self.W, strides=[1, self.strides, self.strides, 1], padding='SAME'), self.b)",
                            "Call"
                        ],
                        [
                            "h / max",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_77": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, self.strides, self.strides, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_87": {
                "x": {
                    "value": "tf.nn.conv2d_transpose(propup, self.W, tf.stack([xShape, self.inputShape[1], self.inputShape[2], self.inputShape[3]]), strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_97": {
                "input": {
                    "value": "upsample3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(propup, size=(self.inputShape[1], self.inputShape[2]), method=tf.image.ResizeMethod.NEAREST_NEIGHBOR)",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "tf.transpose(W, perm=[1, 0, 3, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_105": {
                "x": {
                    "value": "rc_v - self.input",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_126": {
                "x": {
                    "value": "relu_logits - rc_v * (self.input + perturbFMx)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "math.log(2.0) + 0.5 * neg_abs_logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "truncated_normal_43": {
                "shape": {
                    "value": "[filter_size, filter_size, n_filter_in, n_filter_out]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_45": {
                "shape": {
                    "value": "[n_filter_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_70": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([filter_size, filter_size, n_filter_in, n_filter_out], stddev=0.1), dtype=tf.float32, name='W')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, self.strides, self.strides, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_87": {
                "input": {
                    "value": "propup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.propup(self.input)",
                            "Call"
                        ],
                        [
                            "self.propup(self.input + perturbFMx, W, b) + perturbFM_h",
                            "BinOp"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "tf.stack([xShape, self.inputShape[1], self.inputShape[2], self.inputShape[3]])",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_65": {
                "x": {
                    "value": "coefficients[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "x ** 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_88": {
                "values": {
                    "value": "[xShape, self.inputShape[1], self.inputShape[2], self.inputShape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_97": {
                "a": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([filter_size, filter_size, n_filter_in, n_filter_out], stddev=0.1), dtype=tf.float32, name='W')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/StoBatchTinyImageNet/resnet_utils.py": {
        "tensorflow": {
            "relu_95": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format, name='conv1')",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format, name='conv2')",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(a=inputs, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=inputs, pool_size=first_pool_size, strides=first_pool_stride, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=block_num_filters, bottleneck=bottleneck, block_fn=block_fn, blocks=num_blocks, strides=block_strides[i], training=training, name='block_layer{}'.format(i + 1), data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(input_tensor=inputs, axis=axes, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_reduce_mean')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(inputs, axes)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.dense(inputs=inputs, units=hk)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'last_hidden')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_107": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format, name='conv1')",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format, name='conv2')",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(a=inputs, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=inputs, pool_size=first_pool_size, strides=first_pool_stride, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=block_num_filters, bottleneck=bottleneck, block_fn=block_fn, blocks=num_blocks, strides=block_strides[i], training=training, name='block_layer{}'.format(i + 1), data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(input_tensor=inputs, axis=axes, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_reduce_mean')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(inputs, axes)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.dense(inputs=inputs, units=hk)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'last_hidden')",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_23": {
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format, name='conv1')",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format, name='conv2')",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(a=inputs, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=inputs, pool_size=first_pool_size, strides=first_pool_stride, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=block_num_filters, bottleneck=bottleneck, block_fn=block_fn, blocks=num_blocks, strides=block_strides[i], training=training, name='block_layer{}'.format(i + 1), data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(input_tensor=inputs, axis=axes, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_reduce_mean')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(inputs, axes)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.dense(inputs=inputs, units=hk)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'last_hidden')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1 if data_format == 'channels_first' else 3",
                    "type": "IfExp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "_BATCH_NORM_DECAY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "_BATCH_NORM_EPSILON",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "Constant"
                        ]
                    ]
                },
                "center": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "scale": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": []
                },
                "fused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pad_47": {
                "variable": {
                    "value": "padded_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format, name='conv1')",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format, name='conv2')",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(a=inputs, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=inputs, pool_size=first_pool_size, strides=first_pool_stride, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=block_num_filters, bottleneck=bottleneck, block_fn=block_fn, blocks=num_blocks, strides=block_strides[i], training=training, name='block_layer{}'.format(i + 1), data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(input_tensor=inputs, axis=axes, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_reduce_mean')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(inputs, axes)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.dense(inputs=inputs, units=hk)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'last_hidden')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [pad_beg, pad_end], [pad_beg, pad_end]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_51": {
                "variable": {
                    "value": "padded_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format, name='conv1')",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format, name='conv2')",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(a=inputs, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=inputs, pool_size=first_pool_size, strides=first_pool_stride, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=block_num_filters, bottleneck=bottleneck, block_fn=block_fn, blocks=num_blocks, strides=block_strides[i], training=training, name='block_layer{}'.format(i + 1), data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(input_tensor=inputs, axis=axes, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_reduce_mean')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(inputs, axes)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.dense(inputs=inputs, units=hk)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'last_hidden')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_63": {
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format, name='conv1')",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format, name='conv2')",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(a=inputs, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=inputs, pool_size=first_pool_size, strides=first_pool_stride, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=block_num_filters, bottleneck=bottleneck, block_fn=block_fn, blocks=num_blocks, strides=block_strides[i], training=training, name='block_layer{}'.format(i + 1), data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(input_tensor=inputs, axis=axes, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_reduce_mean')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(inputs, axes)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.dense(inputs=inputs, units=hk)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'last_hidden')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME if strides == 1 else VALID",
                    "type": "IfExp",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.compat.v1.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "identity_155": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format, name='conv1')",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format, name='conv2')",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(a=inputs, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=inputs, pool_size=first_pool_size, strides=first_pool_stride, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=block_num_filters, bottleneck=bottleneck, block_fn=block_fn, blocks=num_blocks, strides=block_strides[i], training=training, name='block_layer{}'.format(i + 1), data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(input_tensor=inputs, axis=axes, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_reduce_mean')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(inputs, axes)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.dense(inputs=inputs, units=hk)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'last_hidden')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_228": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format, name='conv1')",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format, name='conv2')",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(a=inputs, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=inputs, pool_size=first_pool_size, strides=first_pool_stride, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=block_num_filters, bottleneck=bottleneck, block_fn=block_fn, blocks=num_blocks, strides=block_strides[i], training=training, name='block_layer{}'.format(i + 1), data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(input_tensor=inputs, axis=axes, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_reduce_mean')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(inputs, axes)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.dense(inputs=inputs, units=hk)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'last_hidden')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[2, 3] if data_format == 'channels_first' else [1, 2]",
                            "IfExp"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "identity_230": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format, name='conv1')",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format, name='conv2')",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(a=inputs, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=inputs, pool_size=first_pool_size, strides=first_pool_stride, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=block_num_filters, bottleneck=bottleneck, block_fn=block_fn, blocks=num_blocks, strides=block_strides[i], training=training, name='block_layer{}'.format(i + 1), data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(input_tensor=inputs, axis=axes, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_reduce_mean')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(inputs, axes)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.dense(inputs=inputs, units=hk)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'last_hidden')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "final_reduce_mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_231": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format, name='conv1')",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format, name='conv2')",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(a=inputs, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=inputs, pool_size=first_pool_size, strides=first_pool_stride, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=block_num_filters, bottleneck=bottleneck, block_fn=block_fn, blocks=num_blocks, strides=block_strides[i], training=training, name='block_layer{}'.format(i + 1), data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(input_tensor=inputs, axis=axes, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_reduce_mean')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(inputs, axes)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.dense(inputs=inputs, units=hk)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'last_hidden')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[2, 3] if data_format == 'channels_first' else [1, 2]",
                            "IfExp"
                        ]
                    ]
                }
            },
            "dropout_234": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format, name='conv1')",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format, name='conv2')",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(a=inputs, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=inputs, pool_size=first_pool_size, strides=first_pool_stride, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=block_num_filters, bottleneck=bottleneck, block_fn=block_fn, blocks=num_blocks, strides=block_strides[i], training=training, name='block_layer{}'.format(i + 1), data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(input_tensor=inputs, axis=axes, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_reduce_mean')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(inputs, axes)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.dense(inputs=inputs, units=hk)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'last_hidden')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "identity_246": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format, name='conv1')",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format, name='conv2')",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(a=inputs, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=inputs, pool_size=first_pool_size, strides=first_pool_stride, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=block_num_filters, bottleneck=bottleneck, block_fn=block_fn, blocks=num_blocks, strides=block_strides[i], training=training, name='block_layer{}'.format(i + 1), data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(input_tensor=inputs, axis=axes, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_reduce_mean')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(inputs, axes)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.dense(inputs=inputs, units=hk)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'last_hidden')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "last_hidden",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_147": {
                "name_or_scope": {
                    "value": "block1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_172": {
                "name_or_scope": {
                    "value": "resnet_model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_177": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format, name='conv1')",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format, name='conv2')",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(a=inputs, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=inputs, pool_size=first_pool_size, strides=first_pool_stride, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=block_num_filters, bottleneck=bottleneck, block_fn=block_fn, blocks=num_blocks, strides=block_strides[i], training=training, name='block_layer{}'.format(i + 1), data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(input_tensor=inputs, axis=axes, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_reduce_mean')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(inputs, axes)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.dense(inputs=inputs, units=hk)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'last_hidden')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pooling2d_200": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format, name='conv1')",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format, name='conv2')",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(a=inputs, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=inputs, pool_size=first_pool_size, strides=first_pool_stride, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=block_num_filters, bottleneck=bottleneck, block_fn=block_fn, blocks=num_blocks, strides=block_strides[i], training=training, name='block_layer{}'.format(i + 1), data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(input_tensor=inputs, axis=axes, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_reduce_mean')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(inputs, axes)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.dense(inputs=inputs, units=hk)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'last_hidden')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "first_pool_size",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "first_pool_stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "identity_204": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format, name='conv1')",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format, name='conv2')",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(a=inputs, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=inputs, pool_size=first_pool_size, strides=first_pool_stride, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=block_num_filters, bottleneck=bottleneck, block_fn=block_fn, blocks=num_blocks, strides=block_strides[i], training=training, name='block_layer{}'.format(i + 1), data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(input_tensor=inputs, axis=axes, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_reduce_mean')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(inputs, axes)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.dense(inputs=inputs, units=hk)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'last_hidden')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "initial_max_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_220": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format, name='conv1')",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format, name='conv2')",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(a=inputs, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=inputs, pool_size=first_pool_size, strides=first_pool_stride, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=block_num_filters, bottleneck=bottleneck, block_fn=block_fn, blocks=num_blocks, strides=block_strides[i], training=training, name='block_layer{}'.format(i + 1), data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(input_tensor=inputs, axis=axes, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_reduce_mean')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(inputs, axes)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.dense(inputs=inputs, units=hk)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'last_hidden')",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_243": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format, name='conv1')",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format, name='conv2')",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(a=inputs, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=inputs, pool_size=first_pool_size, strides=first_pool_stride, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=block_num_filters, bottleneck=bottleneck, block_fn=block_fn, blocks=num_blocks, strides=block_strides[i], training=training, name='block_layer{}'.format(i + 1), data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(input_tensor=inputs, axis=axes, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_reduce_mean')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(inputs, axes)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.dense(inputs=inputs, units=hk)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'last_hidden')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hk",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dropout_244": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fixed_padding(inputs, kernel_size, data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format, name='conv1')",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format, name='conv2')",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, training, projection_shortcut, strides, data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, training, None, 1, data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(a=inputs, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=inputs, pool_size=first_pool_size, strides=first_pool_stride, padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=block_num_filters, bottleneck=bottleneck, block_fn=block_fn, blocks=num_blocks, strides=block_strides[i], training=training, name='block_layer{}'.format(i + 1), data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, data_format, name='bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(input_tensor=inputs, axis=axes, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_reduce_mean')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(inputs, axes)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.dense(inputs=inputs, units=hk)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'last_hidden')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_152": {
                "name_or_scope": {
                    "value": "'block{}'.format(i + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_242": {
                "name_or_scope": {
                    "value": "fc1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_207": {
                "name_or_scope": {
                    "value": "'res{}'.format(i + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/StoBatchTinyImageNet/taylor_loss.py": {
        "tensorflow": {
            "cast_34": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_35": {
                "variable": {
                    "value": "b_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "b_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(b_labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(b_labels, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_38": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "adv_logits.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_40": {
                "variable": {
                    "value": "relu_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adv_logits >= zeros",
                            "Compare"
                        ],
                        [
                            "adv_logits >= zeros",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "adv_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.zeros_like(adv_logits, dtype=adv_logits.dtype)",
                            "Call"
                        ],
                        [
                            "array_ops.zeros_like(adv_logits, dtype=adv_logits.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_41": {
                "variable": {
                    "value": "neg_abs_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adv_logits >= zeros",
                            "Compare"
                        ],
                        [
                            "adv_logits >= zeros",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "-adv_logits",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "adv_logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_42": {
                "variable": {
                    "value": "Taylor_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "relu_logits - adv_logits * b_labels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "math.log(2.0) + 0.5 * neg_abs_logits + 1.0 / 8.0 * neg_abs_logits ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_45": {
                "variable": {
                    "value": "zeros2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "logits.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_47": {
                "variable": {
                    "value": "relu_logits_benign",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits >= zeros2",
                            "Compare"
                        ],
                        [
                            "logits >= zeros2",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "zeros2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.zeros_like(logits, dtype=logits.dtype)",
                            "Call"
                        ],
                        [
                            "array_ops.zeros_like(logits, dtype=logits.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_48": {
                "variable": {
                    "value": "neg_abs_logits_benign",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits >= zeros2",
                            "Compare"
                        ],
                        [
                            "logits >= zeros2",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "-logits",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_49": {
                "variable": {
                    "value": "Taylor_benign",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "relu_logits_benign - logits * labels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "math.log(2.0) + 0.5 * neg_abs_logits_benign + 1.0 / 8.0 * neg_abs_logits_benign ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_51": {
                "variable": {
                    "value": "zeros1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "perturbW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.where(cond1, perturbW, -perturbW)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "perturbW.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_53": {
                "variable": {
                    "value": "perturbW",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "perturbW >= zeros1",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "perturbW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.where(cond1, perturbW, -perturbW)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-perturbW",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_79": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_80": {
                "variable": {
                    "value": "b_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "b_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(b_labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(b_labels, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_83": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "adv_logits.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_85": {
                "variable": {
                    "value": "relu_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adv_logits >= zeros",
                            "Compare"
                        ],
                        [
                            "adv_logits >= zeros",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "adv_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.zeros_like(adv_logits, dtype=adv_logits.dtype)",
                            "Call"
                        ],
                        [
                            "array_ops.zeros_like(adv_logits, dtype=adv_logits.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_86": {
                "variable": {
                    "value": "neg_abs_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adv_logits >= zeros",
                            "Compare"
                        ],
                        [
                            "adv_logits >= zeros",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "-adv_logits",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "adv_logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_87": {
                "variable": {
                    "value": "Taylor_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "relu_logits - adv_logits * b_labels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "math.log(2.0) + 0.5 * neg_abs_logits + 1.0 / 8.0 * neg_abs_logits ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_91": {
                "variable": {
                    "value": "zeros2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "logits.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_93": {
                "variable": {
                    "value": "relu_logits_benign",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits >= zeros2",
                            "Compare"
                        ],
                        [
                            "logits >= zeros2",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "zeros2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.zeros_like(logits, dtype=logits.dtype)",
                            "Call"
                        ],
                        [
                            "array_ops.zeros_like(logits, dtype=logits.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_94": {
                "variable": {
                    "value": "neg_abs_logits_benign",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits >= zeros2",
                            "Compare"
                        ],
                        [
                            "logits >= zeros2",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "-logits",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_95": {
                "variable": {
                    "value": "Taylor_benign",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "relu_logits_benign - logits * labels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "math.log(2.0) + 0.5 * neg_abs_logits_benign + 1.0 / 8.0 * neg_abs_logits_benign ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_103": {
                "variable": {
                    "value": "cross_entropy_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "adv_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Taylor_benign + alpha * Taylor_adv",
                            "BinOp"
                        ],
                        [
                            "Taylor_benign + alpha * Taylor_adv",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "cross_entropy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_62": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "cross_entropy_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(adv_loss, name='cross_entropy') + tf.reduce_mean(perturbW, name='perturbW')",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(adv_loss, name='cross_entropy')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_64": {
                "inputs": {
                    "value": "tf.get_collection('losses')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_105": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "cross_entropy_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(adv_loss, name='cross_entropy') + tf.reduce_mean(perturbW, name='perturbW')",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(adv_loss, name='cross_entropy')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_107": {
                "inputs": {
                    "value": "tf.get_collection('losses')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_60": {
                "input_tensor": {
                    "value": "perturbW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.where(cond1, perturbW, -perturbW)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "perturbW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_64": {
                "key": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_107": {
                "key": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "StoBatch/StoBatchTinyImageNet/utils.py": {
        "tensorflow": {
            "get_variable_44": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[in_dim, out_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(-stdv, stdv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_47": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[out_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_120": {
                "variable": {
                    "value": "saved_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.name.rsplit(':', 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_121": {
                "variable": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "saved_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(t)",
                            "Call"
                        ],
                        [
                            "tf.shape(t)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_122": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.name.rsplit(':', 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat(axis=0, values=[batch_size, [-1]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "fill_123": {
                "variable": {
                    "value": "upper_bound_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "tf.slice(saved_shape, [0], [1])",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.constant(1.0 / upper_bound)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rsqrt_126": {
                "variable": {
                    "value": "l2norm_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(t2 * t2, [1]) + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_128": {
                "variable": {
                    "value": "clipped_t",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.diag(scale)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(t, tf.concat(axis=0, values=[batch_size, [-1]]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(t, tf.concat(axis=0, values=[tf.slice(saved_shape, [0], [1]), -1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_129": {
                "variable": {
                    "value": "clipped_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "clipped_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.diag(scale), t2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(clipped_t, saved_shape, name=name)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "saved_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(t)",
                            "Call"
                        ],
                        [
                            "tf.shape(t)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'fc'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_152": {
                "variable": {
                    "value": "saved_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.name.rsplit(':', 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_153": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.name.rsplit(':', 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat(axis=0, values=[tf.slice(saved_shape, [0], [1]), -1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_154": {
                "variable": {
                    "value": "t_abs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(t, tf.concat(axis=0, values=[batch_size, [-1]]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(t, tf.concat(axis=0, values=[tf.slice(saved_shape, [0], [1]), -1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_197": {
                "value": {
                    "value": "table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy.zeros((m + 1, m + 1), dtype=numpy.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_42": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'fc'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_57": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel', [in_dim, out_dim], tf.float32, initializer=tf.random_uniform_initializer(-stdv, stdv))",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_118": {
                "values": {
                    "value": "[t, upper_bound]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'fc'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "batch_clip_by_l2norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_150": {
                "values": {
                    "value": "[t, threshold_ratio]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'fc'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "soft_thresholding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_159": {
                "tensor": {
                    "value": "t_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(t2) * tf.nn.relu(t_abs - tf.reduce_mean(t_abs, [0], keep_dims=True) * threshold_ratio)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "saved_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(t)",
                            "Call"
                        ],
                        [
                            "tf.shape(t)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'fc'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_173": {
                "values": {
                    "value": "[t, sigma]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'fc'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "add_gaussian_noise",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_122": {
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_size, [-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_123": {
                "input_": {
                    "value": "saved_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(t)",
                            "Call"
                        ],
                        [
                            "tf.shape(t)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_124": {
                "value": {
                    "value": "1.0 / upper_bound",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_127": {
                "x": {
                    "value": "l2norm_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.rsqrt(tf.reduce_sum(t2 * t2, [1]) + 1e-06)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "upper_bound_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill(tf.slice(saved_shape, [0], [1]), tf.constant(1.0 / upper_bound))",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_128": {
                "diagonal": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(l2norm_inv, upper_bound_inv) * upper_bound",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_153": {
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.slice(saved_shape, [0], [1]), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sign_155": {
                "x": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(t, tf.concat(axis=0, values=[batch_size, [-1]]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(t, tf.concat(axis=0, values=[tf.slice(saved_shape, [0], [1]), -1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_155": {
                "features": {
                    "value": "t_abs - tf.reduce_mean(t_abs, [0], keep_dims=True) * threshold_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_45": {
                "minval": {
                    "value": "-stdv",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "stdv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / math.sqrt(in_dim)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_initializer_47": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_126": {
                "input_tensor": {
                    "value": "t2 * t2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_175": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.name.rsplit(':', 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_153": {
                "input_": {
                    "value": "saved_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(t)",
                            "Call"
                        ],
                        [
                            "tf.shape(t)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_156": {
                "input_tensor": {
                    "value": "t_abs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(t2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "dpSGD/dpSGD_Cifar10/CifarEval.py": {
        "tensorflow": {
            "DEFINE_string_49": {
                "name": {
                    "value": "eval_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "os.getcwd() + '/tmp/cifar10_eval'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where to write event logs.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_51": {
                "name": {
                    "value": "eval_data",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "test",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "\"Either 'test' or 'train_eval'.\"",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_53": {
                "name": {
                    "value": "checkpoint_dir_eval",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "os.getcwd() + '/tmp/cifar10_train'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where to read model checkpoints.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_55": {
                "name": {
                    "value": "eval_interval_secs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "60 * 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "help": {
                    "value": "How often to run the eval.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_57": {
                "name": {
                    "value": "num_examples",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of examples to run.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_73": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.checkpoint_dir_eval",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Coordinator_87": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_123": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.one_hot(labels, 10)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_129": {
                "variable": {
                    "value": "top_k_op",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(logits, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(labels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_132": {
                "variable": {
                    "value": "variable_averages",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "cifar10.MOVING_AVERAGE_DECAY",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_135": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "variables_to_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable_averages.variables_to_restore()",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_all_138": {
                "variable": {
                    "value": "summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_140": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "FLAGS.eval_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Exists_151": {
                "filename": {
                    "value": "FLAGS.eval_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_153": {
                "dirname": {
                    "value": "FLAGS.eval_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Summary_107": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DeleteRecursively_152": {
                "dirname": {
                    "value": "FLAGS.eval_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_90": {
                "key": {
                    "value": "tf.GraphKeys.QUEUE_RUNNERS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_123": {
                "indices": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.one_hot(labels, 10), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_129": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.one_hot(labels, 10), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dpSGD/dpSGD_Cifar10/accountant.py": {
        "tensorflow": {
            "Variable_64": {
                "variable": {
                    "value": "self._eps_squared_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([1])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "eps_squared_sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_66": {
                "variable": {
                    "value": "self._delta_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([1])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "delta_sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_355": {
                "variable": {
                    "value": "binomial",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "self._binomial_table",
                    "type": "Attribute",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[t + 1, t + 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_361": {
                "variable": {
                    "value": "exponents",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[j * (j + 1.0 - 2.0 * s) / (2.0 * sigma * sigma) for j in range(t + 1)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_364": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "binomial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(self._binomial_table, [0, 0], [t + 1, t + 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "signs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy.zeros((t + 1, t + 1), dtype=numpy.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_369": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(binomial, signs)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.exp(exponents)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_372": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(x, tf.exp(exponents))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_389": {
                "variable": {
                    "value": "binomial_table",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "self._binomial_table",
                    "type": "Attribute",
                    "possible_values": []
                },
                "begin": {
                    "value": "[moment_order, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, moment_order + 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_392": {
                "variable": {
                    "value": "qs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.constant([i * 1.0 for i in range(moment_order + 1)], dtype=tf.float64) * tf.cast(tf.log(q), dtype=tf.float64)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_396": {
                "variable": {
                    "value": "term0",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "binomial_table * qs * moments0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_398": {
                "variable": {
                    "value": "term1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "binomial_table * qs * moments1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_97": {
                "variable": {
                    "value": "amortize_eps",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.log(1.0 + amortize_ratio * (tf.exp(eps) - 1.0))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_99": {
                "variable": {
                    "value": "amortize_delta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "amortize_ratio * delta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "group_235": {
                "*inputs": {
                    "value": "*moments_accum_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "squeeze_399": {
                "input": {
                    "value": "tf.log(tf.cast(q * term0 + (1.0 - q) * term1, tf.float64))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_op_407": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_64": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_88": {
                "control_inputs": {
                    "value": "[tf.Assert(tf.greater(delta, 0), ['delta needs to be greater than 0'])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "group_100": {
                "*inputs": {
                    "value": "*[tf.assign_add(self._eps_squared_sum, tf.square(amortize_eps)), tf.assign_add(self._delta_sum, amortize_delta)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Variable_190": {
                "initial_value": {
                    "value": "numpy.float64(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "'log_moments-%d' % moment_order",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_369": {
                "x": {
                    "value": "exponents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([j * (j + 1.0 - 2.0 * s) / (2.0 * sigma * sigma) for j in range(t + 1)], dtype=tf.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_399": {
                "x": {
                    "value": "tf.cast(q * term0 + (1.0 - q) * term1, tf.float64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_97": {
                "x": {
                    "value": "1.0 + amortize_ratio * (tf.exp(eps) - 1.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_229": {
                "x": {
                    "value": "num_examples",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_add_234": {
                "ref": {
                    "value": "self._log_moments[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "moment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._compute_log_moment(sigma, q, self._moment_orders[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_392": {
                "value": {
                    "value": "[i * 1.0 for i in range(moment_order + 1)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_393": {
                "x": {
                    "value": "tf.log(q)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_399": {
                "x": {
                    "value": "q * term0 + (1.0 - q) * term1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Assert_89": {
                "condition": {
                    "value": "tf.greater(delta, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['delta needs to be greater than 0']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_91": {
                "x": {
                    "value": "num_examples",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_394": {
                "x": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(num_examples, tf.float64) * 1.0 / self._total_examples",
                            "BinOp"
                        ]
                    ]
                }
            },
            "greater_89": {
                "x": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_deltas",
                            "Name"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "assign_add_100": {
                "ref": {
                    "value": "self._eps_squared_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.square(amortize_eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_add_102": {
                "ref": {
                    "value": "self._delta_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "amortize_delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(amortize_ratio * delta, [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "square_101": {
                "x": {
                    "value": "amortize_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.log(1.0 + amortize_ratio * (tf.exp(eps) - 1.0)), [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_98": {
                "x": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_eps",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "dpSGD/dpSGD_Cifar10/cifar10.py": {
        "tensorflow": {
            "cast_224": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_225": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "cross_entropy_per_example",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_227": {
                "variable": {
                    "value": "cross_entropy_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=logits, name='cross_entropy_per_example')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "cross_entropy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_246": {
                "variable": {
                    "value": "loss_averages",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "avg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_247": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exponential_decay_279": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "INITIAL_LEARNING_RATE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "decay_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(num_batches_per_epoch * NUM_EPOCHS_PER_DECAY)",
                            "Call"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "LEARNING_RATE_DECAY_FACTOR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_298": {
                "variable": {
                    "value": "variable_averages",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "MOVING_AVERAGE_DECAY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9999",
                            "Constant"
                        ]
                    ]
                },
                "num_updates": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "histogram_116": {
                "name": {
                    "value": "tensor_name + '/activations'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_117": {
                "name": {
                    "value": "tensor_name + '/sparsity'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.nn.zero_fraction(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_134": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float16 if FLAGS.use_fp16 else tf.float32",
                            "IfExp"
                        ],
                        [
                            "tf.float16 if FLAGS.use_fp16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "multiply_160": {
                "variable": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_loss(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_182": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_183": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_207": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_208": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float16)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_to_collection_228": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "cross_entropy_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(cross_entropy, name='cross_entropy')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_232": {
                "inputs": {
                    "value": "tf.get_collection('losses')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_284": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(INITIAL_LEARNING_RATE, global_step, decay_steps, LEARNING_RATE_DECAY_FACTOR, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_291": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(INITIAL_LEARNING_RATE, global_step, decay_steps, LEARNING_RATE_DECAY_FACTOR, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_op_303": {
                "variable": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zero_fraction_118": {
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_132": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_158": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float16 if FLAGS.use_fp16 else tf.float32",
                            "IfExp"
                        ],
                        [
                            "tf.float16 if FLAGS.use_fp16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "add_to_collection_161": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_232": {
                "key": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_255": {
                "name": {
                    "value": "l.op.name + ' (raw)'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "losses + [total_loss]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_256": {
                "name": {
                    "value": "l.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "loss_averages.average(l)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_290": {
                "control_inputs": {
                    "value": "[loss_averages_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trainable_variables_300": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_302": {
                "control_inputs": {
                    "value": "[apply_gradient_op, variables_averages_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_loss_160": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, initializer=initializer, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu(name, shape, tf.truncated_normal_initializer(stddev=stddev, dtype=dtype))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dpSGD/dpSGD_Cifar10/cifar10_input.py": {
        "tensorflow": {
            "FixedLengthRecordReader_79": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "record_bytes": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(value, tf.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "decode_raw_83": {
                "variable": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_86": {
                "variable": {
                    "value": "result.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.strided_slice(record_bytes, [0], [label_bytes])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_91": {
                "variable": {
                    "value": "depth_major",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.strided_slice(record_bytes, [label_bytes], [label_bytes + image_bytes])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[result.depth, result.height, result.width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_96": {
                "variable": {
                    "value": "result.uint8image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "depth_major",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.strided_slice(record_bytes, [label_bytes], [label_bytes + image_bytes]), [result.depth, result.height, result.width])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "string_input_producer_158": {
                "variable": {
                    "value": "filename_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "filenames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[os.path.join(data_dir, 'data_batch_%d.bin' % i) for i in xrange(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[os.path.join(data_dir, 'data_batch_%d.bin' % i) for i in xrange(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[os.path.join(data_dir, 'test_batch.bin')]",
                            "List"
                        ]
                    ]
                }
            },
            "cast_162": {
                "variable": {
                    "value": "reshaped_image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "read_input.uint8image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_crop_171": {
                "variable": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "reshaped_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(read_input.uint8image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(read_input.uint8image, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[height, width, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_flip_left_right_174": {
                "variable": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_crop(reshaped_image, [height, width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_brightness_180": {
                "variable": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_crop(reshaped_image, [height, width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "63",
                    "type": "int",
                    "possible_values": []
                }
            },
            "random_contrast_182": {
                "variable": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_crop(reshaped_image, [height, width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "per_image_standardization_186": {
                "variable": {
                    "value": "float_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_crop(reshaped_image, [height, width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ]
                    ]
                }
            },
            "string_input_producer_229": {
                "variable": {
                    "value": "filename_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "filenames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[os.path.join(data_dir, 'data_batch_%d.bin' % i) for i in xrange(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[os.path.join(data_dir, 'data_batch_%d.bin' % i) for i in xrange(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[os.path.join(data_dir, 'test_batch.bin')]",
                            "List"
                        ]
                    ]
                }
            },
            "cast_233": {
                "variable": {
                    "value": "reshaped_image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "read_input.uint8image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "per_image_standardization_244": {
                "variable": {
                    "value": "float_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "resized_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_image_with_crop_or_pad(reshaped_image, height, width)",
                            "Call"
                        ]
                    ]
                }
            },
            "shuffle_batch_121": {
                "variable": {
                    "value": "(images, label_batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "num_preprocess_threads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "capacity": {
                    "value": "min_queue_examples + 3 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "min_queue_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(NUM_EXAMPLES_PER_EPOCH_FOR_TRAIN * min_fraction_of_examples_in_queue)",
                            "Call"
                        ],
                        [
                            "int(num_examples_per_epoch * min_fraction_of_examples_in_queue)",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_128": {
                "variable": {
                    "value": "(images, label_batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "num_preprocess_threads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "capacity": {
                    "value": "min_queue_examples + 3 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "image_135": {
                "name": {
                    "value": "images",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "strided_slice_87": {
                "input_": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(value, tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[label_bytes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "strided_slice_92": {
                "input_": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(value, tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[label_bytes]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[label_bytes + image_bytes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_137": {
                "tensor": {
                    "value": "label_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Exists_154": {
                "filename": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filenames",
                            "Name"
                        ],
                        [
                            "filenames",
                            "Name"
                        ]
                    ]
                }
            },
            "Exists_225": {
                "filename": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filenames",
                            "Name"
                        ],
                        [
                            "filenames",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "dpSGD/dpSGD_Cifar10/cifar10_input_test.py": {
        "tensorflow": {
            "main_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FIFOQueue_49": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "capacity": {
                    "value": "99",
                    "type": "int",
                    "possible_values": []
                },
                "dtypes": {
                    "value": "[tf.string]",
                    "type": "List",
                    "possible_values": []
                },
                "shapes": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "as_text_57": {
                "bytes_or_text": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "dpSGD/dpSGD_Cifar10/pSGDCNN_CIFAR.py": {
        "tensorflow": {
            "DEFINE_string_28": {
                "name": {
                    "value": "checkpoint_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "os.getcwd() + '/tmp/cifar10_train'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where to read model checkpoints.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_max_64": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(inputs, shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_68": {
                "variable": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "_x.get_shape()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_71": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_98": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([kernel_size, kernel_size, in_features, out_features])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_105": {
                "variable": {
                    "value": "current",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "current",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.batch_norm(current, scale=True, is_training=is_training, updates_collections=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(current)",
                            "Call"
                        ],
                        [
                            "conv2d(current, in_features, out_features, kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(current, keep_prob)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "tf.concat((current, tmp), axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat((conv2, norm1), axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat((conv2, norm1), axis=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_107": {
                "variable": {
                    "value": "current",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "current",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.batch_norm(current, scale=True, is_training=is_training, updates_collections=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(current)",
                            "Call"
                        ],
                        [
                            "conv2d(current, in_features, out_features, kernel_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(current, keep_prob)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "tf.concat((current, tmp), axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat((conv2, norm1), axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat((conv2, norm1), axis=3)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_166": {
                "variable": {
                    "value": "current",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(conv2, norm1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_218": {
                "variable": {
                    "value": "softmax_linear",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(local4, weights2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_on_cpu('biases', [10], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [10], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_92": {
                "variable": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_loss(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool_111": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, s, s, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, s, s, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_118": {
                "variable": {
                    "value": "current",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(current, tmp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_143": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 3, 128], stddev=0.05, wd=None)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 3, 128], stddev=0.05, wd=None)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_146": {
                "variable": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input, W, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel1, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, kernel2, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, kernel3, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel1, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, kernel2, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, kernel3, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_147": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases1)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases2)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases3)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases1)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases2)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases3)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_158": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.batch_norm(conv1, scale=True, is_training=True, updates_collections=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(conv1, scale=True, is_training=True, updates_collections=None)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 128, 128], stddev=0.05, wd=None)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 128, 128], stddev=0.05, wd=None)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_160": {
                "variable": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input, W, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel1, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, kernel2, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, kernel3, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel1, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, kernel2, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, kernel3, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_161": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases1)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases2)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases3)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases1)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases2)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases3)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_176": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.batch_norm(current, scale=True, is_training=True, updates_collections=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(current, scale=True, is_training=True, updates_collections=None)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 256, 256], stddev=0.05, wd=None)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 256, 256], stddev=0.05, wd=None)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_178": {
                "variable": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input, W, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel1, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, kernel2, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, kernel3, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel1, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, kernel2, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, kernel3, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_on_cpu('biases', [256], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [256], tf.constant_initializer(0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_179": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases1)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases2)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases3)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases1)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases2)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases3)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_193": {
                "variable": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "avg_pool(norm3, 2)",
                            "Call"
                        ],
                        [
                            "avg_pool(norm3, 2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 5 * 5 * 256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_194": {
                "variable": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(h_pool2_flat, weights1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_on_cpu('biases', [hk], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [hk], tf.constant_initializer(0.1))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "moments_196": {
                "variable": {
                    "value": "(batch_mean2, batch_var2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(h_pool2_flat, weights1), biases4, name=scope.name)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(h_pool2_flat, weights1), biases4, name=scope.name)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_197": {
                "variable": {
                    "value": "scale2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([hk])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_198": {
                "variable": {
                    "value": "beta2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([hk])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_199": {
                "variable": {
                    "value": "BN_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(h_pool2_flat, weights1), biases4, name=scope.name)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(h_pool2_flat, weights1), biases4, name=scope.name)",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "batch_mean2",
                    "type": "variable",
                    "possible_values": []
                },
                "variance": {
                    "value": "batch_var2",
                    "type": "variable",
                    "possible_values": []
                },
                "offset": {
                    "value": "beta2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([hk]))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.zeros([hk]))",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.ones([hk]))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.ones([hk]))",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Variable_225": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "one_hot_229": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(labels, 10)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_263": {
                "variable": {
                    "value": "current",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(conv2, norm1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_307": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(local4, weights2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_on_cpu('biases', [10], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [10], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_314": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(labels, 10)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_315": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(labels, 10)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(local4, weights2), biases5, name=scope.name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "cross_entropy_per_example",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_317": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(labels=labels, logits=logits, name='cross_entropy_per_example')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "cross_entropy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_319": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "clip_by_norm_337": {
                "variable": {
                    "value": "gw_K1",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "gw_K1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, kernel1)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.clip_by_norm(gw_K1, clip_bound)",
                            "Call"
                        ],
                        [
                            "gw_K1 + tf.random_normal(shape=tf.shape(gw_K1), mean=0.0, stddev=sigma * sensitivity, dtype=tf.float32) / batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "clip_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                }
            },
            "clip_by_norm_338": {
                "variable": {
                    "value": "gw_K2",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "gw_K2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, kernel2)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.clip_by_norm(gw_K2, clip_bound)",
                            "Call"
                        ],
                        [
                            "gw_K2 + tf.random_normal(shape=tf.shape(gw_K2), mean=0.0, stddev=sigma * sensitivity, dtype=tf.float32) / batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "clip_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                }
            },
            "clip_by_norm_339": {
                "variable": {
                    "value": "gw_K3",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "gw_K3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, kernel3)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.clip_by_norm(gw_K3, clip_bound)",
                            "Call"
                        ],
                        [
                            "gw_K3 + tf.random_normal(shape=tf.shape(gw_K3), mean=0.0, stddev=sigma * sensitivity, dtype=tf.float32) / batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "clip_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                }
            },
            "clip_by_norm_340": {
                "variable": {
                    "value": "gw_W1",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "gw_W1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, weights1)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.clip_by_norm(gw_W1, clip_bound)",
                            "Call"
                        ],
                        [
                            "gw_W1 + tf.random_normal(shape=tf.shape(gw_W1), mean=0.0, stddev=sigma * sensitivity, dtype=tf.float32) / batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "clip_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                }
            },
            "clip_by_norm_341": {
                "variable": {
                    "value": "gw_W2",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "gw_W2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, weights2)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.clip_by_norm(gw_W2, clip_bound)",
                            "Call"
                        ],
                        [
                            "gw_W2 + tf.random_normal(shape=tf.shape(gw_W2), mean=0.0, stddev=sigma * sensitivity, dtype=tf.float32) / batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "clip_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                }
            },
            "ExponentialMovingAverage_357": {
                "variable": {
                    "value": "variable_averages",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "MOVING_AVERAGE_DECAY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9999",
                            "Constant"
                        ]
                    ]
                },
                "num_updates": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_363": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.all_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "merge_all_370": {
                "variable": {
                    "value": "summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_373": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_376": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(log_device_placement=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FileWriter_382": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.getcwd() + '/tmp/cifar10_train'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_386": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.checkpoint_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Exists_438": {
                "filename": {
                    "value": "/tmp/cifar10_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MakeDirs_440": {
                "dirname": {
                    "value": "/tmp/cifar10_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_444": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_64": {
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "shape + [num_channels // num_units]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "add_to_collection_93": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_138": {
                "name_or_scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_171": {
                "name_or_scope": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_189": {
                "name_or_scope": {
                    "value": "local4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_217": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_218": {
                "a": {
                    "value": "local4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_with_weight_decay('weights', [hk, 10], stddev=1 / (hk * 1.0), wd=0.0)",
                            "Call"
                        ],
                        [
                            "cifar10._variable_with_weight_decay('weights', [hk, 10], stddev=1 / (hk * 1.0), wd=0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_240": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 3, 128], stddev=0.05, wd=None)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 3, 128], stddev=0.05, wd=None)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_243": {
                "variable": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input, W, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel1, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, kernel2, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, kernel3, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel1, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, kernel2, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, kernel3, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_244": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases1)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases2)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases3)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases1)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases2)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases3)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_255": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.batch_norm(conv1, scale=True, is_training=True, updates_collections=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(conv1, scale=True, is_training=True, updates_collections=None)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 128, 128], stddev=0.05, wd=None)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 128, 128], stddev=0.05, wd=None)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_257": {
                "variable": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input, W, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel1, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, kernel2, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, kernel3, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel1, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, kernel2, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, kernel3, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_258": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases1)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases2)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases3)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases1)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases2)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases3)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_273": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.batch_norm(current, scale=True, is_training=True, updates_collections=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(current, scale=True, is_training=True, updates_collections=None)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 256, 256], stddev=0.05, wd=None)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 256, 256], stddev=0.05, wd=None)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_275": {
                "variable": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input, W, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel1, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, kernel2, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, kernel3, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(images, kernel1, [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm1, kernel2, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(norm2, kernel3, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_on_cpu('biases', [256], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [256], tf.constant_initializer(0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_276": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases1)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases2)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases3)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases1)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases2)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases3)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_290": {
                "variable": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "avg_pool(norm3, 2)",
                            "Call"
                        ],
                        [
                            "avg_pool(norm3, 2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 5 * 5 * 256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_291": {
                "variable": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(h_pool2_flat, weights1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_on_cpu('biases', [hk], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [hk], tf.constant_initializer(0.1))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "moments_293": {
                "variable": {
                    "value": "(batch_mean2, batch_var2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(h_pool2_flat, weights1), biases4, name=scope.name)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(h_pool2_flat, weights1), biases4, name=scope.name)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_294": {
                "variable": {
                    "value": "scale2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([hk])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_295": {
                "variable": {
                    "value": "beta2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([hk])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_296": {
                "variable": {
                    "value": "BN_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(h_pool2_flat, weights1), biases4, name=scope.name)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(h_pool2_flat, weights1), biases4, name=scope.name)",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "batch_mean2",
                    "type": "variable",
                    "possible_values": []
                },
                "variance": {
                    "value": "batch_var2",
                    "type": "variable",
                    "possible_values": []
                },
                "offset": {
                    "value": "beta2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([hk]))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.zeros([hk]))",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.ones([hk]))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.ones([hk]))",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_op_360": {
                "variable": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "start_queue_runners_380": {
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session(config=tf.ConfigProto(log_device_placement=False))",
                            "Call"
                        ]
                    ]
                }
            },
            "DeleteRecursively_439": {
                "dirname": {
                    "value": "/tmp/cifar10_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_69": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "l2_loss_92": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_on_cpu(name, shape, initializer=tf.contrib.layers.xavier_initializer_conv2d())",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_145": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_159": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_177": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_192": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_194": {
                "a": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pool3, [-1, 5 * 5 * 256])",
                            "Call"
                        ],
                        [
                            "tf.reshape(pool3, [-1, 5 * 5 * 256])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_with_weight_decay('weights', shape=[5 * 5 * 256, hk], stddev=0.04, wd=None)",
                            "Call"
                        ],
                        [
                            "cifar10._variable_with_weight_decay('weights', shape=[5 * 5 * 256, hk], stddev=0.04, wd=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_197": {
                "shape": {
                    "value": "[hk]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_198": {
                "shape": {
                    "value": "[hk]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_235": {
                "name_or_scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_250": {
                "name_or_scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_268": {
                "name_or_scope": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_286": {
                "name_or_scope": {
                    "value": "local4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_306": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_307": {
                "a": {
                    "value": "local4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ],
                        [
                            "max_out(BN_norm, hk)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_with_weight_decay('weights', [hk, 10], stddev=1 / (hk * 1.0), wd=0.0)",
                            "Call"
                        ],
                        [
                            "cifar10._variable_with_weight_decay('weights', [hk, 10], stddev=1 / (hk * 1.0), wd=0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_321": {
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(cross_entropy, name='cross_entropy')",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "kernel1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 3, 128], stddev=0.05, wd=None)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[3, 3, 3, 128], stddev=0.05, wd=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_322": {
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(cross_entropy, name='cross_entropy')",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "biases1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_324": {
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(cross_entropy, name='cross_entropy')",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "kernel2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 128, 128], stddev=0.05, wd=None)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 128, 128], stddev=0.05, wd=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_325": {
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(cross_entropy, name='cross_entropy')",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "biases2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [128], tf.constant_initializer(0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_327": {
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(cross_entropy, name='cross_entropy')",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "kernel3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 256, 256], stddev=0.05, wd=None)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=[5, 5, 256, 256], stddev=0.05, wd=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_328": {
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(cross_entropy, name='cross_entropy')",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "biases3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_on_cpu('biases', [256], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [256], tf.constant_initializer(0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_330": {
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(cross_entropy, name='cross_entropy')",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "weights1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_with_weight_decay('weights', shape=[5 * 5 * 256, hk], stddev=0.04, wd=None)",
                            "Call"
                        ],
                        [
                            "cifar10._variable_with_weight_decay('weights', shape=[5 * 5 * 256, hk], stddev=0.04, wd=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_331": {
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(cross_entropy, name='cross_entropy')",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "biases4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_on_cpu('biases', [hk], tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [hk], tf.constant_initializer(0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_333": {
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(cross_entropy, name='cross_entropy')",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "weights2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_with_weight_decay('weights', [hk, 10], stddev=1 / (hk * 1.0), wd=0.0)",
                            "Call"
                        ],
                        [
                            "cifar10._variable_with_weight_decay('weights', [hk, 10], stddev=1 / (hk * 1.0), wd=0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_334": {
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(cross_entropy, name='cross_entropy')",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "biases5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_on_cpu('biases', [10], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "cifar10._variable_on_cpu('biases', [10], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_358": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_359": {
                "control_inputs": {
                    "value": "[apply_gradient_op, variables_averages_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "all_variables_363": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_242": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_256": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_274": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_289": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_291": {
                "a": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pool3, [-1, 5 * 5 * 256])",
                            "Call"
                        ],
                        [
                            "tf.reshape(pool3, [-1, 5 * 5 * 256])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar10._variable_with_weight_decay('weights', shape=[5 * 5 * 256, hk], stddev=0.04, wd=None)",
                            "Call"
                        ],
                        [
                            "cifar10._variable_with_weight_decay('weights', shape=[5 * 5 * 256, hk], stddev=0.04, wd=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_294": {
                "shape": {
                    "value": "[hk]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_295": {
                "shape": {
                    "value": "[hk]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ConfigProto_376": {
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_344": {
                "input": {
                    "value": "gw_K1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, kernel1)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.clip_by_norm(gw_K1, clip_bound)",
                            "Call"
                        ],
                        [
                            "gw_K1 + tf.random_normal(shape=tf.shape(gw_K1), mean=0.0, stddev=sigma * sensitivity, dtype=tf.float32) / batch_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_345": {
                "input": {
                    "value": "gw_K2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, kernel2)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.clip_by_norm(gw_K2, clip_bound)",
                            "Call"
                        ],
                        [
                            "gw_K2 + tf.random_normal(shape=tf.shape(gw_K2), mean=0.0, stddev=sigma * sensitivity, dtype=tf.float32) / batch_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_346": {
                "input": {
                    "value": "gw_K3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, kernel3)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.clip_by_norm(gw_K3, clip_bound)",
                            "Call"
                        ],
                        [
                            "gw_K3 + tf.random_normal(shape=tf.shape(gw_K3), mean=0.0, stddev=sigma * sensitivity, dtype=tf.float32) / batch_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_347": {
                "input": {
                    "value": "gw_W1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, weights1)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.clip_by_norm(gw_W1, clip_bound)",
                            "Call"
                        ],
                        [
                            "gw_W1 + tf.random_normal(shape=tf.shape(gw_W1), mean=0.0, stddev=sigma * sensitivity, dtype=tf.float32) / batch_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_348": {
                "input": {
                    "value": "gw_W2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, weights2)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.clip_by_norm(gw_W2, clip_bound)",
                            "Call"
                        ],
                        [
                            "gw_W2 + tf.random_normal(shape=tf.shape(gw_W2), mean=0.0, stddev=sigma * sensitivity, dtype=tf.float32) / batch_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_349": {
                "input": {
                    "value": "gb1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, biases1)[0]",
                            "Subscript"
                        ],
                        [
                            "gb1 + tf.random_normal(shape=tf.shape(gb1), mean=0.0, stddev=sigma * sensitivity, dtype=tf.float32) / batch_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_350": {
                "input": {
                    "value": "gb2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, biases2)[0]",
                            "Subscript"
                        ],
                        [
                            "gb2 + tf.random_normal(shape=tf.shape(gb2), mean=0.0, stddev=sigma * sensitivity, dtype=tf.float32) / batch_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_351": {
                "input": {
                    "value": "gb3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, biases3)[0]",
                            "Subscript"
                        ],
                        [
                            "gb3 + tf.random_normal(shape=tf.shape(gb3), mean=0.0, stddev=sigma * sensitivity, dtype=tf.float32) / batch_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_352": {
                "input": {
                    "value": "gb4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, biases4)[0]",
                            "Subscript"
                        ],
                        [
                            "gb4 + tf.random_normal(shape=tf.shape(gb4), mean=0.0, stddev=sigma * sensitivity, dtype=tf.float32) / batch_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_353": {
                "input": {
                    "value": "gb5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, biases5)[0]",
                            "Subscript"
                        ],
                        [
                            "gb5 + tf.random_normal(shape=tf.shape(gb5), mean=0.0, stddev=sigma * sensitivity, dtype=tf.float32) / batch_size",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "dpSGD/dpSGD_Cifar10/utils.py": {
        "tensorflow": {
            "shape_86": {
                "variable": {
                    "value": "saved_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.name.rsplit(':', 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_87": {
                "variable": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "saved_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(t)",
                            "Call"
                        ],
                        [
                            "tf.shape(t)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_88": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.name.rsplit(':', 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat(axis=0, values=[batch_size, [-1]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "fill_89": {
                "variable": {
                    "value": "upper_bound_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "tf.slice(saved_shape, [0], [1])",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.constant(1.0 / upper_bound)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rsqrt_92": {
                "variable": {
                    "value": "l2norm_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(t2 * t2, [1]) + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_94": {
                "variable": {
                    "value": "clipped_t",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.diag(scale)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(t, tf.concat(axis=0, values=[batch_size, [-1]]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(t, tf.concat(axis=0, values=[tf.slice(saved_shape, [0], [1]), -1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_95": {
                "variable": {
                    "value": "clipped_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "clipped_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.diag(scale), t2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(clipped_t, saved_shape, name=name)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "saved_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(t)",
                            "Call"
                        ],
                        [
                            "tf.shape(t)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_118": {
                "variable": {
                    "value": "saved_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.name.rsplit(':', 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_119": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.name.rsplit(':', 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat(axis=0, values=[tf.slice(saved_shape, [0], [1]), -1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_120": {
                "variable": {
                    "value": "t_abs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(t, tf.concat(axis=0, values=[batch_size, [-1]]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(t, tf.concat(axis=0, values=[tf.slice(saved_shape, [0], [1]), -1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_163": {
                "value": {
                    "value": "table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy.zeros((m + 1, m + 1), dtype=numpy.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_84": {
                "values": {
                    "value": "[t, upper_bound]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "batch_clip_by_l2norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_116": {
                "values": {
                    "value": "[t, threshold_ratio]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "soft_thresholding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_125": {
                "tensor": {
                    "value": "t_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(t2) * tf.nn.relu(t_abs - tf.reduce_mean(t_abs, [0], keep_dims=True) * threshold_ratio)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "saved_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(t)",
                            "Call"
                        ],
                        [
                            "tf.shape(t)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_139": {
                "values": {
                    "value": "[t, sigma]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "add_gaussian_noise",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_88": {
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_size, [-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_89": {
                "input_": {
                    "value": "saved_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(t)",
                            "Call"
                        ],
                        [
                            "tf.shape(t)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_90": {
                "value": {
                    "value": "1.0 / upper_bound",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_93": {
                "x": {
                    "value": "l2norm_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.rsqrt(tf.reduce_sum(t2 * t2, [1]) + 1e-06)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "upper_bound_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill(tf.slice(saved_shape, [0], [1]), tf.constant(1.0 / upper_bound))",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_94": {
                "diagonal": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(l2norm_inv, upper_bound_inv) * upper_bound",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_119": {
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.slice(saved_shape, [0], [1]), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sign_121": {
                "x": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(t, tf.concat(axis=0, values=[batch_size, [-1]]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(t, tf.concat(axis=0, values=[tf.slice(saved_shape, [0], [1]), -1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_121": {
                "features": {
                    "value": "t_abs - tf.reduce_mean(t_abs, [0], keep_dims=True) * threshold_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_92": {
                "input_tensor": {
                    "value": "t2 * t2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_141": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.name.rsplit(':', 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_119": {
                "input_": {
                    "value": "saved_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(t)",
                            "Call"
                        ],
                        [
                            "tf.shape(t)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_122": {
                "input_tensor": {
                    "value": "t_abs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(t2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "dpSGD/dpSGD_MNIST/DPSGD_CNN.py": {
        "tensorflow": {
            "truncated_normal_47": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_51": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "InteractiveSession_95": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_98": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 784]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_99": {
                "variable": {
                    "value": "x_image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 784])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_102": {
                "variable": {
                    "value": "h_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(x_image, W_conv1) + b_conv1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_107": {
                "variable": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(h_pool1, W_conv2) + b_conv2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_112": {
                "variable": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_pool_2x2(h_conv2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 7 * 7 * 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_113": {
                "variable": {
                    "value": "h_fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(h_pool2_flat, W_fc1) + b_fc1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_115": {
                "variable": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_116": {
                "variable": {
                    "value": "h_fc1_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_123": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_134": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(labels=y_, logits=y_conv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_138": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_norm_154": {
                "variable": {
                    "value": "gw_W1",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "gw_W1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(cross_entropy, W_conv1)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.clip_by_norm(gw_W1, clip_bound)",
                            "Call"
                        ],
                        [
                            "gw_W1 + tf.random_normal(shape=tf.shape(gw_W1), mean=0.0, stddev=sigma * sensitivity, dtype=tf.float32) / batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "clip_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                }
            },
            "clip_by_norm_155": {
                "variable": {
                    "value": "gw_W2",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "gw_W2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(cross_entropy, W_conv2)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.clip_by_norm(gw_W2, clip_bound)",
                            "Call"
                        ],
                        [
                            "gw_W2 + tf.random_normal(shape=tf.shape(gw_W2), mean=0.0, stddev=sigma * sensitivity, dtype=tf.float32) / batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "clip_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                }
            },
            "clip_by_norm_156": {
                "variable": {
                    "value": "gw_Wf1",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "gw_Wf1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(cross_entropy, W_fc1)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.clip_by_norm(gw_Wf1, clip_bound)",
                            "Call"
                        ],
                        [
                            "gw_Wf1 + tf.random_normal(shape=tf.shape(gw_Wf1), mean=0.0, stddev=sigma * sensitivity, dtype=tf.float32) / batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "clip_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                }
            },
            "clip_by_norm_157": {
                "variable": {
                    "value": "gw_Wf2",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "gw_Wf2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(cross_entropy, W_fc2)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.clip_by_norm(gw_Wf2, clip_bound)",
                            "Call"
                        ],
                        [
                            "gw_Wf2 + tf.random_normal(shape=tf.shape(gw_Wf2), mean=0.0, stddev=sigma * sensitivity, dtype=tf.float32) / batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "clip_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                }
            },
            "equal_175": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y_conv, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y_, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_176": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_48": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_52": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_55": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 784])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_58": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 784])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Exists_205": {
                "filename": {
                    "value": "/tmp/mnist_logs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MakeDirs_207": {
                "dirname": {
                    "value": "/tmp/mnist_logs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_120": {
                "a": {
                    "value": "h_fc1_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(h_fc1, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([25, 10])",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_134": {
                "labels": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 10])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "y_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_fc1_drop, W_fc2) + b_fc2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gradients_141": {
                "ys": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y_, logits=y_conv))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "W_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([5, 5, 1, 32])",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_142": {
                "ys": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y_, logits=y_conv))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "b_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable([32])",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_144": {
                "ys": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y_, logits=y_conv))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "W_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([5, 5, 32, 64])",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_145": {
                "ys": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y_, logits=y_conv))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "b_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable([64])",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_147": {
                "ys": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y_, logits=y_conv))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "W_fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([7 * 7 * 64, 25])",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_148": {
                "ys": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y_, logits=y_conv))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "b_fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable([25])",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_150": {
                "ys": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y_, logits=y_conv))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "W_fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([25, 10])",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_151": {
                "ys": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y_, logits=y_conv))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "b_fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable([10])",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_175": {
                "input": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 10])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_176": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(y_conv, 1), tf.argmax(y_, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DeleteRecursively_206": {
                "dirname": {
                    "value": "/tmp/mnist_logs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_113": {
                "a": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h_pool2, [-1, 7 * 7 * 64])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([7 * 7 * 64, 25])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_164": {
                "input": {
                    "value": "gw_W1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(cross_entropy, W_conv1)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.clip_by_norm(gw_W1, clip_bound)",
                            "Call"
                        ],
                        [
                            "gw_W1 + tf.random_normal(shape=tf.shape(gw_W1), mean=0.0, stddev=sigma * sensitivity, dtype=tf.float32) / batch_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_165": {
                "input": {
                    "value": "gb1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(cross_entropy, b_conv1)[0]",
                            "Subscript"
                        ],
                        [
                            "gb1 + tf.random_normal(shape=tf.shape(gb1), mean=0.0, stddev=sigma * sensitivity, dtype=tf.float32) / batch_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_166": {
                "input": {
                    "value": "gw_W2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(cross_entropy, W_conv2)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.clip_by_norm(gw_W2, clip_bound)",
                            "Call"
                        ],
                        [
                            "gw_W2 + tf.random_normal(shape=tf.shape(gw_W2), mean=0.0, stddev=sigma * sensitivity, dtype=tf.float32) / batch_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_167": {
                "input": {
                    "value": "gb2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(cross_entropy, b_conv2)[0]",
                            "Subscript"
                        ],
                        [
                            "gb2 + tf.random_normal(shape=tf.shape(gb2), mean=0.0, stddev=sigma * sensitivity, dtype=tf.float32) / batch_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_168": {
                "input": {
                    "value": "gw_Wf1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(cross_entropy, W_fc1)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.clip_by_norm(gw_Wf1, clip_bound)",
                            "Call"
                        ],
                        [
                            "gw_Wf1 + tf.random_normal(shape=tf.shape(gw_Wf1), mean=0.0, stddev=sigma * sensitivity, dtype=tf.float32) / batch_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_169": {
                "input": {
                    "value": "gbf1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(cross_entropy, b_fc1)[0]",
                            "Subscript"
                        ],
                        [
                            "gbf1 + tf.random_normal(shape=tf.shape(gbf1), mean=0.0, stddev=sigma * sensitivity, dtype=tf.float32) / batch_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_170": {
                "input": {
                    "value": "gw_Wf2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(cross_entropy, W_fc2)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.clip_by_norm(gw_Wf2, clip_bound)",
                            "Call"
                        ],
                        [
                            "gw_Wf2 + tf.random_normal(shape=tf.shape(gw_Wf2), mean=0.0, stddev=sigma * sensitivity, dtype=tf.float32) / batch_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_171": {
                "input": {
                    "value": "gbf2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(cross_entropy, b_fc2)[0]",
                            "Subscript"
                        ],
                        [
                            "gbf2 + tf.random_normal(shape=tf.shape(gbf2), mean=0.0, stddev=sigma * sensitivity, dtype=tf.float32) / batch_size",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "dpSGD/dpSGD_MNIST/accountant.py": {
        "tensorflow": {
            "Variable_64": {
                "variable": {
                    "value": "self._eps_squared_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([1])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "eps_squared_sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_66": {
                "variable": {
                    "value": "self._delta_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([1])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "delta_sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_355": {
                "variable": {
                    "value": "binomial",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "self._binomial_table",
                    "type": "Attribute",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[t + 1, t + 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_361": {
                "variable": {
                    "value": "exponents",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[j * (j + 1.0 - 2.0 * s) / (2.0 * sigma * sigma) for j in range(t + 1)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_364": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "binomial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(self._binomial_table, [0, 0], [t + 1, t + 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "signs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy.zeros((t + 1, t + 1), dtype=numpy.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_369": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(binomial, signs)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.exp(exponents)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_372": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(x, tf.exp(exponents))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_389": {
                "variable": {
                    "value": "binomial_table",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "self._binomial_table",
                    "type": "Attribute",
                    "possible_values": []
                },
                "begin": {
                    "value": "[moment_order, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, moment_order + 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_392": {
                "variable": {
                    "value": "qs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.constant([i * 1.0 for i in range(moment_order + 1)], dtype=tf.float64) * tf.cast(tf.log(q), dtype=tf.float64)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_396": {
                "variable": {
                    "value": "term0",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "binomial_table * qs * moments0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_398": {
                "variable": {
                    "value": "term1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "binomial_table * qs * moments1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_97": {
                "variable": {
                    "value": "amortize_eps",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.log(1.0 + amortize_ratio * (tf.exp(eps) - 1.0))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_99": {
                "variable": {
                    "value": "amortize_delta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "amortize_ratio * delta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "group_235": {
                "*inputs": {
                    "value": "*moments_accum_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "squeeze_399": {
                "input": {
                    "value": "tf.log(tf.cast(q * term0 + (1.0 - q) * term1, tf.float64))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_op_407": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_64": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_88": {
                "control_inputs": {
                    "value": "[tf.Assert(tf.greater(delta, 0), ['delta needs to be greater than 0'])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "group_100": {
                "*inputs": {
                    "value": "*[tf.assign_add(self._eps_squared_sum, tf.square(amortize_eps)), tf.assign_add(self._delta_sum, amortize_delta)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Variable_190": {
                "initial_value": {
                    "value": "numpy.float64(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "'log_moments-%d' % moment_order",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_369": {
                "x": {
                    "value": "exponents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([j * (j + 1.0 - 2.0 * s) / (2.0 * sigma * sigma) for j in range(t + 1)], dtype=tf.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_399": {
                "x": {
                    "value": "tf.cast(q * term0 + (1.0 - q) * term1, tf.float64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_97": {
                "x": {
                    "value": "1.0 + amortize_ratio * (tf.exp(eps) - 1.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_229": {
                "x": {
                    "value": "num_examples",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_add_234": {
                "ref": {
                    "value": "self._log_moments[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "moment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._compute_log_moment(sigma, q, self._moment_orders[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_392": {
                "value": {
                    "value": "[i * 1.0 for i in range(moment_order + 1)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_393": {
                "x": {
                    "value": "tf.log(q)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_399": {
                "x": {
                    "value": "q * term0 + (1.0 - q) * term1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Assert_89": {
                "condition": {
                    "value": "tf.greater(delta, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['delta needs to be greater than 0']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_91": {
                "x": {
                    "value": "num_examples",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_394": {
                "x": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(num_examples, tf.float64) * 1.0 / self._total_examples",
                            "BinOp"
                        ]
                    ]
                }
            },
            "greater_89": {
                "x": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_deltas",
                            "Name"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "assign_add_100": {
                "ref": {
                    "value": "self._eps_squared_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.square(amortize_eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_add_102": {
                "ref": {
                    "value": "self._delta_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "amortize_delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(amortize_ratio * delta, [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "square_101": {
                "x": {
                    "value": "amortize_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.log(1.0 + amortize_ratio * (tf.exp(eps) - 1.0)), [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_98": {
                "x": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_eps",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "dpSGD/dpSGD_MNIST/priv_calc.py": {
        "tensorflow": {
            "placeholder_13": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_14": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_28": {
                "control_inputs": {
                    "value": "[privacy_accum_op]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "dpSGD/dpSGD_MNIST/utils.py": {
        "tensorflow": {
            "shape_86": {
                "variable": {
                    "value": "saved_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.name.rsplit(':', 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_87": {
                "variable": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "saved_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(t)",
                            "Call"
                        ],
                        [
                            "tf.shape(t)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_88": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.name.rsplit(':', 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat(axis=0, values=[batch_size, [-1]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "fill_89": {
                "variable": {
                    "value": "upper_bound_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "tf.slice(saved_shape, [0], [1])",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.constant(1.0 / upper_bound)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rsqrt_92": {
                "variable": {
                    "value": "l2norm_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(t2 * t2, [1]) + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_94": {
                "variable": {
                    "value": "clipped_t",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.diag(scale)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(t, tf.concat(axis=0, values=[batch_size, [-1]]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(t, tf.concat(axis=0, values=[tf.slice(saved_shape, [0], [1]), -1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_95": {
                "variable": {
                    "value": "clipped_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "clipped_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.diag(scale), t2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(clipped_t, saved_shape, name=name)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "saved_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(t)",
                            "Call"
                        ],
                        [
                            "tf.shape(t)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_118": {
                "variable": {
                    "value": "saved_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.name.rsplit(':', 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_119": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.name.rsplit(':', 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat(axis=0, values=[tf.slice(saved_shape, [0], [1]), -1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_120": {
                "variable": {
                    "value": "t_abs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(t, tf.concat(axis=0, values=[batch_size, [-1]]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(t, tf.concat(axis=0, values=[tf.slice(saved_shape, [0], [1]), -1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_163": {
                "value": {
                    "value": "table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy.zeros((m + 1, m + 1), dtype=numpy.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_84": {
                "values": {
                    "value": "[t, upper_bound]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "batch_clip_by_l2norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_116": {
                "values": {
                    "value": "[t, threshold_ratio]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "soft_thresholding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_125": {
                "tensor": {
                    "value": "t_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(t2) * tf.nn.relu(t_abs - tf.reduce_mean(t_abs, [0], keep_dims=True) * threshold_ratio)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "saved_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(t)",
                            "Call"
                        ],
                        [
                            "tf.shape(t)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_139": {
                "values": {
                    "value": "[t, sigma]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "add_gaussian_noise",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_88": {
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_size, [-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_89": {
                "input_": {
                    "value": "saved_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(t)",
                            "Call"
                        ],
                        [
                            "tf.shape(t)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_90": {
                "value": {
                    "value": "1.0 / upper_bound",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_93": {
                "x": {
                    "value": "l2norm_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.rsqrt(tf.reduce_sum(t2 * t2, [1]) + 1e-06)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "upper_bound_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill(tf.slice(saved_shape, [0], [1]), tf.constant(1.0 / upper_bound))",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_94": {
                "diagonal": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(l2norm_inv, upper_bound_inv) * upper_bound",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_119": {
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.slice(saved_shape, [0], [1]), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sign_121": {
                "x": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(t, tf.concat(axis=0, values=[batch_size, [-1]]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(t, tf.concat(axis=0, values=[tf.slice(saved_shape, [0], [1]), -1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_121": {
                "features": {
                    "value": "t_abs - tf.reduce_mean(t_abs, [0], keep_dims=True) * threshold_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_92": {
                "input_tensor": {
                    "value": "t2 * t2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_141": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.name.rsplit(':', 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_119": {
                "input_": {
                    "value": "saved_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(t)",
                            "Call"
                        ],
                        [
                            "tf.shape(t)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_122": {
                "input_tensor": {
                    "value": "t_abs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(t2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "dpautoencoder/dpLayers.py": {
        "tensorflow": {
            "add_40": {
                "variable": {
                    "value": "sum_W",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.conv2d(inpt, self.W, strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_62": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.conv2d(v, self.W, strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_64": {
                "variable": {
                    "value": "max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.nn.conv2d(v, self.W, strides=[1, 2, 2, 1], padding='SAME'), self.b)",
                            "Call"
                        ],
                        [
                            "h / max",
                            "BinOp"
                        ],
                        [
                            "tf.add(tf.nn.conv2d(v, self.W, strides=[1, 2, 2, 1], padding='SAME'), self.b)",
                            "Call"
                        ],
                        [
                            "h / max",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(inpt, tf.stack([xShape, n_in]))",
                            "Call"
                        ],
                        [
                            "tf.matmul(v, self.W) + self.b",
                            "BinOp"
                        ]
                    ]
                }
            },
            "add_72": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.conv2d(v, self.W, strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_73": {
                "variable": {
                    "value": "max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.nn.conv2d(v, self.W, strides=[1, 2, 2, 1], padding='SAME'), self.b)",
                            "Call"
                        ],
                        [
                            "h / max",
                            "BinOp"
                        ],
                        [
                            "tf.add(tf.nn.conv2d(v, self.W, strides=[1, 2, 2, 1], padding='SAME'), self.b)",
                            "Call"
                        ],
                        [
                            "h / max",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(inpt, tf.stack([xShape, n_in]))",
                            "Call"
                        ],
                        [
                            "tf.matmul(v, self.W) + self.b",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_by_value_76": {
                "variable": {
                    "value": "Chebyshev_h",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "self.dpChebyshev(h, Delta, epsilon, batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_100": {
                "variable": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(rc_v - self.input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_101": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AdamOptimizer_115": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "add_134": {
                "variable": {
                    "value": "sum_W",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.conv2d(inpt, self.W, strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_151": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([n_in, n_out], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_153": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_out])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_156": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inpt",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.stack([xShape, n_in])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "moments_159": {
                "variable": {
                    "value": "(batch_mean2, batch_var2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "sum_W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.nn.conv2d(inpt, self.W, strides=[1, 2, 2, 1], padding='SAME'), self.b)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.nn.conv2d(inpt, self.W, strides=[1, 2, 2, 1], padding='SAME'), self.b)",
                            "Call"
                        ],
                        [
                            "tf.matmul(h, self.W) + self.b",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(inpt, self.W) + self.b",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(inpt, self.W) + self.b",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_160": {
                "variable": {
                    "value": "scale2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([n_out])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_161": {
                "variable": {
                    "value": "beta2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_out])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_162": {
                "variable": {
                    "value": "BN_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sum_W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.nn.conv2d(inpt, self.W, strides=[1, 2, 2, 1], padding='SAME'), self.b)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.nn.conv2d(inpt, self.W, strides=[1, 2, 2, 1], padding='SAME'), self.b)",
                            "Call"
                        ],
                        [
                            "tf.matmul(h, self.W) + self.b",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(inpt, self.W) + self.b",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(inpt, self.W) + self.b",
                            "BinOp"
                        ]
                    ]
                },
                "mean": {
                    "value": "batch_mean2",
                    "type": "variable",
                    "possible_values": []
                },
                "variance": {
                    "value": "batch_var2",
                    "type": "variable",
                    "possible_values": []
                },
                "offset": {
                    "value": "beta2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([n_out]))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.zeros([n_out]))",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.ones([n_out]))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.ones([n_out]))",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Variable_180": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([n_in, n_out], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_182": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_out])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "moments_189": {
                "variable": {
                    "value": "(batch_mean2, batch_var2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "sum_W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.nn.conv2d(inpt, self.W, strides=[1, 2, 2, 1], padding='SAME'), self.b)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.nn.conv2d(inpt, self.W, strides=[1, 2, 2, 1], padding='SAME'), self.b)",
                            "Call"
                        ],
                        [
                            "tf.matmul(h, self.W) + self.b",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(inpt, self.W) + self.b",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(inpt, self.W) + self.b",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_190": {
                "variable": {
                    "value": "scale2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([n_out])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_191": {
                "variable": {
                    "value": "beta2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_out])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_192": {
                "variable": {
                    "value": "BN_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sum_W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.nn.conv2d(inpt, self.W, strides=[1, 2, 2, 1], padding='SAME'), self.b)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.nn.conv2d(inpt, self.W, strides=[1, 2, 2, 1], padding='SAME'), self.b)",
                            "Call"
                        ],
                        [
                            "tf.matmul(h, self.W) + self.b",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(inpt, self.W) + self.b",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(inpt, self.W) + self.b",
                            "BinOp"
                        ]
                    ]
                },
                "mean": {
                    "value": "batch_mean2",
                    "type": "variable",
                    "possible_values": []
                },
                "variance": {
                    "value": "batch_var2",
                    "type": "variable",
                    "possible_values": []
                },
                "offset": {
                    "value": "beta2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([n_out]))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.zeros([n_out]))",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.ones([n_out]))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.ones([n_out]))",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Variable_209": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([n_in, n_out], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_211": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_out])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_212": {
                "variable": {
                    "value": "self.vbias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_in])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_292": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "activation_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.propdown(activation_h)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_294": {
                "variable": {
                    "value": "relu_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "activation_v >= zeros",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "activation_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.propdown(activation_h)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.zeros_like(activation_v, dtype=self.input.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_295": {
                "variable": {
                    "value": "neg_abs_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "activation_v >= zeros",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "-activation_v",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "activation_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.propdown(activation_h)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_297": {
                "variable": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "relu_logits - activation_v * self.input",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "math.log(2.0) + 0.5 * neg_abs_logits + 1.0 / 8.0 * neg_abs_logits ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_298": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Variable_33": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([filter_size, filter_size, n_filter_in, n_filter_out], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_35": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_filter_out])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_55": {
                "variable": {
                    "value": "perturbFM",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "perturbFM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.laplace(0.0, 1.0 / (epsilon * batch_size), 1).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(perturbFM, Delta)",
                            "Call"
                        ],
                        [
                            "np.random.laplace(0.0, Delta / (epsilon * data_size), self.n_out)",
                            "Call"
                        ],
                        [
                            "np.reshape(perturbFM, [self.n_out])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "Delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.n_in * (self.n_out + 1 / 4 * self.n_out ** 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_by_value_67": {
                "t": {
                    "value": "self.Chebyshev(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Variable_127": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([filter_size, filter_size, n_in, n_out], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_129": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_out])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_227": {
                "x": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.nn.conv2d(v, self.W, strides=[1, 2, 2, 1], padding='SAME'), self.b)",
                            "Call"
                        ],
                        [
                            "h / max",
                            "BinOp"
                        ],
                        [
                            "tf.add(tf.nn.conv2d(v, self.W, strides=[1, 2, 2, 1], padding='SAME'), self.b)",
                            "Call"
                        ],
                        [
                            "h / max",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(inpt, tf.stack([xShape, n_in]))",
                            "Call"
                        ],
                        [
                            "tf.matmul(v, self.W) + self.b",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_232": {
                "x": {
                    "value": "tf.matmul(h, tf.transpose(self.W)) + self.vbias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_40": {
                "input": {
                    "value": "inpt",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_62": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_72": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_82": {
                "x": {
                    "value": "tf.nn.conv2d_transpose(propup, self.W, tf.stack([xShape, self.inputShape[1], self.inputShape[2], self.inputShape[3]]), strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_92": {
                "input": {
                    "value": "upsample3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(propup, size=(self.inputShape[1], self.inputShape[2]), method=tf.image.ResizeMethod.NEAREST_NEIGHBOR)",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "tf.transpose(self.W, perm=[1, 0, 3, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_100": {
                "x": {
                    "value": "rc_v - self.input",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_113": {
                "input_tensor": {
                    "value": "tf.abs(rc_v - self.input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_134": {
                "input": {
                    "value": "inpt",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "truncated_normal_151": {
                "shape": {
                    "value": "[n_in, n_out]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_153": {
                "shape": {
                    "value": "[n_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_156": {
                "values": {
                    "value": "[xShape, n_in]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_157": {
                "a": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.nn.conv2d(v, self.W, strides=[1, 2, 2, 1], padding='SAME'), self.b)",
                            "Call"
                        ],
                        [
                            "h / max",
                            "BinOp"
                        ],
                        [
                            "tf.add(tf.nn.conv2d(v, self.W, strides=[1, 2, 2, 1], padding='SAME'), self.b)",
                            "Call"
                        ],
                        [
                            "h / max",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(inpt, tf.stack([xShape, n_in]))",
                            "Call"
                        ],
                        [
                            "tf.matmul(v, self.W) + self.b",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_160": {
                "shape": {
                    "value": "[n_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_161": {
                "shape": {
                    "value": "[n_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_180": {
                "shape": {
                    "value": "[n_in, n_out]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_182": {
                "shape": {
                    "value": "[n_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_187": {
                "a": {
                    "value": "inpt",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_190": {
                "shape": {
                    "value": "[n_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_191": {
                "shape": {
                    "value": "[n_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_209": {
                "shape": {
                    "value": "[n_in, n_out]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_211": {
                "shape": {
                    "value": "[n_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_212": {
                "shape": {
                    "value": "[n_in]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_218": {
                "a": {
                    "value": "inpt",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_226": {
                "a": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_33": {
                "shape": {
                    "value": "[filter_size, filter_size, n_filter_in, n_filter_out]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "shape": {
                    "value": "[n_filter_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_transpose_82": {
                "input": {
                    "value": "propup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.propup(self.input)",
                            "Call"
                        ],
                        [
                            "self.dp_propup(self.input, Delta, epsilon, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "tf.stack([xShape, self.inputShape[1], self.inputShape[2], self.inputShape[3]])",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_113": {
                "x": {
                    "value": "rc_v - self.input",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "truncated_normal_127": {
                "shape": {
                    "value": "[filter_size, filter_size, n_in, n_out]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_129": {
                "shape": {
                    "value": "[n_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_232": {
                "a": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.nn.conv2d(v, self.W, strides=[1, 2, 2, 1], padding='SAME'), self.b)",
                            "Call"
                        ],
                        [
                            "h / max",
                            "BinOp"
                        ],
                        [
                            "tf.add(tf.nn.conv2d(v, self.W, strides=[1, 2, 2, 1], padding='SAME'), self.b)",
                            "Call"
                        ],
                        [
                            "h / max",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(inpt, tf.stack([xShape, n_in]))",
                            "Call"
                        ],
                        [
                            "tf.matmul(v, self.W) + self.b",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(self.W)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_57": {
                "x": {
                    "value": "coefficients[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "x ** 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_83": {
                "values": {
                    "value": "[xShape, self.inputShape[1], self.inputShape[2], self.inputShape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_92": {
                "a": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_232": {
                "a": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dpautoencoder/dpautoencoder.py": {
        "tensorflow": {
            "Session_170": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_171": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_in]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "self.LaplaceNoise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.last_n_in",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_87": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamOptimizer_90": {
                "variable": {
                    "value": "self.train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "finetuneLR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "set_random_seed_174": {
                "seed": {
                    "value": "1111",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_123": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.layers[i].cost",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dpautoencoder/logisticRegression.py": {
        "tensorflow": {
            "Variable_36": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_in, n_out], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_38": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_out])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_40": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.matmul(inpt, self.W) + self.b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_42": {
                "variable": {
                    "value": "self.y_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_55": {
                "variable": {
                    "value": "correct_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_68": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([n_in, n_out], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_70": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_out])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_72": {
                "variable": {
                    "value": "inpt",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "inpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(inpt, 0, 1)",
                            "Call"
                        ],
                        [
                            "inpt + LaplaceNoise",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_76": {
                "variable": {
                    "value": "self.y_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_139": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.output.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_141": {
                "variable": {
                    "value": "relu_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output >= zeros",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.zeros_like(self.output, dtype=self.output.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_142": {
                "variable": {
                    "value": "neg_abs_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output >= zeros",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "-self.output",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_144": {
                "variable": {
                    "value": "Taylor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "relu_logits - self.output * y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "math.log(2.0) + 0.5 * neg_abs_logits + 1.0 / 8.0 * neg_abs_logits ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_149": {
                "variable": {
                    "value": "correct_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_56": {
                "input_tensor": {
                    "value": "tf.cast(correct_pred, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_150": {
                "input_tensor": {
                    "value": "tf.cast(correct_pred, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_36": {
                "shape": {
                    "value": "[n_in, n_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_38": {
                "shape": {
                    "value": "[n_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_51": {
                "input_tensor": {
                    "value": "tf.reduce_sum(y * tf.log(self.output), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_55": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_56": {
                "x": {
                    "value": "correct_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(self.y_pred, tf.argmax(y, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.equal(self.y_pred, tf.argmax(y, axis=1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_68": {
                "shape": {
                    "value": "[n_in, n_out]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_70": {
                "shape": {
                    "value": "[n_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_74": {
                "a": {
                    "value": "inpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(inpt, 0, 1)",
                            "Call"
                        ],
                        [
                            "inpt + LaplaceNoise",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_149": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_150": {
                "x": {
                    "value": "correct_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(self.y_pred, tf.argmax(y, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.equal(self.y_pred, tf.argmax(y, axis=1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_40": {
                "a": {
                    "value": "inpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(inpt, 0, 1)",
                            "Call"
                        ],
                        [
                            "inpt + LaplaceNoise",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_51": {
                "input_tensor": {
                    "value": "y * tf.log(self.output)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_51": {
                "x": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pCDBN/logisticRegression.py": {
        "tensorflow": {
            "Variable_36": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_in, n_out], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_38": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_out])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_40": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.matmul(inpt, self.W) + self.b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_42": {
                "variable": {
                    "value": "self.y_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_55": {
                "variable": {
                    "value": "correct_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_68": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([n_in, n_out], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_70": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_out])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_72": {
                "variable": {
                    "value": "inpt",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "inpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(inpt, 0, 1)",
                            "Call"
                        ],
                        [
                            "inpt + LaplaceNoise",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_76": {
                "variable": {
                    "value": "self.y_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_139": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.output.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_141": {
                "variable": {
                    "value": "relu_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output >= zeros",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.zeros_like(self.output, dtype=self.output.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_142": {
                "variable": {
                    "value": "neg_abs_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output >= zeros",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "-self.output",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_144": {
                "variable": {
                    "value": "Taylor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "relu_logits - self.output * y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "math.log(2.0) + 0.5 * neg_abs_logits + 1.0 / 8.0 * neg_abs_logits ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_149": {
                "variable": {
                    "value": "correct_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_56": {
                "input_tensor": {
                    "value": "tf.cast(correct_pred, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_150": {
                "input_tensor": {
                    "value": "tf.cast(correct_pred, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_36": {
                "shape": {
                    "value": "[n_in, n_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_38": {
                "shape": {
                    "value": "[n_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_51": {
                "input_tensor": {
                    "value": "tf.reduce_sum(y * tf.log(self.output), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_55": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_56": {
                "x": {
                    "value": "correct_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(self.y_pred, tf.argmax(y, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.equal(self.y_pred, tf.argmax(y, axis=1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_68": {
                "shape": {
                    "value": "[n_in, n_out]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_70": {
                "shape": {
                    "value": "[n_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_74": {
                "a": {
                    "value": "inpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(inpt, 0, 1)",
                            "Call"
                        ],
                        [
                            "inpt + LaplaceNoise",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_149": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_150": {
                "x": {
                    "value": "correct_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(self.y_pred, tf.argmax(y, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.equal(self.y_pred, tf.argmax(y, axis=1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_40": {
                "a": {
                    "value": "inpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(inpt, 0, 1)",
                            "Call"
                        ],
                        [
                            "inpt + LaplaceNoise",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_51": {
                "input_tensor": {
                    "value": "y * tf.log(self.output)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_51": {
                "x": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pCDBN/mlp.py": {
        "tensorflow": {
            "add_29": {
                "variable": {
                    "value": "sum_W",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.conv2d(inpt, self.W, strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_60": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.conv2d(v, self.W, strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_62": {
                "variable": {
                    "value": "max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.nn.conv2d(v, self.W, strides=[1, 2, 2, 1], padding='SAME'), self.b)",
                            "Call"
                        ],
                        [
                            "h / max",
                            "BinOp"
                        ],
                        [
                            "tf.add(tf.nn.conv2d(v, self.W, strides=[1, 2, 2, 1], padding='SAME'), self.b)",
                            "Call"
                        ],
                        [
                            "h / max",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(inpt, tf.stack([xShape, n_in]))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_70": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.conv2d(v, self.W, strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_71": {
                "variable": {
                    "value": "max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.nn.conv2d(v, self.W, strides=[1, 2, 2, 1], padding='SAME'), self.b)",
                            "Call"
                        ],
                        [
                            "h / max",
                            "BinOp"
                        ],
                        [
                            "tf.add(tf.nn.conv2d(v, self.W, strides=[1, 2, 2, 1], padding='SAME'), self.b)",
                            "Call"
                        ],
                        [
                            "h / max",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(inpt, tf.stack([xShape, n_in]))",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_74": {
                "variable": {
                    "value": "Chebyshev_h",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "self.dpChebyshev(h, Delta, epsilon, batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_98": {
                "variable": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(rc_v - self.input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_99": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AdamOptimizer_113": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "add_132": {
                "variable": {
                    "value": "sum_W",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.conv2d(inpt, self.W, strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_149": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([n_in, n_out], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_151": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_out])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_154": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inpt",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.stack([xShape, n_in])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "moments_157": {
                "variable": {
                    "value": "(batch_mean2, batch_var2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "sum_W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.nn.conv2d(inpt, self.W, strides=[1, 2, 2, 1], padding='SAME'), self.b)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.nn.conv2d(inpt, self.W, strides=[1, 2, 2, 1], padding='SAME'), self.b)",
                            "Call"
                        ],
                        [
                            "tf.matmul(h, self.W) + self.b",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(inpt, self.W) + self.b",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_158": {
                "variable": {
                    "value": "scale2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([n_out])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_159": {
                "variable": {
                    "value": "beta2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_out])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_160": {
                "variable": {
                    "value": "BN_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sum_W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.nn.conv2d(inpt, self.W, strides=[1, 2, 2, 1], padding='SAME'), self.b)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.nn.conv2d(inpt, self.W, strides=[1, 2, 2, 1], padding='SAME'), self.b)",
                            "Call"
                        ],
                        [
                            "tf.matmul(h, self.W) + self.b",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(inpt, self.W) + self.b",
                            "BinOp"
                        ]
                    ]
                },
                "mean": {
                    "value": "batch_mean2",
                    "type": "variable",
                    "possible_values": []
                },
                "variance": {
                    "value": "batch_var2",
                    "type": "variable",
                    "possible_values": []
                },
                "offset": {
                    "value": "beta2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([n_out]))",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.ones([n_out]))",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Variable_178": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([n_in, n_out], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_180": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_out])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_22": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([filter_size, filter_size, n_filter_in, n_filter_out], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_24": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_filter_out])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_50": {
                "variable": {
                    "value": "perturbFM",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "perturbFM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.laplace(0.0, 1.0 / (epsilon * batch_size), 1).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(perturbFM, Delta)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "Delta",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_by_value_65": {
                "t": {
                    "value": "self.Chebyshev(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Variable_125": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([filter_size, filter_size, n_in, n_out], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_127": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_out])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_29": {
                "input": {
                    "value": "inpt",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_60": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_70": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_80": {
                "x": {
                    "value": "tf.nn.conv2d_transpose(propup, self.W, tf.stack([xShape, self.inputShape[1], self.inputShape[2], self.inputShape[3]]), strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_90": {
                "input": {
                    "value": "upsample3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(propup, size=(self.inputShape[1], self.inputShape[2]), method=tf.image.ResizeMethod.NEAREST_NEIGHBOR)",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "tf.transpose(self.W, perm=[1, 0, 3, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_98": {
                "x": {
                    "value": "rc_v - self.input",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_111": {
                "input_tensor": {
                    "value": "tf.abs(rc_v - self.input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_132": {
                "input": {
                    "value": "inpt",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "truncated_normal_149": {
                "shape": {
                    "value": "[n_in, n_out]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_151": {
                "shape": {
                    "value": "[n_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_154": {
                "values": {
                    "value": "[xShape, n_in]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_155": {
                "a": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.nn.conv2d(v, self.W, strides=[1, 2, 2, 1], padding='SAME'), self.b)",
                            "Call"
                        ],
                        [
                            "h / max",
                            "BinOp"
                        ],
                        [
                            "tf.add(tf.nn.conv2d(v, self.W, strides=[1, 2, 2, 1], padding='SAME'), self.b)",
                            "Call"
                        ],
                        [
                            "h / max",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(inpt, tf.stack([xShape, n_in]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_158": {
                "shape": {
                    "value": "[n_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_159": {
                "shape": {
                    "value": "[n_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_178": {
                "shape": {
                    "value": "[n_in, n_out]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_180": {
                "shape": {
                    "value": "[n_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_186": {
                "a": {
                    "value": "inpt",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_206": {
                "input_tensor": {
                    "value": "tf.abs(self.hiddenLayer.W)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_207": {
                "input_tensor": {
                    "value": "tf.abs(self.outputLayer.W)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_209": {
                "input_tensor": {
                    "value": "tf.square(self.hiddenLayer.W)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_210": {
                "input_tensor": {
                    "value": "tf.square(self.outputLayer.W)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "truncated_normal_22": {
                "shape": {
                    "value": "[filter_size, filter_size, n_filter_in, n_filter_out]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "shape": {
                    "value": "[n_filter_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_transpose_80": {
                "input": {
                    "value": "propup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.propup(self.input)",
                            "Call"
                        ],
                        [
                            "self.dp_propup(self.input, Delta, epsilon, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "tf.stack([xShape, self.inputShape[1], self.inputShape[2], self.inputShape[3]])",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_111": {
                "x": {
                    "value": "rc_v - self.input",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "truncated_normal_125": {
                "shape": {
                    "value": "[filter_size, filter_size, n_in, n_out]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_127": {
                "shape": {
                    "value": "[n_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_206": {
                "x": {
                    "value": "self.hiddenLayer.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_207": {
                "x": {
                    "value": "self.outputLayer.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_209": {
                "x": {
                    "value": "self.hiddenLayer.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_210": {
                "x": {
                    "value": "self.outputLayer.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_52": {
                "x": {
                    "value": "coefficients[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "x ** 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_81": {
                "values": {
                    "value": "[xShape, self.inputShape[1], self.inputShape[2], self.inputShape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_90": {
                "a": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "pCDBN/pcdbn.py": {
        "tensorflow": {
            "Session_215": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_216": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_in]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_59": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_60": {
                "variable": {
                    "value": "self.LaplaceNoise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_61": {
                "variable": {
                    "value": "self.Delta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_102": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamOptimizer_105": {
                "variable": {
                    "value": "self.train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "finetuneLR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_112": {
                "variable": {
                    "value": "_W",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "W.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_113": {
                "variable": {
                    "value": "_b",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "b.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_116": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.conv2d(v, _W, strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(1.0, shape=b.get_shape())",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_118": {
                "variable": {
                    "value": "max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.nn.conv2d(v, _W, strides=[1, 2, 2, 1], padding='SAME'), _b)",
                            "Call"
                        ],
                        [
                            "h / max",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_by_value_122": {
                "variable": {
                    "value": "Chebyshev_h",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "EncLayer.Chebyshev(self=self, x=h)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "set_random_seed_219": {
                "seed": {
                    "value": "1111",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_52": {
                "variable": {
                    "value": "x_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, x_dim, x_dim, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_116": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "_W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(1.0, shape=W.get_shape())",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_max_124": {
                "input_tensor": {
                    "value": "tf.abs(tf.reduce_sum(Chebyshev_h, axis=[1, 2]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_124": {
                "x": {
                    "value": "tf.reduce_sum(Chebyshev_h, axis=[1, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_128": {
                "input_tensor": {
                    "value": "tf.abs(tf.reduce_sum(v, axis=[1, 2]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_130": {
                "input_tensor": {
                    "value": "tf.abs(tf.reduce_sum(v, axis=[1]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_84": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_tensor",
                            "Name"
                        ]
                    ]
                }
            },
            "reduce_sum_124": {
                "input_tensor": {
                    "value": "Chebyshev_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(EncLayer.Chebyshev(self=self, x=h), 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_128": {
                "x": {
                    "value": "tf.reduce_sum(v, axis=[1, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_130": {
                "x": {
                    "value": "tf.reduce_sum(v, axis=[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_72": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_tensor",
                            "Name"
                        ]
                    ]
                }
            },
            "shape_80": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_tensor",
                            "Name"
                        ]
                    ]
                }
            },
            "reduce_sum_128": {
                "input_tensor": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_130": {
                "input_tensor": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    }
}