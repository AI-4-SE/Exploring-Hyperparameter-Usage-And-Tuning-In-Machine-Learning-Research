{
    "adv_training_cifar.py": {
        "torch": {
            "Tensor_59": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_59": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tensor_60": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_60": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "DataLoader_65": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_68": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_82": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_120": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_37": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_38": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_79": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ResNet18()",
                            "Call"
                        ],
                        [
                            "net.to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_112": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resume_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}'.format(checkpoint_dir, args.resume)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_214": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'net': net.state_dict(), 'acc': acc, 'eps': eps, 'epoch': epoch}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint_file.format(epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_134": {
                "input": {
                    "value": "unnormalize(inputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_175": {
                "input": {
                    "value": "unnormalize(inputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "adv_training_mnist.py": {
        "torch": {}
    },
    "attack_cifar.py": {
        "torch": {
            "Tensor_52": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_52": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tensor_53": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_53": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "DataLoader_58": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_61": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_80": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./checkpoints/{}'.format(args.checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_87": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_70": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ResNet18()",
                            "Call"
                        ],
                        [
                            "net.to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_149": {
                "obj": {
                    "value": "(acc, torch.cat(all_epsilons))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./epsilons/{}_reg_{}_p_{}_alpha_{}_norm_{}_ball_{}.pth'.format(args.checkpoint, regularization, args.p, args.alpha, args.norm, args.ball)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_122": {
                "input": {
                    "value": "unnormalize(inputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_149": {
                "tensors": {
                    "value": "all_epsilons",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_146": {
                "tensors": {
                    "value": "all_epsilons",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "attack_mnist.py": {
        "torch": {
            "DataLoader_50": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_53": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 16, 4, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_86": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./checkpoints/{}'.format(args.checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_105": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_68": {
                "in_features": {
                    "value": "32 * 7 * 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_70": {
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_91": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Sequential(nn.Conv2d(1, 16, 4, stride=2, padding=1), nn.ReLU(), nn.Conv2d(16, 32, 4, stride=2, padding=1), nn.ReLU(), Flatten(), nn.Linear(32 * 7 * 7, 100), nn.ReLU(), nn.Linear(100, 10))",
                            "Call"
                        ],
                        [
                            "net.to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_96": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Sequential(nn.Conv2d(1, 16, 4, stride=2, padding=1), nn.ReLU(), nn.Conv2d(16, 32, 4, stride=2, padding=1), nn.ReLU(), Flatten(), nn.Linear(32 * 7 * 7, 100), nn.ReLU(), nn.Linear(100, 10))",
                            "Call"
                        ],
                        [
                            "net.to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_101": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Sequential(nn.Conv2d(1, 16, 4, stride=2, padding=1), nn.ReLU(), nn.Conv2d(16, 32, 4, stride=2, padding=1), nn.ReLU(), Flatten(), nn.Linear(32 * 7 * 7, 100), nn.ReLU(), nn.Linear(100, 10))",
                            "Call"
                        ],
                        [
                            "net.to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_165": {
                "obj": {
                    "value": "(acc, torch.cat(all_epsilons))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./epsilons/{}_reg_{}_p_{}_alpha_{}_norm_{}_ball_{}.pth'.format(args.checkpoint, regularization, args.p, args.alpha, args.norm, args.ball)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_143": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(inputs >= 0.5).float()",
                            "Call"
                        ],
                        [
                            "(inputs >= 0.5).float()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_165": {
                "tensors": {
                    "value": "all_epsilons",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_162": {
                "tensors": {
                    "value": "all_epsilons",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pgd.py": {
        "torch": {
            "SGD_28": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[X_]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_62": {
                "variable": {
                    "value": "X_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.clone()",
                            "Call"
                        ],
                        [
                            "torch.clamp(X_, min=xmin, max=xmax)",
                            "Call"
                        ],
                        [
                            "torch.min(X_, X + epsilon.view(X.size(0), 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.max(X_, X - epsilon.view(X.size(0), 1, 1, 1))",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "xmin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "max": {
                    "value": "xmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_58": {
                "variable": {
                    "value": "X_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.clone()",
                            "Call"
                        ],
                        [
                            "torch.clamp(X_, min=xmin, max=xmax)",
                            "Call"
                        ],
                        [
                            "torch.min(X_, X + epsilon.view(X.size(0), 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.max(X_, X - epsilon.view(X.size(0), 1, 1, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_59": {
                "variable": {
                    "value": "X_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.clone()",
                            "Call"
                        ],
                        [
                            "torch.clamp(X_, min=xmin, max=xmax)",
                            "Call"
                        ],
                        [
                            "torch.min(X_, X + epsilon.view(X.size(0), 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.max(X_, X - epsilon.view(X.size(0), 1, 1, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_36": {
                "input": {
                    "value": "X_.grad[~err]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "projected_sinkhorn/lambertw.py": {
        "torch": {
            "arange_10": {
                "variable": {
                    "value": "powers",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "degree",
                    "type": "variable",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_86": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_86": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_89": {
                "variable": {
                    "value": "scipy_lamw",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.real(sp_lamw(x.numpy()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_18": {
                "input": {
                    "value": "z0",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "any_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_29": {
                "variable": {
                    "value": "num",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_34": {
                "variable": {
                    "value": "denom",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_43": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z0[I_pade0]",
                            "Subscript"
                        ],
                        [
                            "z0[I_asy]",
                            "Subscript"
                        ],
                        [
                            "z0[I_pos]",
                            "Subscript"
                        ],
                        [
                            "z0[I_neg]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "manual_seed_85": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_24": {
                "input": {
                    "value": "z0 + EXPN1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_56": {
                "variable": {
                    "value": "ew",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-w",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_70": {
                "variable": {
                    "value": "ew",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(z)",
                            "Call"
                        ],
                        [
                            "w0[I_pos]",
                            "Subscript"
                        ],
                        [
                            "w0[I_neg]",
                            "Subscript"
                        ],
                        [
                            "wn",
                            "variable"
                        ],
                        [
                            "wn",
                            "variable"
                        ]
                    ]
                }
            },
            "log_44": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(z)",
                            "Call"
                        ],
                        [
                            "w0[I_pos]",
                            "Subscript"
                        ],
                        [
                            "w0[I_neg]",
                            "Subscript"
                        ],
                        [
                            "wn",
                            "variable"
                        ],
                        [
                            "wn",
                            "variable"
                        ]
                    ]
                }
            },
            "ones_92": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_60": {
                "input": {
                    "value": "wn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w - wewz / (w + 1 - (w + 2) * wewz / (2 * w + 2))",
                            "BinOp"
                        ],
                        [
                            "w - wewz / (wew + ew - (w + 2) * wewz / (2 * w + 2))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_74": {
                "input": {
                    "value": "wn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w - wewz / (w + 1 - (w + 2) * wewz / (2 * w + 2))",
                            "BinOp"
                        ],
                        [
                            "w - wewz / (wew + ew - (w + 2) * wewz / (2 * w + 2))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "projected_sinkhorn/projected_sinkhorn.py": {
        "torch": {
            "from_numpy_31": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.real(y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clone_38": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(-1, *size[-3:])",
                            "Call"
                        ]
                    ]
                }
            },
            "unfold_51": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(-1, *size[-3:])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.size(-1)",
                            "Call"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_62": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unfolded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_unfold(x, kernel_size, padding=kernel_size // 2).transpose(-1, -2)",
                            "Call"
                        ],
                        [
                            "_expand(unfolded, (A.size(-3), A.size(-2) * A.size(-1))).transpose(-2, -3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "collapse2(A.contiguous()).unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_62": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_44": {
                "input": {
                    "value": "X.unsqueeze(-2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "Y.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_44": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_163": {
                "variable": {
                    "value": "exp_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-alpha",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_165": {
                "variable": {
                    "value": "exp_beta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-beta",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_196": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-unsqueeze3(psi) * C - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_146": {
                "input": {
                    "value": "collapse3(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_242": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X.new_ones(*size) / m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_243": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X.new_ones(*size) / m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_244": {
                "variable": {
                    "value": "exp_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-alpha",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_245": {
                "variable": {
                    "value": "exp_beta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-beta",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_248": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-unsqueeze3(psi) * C - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_162": {
                "input": {
                    "value": "X.new_ones(*size) / m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_204": {
                "variable": {
                    "value": "exp_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-alpha",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_218": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-unsqueeze3(psi) * C - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_268": {
                "variable": {
                    "value": "exp_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-alpha",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_271": {
                "variable": {
                    "value": "exp_beta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-beta",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_283": {
                "variable": {
                    "value": "psi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "psi - t * delta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_286": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-unsqueeze3(psi) * C - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_216": {
                "input": {
                    "value": "psi - t * delta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_190": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(X.new_ones(*size) / m) + 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.log(X.new_ones(*size) / m)",
                            "Call"
                        ],
                        [
                            "torch.log(mm(K, exp_beta)) - torch.log(X)",
                            "BinOp"
                        ]
                    ]
                },
                "max": {
                    "value": "MAX_FLOAT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e+38",
                            "float"
                        ]
                    ]
                }
            },
            "log_203": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_267": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clamp_253": {
                "input": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-lam * Y.expand_as(alpha).contiguous()",
                            "BinOp"
                        ],
                        [
                            "torch.log(X.new_ones(*size) / m)",
                            "Call"
                        ],
                        [
                            "lamw(lam * torch.exp(lam * Y) * mm(K, exp_alpha)) - lam * Y",
                            "BinOp"
                        ]
                    ]
                },
                "max": {
                    "value": "10000000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_252": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(X.new_ones(*size) / m) + 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.log(X.new_ones(*size) / m)",
                            "Call"
                        ],
                        [
                            "torch.log(mm(K, exp_beta)) - torch.log(X)",
                            "BinOp"
                        ]
                    ]
                },
                "max": {
                    "value": "10000000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "exp_270": {
                "input": {
                    "value": "lam * Y",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}