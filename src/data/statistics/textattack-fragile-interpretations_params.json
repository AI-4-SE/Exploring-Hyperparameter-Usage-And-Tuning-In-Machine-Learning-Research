{
    "TextAttack/build/lib/textattack/commands/attack/run_attack_parallel.py": {
        "tensorflow": {
            "list_physical_devices_48": {
                "variable": {
                    "value": "gpus",
                    "type": "Variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_visible_devices_53": {
                "devices": {
                    "value": "gpu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gpus[gpu_id]",
                            "Subscript"
                        ]
                    ]
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_memory_growth_54": {
                "device": {
                    "value": "gpu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gpus[gpu_id]",
                            "Subscript"
                        ]
                    ]
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_count_111": {
                "variable": {
                    "value": "num_gpus",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_42": {
                "device": {
                    "value": "gpu_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.multiprocessing.current_process()._identity[0] - 2",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "TextAttack/build/lib/textattack/commands/attack/run_attack_single_threaded.py": {
        "tensorflow": {
            "list_physical_devices_40": {
                "variable": {
                    "value": "gpus",
                    "type": "Variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_memory_growth_45": {
                "device": {
                    "value": "gpu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gpus",
                            "Name"
                        ]
                    ]
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "TextAttack/build/lib/textattack/commands/train_model/run_training.py": {
        "tensorflow": {
            "list_physical_devices_260": {
                "variable": {
                    "value": "gpus",
                    "type": "Variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_logger_259": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_memory_growth_265": {
                "device": {
                    "value": "gpu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gpus",
                            "Name"
                        ]
                    ]
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_174": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(logits)",
                            "Call"
                        ],
                        [
                            "model(**input_ids)[0]",
                            "Subscript"
                        ],
                        [
                            "model(input_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_175": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(labels)",
                            "Call"
                        ],
                        [
                            "np.array(labels)",
                            "Call"
                        ],
                        [
                            "labels.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_218": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(((ids, label) for (ids, label) in zip(input_ids, labels)))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_219": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(((ids, label) for (ids, label) in zip(input_ids, labels)))",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_count_288": {
                "variable": {
                    "value": "num_gpus",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SummaryWriter_406": {
                "variable": {
                    "value": "tb_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "args.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_136": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, weights_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_357": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model_wrapper.model",
                            "Attribute"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_wrapper.model",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Adam_371": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(need_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_462": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_464": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_614": {
                "f": {
                    "value": "os.path.join(args.output_dir, args.weights_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_162": {
                "tensors": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_498": {
                "tensors": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "TextAttack/textattack/commands/attack/run_attack_parallel.py": {
        "tensorflow": {
            "list_physical_devices_48": {
                "variable": {
                    "value": "gpus",
                    "type": "Variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_visible_devices_53": {
                "devices": {
                    "value": "gpu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gpus[gpu_id]",
                            "Subscript"
                        ]
                    ]
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_memory_growth_54": {
                "device": {
                    "value": "gpu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gpus[gpu_id]",
                            "Subscript"
                        ]
                    ]
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_count_111": {
                "variable": {
                    "value": "num_gpus",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_42": {
                "device": {
                    "value": "gpu_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.multiprocessing.current_process()._identity[0] - 2",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "TextAttack/textattack/commands/attack/run_attack_single_threaded.py": {
        "tensorflow": {
            "list_physical_devices_40": {
                "variable": {
                    "value": "gpus",
                    "type": "Variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_memory_growth_45": {
                "device": {
                    "value": "gpu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gpus",
                            "Name"
                        ]
                    ]
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "TextAttack/textattack/commands/train_model/run_training.py": {
        "tensorflow": {
            "list_physical_devices_260": {
                "variable": {
                    "value": "gpus",
                    "type": "Variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_logger_259": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_memory_growth_265": {
                "device": {
                    "value": "gpu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gpus",
                            "Name"
                        ]
                    ]
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_174": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(logits)",
                            "Call"
                        ],
                        [
                            "model(**input_ids)[0]",
                            "Subscript"
                        ],
                        [
                            "model(input_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_175": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(labels)",
                            "Call"
                        ],
                        [
                            "np.array(labels)",
                            "Call"
                        ],
                        [
                            "labels.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_218": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(((ids, label) for (ids, label) in zip(input_ids, labels)))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_219": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(((ids, label) for (ids, label) in zip(input_ids, labels)))",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_count_288": {
                "variable": {
                    "value": "num_gpus",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SummaryWriter_406": {
                "variable": {
                    "value": "tb_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "args.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_136": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, weights_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_357": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model_wrapper.model",
                            "Attribute"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_wrapper.model",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Adam_371": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(need_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_462": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_464": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_614": {
                "f": {
                    "value": "os.path.join(args.output_dir, args.weights_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_162": {
                "tensors": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_498": {
                "tensors": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "generate_candidates.py": {
        "tensorflow": {
            "enable_eager_execution_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_23": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "TextAttack/build/lib/textattack/commands/eval_model/eval_model_command.py": {
        "torch": {
            "stack_71": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "textattack.shared.utils.batch_model_predict(model, inputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(preds).squeeze().cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_71": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_72": {
                "variable": {
                    "value": "ground_truth_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ground_truth_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(ground_truth_outputs).cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_66": {
                "variable": {
                    "value": "batch_preds",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "TextAttack/build/lib/textattack/constraints/grammaticality/language_models/gpt2.py": {
        "torch": {
            "tensor_53": {
                "variable": {
                    "value": "tokens_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[token_ids]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "*size": {
                    "value": "len(text_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "TextAttack/build/lib/textattack/constraints/grammaticality/language_models/learning_to_write/adaptive_softmax.py": {
        "torch": {
            "Linear_21": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_22": {
                "variable": {
                    "value": "self.tail",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_59": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp.size(0)",
                            "Call"
                        ],
                        [
                            "inp[0].size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.cutoffs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_softmax_60": {
                "variable": {
                    "value": "lsm_head",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.head(inp)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "head_out.dim() - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_79": {
                "variable": {
                    "value": "self.criterions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_size, input_size // scale_down, False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_70": {
                "variable": {
                    "value": "lsm_tail",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.tail[i](inp)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "temp.dim() - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_size // scale_down",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "input_size // scale_down",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "cutoffs[i + 1] - cutoffs[i]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_81": {
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "TextAttack/build/lib/textattack/constraints/grammaticality/language_models/learning_to_write/language_model_helpers.py": {
        "torch": {
            "from_numpy_106": {
                "variable": {
                    "value": "mapto",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "util_reverse(np.argsort(-word_freq))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_73": {
                "variable": {
                    "value": "all_raw_idxs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "raw_idx_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[[] for i in range(sentence_length + 1)]",
                            "ListComp"
                        ],
                        [
                            "[x for x in raw_idx_list if len(x)]",
                            "ListComp"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_122": {
                "f": {
                    "value": "model_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "open(os.path.join(lm_folder_path, 'lm-state-dict.pt'), 'rb')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "TextAttack/build/lib/textattack/constraints/grammaticality/language_models/learning_to_write/learning_to_write.py": {
        "torch": {
            "tensor_61": {
                "data": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.query_handler.query(queries, query_words)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "TextAttack/build/lib/textattack/constraints/grammaticality/language_models/learning_to_write/rnn_model.py": {
        "torch": {
            "Dropout_34": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_35": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntoken",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "ninp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "RNN_49": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ninp",
                    "type": "Variable",
                    "possible_values": []
                },
                "nonlinearity": {
                    "value": "nonlinearity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'RNN_TANH': 'tanh', 'RNN_RELU': 'relu'}[rnn_type]",
                            "Subscript"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.proj_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ninp",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "TextAttack/build/lib/textattack/constraints/semantics/sentence_encoders/infer_sent/infer_sent.py": {
        "torch": {
            "load_48": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(model_folder_path, f'infersent{infersent_version}.pkl')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "TextAttack/build/lib/textattack/constraints/semantics/sentence_encoders/infer_sent/infer_sent_model.py": {
        "torch": {
            "LSTM_35": {
                "variable": {
                    "value": "self.enc_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.word_emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dpout_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_77": {
                "variable": {
                    "value": "sent_packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sent.index_select(1, idx_sort)",
                            "Call"
                        ],
                        [
                            "sentences",
                            "Name"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sent_len_sorted",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sent_len_sorted.copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_91": {
                "variable": {
                    "value": "sent_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_92": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, idx_unsort)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_92": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_70": {
                "ndarray": {
                    "value": "idx_sort",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(idx_sort).cuda() if self.is_cuda() else torch.from_numpy(idx_sort)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "from_numpy_72": {
                "ndarray": {
                    "value": "idx_sort",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(idx_sort).cuda() if self.is_cuda() else torch.from_numpy(idx_sort)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_79": {
                "sequence": {
                    "value": "sent_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, idx_unsort)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_83": {
                "ndarray": {
                    "value": "idx_unsort",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(idx_unsort).cuda() if self.is_cuda() else torch.from_numpy(idx_unsort)",
                            "IfExp"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_85": {
                "ndarray": {
                    "value": "idx_unsort",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(idx_unsort).cuda() if self.is_cuda() else torch.from_numpy(idx_unsort)",
                            "IfExp"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_97": {
                "input": {
                    "value": "sent_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, idx_unsort)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "TextAttack/build/lib/textattack/constraints/semantics/sentence_encoders/sentence_encoder.py": {
        "torch": {
            "unsqueeze_104": {
                "variable": {
                    "value": "starting_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "starting_embedding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(starting_embedding)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(starting_embedding, dim=0)",
                            "Call"
                        ],
                        [
                            "embeddings[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_105": {
                "variable": {
                    "value": "transformed_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transformed_embedding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(transformed_embedding)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(transformed_embedding, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CosineSimilarity_48": {
                "variable": {
                    "value": "self.sim_metric",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_99": {
                "variable": {
                    "value": "starting_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "starting_embedding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(starting_embedding)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(starting_embedding, dim=0)",
                            "Call"
                        ],
                        [
                            "embeddings[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_102": {
                "variable": {
                    "value": "transformed_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "transformed_embedding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(transformed_embedding)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(transformed_embedding, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "CosineSimilarity_216": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_223": {
                "input": {
                    "value": "(emb1 - emb2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_126": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_153": {
                "variable": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.encode([starting_raw_text] + transformed_raw_texts)",
                            "Call"
                        ],
                        [
                            "torch.tensor(embeddings)",
                            "Call"
                        ],
                        [
                            "self.encode(starting_text_windows + transformed_text_windows)",
                            "Call"
                        ],
                        [
                            "torch.tensor(embeddings)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_161": {
                "variable": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.encode([starting_raw_text] + transformed_raw_texts)",
                            "Call"
                        ],
                        [
                            "torch.tensor(embeddings)",
                            "Call"
                        ],
                        [
                            "self.encode(starting_text_windows + transformed_text_windows)",
                            "Call"
                        ],
                        [
                            "torch.tensor(embeddings)",
                            "Call"
                        ]
                    ]
                }
            },
            "acos_217": {
                "input": {
                    "value": "cos_sim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.CosineSimilarity(dim=1)(emb1, emb2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "TextAttack/build/lib/textattack/constraints/semantics/sentence_encoders/thought_vector.py": {
        "torch": {
            "tensor_44": {
                "variable": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(embeddings)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_45": {
                "input": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(embeddings)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_48": {
                "tensors": {
                    "value": "[self._get_thought_vector(text) for text in raw_text_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "TextAttack/build/lib/textattack/goal_function_results/classification_goal_function_result.py": {
        "torch": {}
    },
    "TextAttack/build/lib/textattack/goal_function_results/goal_function_result.py": {
        "torch": {}
    },
    "TextAttack/build/lib/textattack/goal_functions/classification/classification_goal_function.py": {
        "torch": {
            "tensor_29": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(scores)",
                            "Call"
                        ],
                        [
                            "scores.unsqueeze(dim=0)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(scores, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_62": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(scores)",
                            "Call"
                        ],
                        [
                            "scores.unsqueeze(dim=0)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(scores, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "TextAttack/build/lib/textattack/goal_functions/goal_function.py": {
        "torch": {
            "topk_127": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "atts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attributions.sum(dim=-1).squeeze(0)",
                            "Call"
                        ],
                        [
                            "atts / torch.norm(atts)",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_136": {
                "variable": {
                    "value": "bsl",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_encoded['input_ids'].size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_128": {
                "input": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_105": {
                "data": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "norm_145": {
                "input": {
                    "value": "atts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attributions.sum(dim=-1).squeeze(0)",
                            "Call"
                        ],
                        [
                            "atts / torch.norm(atts)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_150": {
                "input": {
                    "value": "model_outputs[cnt]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_141": {
                "input": {
                    "value": "model_outputs[cnt]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "TextAttack/build/lib/textattack/models/helpers/bert_for_classification.py": {
        "torch": {
            "softmax_39": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model(input_ids=input_ids)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "TextAttack/build/lib/textattack/models/helpers/glove_embedding_layer.py": {
        "torch": {
            "Embedding_56": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.n_V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "n_d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(embedding_matrix[0])",
                            "Call"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_60": {
                "ndarray": {
                    "value": "embedding_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.load(glove_matrix_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "TextAttack/build/lib/textattack/models/helpers/lstm_for_classification.py": {
        "torch": {
            "Dropout_40": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTM_44": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.emb_layer.n_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_76": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.max(output, dim=0)[0]",
                            "Subscript"
                        ],
                        [
                            "self.drop(output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "TextAttack/build/lib/textattack/models/helpers/t5_for_text_to_text.py": {
        "torch": {}
    },
    "TextAttack/build/lib/textattack/models/helpers/utils.py": {
        "torch": {
            "load_25": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model_path_list[0]",
                            "Subscript"
                        ]
                    ]
                },
                "map_location": {
                    "value": "utils.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "TextAttack/build/lib/textattack/models/helpers/word_cnn_for_classification.py": {
        "torch": {
            "Dropout_35": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3 * hidden_size",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_78": {
                "variable": {
                    "value": "self.convs1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(Ci, Co, (w, h)) for w in widths]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "[F.relu(conv(x)).squeeze(3) for conv in self.convs1]",
                            "ListComp"
                        ],
                        [
                            "[F.max_pool1d(i, i.size(2)).squeeze(2) for i in x]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_83": {
                "input": {
                    "value": "conv(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_83": {
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool1d_85": {
                "input": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "i.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_85": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "Ci",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "Co",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "filters",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(w, h)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "TextAttack/build/lib/textattack/models/wrappers/huggingface_model_wrapper.py": {
        "torch": {
            "tensor_32": {
                "data": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_95": {
                "data": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "TextAttack/build/lib/textattack/models/wrappers/pytorch_model_wrapper.py": {
        "torch": {
            "tensor_37": {
                "variable": {
                    "value": "ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.encode(text_input_list)",
                            "Call"
                        ],
                        [
                            "torch.tensor(ids).to(model_device)",
                            "Call"
                        ],
                        [
                            "self.encode([text_input])",
                            "Call"
                        ],
                        [
                            "torch.tensor(ids).to(model_device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_79": {
                "variable": {
                    "value": "ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.encode(text_input_list)",
                            "Call"
                        ],
                        [
                            "torch.tensor(ids).to(model_device)",
                            "Call"
                        ],
                        [
                            "self.encode([text_input])",
                            "Call"
                        ],
                        [
                            "torch.tensor(ids).to(model_device)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_88": {
                "input": {
                    "value": "emb_grads[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "TextAttack/build/lib/textattack/search_methods/genetic_algorithm.py": {
        "torch": {
            "Tensor_105": {}
        }
    },
    "TextAttack/build/lib/textattack/search_methods/greedy_word_swap_wir.py": {
        "torch": {
            "softmax_57": {
                "variable": {
                    "value": "softmax_saliency_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.Tensor(saliency_scores)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "TextAttack/build/lib/textattack/shared/attacked_text.py": {
        "torch": {}
    },
    "TextAttack/build/lib/textattack/shared/utils/misc.py": {
        "torch": {
            "device_10": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_111": {
                "seed": {
                    "value": "random_seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_112": {
                "seed": {
                    "value": "random_seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "TextAttack/build/lib/textattack/shared/utils/tensor.py": {
        "torch": {}
    },
    "TextAttack/build/lib/textattack/shared/word_embedding.py": {
        "torch": {
            "tensor_191": {
                "variable": {
                    "value": "e1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "e1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embedding_matrix[a]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(e1).to(utils.device)",
                            "Call"
                        ],
                        [
                            "self.embedding_matrix[a]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(e1).to(utils.device)",
                            "Call"
                        ],
                        [
                            "self.keyed_vectors.vectors_norm[a]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(e1).to(utils.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_192": {
                "variable": {
                    "value": "e2",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "e2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embedding_matrix[b]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(e2).to(utils.device)",
                            "Call"
                        ],
                        [
                            "self.embedding_matrix[b]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(e2).to(utils.device)",
                            "Call"
                        ],
                        [
                            "self.keyed_vectors.vectors_norm[b]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(e2).to(utils.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_193": {
                "variable": {
                    "value": "mse_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(e1 - e2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_219": {
                "variable": {
                    "value": "e1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "e1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embedding_matrix[a]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(e1).to(utils.device)",
                            "Call"
                        ],
                        [
                            "self.embedding_matrix[a]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(e1).to(utils.device)",
                            "Call"
                        ],
                        [
                            "self.keyed_vectors.vectors_norm[a]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(e1).to(utils.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_220": {
                "variable": {
                    "value": "e2",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "e2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embedding_matrix[b]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(e2).to(utils.device)",
                            "Call"
                        ],
                        [
                            "self.embedding_matrix[b]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(e2).to(utils.device)",
                            "Call"
                        ],
                        [
                            "self.keyed_vectors.vectors_norm[b]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(e2).to(utils.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_400": {
                "variable": {
                    "value": "e1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "e1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embedding_matrix[a]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(e1).to(utils.device)",
                            "Call"
                        ],
                        [
                            "self.embedding_matrix[a]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(e1).to(utils.device)",
                            "Call"
                        ],
                        [
                            "self.keyed_vectors.vectors_norm[a]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(e1).to(utils.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_401": {
                "variable": {
                    "value": "e2",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "e2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embedding_matrix[b]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(e2).to(utils.device)",
                            "Call"
                        ],
                        [
                            "self.embedding_matrix[b]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(e2).to(utils.device)",
                            "Call"
                        ],
                        [
                            "self.keyed_vectors.vectors_norm[b]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(e2).to(utils.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_402": {
                "variable": {
                    "value": "mse_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(e1 - e2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_242": {
                "variable": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.embedding_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_243": {
                "variable": {
                    "value": "vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.embedding_matrix[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_244": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding - vector",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "CosineSimilarity_221": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "TextAttack/build/lib/textattack/transformations/word_insertions/word_insertion_masked_lm.py": {
        "torch": {
            "softmax_111": {
                "variable": {
                    "value": "mask_token_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_token_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds[j, masked_index]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argsort_112": {
                "variable": {
                    "value": "ranked_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_token_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.softmax(mask_token_logits, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "TextAttack/build/lib/textattack/transformations/word_merges/word_merge_masked_lm.py": {
        "torch": {
            "softmax_110": {
                "variable": {
                    "value": "mask_token_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_token_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds[j, masked_index]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argsort_111": {
                "variable": {
                    "value": "ranked_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_token_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.softmax(mask_token_logits, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "TextAttack/build/lib/textattack/transformations/word_swaps/word_swap_gradient_based.py": {
        "torch": {
            "tensor_62": {
                "variable": {
                    "value": "emb_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "grad_output['gradient']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "variable": {
                    "value": "diffs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(indices_to_replace)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lookup_table.size(0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "TextAttack/build/lib/textattack/transformations/word_swaps/word_swap_masked_lm.py": {
        "torch": {
            "topk_253": {
                "variable": {
                    "value": "(top_probs, top_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._language_model(**current_inputs)[0][0]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "self.max_candidates",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_134": {
                "variable": {
                    "value": "mask_token_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_token_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds[j, masked_index]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argsort_135": {
                "variable": {
                    "value": "ranked_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_token_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.softmax(mask_token_logits, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_225": {
                "variable": {
                    "value": "cross_entropy_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_226": {
                "variable": {
                    "value": "target_ids_pos_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "target_ids_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(range(masked_index, min(masked_index + len(word_tokens), self.max_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_227": {
                "variable": {
                    "value": "word_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(target_ids_pos)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "index_select_232": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_lm_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred_probs.cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "target_ids_pos_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(target_ids_pos)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_234": {
                "variable": {
                    "value": "perplexity",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean(loss, dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_234": {
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cross_entropy_loss(logits, word_tensor)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "TextAttack/tests/test_misc.py": {
        "torch": {}
    },
    "TextAttack/textattack/commands/eval_model/eval_model_command.py": {
        "torch": {
            "stack_71": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "textattack.shared.utils.batch_model_predict(model, inputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(preds).squeeze().cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_71": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_72": {
                "variable": {
                    "value": "ground_truth_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ground_truth_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(ground_truth_outputs).cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_66": {
                "variable": {
                    "value": "batch_preds",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "TextAttack/textattack/constraints/grammaticality/language_models/gpt2.py": {
        "torch": {
            "tensor_53": {
                "variable": {
                    "value": "tokens_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[token_ids]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "*size": {
                    "value": "len(text_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "TextAttack/textattack/constraints/grammaticality/language_models/learning_to_write/adaptive_softmax.py": {
        "torch": {
            "Linear_21": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_22": {
                "variable": {
                    "value": "self.tail",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_59": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp.size(0)",
                            "Call"
                        ],
                        [
                            "inp[0].size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.cutoffs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_softmax_60": {
                "variable": {
                    "value": "lsm_head",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.head(inp)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "head_out.dim() - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_79": {
                "variable": {
                    "value": "self.criterions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_size, input_size // scale_down, False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_70": {
                "variable": {
                    "value": "lsm_tail",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.tail[i](inp)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "temp.dim() - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_size // scale_down",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "input_size // scale_down",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "cutoffs[i + 1] - cutoffs[i]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_81": {
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "TextAttack/textattack/constraints/grammaticality/language_models/learning_to_write/language_model_helpers.py": {
        "torch": {
            "from_numpy_106": {
                "variable": {
                    "value": "mapto",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "util_reverse(np.argsort(-word_freq))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_73": {
                "variable": {
                    "value": "all_raw_idxs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "raw_idx_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[[] for i in range(sentence_length + 1)]",
                            "ListComp"
                        ],
                        [
                            "[x for x in raw_idx_list if len(x)]",
                            "ListComp"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_122": {
                "f": {
                    "value": "model_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "open(os.path.join(lm_folder_path, 'lm-state-dict.pt'), 'rb')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "TextAttack/textattack/constraints/grammaticality/language_models/learning_to_write/learning_to_write.py": {
        "torch": {
            "tensor_61": {
                "data": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.query_handler.query(queries, query_words)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "TextAttack/textattack/constraints/grammaticality/language_models/learning_to_write/rnn_model.py": {
        "torch": {
            "Dropout_34": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_35": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntoken",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "ninp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "RNN_49": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ninp",
                    "type": "Variable",
                    "possible_values": []
                },
                "nonlinearity": {
                    "value": "nonlinearity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'RNN_TANH': 'tanh', 'RNN_RELU': 'relu'}[rnn_type]",
                            "Subscript"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.proj_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ninp",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "TextAttack/textattack/constraints/semantics/sentence_encoders/infer_sent/infer_sent.py": {
        "torch": {
            "load_48": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(model_folder_path, f'infersent{infersent_version}.pkl')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "TextAttack/textattack/constraints/semantics/sentence_encoders/infer_sent/infer_sent_model.py": {
        "torch": {
            "LSTM_35": {
                "variable": {
                    "value": "self.enc_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.word_emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dpout_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_77": {
                "variable": {
                    "value": "sent_packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sent.index_select(1, idx_sort)",
                            "Call"
                        ],
                        [
                            "sentences",
                            "Name"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sent_len_sorted",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sent_len_sorted.copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_91": {
                "variable": {
                    "value": "sent_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_92": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, idx_unsort)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_92": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_70": {
                "ndarray": {
                    "value": "idx_sort",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(idx_sort).cuda() if self.is_cuda() else torch.from_numpy(idx_sort)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "from_numpy_72": {
                "ndarray": {
                    "value": "idx_sort",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(idx_sort).cuda() if self.is_cuda() else torch.from_numpy(idx_sort)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_79": {
                "sequence": {
                    "value": "sent_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, idx_unsort)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_83": {
                "ndarray": {
                    "value": "idx_unsort",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(idx_unsort).cuda() if self.is_cuda() else torch.from_numpy(idx_unsort)",
                            "IfExp"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_85": {
                "ndarray": {
                    "value": "idx_unsort",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(idx_unsort).cuda() if self.is_cuda() else torch.from_numpy(idx_unsort)",
                            "IfExp"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_97": {
                "input": {
                    "value": "sent_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, idx_unsort)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "TextAttack/textattack/constraints/semantics/sentence_encoders/sentence_encoder.py": {
        "torch": {
            "unsqueeze_104": {
                "variable": {
                    "value": "starting_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "starting_embedding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(starting_embedding)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(starting_embedding, dim=0)",
                            "Call"
                        ],
                        [
                            "embeddings[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_105": {
                "variable": {
                    "value": "transformed_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transformed_embedding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(transformed_embedding)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(transformed_embedding, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CosineSimilarity_48": {
                "variable": {
                    "value": "self.sim_metric",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_99": {
                "variable": {
                    "value": "starting_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "starting_embedding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(starting_embedding)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(starting_embedding, dim=0)",
                            "Call"
                        ],
                        [
                            "embeddings[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_102": {
                "variable": {
                    "value": "transformed_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "transformed_embedding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(transformed_embedding)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(transformed_embedding, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "CosineSimilarity_216": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_223": {
                "input": {
                    "value": "(emb1 - emb2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_126": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_153": {
                "variable": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.encode([starting_raw_text] + transformed_raw_texts)",
                            "Call"
                        ],
                        [
                            "torch.tensor(embeddings)",
                            "Call"
                        ],
                        [
                            "self.encode(starting_text_windows + transformed_text_windows)",
                            "Call"
                        ],
                        [
                            "torch.tensor(embeddings)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_161": {
                "variable": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.encode([starting_raw_text] + transformed_raw_texts)",
                            "Call"
                        ],
                        [
                            "torch.tensor(embeddings)",
                            "Call"
                        ],
                        [
                            "self.encode(starting_text_windows + transformed_text_windows)",
                            "Call"
                        ],
                        [
                            "torch.tensor(embeddings)",
                            "Call"
                        ]
                    ]
                }
            },
            "acos_217": {
                "input": {
                    "value": "cos_sim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.CosineSimilarity(dim=1)(emb1, emb2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "TextAttack/textattack/constraints/semantics/sentence_encoders/thought_vector.py": {
        "torch": {
            "tensor_44": {
                "variable": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(embeddings)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_45": {
                "input": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(embeddings)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_48": {
                "tensors": {
                    "value": "[self._get_thought_vector(text) for text in raw_text_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "TextAttack/textattack/goal_function_results/classification_goal_function_result.py": {
        "torch": {}
    },
    "TextAttack/textattack/goal_function_results/goal_function_result.py": {
        "torch": {}
    },
    "TextAttack/textattack/goal_functions/classification/classification_goal_function.py": {
        "torch": {
            "tensor_29": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(scores)",
                            "Call"
                        ],
                        [
                            "scores.unsqueeze(dim=0)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(scores, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_62": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(scores)",
                            "Call"
                        ],
                        [
                            "scores.unsqueeze(dim=0)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(scores, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "TextAttack/textattack/goal_functions/goal_function.py": {
        "torch": {
            "device_102": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "topk_127": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "atts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attributions.sum(dim=-1).squeeze(0)",
                            "Call"
                        ],
                        [
                            "atts / torch.norm(atts)",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_136": {
                "variable": {
                    "value": "bsl",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_encoded['input_ids'].size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_128": {
                "input": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_105": {
                "data": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "norm_145": {
                "input": {
                    "value": "atts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attributions.sum(dim=-1).squeeze(0)",
                            "Call"
                        ],
                        [
                            "atts / torch.norm(atts)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_150": {
                "input": {
                    "value": "model_outputs[cnt]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_141": {
                "input": {
                    "value": "model_outputs[cnt]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "TextAttack/textattack/models/helpers/bert_for_classification.py": {
        "torch": {
            "softmax_39": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model(input_ids=input_ids)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "TextAttack/textattack/models/helpers/glove_embedding_layer.py": {
        "torch": {
            "Embedding_56": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.n_V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "n_d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(embedding_matrix[0])",
                            "Call"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_60": {
                "ndarray": {
                    "value": "embedding_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.load(glove_matrix_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "TextAttack/textattack/models/helpers/lstm_for_classification.py": {
        "torch": {
            "Dropout_40": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTM_44": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.emb_layer.n_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_76": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.max(output, dim=0)[0]",
                            "Subscript"
                        ],
                        [
                            "self.drop(output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "TextAttack/textattack/models/helpers/t5_for_text_to_text.py": {
        "torch": {}
    },
    "TextAttack/textattack/models/helpers/utils.py": {
        "torch": {
            "load_25": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model_path_list[0]",
                            "Subscript"
                        ]
                    ]
                },
                "map_location": {
                    "value": "utils.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "TextAttack/textattack/models/helpers/word_cnn_for_classification.py": {
        "torch": {
            "Dropout_35": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3 * hidden_size",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_78": {
                "variable": {
                    "value": "self.convs1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(Ci, Co, (w, h)) for w in widths]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "[F.relu(conv(x)).squeeze(3) for conv in self.convs1]",
                            "ListComp"
                        ],
                        [
                            "[F.max_pool1d(i, i.size(2)).squeeze(2) for i in x]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_83": {
                "input": {
                    "value": "conv(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_83": {
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool1d_85": {
                "input": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "i.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_85": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "Ci",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "Co",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "filters",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(w, h)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "TextAttack/textattack/models/wrappers/huggingface_model_wrapper.py": {
        "torch": {
            "tensor_32": {
                "data": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_95": {
                "data": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "TextAttack/textattack/models/wrappers/pytorch_model_wrapper.py": {
        "torch": {
            "tensor_37": {
                "variable": {
                    "value": "ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.encode(text_input_list)",
                            "Call"
                        ],
                        [
                            "torch.tensor(ids).to(model_device)",
                            "Call"
                        ],
                        [
                            "self.encode([text_input])",
                            "Call"
                        ],
                        [
                            "torch.tensor(ids).to(model_device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_79": {
                "variable": {
                    "value": "ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.encode(text_input_list)",
                            "Call"
                        ],
                        [
                            "torch.tensor(ids).to(model_device)",
                            "Call"
                        ],
                        [
                            "self.encode([text_input])",
                            "Call"
                        ],
                        [
                            "torch.tensor(ids).to(model_device)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_88": {
                "input": {
                    "value": "emb_grads[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "TextAttack/textattack/search_methods/genetic_algorithm.py": {
        "torch": {
            "Tensor_105": {}
        }
    },
    "TextAttack/textattack/search_methods/greedy_word_swap_wir.py": {
        "torch": {
            "softmax_57": {
                "variable": {
                    "value": "softmax_saliency_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.Tensor(saliency_scores)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "TextAttack/textattack/shared/attacked_text.py": {
        "torch": {}
    },
    "TextAttack/textattack/shared/utils/misc.py": {
        "torch": {
            "device_10": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_111": {
                "seed": {
                    "value": "random_seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_112": {
                "seed": {
                    "value": "random_seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "TextAttack/textattack/shared/utils/tensor.py": {
        "torch": {}
    },
    "TextAttack/textattack/shared/word_embedding.py": {
        "torch": {
            "tensor_191": {
                "variable": {
                    "value": "e1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "e1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embedding_matrix[a]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(e1).to(utils.device)",
                            "Call"
                        ],
                        [
                            "self.embedding_matrix[a]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(e1).to(utils.device)",
                            "Call"
                        ],
                        [
                            "self.keyed_vectors.vectors_norm[a]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(e1).to(utils.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_192": {
                "variable": {
                    "value": "e2",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "e2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embedding_matrix[b]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(e2).to(utils.device)",
                            "Call"
                        ],
                        [
                            "self.embedding_matrix[b]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(e2).to(utils.device)",
                            "Call"
                        ],
                        [
                            "self.keyed_vectors.vectors_norm[b]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(e2).to(utils.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_193": {
                "variable": {
                    "value": "mse_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(e1 - e2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_219": {
                "variable": {
                    "value": "e1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "e1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embedding_matrix[a]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(e1).to(utils.device)",
                            "Call"
                        ],
                        [
                            "self.embedding_matrix[a]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(e1).to(utils.device)",
                            "Call"
                        ],
                        [
                            "self.keyed_vectors.vectors_norm[a]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(e1).to(utils.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_220": {
                "variable": {
                    "value": "e2",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "e2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embedding_matrix[b]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(e2).to(utils.device)",
                            "Call"
                        ],
                        [
                            "self.embedding_matrix[b]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(e2).to(utils.device)",
                            "Call"
                        ],
                        [
                            "self.keyed_vectors.vectors_norm[b]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(e2).to(utils.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_400": {
                "variable": {
                    "value": "e1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "e1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embedding_matrix[a]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(e1).to(utils.device)",
                            "Call"
                        ],
                        [
                            "self.embedding_matrix[a]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(e1).to(utils.device)",
                            "Call"
                        ],
                        [
                            "self.keyed_vectors.vectors_norm[a]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(e1).to(utils.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_401": {
                "variable": {
                    "value": "e2",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "e2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embedding_matrix[b]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(e2).to(utils.device)",
                            "Call"
                        ],
                        [
                            "self.embedding_matrix[b]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(e2).to(utils.device)",
                            "Call"
                        ],
                        [
                            "self.keyed_vectors.vectors_norm[b]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(e2).to(utils.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_402": {
                "variable": {
                    "value": "mse_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(e1 - e2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_242": {
                "variable": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.embedding_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_243": {
                "variable": {
                    "value": "vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.embedding_matrix[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_244": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding - vector",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "CosineSimilarity_221": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "TextAttack/textattack/transformations/word_insertions/word_insertion_masked_lm.py": {
        "torch": {
            "softmax_111": {
                "variable": {
                    "value": "mask_token_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_token_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds[j, masked_index]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argsort_112": {
                "variable": {
                    "value": "ranked_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_token_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.softmax(mask_token_logits, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "TextAttack/textattack/transformations/word_merges/word_merge_masked_lm.py": {
        "torch": {
            "softmax_110": {
                "variable": {
                    "value": "mask_token_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_token_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds[j, masked_index]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argsort_111": {
                "variable": {
                    "value": "ranked_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_token_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.softmax(mask_token_logits, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "TextAttack/textattack/transformations/word_swaps/word_swap_gradient_based.py": {
        "torch": {
            "tensor_62": {
                "variable": {
                    "value": "emb_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "grad_output['gradient']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "variable": {
                    "value": "diffs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(indices_to_replace)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lookup_table.size(0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "TextAttack/textattack/transformations/word_swaps/word_swap_masked_lm.py": {
        "torch": {
            "topk_253": {
                "variable": {
                    "value": "(top_probs, top_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._language_model(**current_inputs)[0][0]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "self.max_candidates",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_134": {
                "variable": {
                    "value": "mask_token_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_token_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds[j, masked_index]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argsort_135": {
                "variable": {
                    "value": "ranked_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_token_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.softmax(mask_token_logits, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_225": {
                "variable": {
                    "value": "cross_entropy_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_226": {
                "variable": {
                    "value": "target_ids_pos_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "target_ids_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(range(masked_index, min(masked_index + len(word_tokens), self.max_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_227": {
                "variable": {
                    "value": "word_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(target_ids_pos)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "index_select_232": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_lm_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred_probs.cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "target_ids_pos_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(target_ids_pos)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_234": {
                "variable": {
                    "value": "perplexity",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean(loss, dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_234": {
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cross_entropy_loss(logits, word_tensor)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "calculate_interpretations.py": {
        "torch": {
            "device_32": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "unsqueeze_42": {
                "variable": {
                    "value": "bsl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_52": {
                "input": {
                    "value": "atts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attributions.sum(dim=-1).squeeze(0)",
                            "Call"
                        ],
                        [
                            "atts / torch.norm(atts)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Tensor_163": {},
            "argmax_343": {
                "input": {
                    "value": "model(torch.LongTensor([tokenizer.encode(fn[i][j].attacked_text.text, truncation=True)]).to(device))[0][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "results-ablation.py": {
        "torch": {
            "device_28": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "exp_156": {
                "variable": {
                    "value": "perplexity",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(eval_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_40": {
                "input": {
                    "value": "atts",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argsort_61": {
                "input": {
                    "value": "torch.abs(int1)",
                    "type": "Call",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argsort_62": {
                "input": {
                    "value": "torch.abs(int2)",
                    "type": "Call",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_145": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ppl_tokenizer.encode(text, add_special_tokens=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_156": {
                "data": {
                    "value": "eval_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "eval_loss / nb_eval_steps",
                            "BinOp"
                        ],
                        [
                            "eval_loss + lm_loss.mean().item()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_61": {
                "input": {
                    "value": "int1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "abs_62": {
                "input": {
                    "value": "int2",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "results-metrics.py": {
        "torch": {
            "device_31": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "exp_136": {
                "variable": {
                    "value": "perplexity",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(eval_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_43": {
                "input": {
                    "value": "atts",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argsort_64": {
                "input": {
                    "value": "torch.abs(int1)",
                    "type": "Call",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argsort_65": {
                "input": {
                    "value": "torch.abs(int2)",
                    "type": "Call",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_125": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ppl_tokenizer.encode(text, add_special_tokens=True, truncation=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_136": {
                "data": {
                    "value": "eval_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "eval_loss / nb_eval_steps",
                            "BinOp"
                        ],
                        [
                            "eval_loss + lm_loss.mean().item()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_885": {
                "input": {
                    "value": "candidates[idx][i][j].raw_output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_897": {
                "input": {
                    "value": "ii",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "candidates[idx][i][j].raw_output",
                            "Attribute"
                        ]
                    ]
                }
            },
            "max_893": {
                "input": {
                    "value": "ii",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "candidates[idx][i][j].raw_output",
                            "Attribute"
                        ]
                    ]
                }
            },
            "max_895": {
                "input": {
                    "value": "ii",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "candidates[idx][i][j].raw_output",
                            "Attribute"
                        ]
                    ]
                }
            },
            "abs_64": {
                "input": {
                    "value": "int1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "abs_65": {
                "input": {
                    "value": "int2",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}