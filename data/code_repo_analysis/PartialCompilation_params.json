{
    "qiskit-aqua/qiskit/aqua/algorithms/adaptive/qsvm/qsvm_variational.py": {
        "sklearn": {
            "shuffle_248": {
                "variable": {
                    "value": "(shuffled_samples, shuffled_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.random",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shuffle_251": {
                "variable": {
                    "value": "shuffled_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.random",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "qiskit-aqua/qiskit/aqua/algorithms/classical/svm/_rbf_svc_estimator.py": {
        "sklearn": {
            "SVC_27": {
                "variable": {
                    "value": "self._estimator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel": {
                    "value": "rbf",
                    "type": "str",
                    "possible_values": []
                },
                "gamma": {
                    "value": "auto",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "qiskit-aqua/qiskit/aqua/algorithms/classical/svm/_svm_classical_binary.py": {
        "sklearn": {
            "rbf_kernel_35": {
                "X": {
                    "value": "points_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points_array",
                            "Method Argument"
                        ]
                    ]
                },
                "Y": {
                    "value": "points_array2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points_array2",
                            "Method Argument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "qiskit-aqua/qiskit/aqua/components/multiclass_extensions/allpairs.py": {
        "sklearn": {}
    },
    "qiskit-aqua/qiskit/aqua/components/multiclass_extensions/error_correcting_code.py": {
        "sklearn": {
            "euclidean_distances_118": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(confidences).T",
                            "Attribute"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "Y": {
                    "value": "self.codebook",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "qiskit-aqua/qiskit/aqua/components/multiclass_extensions/one_against_rest.py": {
        "sklearn": {
            "LabelBinarizer_57": {
                "variable": {
                    "value": "self.label_binarizer_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "neg_label": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "qiskit-aqua/qiskit/aqua/translators/ising/portfolio.py": {
        "sklearn": {
            "make_spd_matrix_49": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "n_dim": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(mu)",
                            "Call"
                        ],
                        [
                            "int(np.log2(state_vector.shape[0]))",
                            "Call"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "qiskit-aqua/qiskit/aqua/utils/dataset_helper.py": {
        "sklearn": {
            "PCA_130": {
                "variable": {
                    "value": "x_reduced",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "PY3_quantum-optimal-control/quantum_optimal_control/core/analysis.py": {
        "tensorflow": {
            "stack_60": {
                "variable": {
                    "value": "inter_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "self.tf_inter_vecs",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "PY3_quantum-optimal-control/quantum_optimal_control/core/regularization_functions.py": {
        "tensorflow": {
            "name_scope_11": {
                "name": {
                    "value": "reg_errors",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_30": {
                "variable": {
                    "value": "zeros_for_training",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tfs.sys_para.ops_len, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_31": {
                "variable": {
                    "value": "new_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tfs.ops_weight, zeros_for_training]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_32": {
                "variable": {
                    "value": "new_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[zeros_for_training, new_weights]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_59": {
                "variable": {
                    "value": "tf_u",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tfs.ops_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_99": {
                "variable": {
                    "value": "target_vecs_all_timestep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(tfs.target_vecs, [2 * tfs.sys_para.state_num, 1, len(tfs.inter_vecs)])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, tfs.sys_para.steps + 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_78": {
                "variable": {
                    "value": "v_sorted",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "c_to_r_mat(np.reshape(sort_ev(tfs.sys_para.v_c, tfs.sys_para.dressed_id), [len(tfs.sys_para.dressed_id), len(tfs.sys_para.dressed_id)]))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fft_61": {
                "input": {
                    "value": "tf_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tfs.ops_weight, dtype=tf.complex64)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_84": {
                "variable": {
                    "value": "inter_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.transpose(v_sorted)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "inter_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfs.inter_vecs",
                            "Attribute"
                        ],
                        [
                            "tf.matmul(tf.transpose(v_sorted), inter_vec)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_99": {
                "tensor": {
                    "value": "tfs.target_vecs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2 * tfs.sys_para.state_num, 1, len(tfs.inter_vecs)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_loss_19": {
                "t": {
                    "value": "tfs.ops_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_25": {
                "t": {
                    "value": "tf.multiply(tfs.tf_one_minus_gaussian_envelope, tfs.ops_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_loss_35": {
                "t": {
                    "value": "(new_weights[:, 1:] - new_weights[:, :tfs.sys_para.steps + 3]) / tfs.sys_para.dt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_43": {
                "t": {
                    "value": "(new_weights[:, 2:] - 2 * new_weights[:, 1:tfs.sys_para.steps + 3] + new_weights[:, :tfs.sys_para.steps + 2]) / tfs.sys_para.dt ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_69": {
                "input_tensor": {
                    "value": "tf_fft[:, 0:band_id[0]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_70": {
                "input_tensor": {
                    "value": "tf_fft[:, band_id[1]:half_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "l2_loss_105": {
                "t": {
                    "value": "tfs.sys_para.steps + 1 - target_vecs_inner_product",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_26": {
                "x": {
                    "value": "tfs.tf_one_minus_gaussian_envelope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tfs.ops_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_84": {
                "a": {
                    "value": "v_sorted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(c_to_r_mat(np.reshape(sort_ev(tfs.sys_para.v_c, tfs.sys_para.dressed_id), [len(tfs.sys_para.dressed_id), len(tfs.sys_para.dressed_id)])), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_88": {
                "x": {
                    "value": "inter_vec[state, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "square_89": {
                "x": {
                    "value": "inter_vec[tfs.sys_para.state_num + state, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "l2_loss_91": {
                "t": {
                    "value": "forbidden_state_pop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(inter_vec[state, :]) + tf.square(inter_vec[tfs.sys_para.state_num + state, :])",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "PY3_quantum-optimal-control/quantum_optimal_control/core/run_session.py": {
        "tensorflow": {
            "ConfigProto_33": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 0}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Session_37": {
                "graph": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph",
                            "Method Argument"
                        ]
                    ]
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count={'GPU': 0})",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "global_variables_initializer_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "PY3_quantum-optimal-control/quantum_optimal_control/core/tensorflow_state.py": {
        "tensorflow": {
            "constant_141": {
                "variable": {
                    "value": "self.tf_one_minus_gaussian_envelope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.sys_para.one_minus_gauss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Gaussian",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_150": {
                "variable": {
                    "value": "self.packed_initial_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.stack(self.tf_initial_vectors)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_172": {
                "variable": {
                    "value": "self.H0_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([self.sys_para.steps])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_176": {
                "variable": {
                    "value": "self.ops_weight_base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(self.sys_para.ops_weight_base, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "weights_base",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sin_179": {
                "variable": {
                    "value": "self.ops_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.ops_weight_base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_185": {
                "variable": {
                    "value": "self.H_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "self.weights_unpacked",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "packed_weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_206": {
                "variable": {
                    "value": "self.tf_matrix_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.sys_para.matrix_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_216": {
                "variable": {
                    "value": "self.inter_states[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "a": {
                    "value": "tf_inter_state_op[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "self.tf_initial_unitary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a_is_sparse": {
                    "value": "self.sys_para.sparse_U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b_is_sparse": {
                    "value": "self.sys_para.sparse_K",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_242": {
                "variable": {
                    "value": "self.inter_vecs_packed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "self.inter_vecs_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_243": {
                "variable": {
                    "value": "self.inter_vecs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.inter_vecs_packed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_250": {
                "variable": {
                    "value": "tf_matrix_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.sys_para.matrix_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_262": {
                "variable": {
                    "value": "self.inter_vecs_packed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "self.inter_vecs_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_263": {
                "variable": {
                    "value": "self.inter_vecs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.inter_vecs_packed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_357": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdamOptimizer_358": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_363": {
                "variable": {
                    "value": "self.grad_pack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[g for (g, _) in self.grad]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "reduce_sum_366": {
                "variable": {
                    "value": "self.grad_squared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack(self.grads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_373": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_379": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_n_32": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "uks_Hk_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "add_n_85": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "uks_Hk_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "add_n_119": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "uks_Hk_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_148": {
                "variable": {
                    "value": "tf_initial_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "initial_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sys_para.initial_vectors",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_156": {
                "variable": {
                    "value": "self.target_vecs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.constant(np.array(self.sys_para.target_vectors), dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_159": {
                "variable": {
                    "value": "self.tf_initial_unitary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.sys_para.initial_unitary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "U0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_161": {
                "variable": {
                    "value": "self.tf_target_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.sys_para.target_unitary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_163": {
                "variable": {
                    "value": "self.target_vecs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.tf_target_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.packed_initial_vectors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_221": {
                "variable": {
                    "value": "self.inter_states[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "a": {
                    "value": "tf_inter_state_op[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "self.inter_states[ii - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "a_is_sparse": {
                    "value": "self.sys_para.sparse_U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b_is_sparse": {
                    "value": "self.sys_para.sparse_K",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_239": {
                "variable": {
                    "value": "inter_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.inter_states[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "self.packed_initial_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'inter_vec_' + str(ii)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_277": {
                "variable": {
                    "value": "ac",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "psi_1_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psi1[0:state_num]",
                            "Subscript"
                        ],
                        [
                            "psi1[0:state_num, :]",
                            "Subscript"
                        ],
                        [
                            "psi1[0:state_num, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "psi_2_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psi2[0:state_num]",
                            "Subscript"
                        ],
                        [
                            "psi2[0:state_num, :]",
                            "Subscript"
                        ],
                        [
                            "psi2[0:state_num, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "multiply_278": {
                "variable": {
                    "value": "bd",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "psi_1_imag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psi1[state_num:2 * state_num]",
                            "Subscript"
                        ],
                        [
                            "psi1[state_num:2 * state_num, :]",
                            "Subscript"
                        ],
                        [
                            "psi1[state_num:2 * state_num, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "psi_2_imag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psi2[state_num:2 * state_num]",
                            "Subscript"
                        ],
                        [
                            "psi2[state_num:2 * state_num, :]",
                            "Subscript"
                        ],
                        [
                            "psi2[state_num:2 * state_num, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "multiply_279": {
                "variable": {
                    "value": "bc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "psi_1_imag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psi1[state_num:2 * state_num]",
                            "Subscript"
                        ],
                        [
                            "psi1[state_num:2 * state_num, :]",
                            "Subscript"
                        ],
                        [
                            "psi1[state_num:2 * state_num, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "psi_2_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psi2[0:state_num]",
                            "Subscript"
                        ],
                        [
                            "psi2[0:state_num, :]",
                            "Subscript"
                        ],
                        [
                            "psi2[0:state_num, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "multiply_280": {
                "variable": {
                    "value": "ad",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "psi_1_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psi1[0:state_num]",
                            "Subscript"
                        ],
                        [
                            "psi1[0:state_num, :]",
                            "Subscript"
                        ],
                        [
                            "psi1[0:state_num, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "psi_2_imag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psi2[state_num:2 * state_num]",
                            "Subscript"
                        ],
                        [
                            "psi2[state_num:2 * state_num, :]",
                            "Subscript"
                        ],
                        [
                            "psi2[state_num:2 * state_num, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "square_281": {
                "variable": {
                    "value": "reals",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(tf.reduce_sum(ac), tf.reduce_sum(bd))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_282": {
                "variable": {
                    "value": "imags",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(tf.reduce_sum(bc), tf.reduce_sum(ad))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_284": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "reals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(tf.add(tf.reduce_sum(ac), tf.reduce_sum(bd)))",
                            "Call"
                        ],
                        [
                            "tf.square(tf.reduce_sum(tf.add(ac, bd)))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(tf.reduce_sum(tf.add(ac, bd), 1)))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "imags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(tf.subtract(tf.reduce_sum(bc), tf.reduce_sum(ad)))",
                            "Call"
                        ],
                        [
                            "tf.square(tf.reduce_sum(tf.subtract(bc, ad)))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(tf.reduce_sum(tf.subtract(bc, ad), 1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_298": {
                "variable": {
                    "value": "ac",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(psi_1_real, psi_2_real)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_299": {
                "variable": {
                    "value": "bd",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(psi_1_imag, psi_2_imag)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_300": {
                "variable": {
                    "value": "bc",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(psi_1_imag, psi_2_real)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_301": {
                "variable": {
                    "value": "ad",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(psi_1_real, psi_2_imag)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_303": {
                "variable": {
                    "value": "reals",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.add(ac, bd))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_304": {
                "variable": {
                    "value": "imags",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.subtract(bc, ad))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_320": {
                "variable": {
                    "value": "ac",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(psi_1_real, psi_2_real)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_321": {
                "variable": {
                    "value": "bd",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(psi_1_imag, psi_2_imag)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_322": {
                "variable": {
                    "value": "bc",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(psi_1_imag, psi_2_real)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_323": {
                "variable": {
                    "value": "ad",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(psi_1_real, psi_2_imag)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_324": {
                "input_tensor": {
                    "value": "tf.add(ac, bd)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_326": {
                "variable": {
                    "value": "imags",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(tf.reduce_sum(tf.subtract(bc, ad), 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_336": {
                "variable": {
                    "value": "self.final_vecs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.final_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.packed_initial_vectors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_343": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_44": {
                "variable": {
                    "value": "matexp",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "matexp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "I",
                            "variable"
                        ],
                        [
                            "matexp + H_n / factorial",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(matexp, matexp, a_is_sparse=self.sys_para.sparse_U, b_is_sparse=self.sys_para.sparse_U)",
                            "Call"
                        ],
                        [
                            "get_matexp(uks, H_all)",
                            "Call"
                        ],
                        [
                            "get_matexp(uks, H_all)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "matexp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "I",
                            "variable"
                        ],
                        [
                            "matexp + H_n / factorial",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(matexp, matexp, a_is_sparse=self.sys_para.sparse_U, b_is_sparse=self.sys_para.sparse_U)",
                            "Call"
                        ],
                        [
                            "get_matexp(uks, H_all)",
                            "Call"
                        ],
                        [
                            "get_matexp(uks, H_all)",
                            "Call"
                        ]
                    ]
                },
                "a_is_sparse": {
                    "value": "self.sys_para.sparse_U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b_is_sparse": {
                    "value": "self.sys_para.sparse_U",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_92": {
                "variable": {
                    "value": "psi_n",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add_n(uks_Hk_list)",
                            "Call"
                        ],
                        [
                            "tf.add_n(uks_Hk_list)",
                            "Call"
                        ],
                        [
                            "tf.add_n(uks_Hk_list)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "psi_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psi",
                            "variable"
                        ],
                        [
                            "tf.matmul(H, psi_n, a_is_sparse=self.sys_para.sparse_H, b_is_sparse=self.sys_para.sparse_K)",
                            "Call"
                        ]
                    ]
                },
                "a_is_sparse": {
                    "value": "self.sys_para.sparse_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b_is_sparse": {
                    "value": "self.sys_para.sparse_K",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_125": {
                "variable": {
                    "value": "vec_grad_n",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add_n(uks_Hk_list)",
                            "Call"
                        ],
                        [
                            "tf.add_n(uks_Hk_list)",
                            "Call"
                        ],
                        [
                            "tf.add_n(uks_Hk_list)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "vec_grad_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad",
                            "variable"
                        ],
                        [
                            "tf.matmul(H, vec_grad_n, a_is_sparse=self.sys_para.sparse_H, b_is_sparse=self.sys_para.sparse_K)",
                            "Call"
                        ]
                    ]
                },
                "a_is_sparse": {
                    "value": "self.sys_para.sparse_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b_is_sparse": {
                    "value": "self.sys_para.sparse_K",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_151": {
                "values": {
                    "value": "self.tf_initial_vectors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_173": {
                "shape": {
                    "value": "[self.sys_para.steps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_176": {
                "value": {
                    "value": "self.sys_para.ops_weight_base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_226": {
                "input_tensor": {
                    "value": "tf.matmul(tf.transpose(self.final_state), self.final_state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_276": {
                "name": {
                    "value": "inner_product",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_297": {
                "name": {
                    "value": "inner_product",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_319": {
                "name": {
                    "value": "inner_product",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_365": {
                "t": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_366": {
                "values": {
                    "value": "self.grads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_40": {
                "variable": {
                    "value": "H_n",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add_n(uks_Hk_list)",
                            "Call"
                        ],
                        [
                            "tf.add_n(uks_Hk_list)",
                            "Call"
                        ],
                        [
                            "tf.add_n(uks_Hk_list)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "H_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "variable"
                        ],
                        [
                            "tf.matmul(H, H_n, a_is_sparse=self.sys_para.sparse_H, b_is_sparse=self.sys_para.sparse_U)",
                            "Call"
                        ]
                    ]
                },
                "a_is_sparse": {
                    "value": "self.sys_para.sparse_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b_is_sparse": {
                    "value": "self.sys_para.sparse_U",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_54": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_64": {
                "values": {
                    "value": "coeff_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_64": {
                "shape": {
                    "value": "tf.shape(H_all)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_103": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_129": {
                "values": {
                    "value": "coeff_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_129": {
                "shape": {
                    "value": "tf.shape(H_all)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_156": {
                "value": {
                    "value": "np.array(self.sys_para.target_vectors)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_193": {
                "shape": {
                    "value": "[2 * self.sys_para.state_num, 2 * self.sys_para.state_num]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'inter_state_' + str(ii)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_227": {
                "a": {
                    "value": "tf.transpose(self.final_state)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.final_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_281": {
                "x": {
                    "value": "tf.reduce_sum(ac)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reduce_sum(bd)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_282": {
                "x": {
                    "value": "tf.reduce_sum(bc)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reduce_sum(ad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_298": {
                "x": {
                    "value": "psi_1_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psi1[0:state_num]",
                            "Subscript"
                        ],
                        [
                            "psi1[0:state_num, :]",
                            "Subscript"
                        ],
                        [
                            "psi1[0:state_num, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "psi_2_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psi2[0:state_num]",
                            "Subscript"
                        ],
                        [
                            "psi2[0:state_num, :]",
                            "Subscript"
                        ],
                        [
                            "psi2[0:state_num, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "multiply_299": {
                "x": {
                    "value": "psi_1_imag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psi1[state_num:2 * state_num]",
                            "Subscript"
                        ],
                        [
                            "psi1[state_num:2 * state_num, :]",
                            "Subscript"
                        ],
                        [
                            "psi1[state_num:2 * state_num, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "psi_2_imag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psi2[state_num:2 * state_num]",
                            "Subscript"
                        ],
                        [
                            "psi2[state_num:2 * state_num, :]",
                            "Subscript"
                        ],
                        [
                            "psi2[state_num:2 * state_num, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "multiply_300": {
                "x": {
                    "value": "psi_1_imag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psi1[state_num:2 * state_num]",
                            "Subscript"
                        ],
                        [
                            "psi1[state_num:2 * state_num, :]",
                            "Subscript"
                        ],
                        [
                            "psi1[state_num:2 * state_num, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "psi_2_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psi2[0:state_num]",
                            "Subscript"
                        ],
                        [
                            "psi2[0:state_num, :]",
                            "Subscript"
                        ],
                        [
                            "psi2[0:state_num, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "multiply_301": {
                "x": {
                    "value": "psi_1_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psi1[0:state_num]",
                            "Subscript"
                        ],
                        [
                            "psi1[0:state_num, :]",
                            "Subscript"
                        ],
                        [
                            "psi1[0:state_num, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "psi_2_imag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psi2[state_num:2 * state_num]",
                            "Subscript"
                        ],
                        [
                            "psi2[state_num:2 * state_num, :]",
                            "Subscript"
                        ],
                        [
                            "psi2[state_num:2 * state_num, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_sum_303": {
                "input_tensor": {
                    "value": "tf.add(ac, bd)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_304": {
                "input_tensor": {
                    "value": "tf.subtract(bc, ad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_305": {
                "x": {
                    "value": "reals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(tf.add(tf.reduce_sum(ac), tf.reduce_sum(bd)))",
                            "Call"
                        ],
                        [
                            "tf.square(tf.reduce_sum(tf.add(ac, bd)))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(tf.reduce_sum(tf.add(ac, bd), 1)))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "imags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(tf.subtract(tf.reduce_sum(bc), tf.reduce_sum(ad)))",
                            "Call"
                        ],
                        [
                            "tf.square(tf.reduce_sum(tf.subtract(bc, ad)))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(tf.reduce_sum(tf.subtract(bc, ad), 1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_320": {
                "x": {
                    "value": "psi_1_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psi1[0:state_num]",
                            "Subscript"
                        ],
                        [
                            "psi1[0:state_num, :]",
                            "Subscript"
                        ],
                        [
                            "psi1[0:state_num, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "psi_2_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psi2[0:state_num]",
                            "Subscript"
                        ],
                        [
                            "psi2[0:state_num, :]",
                            "Subscript"
                        ],
                        [
                            "psi2[0:state_num, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "multiply_321": {
                "x": {
                    "value": "psi_1_imag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psi1[state_num:2 * state_num]",
                            "Subscript"
                        ],
                        [
                            "psi1[state_num:2 * state_num, :]",
                            "Subscript"
                        ],
                        [
                            "psi1[state_num:2 * state_num, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "psi_2_imag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psi2[state_num:2 * state_num]",
                            "Subscript"
                        ],
                        [
                            "psi2[state_num:2 * state_num, :]",
                            "Subscript"
                        ],
                        [
                            "psi2[state_num:2 * state_num, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "multiply_322": {
                "x": {
                    "value": "psi_1_imag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psi1[state_num:2 * state_num]",
                            "Subscript"
                        ],
                        [
                            "psi1[state_num:2 * state_num, :]",
                            "Subscript"
                        ],
                        [
                            "psi1[state_num:2 * state_num, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "psi_2_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psi2[0:state_num]",
                            "Subscript"
                        ],
                        [
                            "psi2[0:state_num, :]",
                            "Subscript"
                        ],
                        [
                            "psi2[0:state_num, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "multiply_323": {
                "x": {
                    "value": "psi_1_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psi1[0:state_num]",
                            "Subscript"
                        ],
                        [
                            "psi1[0:state_num, :]",
                            "Subscript"
                        ],
                        [
                            "psi1[0:state_num, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "psi_2_imag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psi2[state_num:2 * state_num]",
                            "Subscript"
                        ],
                        [
                            "psi2[state_num:2 * state_num, :]",
                            "Subscript"
                        ],
                        [
                            "psi2[state_num:2 * state_num, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "square_324": {
                "x": {
                    "value": "tf.reduce_sum(tf.add(ac, bd), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_327": {
                "x": {
                    "value": "tf.reduce_sum(tf.subtract(bc, ad), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_328": {
                "x": {
                    "value": "reals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(tf.add(tf.reduce_sum(ac), tf.reduce_sum(bd)))",
                            "Call"
                        ],
                        [
                            "tf.square(tf.reduce_sum(tf.add(ac, bd)))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(tf.reduce_sum(tf.add(ac, bd), 1)))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "imags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(tf.subtract(tf.reduce_sum(bc), tf.reduce_sum(ad)))",
                            "Call"
                        ],
                        [
                            "tf.square(tf.reduce_sum(tf.subtract(bc, ad)))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(tf.reduce_sum(tf.subtract(bc, ad), 1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_61": {
                "input_tensor": {
                    "value": "tf.multiply(grad, tf.matmul(H_all[ii], matexp, a_is_sparse=self.sys_para.sparse_H, b_is_sparse=self.sys_para.sparse_U))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_64": {
                "input": {
                    "value": "H_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H_all",
                            "Method Argument"
                        ],
                        [
                            "H_all",
                            "Method Argument"
                        ],
                        [
                            "H_all",
                            "Method Argument"
                        ],
                        [
                            "H_all",
                            "Method Argument"
                        ],
                        [
                            "H_all",
                            "Method Argument"
                        ],
                        [
                            "H_all",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_110": {
                "input_tensor": {
                    "value": "tf.multiply(grad, tf.matmul(H_all[ii], matvecexp, a_is_sparse=self.sys_para.sparse_H, b_is_sparse=self.sys_para.sparse_K))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_129": {
                "input": {
                    "value": "H_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H_all",
                            "Method Argument"
                        ],
                        [
                            "H_all",
                            "Method Argument"
                        ],
                        [
                            "H_all",
                            "Method Argument"
                        ],
                        [
                            "H_all",
                            "Method Argument"
                        ],
                        [
                            "H_all",
                            "Method Argument"
                        ],
                        [
                            "H_all",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_227": {
                "a": {
                    "value": "self.final_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_281": {
                "input_tensor": {
                    "value": "bd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(psi_1_imag, psi_2_imag)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(psi_1_imag, psi_2_imag), 0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(psi_1_imag, psi_2_imag), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_283": {
                "input_tensor": {
                    "value": "ad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(psi_1_real, psi_2_imag)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(psi_1_real, psi_2_imag), 0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(psi_1_real, psi_2_imag), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_303": {
                "x": {
                    "value": "ac",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(psi_1_real, psi_2_real)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(psi_1_real, psi_2_real), 0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(psi_1_real, psi_2_real), 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "bd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(psi_1_imag, psi_2_imag)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(psi_1_imag, psi_2_imag), 0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(psi_1_imag, psi_2_imag), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_304": {
                "x": {
                    "value": "bc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(psi_1_imag, psi_2_real)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(psi_1_imag, psi_2_real), 0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(psi_1_imag, psi_2_real), 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "ad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(psi_1_real, psi_2_imag)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(psi_1_real, psi_2_imag), 0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(psi_1_real, psi_2_imag), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_327": {
                "input_tensor": {
                    "value": "tf.subtract(bc, ad)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_61": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad",
                            "Method Argument"
                        ],
                        [
                            "grad",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.matmul(H_all[ii], matexp, a_is_sparse=self.sys_para.sparse_H, b_is_sparse=self.sys_para.sparse_U)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_110": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad",
                            "Method Argument"
                        ],
                        [
                            "grad",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.matmul(H_all[ii], matvecexp, a_is_sparse=self.sys_para.sparse_H, b_is_sparse=self.sys_para.sparse_K)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_324": {
                "x": {
                    "value": "ac",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(psi_1_real, psi_2_real)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(psi_1_real, psi_2_real), 0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(psi_1_real, psi_2_real), 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "bd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(psi_1_imag, psi_2_imag)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(psi_1_imag, psi_2_imag), 0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(psi_1_imag, psi_2_imag), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_327": {
                "x": {
                    "value": "bc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(psi_1_imag, psi_2_real)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(psi_1_imag, psi_2_real), 0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(psi_1_imag, psi_2_real), 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "ad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(psi_1_real, psi_2_imag)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(psi_1_real, psi_2_imag), 0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(psi_1_real, psi_2_imag), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_62": {
                "a": {
                    "value": "H_all[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "matexp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "I",
                            "variable"
                        ],
                        [
                            "matexp + H_n / factorial",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(matexp, matexp, a_is_sparse=self.sys_para.sparse_U, b_is_sparse=self.sys_para.sparse_U)",
                            "Call"
                        ],
                        [
                            "get_matexp(uks, H_all)",
                            "Call"
                        ],
                        [
                            "get_matexp(uks, H_all)",
                            "Call"
                        ]
                    ]
                },
                "a_is_sparse": {
                    "value": "self.sys_para.sparse_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b_is_sparse": {
                    "value": "self.sys_para.sparse_U",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_111": {
                "a": {
                    "value": "H_all[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "matvecexp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psi",
                            "variable"
                        ],
                        [
                            "matvecexp + psi_n / factorial",
                            "BinOp"
                        ],
                        [
                            "get_matvecexp(uks, H_all, psi)",
                            "Call"
                        ],
                        [
                            "get_matvecexp(uks, H_all, psi)",
                            "Call"
                        ]
                    ]
                },
                "a_is_sparse": {
                    "value": "self.sys_para.sparse_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b_is_sparse": {
                    "value": "self.sys_para.sparse_K",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "PY3_quantum-optimal-control/quantum_optimal_control/main_grape/grape.py": {
        "tensorflow": {
            "device_111": {
                "device_name": {
                    "value": "dev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/gpu:0'",
                            "str"
                        ],
                        [
                            "'/cpu:0'",
                            "str"
                        ]
                    ]
                }
            }
        }
    },
    "PY3_quantum-optimal-control/save.py": {
        "tensorflow": {
            "ConfigProto_24": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 0}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Session_28": {
                "graph": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph",
                            "Method Argument"
                        ]
                    ]
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count={'GPU': 0})",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "global_variables_initializer_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/BeH2/Flexible/beh2.py": {
        "tensorflow": {
            "set_random_seed_7": {
                "seed": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/BeH2/FullQOC/beh2.py": {
        "tensorflow": {
            "set_random_seed_7": {
                "seed": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/BeH2/Strict/beh2.py": {
        "tensorflow": {
            "set_random_seed_7": {
                "seed": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/NaH/Flexible/nah.py": {
        "tensorflow": {
            "set_random_seed_7": {
                "seed": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/NaH/FullQOC/nah.py": {
        "tensorflow": {
            "set_random_seed_7": {
                "seed": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/NaH/Strict/nah.py": {
        "tensorflow": {
            "set_random_seed_7": {
                "seed": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/QAOA/3reg.py": {
        "tensorflow": {
            "set_random_seed_6": {
                "seed": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/QAOA/3reg_n8.py": {
        "tensorflow": {
            "set_random_seed_6": {
                "seed": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/QAOA/ErdosRenyi.py": {
        "tensorflow": {
            "set_random_seed_6": {
                "seed": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/QAOA/ErdosRenyi_n8.py": {
        "tensorflow": {
            "set_random_seed_6": {
                "seed": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/QAOA/flexible_3reg.py": {
        "tensorflow": {
            "set_random_seed_6": {
                "seed": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/QAOA/flexible_3reg_n8.py": {
        "tensorflow": {
            "set_random_seed_6": {
                "seed": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/QAOA/flexible_ErdosRenyi.py": {
        "tensorflow": {
            "set_random_seed_6": {
                "seed": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/QAOA/flexible_ErdosRenyi_n8.py": {
        "tensorflow": {
            "set_random_seed_6": {
                "seed": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/QAOA/strict_3reg.py": {
        "tensorflow": {
            "set_random_seed_6": {
                "seed": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/QAOA/strict_3reg_n8.py": {
        "tensorflow": {
            "set_random_seed_6": {
                "seed": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/QAOA/strict_ErdosRenyi.py": {
        "tensorflow": {
            "set_random_seed_6": {
                "seed": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/QAOA/strict_ErdosRenyi_n8.py": {
        "tensorflow": {
            "set_random_seed_6": {
                "seed": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/qaoa/gen_circuits.py": {
        "tensorflow": {
            "set_random_seed_85": {
                "seed": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/qaoa/qaoa_hpo.py": {
        "tensorflow": {
            "set_random_seed_15": {
                "seed": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/uccsd/uccsd_block_circuits.py": {
        "tensorflow": {
            "set_random_seed_75": {
                "seed": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/uccsd/uccsd_hpo.py": {
        "tensorflow": {
            "set_random_seed_14": {
                "seed": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/uccsd/uccsd_hpo_blocking.py": {
        "tensorflow": {
            "set_random_seed_14": {
                "seed": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/uccsd/uccsd_lih_slice_hpo_exp.py": {
        "tensorflow": {
            "set_random_seed_17": {
                "seed": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/uccsd/uccsd_lih_slice_hpo_rand.py": {
        "tensorflow": {
            "set_random_seed_22": {
                "seed": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/uccsd/uccsd_lih_slice_qoc_backoff.py": {
        "tensorflow": {
            "set_random_seed_21": {
                "seed": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/uccsd/uccsd_qoc.py": {
        "tensorflow": {
            "set_random_seed_12": {
                "seed": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_180": {
                "seed": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/uccsd/uccsd_time.py": {
        "tensorflow": {
            "set_random_seed_11": {
                "seed": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/uccsd/uccsd_time_blocking.py": {
        "tensorflow": {
            "set_random_seed_11": {
                "seed": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}