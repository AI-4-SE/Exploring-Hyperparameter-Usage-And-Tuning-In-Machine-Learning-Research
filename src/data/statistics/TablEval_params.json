{
    "Code/CellBERT_eval.py": {
        "sklearn": {},
        "tensorflow": {},
        "torch": {
            "device_184": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_197": {
                "variable": {
                    "value": "test_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_input_ids",
                            "Name"
                        ],
                        [
                            "torch.tensor(test_inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_198": {
                "variable": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_modifier(test_set, 'test')",
                            "Call"
                        ],
                        [
                            "torch.tensor(test_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_199": {
                "variable": {
                    "value": "test_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_attention_masks",
                            "Name"
                        ],
                        [
                            "torch.tensor(test_masks)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_202": {
                "variable": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "test_inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_203": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(test_inputs, test_masks, test_labels)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Code/CellBERT_train.py": {
        "sklearn": {},
        "tensorflow": {},
        "torch": {}
    },
    "Code/Subtask B/CellBERT_eval.py": {
        "sklearn": {},
        "tensorflow": {},
        "torch": {
            "device_184": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_197": {
                "variable": {
                    "value": "test_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_input_ids",
                            "Name"
                        ],
                        [
                            "torch.tensor(test_inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_198": {
                "variable": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_modifier(test_set, 'test')",
                            "Call"
                        ],
                        [
                            "torch.tensor(test_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_199": {
                "variable": {
                    "value": "test_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_attention_masks",
                            "Name"
                        ],
                        [
                            "torch.tensor(test_masks)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_202": {
                "variable": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "test_inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_203": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(test_inputs, test_masks, test_labels)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Code/Subtask B/CellBERT_train.py": {
        "sklearn": {},
        "tensorflow": {},
        "torch": {}
    },
    "Code/Tapas/TAPAS/scripts/calc_metrics_utils.py": {
        "sklearn": {},
        "tensorflow": {
            "GFile_209": {
                "name": {
                    "value": "os.path.join(denotation_errors_path, 'structured_examples.tsv')",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_426": {
                "name": {
                    "value": "examples_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(denotation_errors_path, 'denotation_examples_{}'.format(predictions_file_name))",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "Code/run_BERT.py": {
        "sklearn": {
            "f1_score_293": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_ids.detach().cpu().numpy().tolist()",
                            "Call"
                        ],
                        [
                            "label_ids.detach().cpu().numpy().tolist()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(logits, -1) == label_ids",
                            "Compare"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds[0]",
                            "Subscript"
                        ],
                        [
                            "np.argmax(preds, axis=1)",
                            "Call"
                        ],
                        [
                            "np.squeeze(preds)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_456": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_457": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_460": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_480": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_581": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_582": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_583": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_590": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_595": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_703": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_704": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_705": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_712": {
                "variable": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_714": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_715": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_459": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_482": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_538": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BertForSequenceClassification.from_pretrained(load_dir, cache_dir=cache_dir, num_labels=num_labels)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DDP(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_586": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_592": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_594": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_708": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_588": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_710": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_734": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_609": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_729": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_737": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_456": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_612": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_665": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_grad_enabled_670": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_674": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_637": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input_ids, segment_ids, input_mask, labels=None)",
                            "Call"
                        ],
                        [
                            "model(input_ids, segment_ids, input_mask, labels=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_638": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(logits, -1) == label_ids",
                            "Compare"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds[0]",
                            "Subscript"
                        ],
                        [
                            "np.argmax(preds, axis=1)",
                            "Call"
                        ],
                        [
                            "np.squeeze(preds)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Code/run_RoBERTa.py": {
        "sklearn": {
            "f1_score_309": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_ids.detach().cpu().numpy().tolist()",
                            "Call"
                        ],
                        [
                            "label_ids.detach().cpu().numpy().tolist()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(logits, -1) == label_ids",
                            "Compare"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds[0]",
                            "Subscript"
                        ],
                        [
                            "np.argmax(preds, axis=1)",
                            "Call"
                        ],
                        [
                            "np.squeeze(preds)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "device_474": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_475": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_478": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_498": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_599": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_600": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_601": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_608": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_613": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_722": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_723": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_724": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_731": {
                "variable": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_733": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_734": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_477": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_500": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_556": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RobertaForSequenceClassification.from_pretrained(load_dir, num_labels=num_labels)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DDP(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_604": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_610": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_612": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_727": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_606": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_729": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_748": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_474": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_631": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_684": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_grad_enabled_689": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_693": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_656": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[1]",
                            "Subscript"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_657": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(logits, -1) == label_ids",
                            "Compare"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds[0]",
                            "Subscript"
                        ],
                        [
                            "np.argmax(preds, axis=1)",
                            "Call"
                        ],
                        [
                            "np.squeeze(preds)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Code/run_bert_bigru.py": {
        "sklearn": {
            "f1_score_310": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_ids.detach().cpu().numpy().tolist()",
                            "Call"
                        ],
                        [
                            "label_ids.detach().cpu().numpy().tolist()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(logits, -1) == label_ids",
                            "Compare"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds[0]",
                            "Subscript"
                        ],
                        [
                            "np.argmax(preds, axis=1)",
                            "Call"
                        ],
                        [
                            "np.squeeze(preds)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_475": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_476": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_479": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_499": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_702": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_703": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_704": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_711": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_716": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_826": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_827": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_828": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_835": {
                "variable": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_837": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_838": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_478": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_501": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRU_564": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "n_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0 if n_layers < 2 else dropout",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Dropout_570": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_571": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_574": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_575": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_610": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dense(hidden)",
                            "Call"
                        ],
                        [
                            "torch.tanh(output)",
                            "Call"
                        ],
                        [
                            "self.dropout(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_659": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ROBERTAGRUSentiment(roberta, HIDDEN_DIM, OUTPUT_DIM, N_LAYERS, BIDIRECTIONAL, DROPOUT)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DDP(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_707": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_713": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_715": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_831": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_709": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_833": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_593": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_619": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_622": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_852": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_475": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_604": {
                "tensors": {
                    "value": "(hidden[-2, :, :], hidden[-1, :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_788": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_grad_enabled_793": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_797": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_760": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[1]",
                            "Subscript"
                        ],
                        [
                            "self.out_proj(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_761": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(logits, -1) == label_ids",
                            "Compare"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds[0]",
                            "Subscript"
                        ],
                        [
                            "np.argmax(preds, axis=1)",
                            "Call"
                        ],
                        [
                            "np.squeeze(preds)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Code/run_roBERTa__simple_semval.py": {
        "sklearn": {
            "f1_score_308": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_ids.detach().cpu().numpy().tolist()",
                            "Call"
                        ],
                        [
                            "label_ids.detach().cpu().numpy().tolist()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(logits, -1) == label_ids",
                            "Compare"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds[0]",
                            "Subscript"
                        ],
                        [
                            "np.argmax(preds, axis=1)",
                            "Call"
                        ],
                        [
                            "np.squeeze(preds)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_474": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_475": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_478": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_498": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_599": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_600": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_601": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_608": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_613": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_722": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_723": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_724": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_731": {
                "variable": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_733": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_734": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_477": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_500": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_556": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RobertaForSequenceClassification.from_pretrained(load_dir, num_labels=num_labels)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DDP(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_604": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_610": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_612": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_727": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_606": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_729": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_748": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_474": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_631": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_684": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_grad_enabled_689": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_693": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_656": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[1]",
                            "Subscript"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_657": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(logits, -1) == label_ids",
                            "Compare"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds[0]",
                            "Subscript"
                        ],
                        [
                            "np.argmax(preds, axis=1)",
                            "Call"
                        ],
                        [
                            "np.squeeze(preds)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Code/run_roBERTa_linear.py": {
        "sklearn": {
            "f1_score_309": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_ids.detach().cpu().numpy().tolist()",
                            "Call"
                        ],
                        [
                            "label_ids.detach().cpu().numpy().tolist()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(logits, -1) == label_ids",
                            "Compare"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds[0]",
                            "Subscript"
                        ],
                        [
                            "np.argmax(preds, axis=1)",
                            "Call"
                        ],
                        [
                            "np.squeeze(preds)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "device_474": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_475": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_478": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_498": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_710": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_711": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_712": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_719": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_724": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_834": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_835": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_836": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_843": {
                "variable": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_845": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_846": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_477": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_500": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_569": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * 768",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_570": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "linear1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_571": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_572": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_573": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_576": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_577": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_617": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dense(hidden)",
                            "Call"
                        ],
                        [
                            "torch.tanh(output)",
                            "Call"
                        ],
                        [
                            "self.dropout(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_667": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ROBERTAGRUSentiment(roberta, HIDDEN_DIM, OUTPUT_DIM, N_LAYERS, BIDIRECTIONAL, DROPOUT)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DDP(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_715": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_721": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_723": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_839": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_717": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_841": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_595": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_627": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_630": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_860": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_474": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_796": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_grad_enabled_801": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_805": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_768": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[1]",
                            "Subscript"
                        ],
                        [
                            "self.out_proj(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_769": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(logits, -1) == label_ids",
                            "Compare"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds[0]",
                            "Subscript"
                        ],
                        [
                            "np.argmax(preds, axis=1)",
                            "Call"
                        ],
                        [
                            "np.squeeze(preds)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Code/run_roberta_bigru.py": {
        "sklearn": {
            "f1_score_309": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_ids.detach().cpu().numpy().tolist()",
                            "Call"
                        ],
                        [
                            "label_ids.detach().cpu().numpy().tolist()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(logits, -1) == label_ids",
                            "Compare"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds[0]",
                            "Subscript"
                        ],
                        [
                            "np.argmax(preds, axis=1)",
                            "Call"
                        ],
                        [
                            "np.squeeze(preds)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_474": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_475": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_478": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_498": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_702": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_703": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_704": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_711": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_716": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_826": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_827": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_828": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_835": {
                "variable": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_837": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_838": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_477": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_500": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRU_564": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "n_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0 if n_layers < 2 else dropout",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Dropout_570": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_571": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_574": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_575": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_610": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dense(hidden)",
                            "Call"
                        ],
                        [
                            "torch.tanh(output)",
                            "Call"
                        ],
                        [
                            "self.dropout(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_659": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ROBERTAGRUSentiment(roberta, HIDDEN_DIM, OUTPUT_DIM, N_LAYERS, BIDIRECTIONAL, DROPOUT)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DDP(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_707": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_713": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_715": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_831": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_709": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_833": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_593": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_619": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_622": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_852": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_474": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_604": {
                "tensors": {
                    "value": "(hidden[-2, :, :], hidden[-1, :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_788": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_grad_enabled_793": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_797": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_760": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[1]",
                            "Subscript"
                        ],
                        [
                            "self.out_proj(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_761": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(logits, -1) == label_ids",
                            "Compare"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds[0]",
                            "Subscript"
                        ],
                        [
                            "np.argmax(preds, axis=1)",
                            "Call"
                        ],
                        [
                            "np.squeeze(preds)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Code/run_roberta_bilstm.py": {
        "sklearn": {
            "f1_score_309": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_ids.detach().cpu().numpy().tolist()",
                            "Call"
                        ],
                        [
                            "label_ids.detach().cpu().numpy().tolist()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(logits, -1) == label_ids",
                            "Compare"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds[0]",
                            "Subscript"
                        ],
                        [
                            "np.argmax(preds, axis=1)",
                            "Call"
                        ],
                        [
                            "np.squeeze(preds)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "device_474": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_475": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_478": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_498": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_701": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_702": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_703": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_710": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_715": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_825": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_826": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_827": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_834": {
                "variable": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_836": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_837": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_477": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_500": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRU_563": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "n_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0 if n_layers < 2 else dropout",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Dropout_569": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_570": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_573": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_574": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_609": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dense(hidden)",
                            "Call"
                        ],
                        [
                            "torch.tanh(output)",
                            "Call"
                        ],
                        [
                            "self.dropout(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_658": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ROBERTAGRUSentiment(roberta, HIDDEN_DIM, OUTPUT_DIM, N_LAYERS, BIDIRECTIONAL, DROPOUT)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DDP(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_706": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_712": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_714": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_830": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_708": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_832": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_592": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_618": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_621": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_851": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_474": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_603": {
                "tensors": {
                    "value": "(hidden[-2, :, :], hidden[-1, :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_787": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_grad_enabled_792": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_796": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_759": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[1]",
                            "Subscript"
                        ],
                        [
                            "self.out_proj(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_760": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(logits, -1) == label_ids",
                            "Compare"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds[0]",
                            "Subscript"
                        ],
                        [
                            "np.argmax(preds, axis=1)",
                            "Call"
                        ],
                        [
                            "np.squeeze(preds)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Code/run_roberta_simple.py": {
        "sklearn": {
            "f1_score_296": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_ids.detach().cpu().numpy().tolist()",
                            "Call"
                        ],
                        [
                            "label_ids.detach().cpu().numpy().tolist()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(logits, -1) == label_ids",
                            "Compare"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds[0]",
                            "Subscript"
                        ],
                        [
                            "np.argmax(preds, axis=1)",
                            "Call"
                        ],
                        [
                            "np.squeeze(preds)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {},
        "torch": {
            "device_459": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_460": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_463": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_483": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_583": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_584": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_585": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_592": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_597": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_707": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_708": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_709": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_716": {
                "variable": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_718": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_719": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_462": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_485": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_540": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BertForPreTraining.from_pretrained(load_dir, cache_dir=cache_dir, num_labels=num_labels, output_attentions=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DDP(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_588": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_594": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_596": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_712": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_590": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_714": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_742": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_613": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_734": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_745": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_459": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_616": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_669": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_grad_enabled_674": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_678": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_641": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputm.seq_relationship_logits",
                            "Attribute"
                        ],
                        [
                            "k.seq_relationship_logits",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sum_642": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(logits, -1) == label_ids",
                            "Compare"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds[0]",
                            "Subscript"
                        ],
                        [
                            "np.argmax(preds, axis=1)",
                            "Call"
                        ],
                        [
                            "np.squeeze(preds)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Code/run_scibert.py": {
        "sklearn": {
            "f1_score_310": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_ids.detach().cpu().numpy().tolist()",
                            "Call"
                        ],
                        [
                            "label_ids.detach().cpu().numpy().tolist()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(logits, -1) == label_ids",
                            "Compare"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds[0]",
                            "Subscript"
                        ],
                        [
                            "np.argmax(preds, axis=1)",
                            "Call"
                        ],
                        [
                            "np.squeeze(preds)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "device_475": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_476": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_479": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_499": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_600": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_601": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_602": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_609": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_614": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_723": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_724": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_725": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_732": {
                "variable": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_734": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_735": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_478": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_501": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_557": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AutoModel.from_pretrained('allenai/scibert_scivocab_uncased')",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DDP(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_605": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_611": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_613": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_728": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_607": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_730": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_749": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_475": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_632": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_685": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_grad_enabled_690": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_694": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_657": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[1]",
                            "Subscript"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_658": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(logits, -1) == label_ids",
                            "Compare"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds[0]",
                            "Subscript"
                        ],
                        [
                            "np.argmax(preds, axis=1)",
                            "Call"
                        ],
                        [
                            "np.squeeze(preds)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Code/run_scibert_semeval.py": {
        "sklearn": {
            "f1_score_310": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_ids.detach().cpu().numpy().tolist()",
                            "Call"
                        ],
                        [
                            "label_ids.detach().cpu().numpy().tolist()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(logits, -1) == label_ids",
                            "Compare"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds[0]",
                            "Subscript"
                        ],
                        [
                            "np.argmax(preds, axis=1)",
                            "Call"
                        ],
                        [
                            "np.squeeze(preds)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_475": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_476": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_479": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_499": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_702": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_703": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_704": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_711": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_716": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_826": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_827": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_828": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_835": {
                "variable": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_837": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_838": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_478": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_501": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRU_564": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "n_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0 if n_layers < 2 else dropout",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Dropout_570": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_571": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_574": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_575": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_610": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dense(hidden)",
                            "Call"
                        ],
                        [
                            "torch.tanh(output)",
                            "Call"
                        ],
                        [
                            "self.dropout(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_659": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ROBERTAGRUSentiment(roberta, HIDDEN_DIM, OUTPUT_DIM, N_LAYERS, BIDIRECTIONAL, DROPOUT)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DDP(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_707": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_713": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_715": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_831": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_709": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_833": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_593": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_619": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_622": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_852": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_475": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_604": {
                "tensors": {
                    "value": "(hidden[-2, :, :], hidden[-1, :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_788": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_grad_enabled_793": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_797": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_760": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[1]",
                            "Subscript"
                        ],
                        [
                            "self.out_proj(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_761": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(logits, -1) == label_ids",
                            "Compare"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds[0]",
                            "Subscript"
                        ],
                        [
                            "np.argmax(preds, axis=1)",
                            "Call"
                        ],
                        [
                            "np.squeeze(preds)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Code/Tapas/TAPAS/datasets/dataset.py": {
        "tensorflow": {
            "parse_single_example_84": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_examples",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "feature_types",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_36": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(features.keys())",
                            "Call"
                        ]
                    ]
                }
            },
            "parallel_interleave_57": {
                "map_func": {
                    "value": "fetch_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "sloppy": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "cycle_length": {
                    "value": "cycle_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.get('cycle_length', 64)",
                            "Call"
                        ]
                    ]
                }
            },
            "map_and_batch_69": {
                "map_func": {
                    "value": "parse_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parse_examples_fn",
                            "Name"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "num_parallel_calls": {
                    "value": "tf.data.experimental.AUTOTUNE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_remainder": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_90": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features[name]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(t, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordDataset_49": {
                "filenames": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                },
                "buffer_size": {
                    "value": "buffer_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8 * 1024 * 1024",
                            "BinOp"
                        ]
                    ]
                },
                "compression_type": {
                    "value": "compression_type",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "Code/Tapas/TAPAS/datasets/dataset_test.py": {
        "tensorflow": {
            "disable_v2_behavior_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Example_30": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "make_one_shot_iterator_113": {
                "variable": {
                    "value": "feature_tuple",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.read_dataset(parse_fn, 'dataset', patterns, data_format, compression_type='', is_training=is_training, params=params)",
                            "Call"
                        ],
                        [
                            "dataset.read_dataset(parse_fn, 'dataset', file_patterns=[self._file1], data_format=data_format, compression_type='', is_training=True, params=params)",
                            "Call"
                        ]
                    ]
                }
            },
            "make_one_shot_iterator_149": {
                "variable": {
                    "value": "feature_tuple",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.read_dataset(parse_fn, 'dataset', patterns, data_format, compression_type='', is_training=is_training, params=params)",
                            "Call"
                        ],
                        [
                            "dataset.read_dataset(parse_fn, 'dataset', file_patterns=[self._file1], data_format=data_format, compression_type='', is_training=True, params=params)",
                            "Call"
                        ]
                    ]
                }
            },
            "main_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Features_30": {
                "feature": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TFRecordWriter_32": {
                "path": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "FixedLenFeature_94": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_95": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_136": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Feature_81": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[b'one'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_83": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_88": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[b'two'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_90": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_133": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BytesList_81": {
                "value": {
                    "value": "[b'one']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_83": {
                "value": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_88": {
                "value": {
                    "value": "[b'two']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_90": {
                "value": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_133": {
                "value": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "Code/Tapas/TAPAS/datasets/table_dataset.py": {
        "tensorflow": {
            "row_splits_to_segment_ids_150": {
                "variable": {
                    "value": "candidate_id",
                    "type": "variable",
                    "possible_values": []
                },
                "splits": {
                    "value": "ragged_indices.row_splits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_151": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[candidate_id, ragged_indices.flat_values]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_152": {
                "variable": {
                    "value": "updates",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "candidate_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ragged.row_splits_to_segment_ids(ragged_indices.row_splits)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scatter_nd_153": {
                "variable": {
                    "value": "features[can_label_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([candidate_id, ragged_indices.flat_values], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "updates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(candidate_id, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[max_num_candidates, max_seq_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FixedLenFeature_47": {
                "shape": {
                    "value": "[max_seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_49": {
                "shape": {
                    "value": "[max_seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_51": {
                "shape": {
                    "value": "[max_seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_53": {
                "shape": {
                    "value": "[max_seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_55": {
                "shape": {
                    "value": "[max_seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_57": {
                "shape": {
                    "value": "[max_seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "[0] * max_seq_length",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "FixedLenFeature_61": {
                "shape": {
                    "value": "[max_seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_63": {
                "shape": {
                    "value": "[max_seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_65": {
                "shape": {
                    "value": "[max_seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "[0] * max_seq_length",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "FixedLenFeature_72": {
                "shape": {
                    "value": "[max_predictions_per_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_74": {
                "shape": {
                    "value": "[max_predictions_per_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_76": {
                "shape": {
                    "value": "[max_predictions_per_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_78": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_118": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_120": {
                "shape": {
                    "value": "[max_num_candidates]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_122": {
                "shape": {
                    "value": "[max_num_candidates]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_124": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_129": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_83": {
                "shape": {
                    "value": "[max_seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_88": {
                "shape": {
                    "value": "[text_utils.DEFAULT_INTS_LENGTH]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "[0] * text_utils.DEFAULT_INTS_LENGTH",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "FixedLenFeature_96": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_100": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_106": {
                "shape": {
                    "value": "[max_seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_108": {
                "shape": {
                    "value": "[max_seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_110": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Code/Tapas/TAPAS/datasets/table_dataset_test.py": {
        "tensorflow": {
            "disable_v2_behavior_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Code/Tapas/TAPAS/datasets/table_dataset_test_utils.py": {
        "tensorflow": {
            "Example_40": {
                "features": {
                    "value": "tf.train.Features(feature=features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_31": {
                "variable": {
                    "value": "features[item]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "float_list": {
                    "value": "tf.train.FloatList(value=values.ravel())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_34": {
                "variable": {
                    "value": "features[item]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "int64_list": {
                    "value": "tf.train.Int64List(value=values.ravel())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_37": {
                "variable": {
                    "value": "features[item]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[tf.compat.as_bytes(t) for t in values])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Features_40": {
                "feature": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "FloatList_32": {
                "value": {
                    "value": "values.ravel()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_35": {
                "value": {
                    "value": "values.ravel()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BytesList_38": {
                "value": {
                    "value": "[tf.compat.as_bytes(t) for t in values]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "as_bytes_39": {
                "bytes_or_text": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "Code/Tapas/TAPAS/experiments/prediction_utils.py": {
        "tensorflow": {
            "Session_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GFile_373": {
                "name": {
                    "value": "output_predict_file",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "Code/Tapas/TAPAS/experiments/prediction_utils_test.py": {
        "tensorflow": {
            "TPUEstimator_130": {
                "variable": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": []
                },
                "use_tpu": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tapas_classifier_model.model_fn_builder(tapas_config)",
                            "Call"
                        ]
                    ]
                },
                "config": {
                    "value": "tf.estimator.tpu.RunConfig(model_dir=self.get_temp_dir())",
                    "type": "Call",
                    "possible_values": []
                },
                "train_batch_size": {
                    "value": "_BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "predict_batch_size": {
                    "value": "_BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "eval_batch_size": {
                    "value": "_BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                }
            },
            "RunConfig_133": {
                "model_dir": {
                    "value": "self.get_temp_dir()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Code/Tapas/TAPAS/experiments/tapas_classifier_experiment.py": {
        "tensorflow": {
            "info_255": {
                "msg": {
                    "value": "Running predictor for step %d (%s).",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "current_step",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "makedirs_354": {
                "path": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_394": {
                "msg": {
                    "value": "Running eval: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "eval_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.eval_name if FLAGS.eval_name is not None else 'default'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "info_400": {
                "msg": {
                    "value": "Eval result:\\n%s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "estimator.predict(input_fn=input_fn, checkpoint_path=checkpoint)",
                            "Call"
                        ],
                        [
                            "estimator.evaluate(input_fn=eval_input_fn, steps=FLAGS.num_eval_steps, name=eval_name, checkpoint_path=checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "makedirs_419": {
                "path": {
                    "value": "prediction_output_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.prediction_output_dir",
                            "Attribute"
                        ],
                        [
                            "estimator.model_dir",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "Code/Tapas/TAPAS/experiments/tapas_pretraining_experiment.py": {
        "tensorflow": {
            "makedirs_98": {
                "path": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_133": {
                "msg": {
                    "value": "Running eval: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.eval_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_138": {
                "msg": {
                    "value": "Eval result:\\n%s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "estimator.evaluate(input_fn=eval_input_fn, steps=FLAGS.num_eval_steps, name=FLAGS.eval_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_129": {
                "msg": {
                    "value": "Sleeping 5 mins before evaluation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_142": {
                "msg": {
                    "value": "Evaluation finished after training step %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "current_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "int(os.path.basename(checkpoint).split('-')[1])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Code/Tapas/TAPAS/models/bert/modeling.py": {
        "tensorflow": {
            "list_variables_365": {
                "variable": {
                    "value": "init_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dropout_394": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_433": {
                "variable": {
                    "value": "embedding_table",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "word_embedding_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'word_embeddings'",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[vocab_size, embedding_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_439": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding_table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=word_embedding_name, shape=[vocab_size, embedding_size], initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_440": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(input_tensor, rate=dropout_prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(embedding_table, input_ids)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, input_shape + [embedding_size])",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "Name"
                        ],
                        [
                            "output + position_embeddings",
                            "BinOp"
                        ],
                        [
                            "layer_norm_and_dropout(output, dropout_prob)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(self.__dict__)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_shape + [embedding_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "slice_456": {
                "variable": {
                    "value": "position_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "full_position_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=position_embedding_name, shape=[max_position_embeddings, width], initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[seq_length, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_466": {
                "variable": {
                    "value": "position_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "position_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(full_position_embeddings, [0, 0], [seq_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(position_embeddings, position_broadcast_shape)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(full_position_embeddings, tf.math.minimum(max_position_embeddings - 1, position - first_position))",
                            "Call"
                        ],
                        [
                            "_get_relative_position_embeddings(full_position_embeddings, token_type_ids, token_type_vocab_size, seq_length, batch_size, max_position_embeddings)",
                            "Call"
                        ],
                        [
                            "_get_absolute_position_embeddings(full_position_embeddings, seq_length=seq_length, width=width, num_dims=num_dims)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "position_broadcast_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "expand_dims_485": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.range(seq_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "repeat_487": {
                "variable": {
                    "value": "batched_position",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.range(seq_length), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape[0]",
                            "Subscript"
                        ],
                        [
                            "from_shape[0]",
                            "Subscript"
                        ],
                        [
                            "from_shape[0]",
                            "Subscript"
                        ],
                        [
                            "input_shape[0]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_lookup_494": {
                "variable": {
                    "value": "position_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "full_position_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=position_embedding_name, shape=[max_position_embeddings, width], initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "tf.math.minimum(max_position_embeddings - 1, position - first_position)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_632": {
                "variable": {
                    "value": "to_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(to_mask, [batch_size, 1, to_seq_length])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_640": {
                "variable": {
                    "value": "broadcast_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, from_seq_length, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_723": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "BFNH,NHD->BFD",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='kernel', shape=[last_dim, num_attention_heads * size_per_head], initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [last_dim, num_attention_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='kernel', shape=[hidden_size, hidden_size], initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [num_attention_heads, head_size, hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='kernel', shape=[last_dim, output_size], initializer=initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_755": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "abc,cd->abd",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='kernel', shape=[last_dim, num_attention_heads * size_per_head], initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [last_dim, num_attention_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='kernel', shape=[hidden_size, hidden_size], initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [num_attention_heads, head_size, hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='kernel', shape=[last_dim, output_size], initializer=initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_879": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "BFNH,BTNH->BNFT",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "query_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dense_layer_3d(from_tensor, num_attention_heads, size_per_head, create_initializer(initializer_range), query_act, 'query')",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "key_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dense_layer_3d(to_tensor, num_attention_heads, size_per_head, create_initializer(initializer_range), key_act, 'key')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "query_key_einsum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_883": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.einsum('BFNH,BTNH->BNFT', query_layer, key_layer, name='query_key_einsum')",
                            "Call"
                        ],
                        [
                            "attention_scores / softmax_temperature",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(attention_scores, 1.0 / math.sqrt(float(size_per_head)))",
                            "Call"
                        ],
                        [
                            "attention_scores + adder",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0 / math.sqrt(float(size_per_head))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_907": {
                "variable": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.einsum('BFNH,BTNH->BNFT', query_layer, key_layer, name='query_key_einsum')",
                            "Call"
                        ],
                        [
                            "attention_scores / softmax_temperature",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(attention_scores, 1.0 / math.sqrt(float(size_per_head)))",
                            "Call"
                        ],
                        [
                            "attention_scores + adder",
                            "BinOp"
                        ]
                    ]
                }
            },
            "einsum_914": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "BNFT,BTNH->BFNH",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "attention_probs_do",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout(attention_probs, attention_probs_dropout_prob)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dense_layer_3d(to_tensor, num_attention_heads, size_per_head, create_initializer(initializer_range), value_act, 'value')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "attention_value_einsum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_1080": {
                "variable": {
                    "value": "dyn_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_1096": {
                "variable": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_413": {
                "stddev": {
                    "value": "initializer_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "flatten_558": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nest.flatten(token_type_ids)",
                            "Call"
                        ],
                        [
                            "tf.zeros(shape=[batch_size, seq_length], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "flatten_559": {
                "variable": {
                    "value": "token_type_vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "token_type_vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nest.flatten(token_type_vocab_size)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_577": {
                "variable": {
                    "value": "full_position_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "position_embedding_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'position_embeddings'",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[max_position_embeddings, width]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_603": {
                "variable": {
                    "value": "flat_extra_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "extra_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * seq_length, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_605": {
                "variable": {
                    "value": "flat_extra_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "flat_extra_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(extra_embeddings, [batch_size * seq_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_extra_embeddings, width, kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape[2]",
                            "Subscript"
                        ],
                        [
                            "input_tensor.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "output_shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_673": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[last_dim, num_attention_heads * size_per_head]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_677": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='kernel', shape=[last_dim, num_attention_heads * size_per_head], initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [last_dim, num_attention_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='kernel', shape=[hidden_size, hidden_size], initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [num_attention_heads, head_size, hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='kernel', shape=[last_dim, output_size], initializer=initializer)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[last_dim, num_attention_heads, size_per_head]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_678": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_attention_heads * size_per_head]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_682": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='bias', shape=[num_attention_heads * size_per_head], initializer=tf.zeros_initializer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [num_attention_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='bias', shape=[hidden_size], initializer=tf.zeros_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='bias', shape=[output_size], initializer=tf.zeros_initializer)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_attention_heads, size_per_head]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_683": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "abc,cde->abde",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='kernel', shape=[last_dim, num_attention_heads * size_per_head], initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [last_dim, num_attention_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='kernel', shape=[hidden_size, hidden_size], initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [num_attention_heads, head_size, hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='kernel', shape=[last_dim, output_size], initializer=initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_715": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_size, hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_719": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='kernel', shape=[last_dim, num_attention_heads * size_per_head], initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [last_dim, num_attention_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='kernel', shape=[hidden_size, hidden_size], initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [num_attention_heads, head_size, hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='kernel', shape=[last_dim, output_size], initializer=initializer)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_attention_heads, head_size, hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_720": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_750": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[last_dim, output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_752": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_890": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(attention_mask, shape=[batch_size, -1, from_seq_length, to_seq_length])",
                            "Call"
                        ],
                        [
                            "create_attention_mask_from_input_mask(input_ids, input_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1, from_seq_length, to_seq_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_896": {
                "variable": {
                    "value": "adder",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(attention_mask, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_897": {
                "variable": {
                    "value": "adder",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.is_finite(adder)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "adder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.log(tf.cast(attention_mask, tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.is_finite(adder), adder, tf.zeros_like(adder, dtype=tf.float32) - 10000.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros_like(adder, dtype=tf.float32) - 10000.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_1110": {
                "tensor": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_norm(input_tensor, name)",
                            "Call"
                        ],
                        [
                            "dropout(output_tensor, dropout_prob)",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [-1, width])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "orig_dims + [width]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_191": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_196": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_496": {
                "x": {
                    "value": "max_position_embeddings - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "position - first_position",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assert_same_structure_557": {
                "nest1": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nest.flatten(token_type_ids)",
                            "Call"
                        ],
                        [
                            "tf.zeros(shape=[batch_size, seq_length], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "nest2": {
                    "value": "token_type_vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nest.flatten(token_type_vocab_size)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_563": {
                "variable": {
                    "value": "token_type_table",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'%s_%d' % (token_type_embedding_name, i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[type_vocab_size, width]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_569": {
                "variable": {
                    "value": "flat_token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_570": {
                "variable": {
                    "value": "one_hot_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "flat_token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(type_ids, [-1])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "type_vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_571": {
                "variable": {
                    "value": "token_type_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "one_hot_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(flat_token_type_ids, depth=type_vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "token_type_table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='%s_%d' % (token_type_embedding_name, i), shape=[type_vocab_size, width], initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_572": {
                "variable": {
                    "value": "token_type_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "token_type_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(one_hot_ids, token_type_table)",
                            "Call"
                        ],
                        [
                            "tf.reshape(token_type_embeddings, [batch_size, seq_length, width])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, seq_length, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assert_less_equal_582": {
                "variable": {
                    "value": "assert_op",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape[1]",
                            "Subscript"
                        ],
                        [
                            "input_shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "max_position_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_609": {
                "tensor": {
                    "value": "flat_extra_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(extra_embeddings, [batch_size * seq_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_extra_embeddings, width, kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, seq_length, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_633": {
                "tensor": {
                    "value": "to_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(to_mask, [batch_size, 1, to_seq_length]), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 1, to_seq_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_672": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var.name",
                            "Attribute"
                        ],
                        [
                            "m.group(1)",
                            "Call"
                        ],
                        [
                            "f'{scope}/{short_name}' if scope else short_name",
                            "IfExp"
                        ],
                        [
                            "tensor.name",
                            "Attribute"
                        ],
                        [
                            "tensor.name",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_714": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var.name",
                            "Attribute"
                        ],
                        [
                            "m.group(1)",
                            "Call"
                        ],
                        [
                            "f'{scope}/{short_name}' if scope else short_name",
                            "IfExp"
                        ],
                        [
                            "tensor.name",
                            "Attribute"
                        ],
                        [
                            "tensor.name",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_749": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var.name",
                            "Attribute"
                        ],
                        [
                            "m.group(1)",
                            "Call"
                        ],
                        [
                            "f'{scope}/{short_name}' if scope else short_name",
                            "IfExp"
                        ],
                        [
                            "tensor.name",
                            "Attribute"
                        ],
                        [
                            "tensor.name",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GFile_96": {
                "name": {
                    "value": "json_file",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_111": {
                "name": {
                    "value": "json_file",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_198": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "bert",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_259": {
                "variable": {
                    "value": "first_token_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sequence_output[:, 0:1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_260": {
                "variable": {
                    "value": "self.pooled_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "first_token_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(self.sequence_output[:, 0:1, :], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "create_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_310": {
                "x": {
                    "value": "np.sqrt(2 / np.pi) * (x + 0.044715 * tf.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_896": {
                "x": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(attention_mask, shape=[batch_size, -1, from_seq_length, to_seq_length])",
                            "Call"
                        ],
                        [
                            "create_attention_mask_from_input_mask(input_ids, input_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_finite_898": {
                "x": {
                    "value": "adder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.log(tf.cast(attention_mask, tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.is_finite(adder), adder, tf.zeros_like(adder, dtype=tf.float32) - 10000.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_998": {
                "name_or_scope": {
                    "value": "'layer_%d' % layer_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_scope_1136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_193": {
                "x": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones(shape=[batch_size, seq_length], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "token_weights * tf.cast(input_mask, dtype=tf.float32)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_199": {
                "name_or_scope": {
                    "value": "embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_224": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_256": {
                "name_or_scope": {
                    "value": "pooler",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_583": {
                "control_inputs": {
                    "value": "[assert_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_899": {
                "input": {
                    "value": "adder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.log(tf.cast(attention_mask, tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.is_finite(adder), adder, tf.zeros_like(adder, dtype=tf.float32) - 10000.0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_1001": {
                "name_or_scope": {
                    "value": "attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1025": {
                "name_or_scope": {
                    "value": "intermediate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1031": {
                "name_or_scope": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1002": {
                "name_or_scope": {
                    "value": "self",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1016": {
                "name_or_scope": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pow_311": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_vars",
                            "Name"
                        ],
                        [
                            "expected_rank",
                            "Name"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Code/Tapas/TAPAS/models/bert/modeling_test.py": {
        "tensorflow": {
            "disable_v2_behavior_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_281": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_142": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_164": {
                "value": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stack.pop()",
                            "Call"
                        ],
                        [
                            "all_names",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "global_variables_initializer_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Code/Tapas/TAPAS/models/bert/optimization.py": {
        "tensorflow": {
            "get_or_create_global_step_34": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_36": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "init_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "polynomial_decay_39": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(value=init_lr, shape=[], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.train.polynomial_decay(learning_rate, global_step, num_train_steps, end_learning_rate=0.0, power=poly_power, cycle=False)",
                            "Call"
                        ],
                        [
                            "(1.0 - is_warmup) * learning_rate + is_warmup * warmup_learning_rate",
                            "BinOp"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "num_train_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "end_learning_rate": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "power": {
                    "value": "poly_power",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "cycle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "trainable_variables_98": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_99": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_102": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, tvars)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_53": {
                "variable": {
                    "value": "global_steps_int",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_54": {
                "variable": {
                    "value": "start_warm_int",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "start_warmup_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_56": {
                "variable": {
                    "value": "warmup_steps_int",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "num_warmup_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_58": {
                "variable": {
                    "value": "global_steps_float",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_steps_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(global_step, tf.int32)",
                            "Call"
                        ],
                        [
                            "global_steps_int - start_warm_int",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_59": {
                "variable": {
                    "value": "warmup_steps_float",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "warmup_steps_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(num_warmup_steps, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_64": {
                "variable": {
                    "value": "is_warmup",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_steps_int < warmup_steps_int",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossShardOptimizer_96": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "opt": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AdamWeightDecayOptimizer(learning_rate=learning_rate, weight_decay_rate=0.01, beta_1=0.9, beta_2=0.999, epsilon=1e-06, exclude_from_weight_decay=['LayerNorm', 'layer_norm', 'bias'], grad_clipping=grad_clipping)",
                            "Call"
                        ],
                        [
                            "GradientAccumulationOptimizer(optimizer, steps=-gradient_accumulation_steps, grad_clipping=grad_clipping)",
                            "Call"
                        ],
                        [
                            "tf.tpu.CrossShardOptimizer(optimizer)",
                            "Call"
                        ],
                        [
                            "'adamw'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_129": {
                "variable": {
                    "value": "counter",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "counter",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_51": {
                "msg": {
                    "value": "++++++ warmup starts at step  + str(start_warmup_step) + , for  + str(num_warmup_steps) +  steps ++++++",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_76": {
                "msg": {
                    "value": "using adamw",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_144": {
                "variable": {
                    "value": "accum",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "param_name + '/accum'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "param.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_213": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "param_name + '/adam_m'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "param.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_219": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "param_name + '/adam_v'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "param.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_253": {
                "*inputs": {
                    "value": "global_step.assign(global_step + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "*assignments",
                    "type": "Starred",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'AdamWeightDecayOptimizer'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_139": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(grad, -grad_clipping, grad_clipping)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(grad, -1 * self.grad_clipping, self.grad_clipping)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-grad_clipping",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "grad_clipping",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._steps * self._grad_clipping",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "IndexedSlices_151": {
                "variable": {
                    "value": "scaled_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "grad.values / self._steps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "indices": {
                    "value": "grad.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "grad.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_167": {
                "*inputs": {
                    "value": "zero_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.assign(accum, tf.zeros_like(accum)) for accum in accums + [counter]]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "group_170": {
                "*inputs": {
                    "value": "accums",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "control_dependencies_173": {
                "control_inputs": {
                    "value": "[counter.assign_add(1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_174": {
                "pred": {
                    "value": "tf.equal(tf.mod(counter, self._steps), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "_apply_and_zero",
                    "type": "variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "_accum",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_by_value_208": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(grad, -grad_clipping, grad_clipping)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(grad, -1 * self.grad_clipping, self.grad_clipping)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1 * self.grad_clipping",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.grad_clipping",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_162": {
                "control_inputs": {
                    "value": "[apply_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_175": {
                "x": {
                    "value": "tf.mod(counter, self._steps)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_228": {
                "x": {
                    "value": "1.0 - self.beta_1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(grad, -grad_clipping, grad_clipping)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(grad, -1 * self.grad_clipping, self.grad_clipping)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_230": {
                "x": {
                    "value": "1.0 - self.beta_2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.square(grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_initializer_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_164": {
                "ref": {
                    "value": "accum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=param_name + '/accum', shape=param.shape.as_list(), dtype=tf.float32, trainable=False, initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.zeros_like(accum)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mod_175": {
                "x1": {
                    "value": "counter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(shape=[], initializer=tf.zeros_initializer, name='counter')",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "self._steps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_initializer_218": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_231": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(grad, -grad_clipping, grad_clipping)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(grad, -1 * self.grad_clipping, self.grad_clipping)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_233": {
                "x": {
                    "value": "next_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(self.beta_2, v) + tf.multiply(1.0 - self.beta_2, tf.square(grad))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_164": {
                "input": {
                    "value": "accum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=param_name + '/accum', shape=param.shape.as_list(), dtype=tf.float32, trainable=False, initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Code/Tapas/TAPAS/models/bert/optimization_test.py": {
        "tensorflow": {
            "disable_v2_behavior_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_28": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer([0.1, -0.2, -0.1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.4, 0.2, -0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_33": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(x - w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_34": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_35": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.square(x - w))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.square(x - w))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_or_create_global_step_36": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_39": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_49": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer([0.1, -0.2, -0.1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_53": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.4, 0.2, -0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_54": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(x - w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_55": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_56": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.square(x - w))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.square(x - w))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_or_create_global_step_57": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_63": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_33": {
                "x": {
                    "value": "x - w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_54": {
                "x": {
                    "value": "x - w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_31": {
                "value": {
                    "value": "[0.1, -0.2, -0.1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_initializer_52": {
                "value": {
                    "value": "[0.1, -0.2, -0.1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "Code/Tapas/TAPAS/models/bert/table_bert.py": {
        "tensorflow": {
            "zeros_like_43": {
                "input": {
                    "value": "features[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "Code/Tapas/TAPAS/models/segmented_tensor.py": {
        "tensorflow": {
            "convert_to_tensor_73": {
                "variable": {
                    "value": "self.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "offset + index.indices",
                            "BinOp"
                        ],
                        [
                            "tf.range(num_segments)",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, shape)",
                            "Call"
                        ],
                        [
                            "tf.tile(indices, multiples)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_74": {
                "variable": {
                    "value": "self.num_segments",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "num_segments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(num_segments)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_142": {
                "params": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "index.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_dims": {
                    "value": "index.batch_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'segmented_gather'",
                            "MethodArgument"
                        ],
                        [
                            "'segmented_flatten'",
                            "MethodArgument"
                        ],
                        [
                            "'range_index_map'",
                            "MethodArgument"
                        ],
                        [
                            "'segmented_reduce_mean'",
                            "MethodArgument"
                        ],
                        [
                            "'segmented_reduce_sum'",
                            "MethodArgument"
                        ],
                        [
                            "'segmented_reduce_max'",
                            "MethodArgument"
                        ],
                        [
                            "'segmented_reduce_min'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_prod_162": {
                "variable": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "index.batch_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_164": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(batch_size) * index.num_segments",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(offset, index.batch_shape())",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(offset, -1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "index.batch_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_178": {
                "variable": {
                    "value": "batch_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "batch_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(batch_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_180": {
                "variable": {
                    "value": "num_segments",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "num_segments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(num_segments)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_184": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.ones_like(batch_shape, dtype=tf.int32), tf.expand_dims(num_segments, axis=0)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_189": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "offset + index.indices",
                            "BinOp"
                        ],
                        [
                            "tf.range(num_segments)",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, shape)",
                            "Call"
                        ],
                        [
                            "tf.tile(indices, multiples)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.ones_like(batch_shape, dtype=tf.int32), tf.expand_dims(num_segments, axis=0)], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_190": {
                "variable": {
                    "value": "multiples",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_shape, [1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_191": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "offset + index.indices",
                            "BinOp"
                        ],
                        [
                            "tf.range(num_segments)",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, shape)",
                            "Call"
                        ],
                        [
                            "tf.tile(indices, multiples)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "multiples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([batch_shape, [1]], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_206": {
                "variable": {
                    "value": "flattened_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[-1], vector_shape]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_207": {
                "variable": {
                    "value": "flat_values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "flattened_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([[-1], vector_shape], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_214": {
                "variable": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[index.batch_shape(), [index.num_segments], vector_shape]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_216": {
                "variable": {
                    "value": "output_values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "segment_means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "segment_reduce_fn(data=flat_values, segment_ids=flat_index.indices, num_segments=flat_index.num_segments)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([index.batch_shape(), [index.num_segments], vector_shape], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_161": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'segmented_gather'",
                            "MethodArgument"
                        ],
                        [
                            "'segmented_flatten'",
                            "MethodArgument"
                        ],
                        [
                            "'range_index_map'",
                            "MethodArgument"
                        ],
                        [
                            "'segmented_reduce_mean'",
                            "MethodArgument"
                        ],
                        [
                            "'segmented_reduce_sum'",
                            "MethodArgument"
                        ],
                        [
                            "'segmented_reduce_max'",
                            "MethodArgument"
                        ],
                        [
                            "'segmented_reduce_min'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "expand_dims_166": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(batch_size) * index.num_segments",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(offset, index.batch_shape())",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(offset, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_177": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'segmented_gather'",
                            "MethodArgument"
                        ],
                        [
                            "'segmented_flatten'",
                            "MethodArgument"
                        ],
                        [
                            "'range_index_map'",
                            "MethodArgument"
                        ],
                        [
                            "'segmented_reduce_mean'",
                            "MethodArgument"
                        ],
                        [
                            "'segmented_reduce_sum'",
                            "MethodArgument"
                        ],
                        [
                            "'segmented_reduce_max'",
                            "MethodArgument"
                        ],
                        [
                            "'segmented_reduce_min'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_200": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'segmented_gather'",
                            "MethodArgument"
                        ],
                        [
                            "'segmented_flatten'",
                            "MethodArgument"
                        ],
                        [
                            "'range_index_map'",
                            "MethodArgument"
                        ],
                        [
                            "'segmented_reduce_mean'",
                            "MethodArgument"
                        ],
                        [
                            "'segmented_reduce_sum'",
                            "MethodArgument"
                        ],
                        [
                            "'segmented_reduce_max'",
                            "MethodArgument"
                        ],
                        [
                            "'segmented_reduce_min'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_78": {
                "input": {
                    "value": "self.indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_163": {},
            "shape_205": {
                "input": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "floor_div_115": {
                "x": {
                    "value": "index.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.inner_index.num_segments",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "floormod_122": {
                "x": {
                    "value": "index.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.inner_index.num_segments",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_170": {
                "tensor": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "offset + index.indices",
                            "BinOp"
                        ],
                        [
                            "tf.range(num_segments)",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, shape)",
                            "Call"
                        ],
                        [
                            "tf.tile(indices, multiples)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_185": {
                "input": {
                    "value": "batch_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(batch_shape)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_186": {
                "input": {
                    "value": "num_segments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(num_segments)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Code/Tapas/TAPAS/models/segmented_tensor_test.py": {
        "tensorflow": {
            "disable_v2_behavior_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_44": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[1.0, 2.0, 3.0], [2.0, 0.0, 1.0], [1.0, 3.0, 4.0]], [[1.0, 2.0, 3.0], [2.0, 0.0, 1.0], [1.0, 3.0, 4.0]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fill_109": {
                "dims": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[3, 4, 5]",
                            "List"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.constant(0, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_109": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Code/Tapas/TAPAS/models/tapas_classifier_model.py": {
        "tensorflow": {
            "matmul_193": {
                "variable": {
                    "value": "logits_aggregation",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output_layer_aggregation",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "output_weights_agg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('output_weights_agg', shape=[config.num_aggregation_labels, hidden_size_agg], initializer=_classification_initializer())",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bias_add_195": {
                "variable": {
                    "value": "logits_aggregation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "logits_aggregation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(output_layer_aggregation, output_weights_agg, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits_aggregation, output_bias_agg)",
                            "Call"
                        ],
                        [
                            "_calculate_aggregation_logits(output_layer_aggregation, output_weights_agg, output_bias_agg)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "_calculate_aggregation_logits(output_layer_aggregation, output_weights_agg, output_bias_agg)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "output_bias_agg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('output_bias_agg', shape=[config.num_aggregation_labels], initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_226": {
                "variable": {
                    "value": "one_hot_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "target_aggregation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_like(aggregate_mask, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "aggregation_function_id",
                            "Name"
                        ]
                    ]
                },
                "depth": {
                    "value": "config.num_aggregation_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_228": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_aggregation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(output_layer_aggregation, output_weights_agg, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits_aggregation, output_bias_agg)",
                            "Call"
                        ],
                        [
                            "_calculate_aggregation_logits(output_layer_aggregation, output_weights_agg, output_bias_agg)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "_calculate_aggregation_logits(output_layer_aggregation, output_weights_agg, output_bias_agg)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_244": {
                "variable": {
                    "value": "aggregation_ops_total_mass",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "_get_probs(dist_aggregation)[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_285": {
                "variable": {
                    "value": "count_result",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "scaled_probability_per_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gumbel_dist.sample()",
                            "Call"
                        ],
                        [
                            "_get_probs(dist_per_cell)",
                            "Call"
                        ],
                        [
                            "scaled_probability_per_cell / numeric_values_scale * input_mask_float",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_286": {
                "variable": {
                    "value": "numeric_values_masked",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.is_nan(numeric_values)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.zeros_like(numeric_values)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "numeric_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['numeric_values']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "reduce_sum_289": {
                "variable": {
                    "value": "sum_result",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "scaled_probability_per_cell * numeric_values_masked",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_324": {
                "variable": {
                    "value": "all_results",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(sum_result, axis=1), tf.expand_dims(average_result, axis=1), tf.expand_dims(count_result, axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_330": {
                "variable": {
                    "value": "expected_result",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "all_results * aggregation_op_only_probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_364": {
                "variable": {
                    "value": "answer_masked",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.is_nan(answer)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.zeros_like(answer)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "answer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(features['answer'], axis=[1])",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "cast_424": {
                "variable": {
                    "value": "aggregate_mask_init",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.logical_not(tf.is_nan(answer))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_429": {
                "variable": {
                    "value": "aggregation_ops_total_mass",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "_get_probs(dist_aggregation)[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_435": {
                "variable": {
                    "value": "aggregate_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_and(is_pred_cell_selection, is_cell_supervision_available)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.zeros_like(aggregate_mask_init, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "aggregate_mask_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.logical_not(tf.is_nan(answer)), tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_438": {
                "variable": {
                    "value": "aggregate_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aggregate_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.logical_and(is_pred_cell_selection, is_cell_supervision_available), tf.zeros_like(aggregate_mask_init, dtype=tf.float32), aggregate_mask_init)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(aggregate_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "_calculate_aggregate_mask(answer=answer, output_layer_aggregation=output_layer_aggregation, output_bias_agg=output_bias_agg, output_weights_agg=output_weights_agg, cell_select_pref=config.cell_select_pref, label_ids=label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_456": {
                "variable": {
                    "value": "output_weights_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_weights_cls",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, hidden_size_agg]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "_classification_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_464": {
                "variable": {
                    "value": "output_bias_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_bias_cls",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_469": {
                "variable": {
                    "value": "logits_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(output_layer, keep_prob=0.9)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "output_weights_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('output_weights_cls', shape=[2, hidden_size_agg], initializer=_classification_initializer())",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bias_add_470": {
                "variable": {
                    "value": "logits_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "logits_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(output_layer, output_weights_cls, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits_cls, output_bias_cls)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "compute_classification_logits(config.num_classification_labels, output_layer_aggregation)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "output_bias_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('output_bias_cls', shape=[2], initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_504": {
                "variable": {
                    "value": "column_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels_per_column",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_507": {
                "variable": {
                    "value": "no_cell_selected",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_max(labels_per_column, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_508": {
                "variable": {
                    "value": "column_label",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "no_cell_selected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.reduce_max(labels_per_column, axis=-1), 0)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.zeros_like(column_label)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "column_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(labels_per_column, axis=-1, output_type=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(no_cell_selected, tf.zeros_like(column_label), column_label)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_521": {
                "variable": {
                    "value": "column_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(column_id_for_cells, tf.expand_dims(column_label, axis=1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_540": {
                "variable": {
                    "value": "selected_column_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "column_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.compute_column_logits(output_layer=output_layer, cell_index=cell_index, cell_mask=cell_mask, init_cell_selection_weights_to_zero=config.init_cell_selection_weights_to_zero, allow_empty_column_selection=config.allow_empty_column_selection)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_541": {
                "variable": {
                    "value": "selected_column_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(column_id_for_cells, tf.expand_dims(selected_column_id, axis=-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_545": {
                "variable": {
                    "value": "selected_column_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(column_id_for_cells, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.zeros_like(selected_column_mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "selected_column_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.equal(column_id_for_cells, tf.expand_dims(selected_column_id, axis=-1)), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(column_id_for_cells, 0), tf.zeros_like(selected_column_mask), selected_column_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_632": {
                "variable": {
                    "value": "input_mask_float",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['input_mask']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_633": {
                "variable": {
                    "value": "table_mask_float",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "table_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(row_ids > 0, tf.ones_like(row_ids), tf.zeros_like(row_ids))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_824": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "logits >= 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(logits, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.zeros_like(logits, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_826": {
                "variable": {
                    "value": "input_mask_float",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['input_mask']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_828": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.metrics.mean(values=loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_or_831": {
                "variable": {
                    "value": "token_correct",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(label_ids, predictions)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.logical_not(tf.cast(input_mask, tf.bool))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_all_835": {
                "variable": {
                    "value": "per_sequence_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "token_correct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_or(tf.equal(label_ids, predictions), tf.logical_not(tf.cast(input_mask, tf.bool)))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_836": {
                "variable": {
                    "value": "sequence_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "per_sequence_accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_all(token_correct, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_837": {
                "variable": {
                    "value": "mean_label",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.cast(label_ids, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "weights": {
                    "value": "input_mask_float",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(input_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(input_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_221": {
                "variable": {
                    "value": "target_aggregation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aggregate_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.logical_and(is_pred_cell_selection, is_cell_supervision_available), tf.zeros_like(aggregate_mask_init, dtype=tf.float32), aggregate_mask_init)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(aggregate_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "_calculate_aggregate_mask(answer=answer, output_layer_aggregation=output_layer_aggregation, output_bias_agg=output_bias_agg, output_weights_agg=output_weights_agg, cell_select_pref=config.cell_select_pref, label_ids=label_ids)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_322": {
                "variable": {
                    "value": "aggregation_op_only_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_aggregation[:, 1:] / config.agg_temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stop_gradient_367": {
                "variable": {
                    "value": "normalizer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.math.maximum(tf.math.abs(expected_result), tf.math.abs(answer_masked)) + _EPSILON_ZERO_DIVISION",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "huber_loss_373": {
                "variable": {
                    "value": "per_example_answer_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "normalized_answer_masked * aggregate_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "predictions": {
                    "value": "normalized_expected_result * aggregate_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "delta": {
                    "value": "tf.cast(config.huber_loss_delta, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.losses.Reduction.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "huber_loss_379": {
                "variable": {
                    "value": "per_example_answer_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "answer_masked * aggregate_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "predictions": {
                    "value": "expected_result * aggregate_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "delta": {
                    "value": "tf.cast(config.huber_loss_delta, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.losses.Reduction.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_385": {
                "variable": {
                    "value": "large_answer_loss_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "per_example_answer_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.huber_loss(normalized_answer_masked * aggregate_mask, normalized_expected_result * aggregate_mask, delta=tf.cast(config.huber_loss_delta, tf.float32), reduction=tf.losses.Reduction.NONE)",
                            "Call"
                        ],
                        [
                            "tf.losses.huber_loss(answer_masked * aggregate_mask, expected_result * aggregate_mask, delta=tf.cast(config.huber_loss_delta, tf.float32), reduction=tf.losses.Reduction.NONE)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_388": {
                "variable": {
                    "value": "large_answer_loss_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "per_example_answer_loss > config.answer_loss_cutoff",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.zeros_like(per_example_answer_loss, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.ones_like(per_example_answer_loss, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_534": {
                "condition": {
                    "value": "no_cell_selected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.reduce_max(labels_per_column, axis=-1), 0)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.zeros_like(selection_loss_per_example)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "cell_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(cell_log_prob * column_mask * cell_mask, axis=1)",
                            "UnaryOp"
                        ],
                        [
                            "cell_loss / (tf.reduce_sum(column_mask * cell_mask, axis=1) + _EPSILON_ZERO_DIVISION)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "dropout_617": {
                "variable": {
                    "value": "output_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(output_layer, keep_prob=0.9)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_variable_659": {
                "variable": {
                    "value": "output_weights_agg",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_weights_agg",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.num_aggregation_labels, hidden_size_agg]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "_classification_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_663": {
                "variable": {
                    "value": "output_bias_agg",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_bias_agg",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.num_aggregation_labels]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_848": {
                "variable": {
                    "value": "predictions_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(output_layer, output_weights_cls, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits_cls, output_bias_cls)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "compute_classification_logits(config.num_classification_labels, output_layer_aggregation)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "accuracy_849": {
                "variable": {
                    "value": "accuracy_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "classification_class_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(features['classification_class_index'], axis=[1]) if do_model_classification else None",
                            "IfExp"
                        ]
                    ]
                },
                "predictions": {
                    "value": "predictions_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_cls, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_857": {
                "variable": {
                    "value": "predictions_agg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_aggregation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(output_layer_aggregation, output_weights_agg, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits_aggregation, output_bias_agg)",
                            "Call"
                        ],
                        [
                            "_calculate_aggregation_logits(output_layer_aggregation, output_weights_agg, output_bias_agg)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "_calculate_aggregation_logits(output_layer_aggregation, output_weights_agg, output_bias_agg)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "accuracy_859": {
                "variable": {
                    "value": "accuracy_agg",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "aggregation_function_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(features['aggregation_function_id'], axis=[1]) if do_model_aggregation else None",
                            "IfExp"
                        ]
                    ]
                },
                "predictions": {
                    "value": "predictions_agg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_aggregation, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_862": {
                "variable": {
                    "value": "per_sequence_agg_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "aggregation_function_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(features['aggregation_function_id'], axis=[1]) if do_model_aggregation else None",
                            "IfExp"
                        ]
                    ]
                },
                "y": {
                    "value": "predictions_agg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_aggregation, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_865": {
                "variable": {
                    "value": "per_sequence_joint_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "per_sequence_agg_accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(aggregation_function_id, predictions_agg)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "per_sequence_accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_all(token_correct, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_867": {
                "variable": {
                    "value": "joint_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "per_sequence_joint_accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(per_sequence_agg_accuracy, per_sequence_accuracy)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_892": {
                "variable": {
                    "value": "table_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "row_ids > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(row_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.zeros_like(row_ids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_941": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_230": {
                "input_tensor": {
                    "value": "one_hot_labels * log_probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_nan_287": {
                "x": {
                    "value": "numeric_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['numeric_values']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_like_287": {
                "input": {
                    "value": "numeric_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['numeric_values']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "reduce_sum_298": {
                "variable": {
                    "value": "average_result",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "numeric_values_masked * scaled_probability_per_cell / ex",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_nan_364": {
                "x": {
                    "value": "answer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(features['answer'], axis=[1])",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_like_364": {
                "input": {
                    "value": "answer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(features['answer'], axis=[1])",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "logical_not_424": {
                "x": {
                    "value": "tf.is_nan(answer)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_434": {
                "input_tensor": {
                    "value": "label_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['label_ids']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logical_and_436": {
                "x": {
                    "value": "is_pred_cell_selection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aggregation_ops_total_mass <= cell_select_pref",
                            "Compare"
                        ]
                    ]
                },
                "y": {
                    "value": "is_cell_supervision_available",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(label_ids, axis=1) > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "zeros_like_437": {
                "input": {
                    "value": "aggregate_mask_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.logical_not(tf.is_nan(answer)), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_503": {
                "x": {
                    "value": "label_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['label_ids']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_507": {
                "input_tensor": {
                    "value": "labels_per_column",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_508": {
                "input": {
                    "value": "column_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(labels_per_column, axis=-1, output_type=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(no_cell_selected, tf.zeros_like(column_label), column_label)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_517": {
                "x": {
                    "value": "label_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['label_ids']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_522": {
                "x": {
                    "value": "column_id_for_cells",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cell_index.project_inner(labels_index).indices",
                            "Attribute"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(column_label, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_528": {
                "input_tensor": {
                    "value": "cell_log_prob * column_mask * cell_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_530": {
                "input_tensor": {
                    "value": "column_mask * cell_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_535": {
                "input": {
                    "value": "selection_loss_per_example",
                    "type": "variable",
                    "possible_values": [
                        [
                            "column_loss_per_example",
                            "Name"
                        ],
                        [
                            "selection_loss_per_example + tf.where(no_cell_selected, tf.zeros_like(selection_loss_per_example), cell_loss)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.reduce_sum(selection_loss_per_token * input_mask_float, axis=1) / (tf.reduce_sum(input_mask_float, axis=1) + _EPSILON_ZERO_DIVISION)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "equal_542": {
                "x": {
                    "value": "column_id_for_cells",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cell_index.project_inner(labels_index).indices",
                            "Attribute"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(selected_column_id, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_546": {
                "x": {
                    "value": "column_id_for_cells",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cell_index.project_inner(labels_index).indices",
                            "Attribute"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_546": {
                "input": {
                    "value": "selected_column_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.equal(column_id_for_cells, tf.expand_dims(selected_column_id, axis=-1)), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(column_id_for_cells, 0), tf.zeros_like(selected_column_mask), selected_column_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_674": {
                "name_or_scope": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_710": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "label_ids == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(label_ids, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "config.positive_weight * tf.ones_like(label_ids, dtype=tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "one_hot_739": {
                "variable": {
                    "value": "one_hot_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "classification_class_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(features['classification_class_index'], axis=[1]) if do_model_classification else None",
                            "IfExp"
                        ]
                    ]
                },
                "depth": {
                    "value": "config.num_classification_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_743": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(output_layer, output_weights_cls, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits_cls, output_bias_cls)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "compute_classification_logits(config.num_classification_labels, output_layer_aggregation)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_748": {
                "variable": {
                    "value": "cls_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "per_example_classification_intermediate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(one_hot_labels * log_probs, axis=-1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "ones_like_824": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "segmented_tensor.gather(logits_per_cell, cell_index)",
                            "Call"
                        ],
                        [
                            "utils.compute_token_logits(output_layer=output_layer, temperature=config.temperature, init_cell_selection_weights_to_zero=config.init_cell_selection_weights_to_zero)",
                            "Call"
                        ],
                        [
                            "segmented_tensor.gather(logits_per_cell, cell_index)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_825": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "segmented_tensor.gather(logits_per_cell, cell_index)",
                            "Call"
                        ],
                        [
                            "utils.compute_token_logits(output_layer=output_layer, temperature=config.temperature, init_cell_selection_weights_to_zero=config.init_cell_selection_weights_to_zero)",
                            "Call"
                        ],
                        [
                            "segmented_tensor.gather(logits_per_cell, cell_index)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_832": {
                "x": {
                    "value": "label_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['label_ids']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(logits >= 0, tf.ones_like(logits, dtype=tf.int32), tf.zeros_like(logits, dtype=tf.int32))",
                            "Call"
                        ],
                        [
                            "{'probabilities': outputs.probs, 'input_ids': features['input_ids'], 'column_ids': features['column_ids'], 'row_ids': features['row_ids'], 'segment_ids': features['segment_ids'], 'question_id_ints': features['question_id_ints']}",
                            "Dict"
                        ]
                    ]
                }
            },
            "logical_not_833": {
                "x": {
                    "value": "tf.cast(input_mask, tf.bool)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_883": {
                "msg": {
                    "value": "*** Features ***",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_915": {
                "variable": {
                    "value": "answer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features['answer']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "info_970": {
                "msg": {
                    "value": "**** Trainable Variables ****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TPUEstimatorSpec_990": {
                "variable": {
                    "value": "output_spec",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "total_loss + tf.reduce_mean(per_example_additional_loss)",
                            "BinOp"
                        ],
                        [
                            "outputs.total_loss",
                            "Attribute"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimization.create_optimizer(total_loss, config.learning_rate, config.num_train_steps, config.num_warmup_steps, config.use_tpu, gradient_accumulation_steps=params.get('gradient_accumulation_steps', 1), grad_clipping=config.grad_clipping)",
                            "Call"
                        ]
                    ]
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tpu_scaffold",
                            "Name"
                        ]
                    ]
                }
            },
            "GFile_145": {
                "name": {
                    "value": "json_file",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_167": {
                "name": {
                    "value": "json_file",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_250": {
                "x": {
                    "value": "aggregation_ops_total_mass",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(_get_probs(dist_aggregation)[:, 1:], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(_get_probs(dist_aggregation)[:, 1:], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_308": {
                "variable": {
                    "value": "average_result",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "numeric_values_masked * scaled_probability_per_cell * multiplier",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_325": {
                "input": {
                    "value": "sum_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(scaled_probability_per_cell * numeric_values_masked, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_326": {
                "input": {
                    "value": "average_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum_result / (count_result + _EPSILON_ZERO_DIVISION)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(numeric_values_masked * scaled_probability_per_cell / ex, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(numeric_values_masked * scaled_probability_per_cell * multiplier, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_327": {
                "input": {
                    "value": "count_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(scaled_probability_per_cell, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_390": {
                "input": {
                    "value": "per_example_answer_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.huber_loss(normalized_answer_masked * aggregate_mask, normalized_expected_result * aggregate_mask, delta=tf.cast(config.huber_loss_delta, tf.float32), reduction=tf.losses.Reduction.NONE)",
                            "Call"
                        ],
                        [
                            "tf.losses.huber_loss(answer_masked * aggregate_mask, expected_result * aggregate_mask, delta=tf.cast(config.huber_loss_delta, tf.float32), reduction=tf.losses.Reduction.NONE)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_391": {
                "input": {
                    "value": "per_example_answer_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.huber_loss(normalized_answer_masked * aggregate_mask, normalized_expected_result * aggregate_mask, delta=tf.cast(config.huber_loss_delta, tf.float32), reduction=tf.losses.Reduction.NONE)",
                            "Call"
                        ],
                        [
                            "tf.losses.huber_loss(answer_masked * aggregate_mask, expected_result * aggregate_mask, delta=tf.cast(config.huber_loss_delta, tf.float32), reduction=tf.losses.Reduction.NONE)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_nan_424": {
                "x": {
                    "value": "answer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(features['answer'], axis=[1])",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_initializer_467": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_522": {
                "input": {
                    "value": "column_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(labels_per_column, axis=-1, output_type=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(no_cell_selected, tf.zeros_like(column_label), column_label)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_542": {
                "input": {
                    "value": "selected_column_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(column_logits, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "minimum_621": {
                "x": {
                    "value": "row_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['row_ids']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "config.max_num_rows - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_625": {
                "x": {
                    "value": "column_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['column_ids']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "config.max_num_columns - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_796": {
                "input_tensor": {
                    "value": "per_example_additional_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_calculate_aggregation_loss(logits_aggregation, aggregate_mask, aggregation_function_id, config)",
                            "Call"
                        ],
                        [
                            "per_example_additional_loss * large_answer_loss_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_833": {
                "x": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['input_mask']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_838": {
                "x": {
                    "value": "label_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['label_ids']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_885": {
                "msg": {
                    "value": "  name = %s, shape = %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sorted(features)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "features[name].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_892": {
                "input": {
                    "value": "row_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['row_ids']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_893": {
                "input": {
                    "value": "row_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['row_ids']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "squeeze_896": {
                "input": {
                    "value": "features['aggregation_function_id']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_901": {
                "input": {
                    "value": "features['classification_class_index']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "info_975": {
                "msg": {
                    "value": "  name = %s, shape = %s%s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "var.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TPUEstimatorSpec_1008": {
                "variable": {
                    "value": "output_spec",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "total_loss + tf.reduce_mean(per_example_additional_loss)",
                            "BinOp"
                        ],
                        [
                            "outputs.total_loss",
                            "Attribute"
                        ]
                    ]
                },
                "eval_metrics": {
                    "value": "eval_metrics",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(_calculate_eval_metrics_fn, [total_loss, label_ids, outputs.logits, input_mask, aggregation_function_id, outputs.logits_aggregation, classification_class_index, outputs.logits_cls])",
                            "Tuple"
                        ]
                    ]
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tpu_scaffold",
                            "Name"
                        ]
                    ]
                }
            },
            "TPUEstimatorSpec_1057": {
                "variable": {
                    "value": "output_spec",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(logits >= 0, tf.ones_like(logits, dtype=tf.int32), tf.zeros_like(logits, dtype=tf.int32))",
                            "Call"
                        ],
                        [
                            "{'probabilities': outputs.probs, 'input_ids': features['input_ids'], 'column_ids': features['column_ids'], 'row_ids': features['row_ids'], 'segment_ids': features['segment_ids'], 'question_id_ints': features['question_id_ints']}",
                            "Dict"
                        ]
                    ]
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tpu_scaffold",
                            "Name"
                        ]
                    ]
                }
            },
            "error_312": {
                "msg": {
                    "value": "Invalid average_approximation_function: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "config.average_approximation_function",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_368": {
                "x": {
                    "value": "tf.math.abs(expected_result)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.math.abs(answer_masked)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_376": {
                "x": {
                    "value": "config.huber_loss_delta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_382": {
                "x": {
                    "value": "config.huber_loss_delta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_initializer_666": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_711": {
                "input": {
                    "value": "label_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['label_ids']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_716": {
                "input_tensor": {
                    "value": "selection_loss_per_token * input_mask_float",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_745": {
                "input_tensor": {
                    "value": "one_hot_labels * log_probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_296": {
                "input_tensor": {
                    "value": "scaled_probability_per_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gumbel_dist.sample()",
                            "Call"
                        ],
                        [
                            "_get_probs(dist_per_cell)",
                            "Call"
                        ],
                        [
                            "scaled_probability_per_cell / numeric_values_scale * input_mask_float",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_306": {
                "input_tensor": {
                    "value": "pointwise_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scaled_probability_per_cell * (1 - scaled_probability_per_cell)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_369": {
                "x": {
                    "value": "answer_masked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.is_nan(answer), tf.zeros_like(answer), answer)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_713": {
                "input": {
                    "value": "label_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['label_ids']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_717": {
                "input_tensor": {
                    "value": "input_mask_float",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(input_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(input_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_773": {
                "input_tensor": {
                    "value": "selection_loss_per_example",
                    "type": "variable",
                    "possible_values": [
                        [
                            "column_loss_per_example",
                            "Name"
                        ],
                        [
                            "selection_loss_per_example + tf.where(no_cell_selected, tf.zeros_like(selection_loss_per_example), cell_loss)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.reduce_sum(selection_loss_per_token * input_mask_float, axis=1) / (tf.reduce_sum(input_mask_float, axis=1) + _EPSILON_ZERO_DIVISION)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_776": {
                "input_tensor": {
                    "value": "selection_loss_per_example * (1.0 - aggregate_mask)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Scaffold_963": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "init_from_checkpoint_968": {
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "assignment_map": {
                    "value": "assignment_map",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_302": {
                "input_tensor": {
                    "value": "scaled_probability_per_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gumbel_dist.sample()",
                            "Call"
                        ],
                        [
                            "_get_probs(dist_per_cell)",
                            "Call"
                        ],
                        [
                            "scaled_probability_per_cell / numeric_values_scale * input_mask_float",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "init_from_checkpoint_962": {
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "assignment_map": {
                    "value": "assignment_map",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_307": {
                "x": {
                    "value": "ex",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(scaled_probability_per_cell, axis=1, keepdims=True) - scaled_probability_per_cell + 1",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(scaled_probability_per_cell, axis=1, keepdims=True) - scaled_probability_per_cell + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_1031": {
                "input": {
                    "value": "outputs.logits_aggregation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_1042": {
                "input": {
                    "value": "outputs.logits_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Code/Tapas/TAPAS/models/tapas_classifier_model_test.py": {
        "tensorflow": {
            "TPUEstimator_98": {
                "variable": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "{'gradient_accumulation_steps': params.get('gradient_accumulation_steps', 1)}",
                    "type": "Dict",
                    "possible_values": []
                },
                "use_tpu": {
                    "value": "params['use_tpu']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "dict(batch_size=2, init_checkpoint=None, learning_rate=5e-05, num_train_steps=50, num_warmup_steps=10, num_eval_steps=20, use_tpu=False, num_aggregation_labels=4 if do_model_aggregation else 0, num_classification_labels=0, aggregation_loss_importance=0.8, use_normalized_answer_loss=use_normalized_answer_loss, use_answer_as_supervision=use_answer_as_supervision, answer_loss_importance=0.001, huber_loss_delta=25.0, temperature=1.0, agg_temperature=1.0, use_gumbel_for_cells=False, use_gumbel_for_agg=False, average_approximation_function=tapas_classifier_model.AverageApproximationFunction.RATIO, cell_select_pref=0.5, answer_loss_cutoff=100, grad_clipping=4.0, max_num_rows=64, max_num_columns=32, average_logits_per_cell=True, select_one_column=select_one_column, gradient_accumulation_steps=2 if do_gradient_accumulation else 1)",
                            "Call"
                        ],
                        [
                            "dict(batch_size=2, init_checkpoint=None, learning_rate=5e-05, num_train_steps=50, num_warmup_steps=10, num_eval_steps=20, use_tpu=False, num_aggregation_labels=4, num_classification_labels=6, aggregation_loss_importance=0.8, use_answer_as_supervision=use_answer_as_supervision, answer_loss_importance=0.001, use_normalized_answer_loss=False, huber_loss_delta=25.0, temperature=1.0, agg_temperature=1.0, use_gumbel_for_cells=False, use_gumbel_for_agg=False, average_approximation_function=tapas_classifier_model.AverageApproximationFunction.RATIO, cell_select_pref=0.5, answer_loss_cutoff=100, grad_clipping=4.0, is_predict=True, max_num_rows=64, max_num_columns=32, average_logits_per_cell=True, select_one_column=select_one_column)",
                            "Call"
                        ]
                    ]
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tapas_classifier_model.model_fn_builder(tapas_config)",
                            "Call"
                        ]
                    ]
                },
                "config": {
                    "value": "tf.estimator.tpu.RunConfig(model_dir=self.get_temp_dir(), save_summary_steps=params['num_train_steps'], save_checkpoints_steps=params['num_train_steps'])",
                    "type": "Call",
                    "possible_values": []
                },
                "train_batch_size": {
                    "value": "params['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "dict(batch_size=2, init_checkpoint=None, learning_rate=5e-05, num_train_steps=50, num_warmup_steps=10, num_eval_steps=20, use_tpu=False, num_aggregation_labels=4 if do_model_aggregation else 0, num_classification_labels=0, aggregation_loss_importance=0.8, use_normalized_answer_loss=use_normalized_answer_loss, use_answer_as_supervision=use_answer_as_supervision, answer_loss_importance=0.001, huber_loss_delta=25.0, temperature=1.0, agg_temperature=1.0, use_gumbel_for_cells=False, use_gumbel_for_agg=False, average_approximation_function=tapas_classifier_model.AverageApproximationFunction.RATIO, cell_select_pref=0.5, answer_loss_cutoff=100, grad_clipping=4.0, max_num_rows=64, max_num_columns=32, average_logits_per_cell=True, select_one_column=select_one_column, gradient_accumulation_steps=2 if do_gradient_accumulation else 1)",
                            "Call"
                        ],
                        [
                            "dict(batch_size=2, init_checkpoint=None, learning_rate=5e-05, num_train_steps=50, num_warmup_steps=10, num_eval_steps=20, use_tpu=False, num_aggregation_labels=4, num_classification_labels=6, aggregation_loss_importance=0.8, use_answer_as_supervision=use_answer_as_supervision, answer_loss_importance=0.001, use_normalized_answer_loss=False, huber_loss_delta=25.0, temperature=1.0, agg_temperature=1.0, use_gumbel_for_cells=False, use_gumbel_for_agg=False, average_approximation_function=tapas_classifier_model.AverageApproximationFunction.RATIO, cell_select_pref=0.5, answer_loss_cutoff=100, grad_clipping=4.0, is_predict=True, max_num_rows=64, max_num_columns=32, average_logits_per_cell=True, select_one_column=select_one_column)",
                            "Call"
                        ]
                    ]
                },
                "predict_batch_size": {
                    "value": "params['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "dict(batch_size=2, init_checkpoint=None, learning_rate=5e-05, num_train_steps=50, num_warmup_steps=10, num_eval_steps=20, use_tpu=False, num_aggregation_labels=4 if do_model_aggregation else 0, num_classification_labels=0, aggregation_loss_importance=0.8, use_normalized_answer_loss=use_normalized_answer_loss, use_answer_as_supervision=use_answer_as_supervision, answer_loss_importance=0.001, huber_loss_delta=25.0, temperature=1.0, agg_temperature=1.0, use_gumbel_for_cells=False, use_gumbel_for_agg=False, average_approximation_function=tapas_classifier_model.AverageApproximationFunction.RATIO, cell_select_pref=0.5, answer_loss_cutoff=100, grad_clipping=4.0, max_num_rows=64, max_num_columns=32, average_logits_per_cell=True, select_one_column=select_one_column, gradient_accumulation_steps=2 if do_gradient_accumulation else 1)",
                            "Call"
                        ],
                        [
                            "dict(batch_size=2, init_checkpoint=None, learning_rate=5e-05, num_train_steps=50, num_warmup_steps=10, num_eval_steps=20, use_tpu=False, num_aggregation_labels=4, num_classification_labels=6, aggregation_loss_importance=0.8, use_answer_as_supervision=use_answer_as_supervision, answer_loss_importance=0.001, use_normalized_answer_loss=False, huber_loss_delta=25.0, temperature=1.0, agg_temperature=1.0, use_gumbel_for_cells=False, use_gumbel_for_agg=False, average_approximation_function=tapas_classifier_model.AverageApproximationFunction.RATIO, cell_select_pref=0.5, answer_loss_cutoff=100, grad_clipping=4.0, is_predict=True, max_num_rows=64, max_num_columns=32, average_logits_per_cell=True, select_one_column=select_one_column)",
                            "Call"
                        ]
                    ]
                },
                "eval_batch_size": {
                    "value": "params['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "dict(batch_size=2, init_checkpoint=None, learning_rate=5e-05, num_train_steps=50, num_warmup_steps=10, num_eval_steps=20, use_tpu=False, num_aggregation_labels=4 if do_model_aggregation else 0, num_classification_labels=0, aggregation_loss_importance=0.8, use_normalized_answer_loss=use_normalized_answer_loss, use_answer_as_supervision=use_answer_as_supervision, answer_loss_importance=0.001, huber_loss_delta=25.0, temperature=1.0, agg_temperature=1.0, use_gumbel_for_cells=False, use_gumbel_for_agg=False, average_approximation_function=tapas_classifier_model.AverageApproximationFunction.RATIO, cell_select_pref=0.5, answer_loss_cutoff=100, grad_clipping=4.0, max_num_rows=64, max_num_columns=32, average_logits_per_cell=True, select_one_column=select_one_column, gradient_accumulation_steps=2 if do_gradient_accumulation else 1)",
                            "Call"
                        ],
                        [
                            "dict(batch_size=2, init_checkpoint=None, learning_rate=5e-05, num_train_steps=50, num_warmup_steps=10, num_eval_steps=20, use_tpu=False, num_aggregation_labels=4, num_classification_labels=6, aggregation_loss_importance=0.8, use_answer_as_supervision=use_answer_as_supervision, answer_loss_importance=0.001, use_normalized_answer_loss=False, huber_loss_delta=25.0, temperature=1.0, agg_temperature=1.0, use_gumbel_for_cells=False, use_gumbel_for_agg=False, average_approximation_function=tapas_classifier_model.AverageApproximationFunction.RATIO, cell_select_pref=0.5, answer_loss_cutoff=100, grad_clipping=4.0, is_predict=True, max_num_rows=64, max_num_columns=32, average_logits_per_cell=True, select_one_column=select_one_column)",
                            "Call"
                        ]
                    ]
                }
            },
            "main_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_55": {
                "msg": {
                    "value": "'Setting random seed to {}'.format(42)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RunConfig_105": {
                "model_dir": {
                    "value": "self.get_temp_dir()",
                    "type": "Call",
                    "possible_values": []
                },
                "save_summary_steps": {
                    "value": "params['num_train_steps']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "dict(batch_size=2, init_checkpoint=None, learning_rate=5e-05, num_train_steps=50, num_warmup_steps=10, num_eval_steps=20, use_tpu=False, num_aggregation_labels=4 if do_model_aggregation else 0, num_classification_labels=0, aggregation_loss_importance=0.8, use_normalized_answer_loss=use_normalized_answer_loss, use_answer_as_supervision=use_answer_as_supervision, answer_loss_importance=0.001, huber_loss_delta=25.0, temperature=1.0, agg_temperature=1.0, use_gumbel_for_cells=False, use_gumbel_for_agg=False, average_approximation_function=tapas_classifier_model.AverageApproximationFunction.RATIO, cell_select_pref=0.5, answer_loss_cutoff=100, grad_clipping=4.0, max_num_rows=64, max_num_columns=32, average_logits_per_cell=True, select_one_column=select_one_column, gradient_accumulation_steps=2 if do_gradient_accumulation else 1)",
                            "Call"
                        ],
                        [
                            "dict(batch_size=2, init_checkpoint=None, learning_rate=5e-05, num_train_steps=50, num_warmup_steps=10, num_eval_steps=20, use_tpu=False, num_aggregation_labels=4, num_classification_labels=6, aggregation_loss_importance=0.8, use_answer_as_supervision=use_answer_as_supervision, answer_loss_importance=0.001, use_normalized_answer_loss=False, huber_loss_delta=25.0, temperature=1.0, agg_temperature=1.0, use_gumbel_for_cells=False, use_gumbel_for_agg=False, average_approximation_function=tapas_classifier_model.AverageApproximationFunction.RATIO, cell_select_pref=0.5, answer_loss_cutoff=100, grad_clipping=4.0, is_predict=True, max_num_rows=64, max_num_columns=32, average_logits_per_cell=True, select_one_column=select_one_column)",
                            "Call"
                        ]
                    ]
                },
                "save_checkpoints_steps": {
                    "value": "params['num_train_steps']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "dict(batch_size=2, init_checkpoint=None, learning_rate=5e-05, num_train_steps=50, num_warmup_steps=10, num_eval_steps=20, use_tpu=False, num_aggregation_labels=4 if do_model_aggregation else 0, num_classification_labels=0, aggregation_loss_importance=0.8, use_normalized_answer_loss=use_normalized_answer_loss, use_answer_as_supervision=use_answer_as_supervision, answer_loss_importance=0.001, huber_loss_delta=25.0, temperature=1.0, agg_temperature=1.0, use_gumbel_for_cells=False, use_gumbel_for_agg=False, average_approximation_function=tapas_classifier_model.AverageApproximationFunction.RATIO, cell_select_pref=0.5, answer_loss_cutoff=100, grad_clipping=4.0, max_num_rows=64, max_num_columns=32, average_logits_per_cell=True, select_one_column=select_one_column, gradient_accumulation_steps=2 if do_gradient_accumulation else 1)",
                            "Call"
                        ],
                        [
                            "dict(batch_size=2, init_checkpoint=None, learning_rate=5e-05, num_train_steps=50, num_warmup_steps=10, num_eval_steps=20, use_tpu=False, num_aggregation_labels=4, num_classification_labels=6, aggregation_loss_importance=0.8, use_answer_as_supervision=use_answer_as_supervision, answer_loss_importance=0.001, use_normalized_answer_loss=False, huber_loss_delta=25.0, temperature=1.0, agg_temperature=1.0, use_gumbel_for_cells=False, use_gumbel_for_agg=False, average_approximation_function=tapas_classifier_model.AverageApproximationFunction.RATIO, cell_select_pref=0.5, answer_loss_cutoff=100, grad_clipping=4.0, is_predict=True, max_num_rows=64, max_num_columns=32, average_logits_per_cell=True, select_one_column=select_one_column)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Code/Tapas/TAPAS/models/tapas_classifier_model_utils.py": {
        "tensorflow": {
            "get_variable_45": {
                "variable": {
                    "value": "output_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer() if init_cell_selection_weights_to_zero else classification_initializer()",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "get_variable_49": {
                "variable": {
                    "value": "output_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_84": {
                "variable": {
                    "value": "column_output_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "column_output_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer() if init_cell_selection_weights_to_zero else classification_initializer()",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "get_variable_88": {
                "variable": {
                    "value": "column_output_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "column_output_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_109": {
                "variable": {
                    "value": "is_padding",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cell_count < 0.5",
                    "type": "Compare",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.not_equal(out_index.indices, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_27": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "einsum_91": {
                "equation": {
                    "value": "bsj,j->bs",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "output_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "column_output_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('column_output_weights', [hidden_size], initializer=tf.zeros_initializer() if init_cell_selection_weights_to_zero else classification_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "not_equal_110": {
                "x": {
                    "value": "out_index.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_111": {
                "x": {
                    "value": "is_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(cell_count < 0.5, tf.not_equal(out_index.indices, 0))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_initializer_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_51": {
                "equation": {
                    "value": "bsj,j->bs",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "output_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "output_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('output_weights', [hidden_size], initializer=tf.zeros_initializer() if init_cell_selection_weights_to_zero else classification_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_initializer_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_114": {
                "x": {
                    "value": "tf.equal(out_index.indices, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_initializer_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_115": {
                "x": {
                    "value": "out_index.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Code/Tapas/TAPAS/models/tapas_pretraining_model.py": {
        "tensorflow": {
            "reshape_35": {
                "variable": {
                    "value": "flat_offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(0, batch_size, dtype=tf.int32) * seq_length",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_37": {
                "variable": {
                    "value": "flat_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "positions + flat_offsets",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_38": {
                "variable": {
                    "value": "flat_sequence_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sequence_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * seq_length, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_40": {
                "variable": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "flat_sequence_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(sequence_tensor, [batch_size * seq_length, width])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "flat_positions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(positions + flat_offsets, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_50": {
                "variable": {
                    "value": "output_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, bert_config.hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "modeling.create_initializer(bert_config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_54": {
                "variable": {
                    "value": "output_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_57": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "output_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('output_bias', shape=[2], initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('output_bias', shape=[bert_config.vocab_size], initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_59": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.matmul(input_tensor, output_weights, transpose_b=True), output_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(input_tensor, output_weights, transpose_b=True), output_bias)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_60": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_61": {
                "variable": {
                    "value": "one_hot_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [-1])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_63": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "per_example_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(one_hot_labels * log_probs, axis=-1)",
                            "UnaryOp"
                        ],
                        [
                            "-tf.reduce_sum(log_probs * one_hot_labels, axis=[-1])",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "get_variable_86": {
                "variable": {
                    "value": "output_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[bert_config.vocab_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_90": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "output_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('output_bias', shape=[2], initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('output_bias', shape=[bert_config.vocab_size], initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_92": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.matmul(input_tensor, output_weights, transpose_b=True), output_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(input_tensor, output_weights, transpose_b=True), output_bias)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_93": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.matmul(input_tensor, output_weights, transpose_b=True), output_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.matmul(input_tensor, output_weights, transpose_b=True), output_bias)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_95": {
                "variable": {
                    "value": "label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(label_ids, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_96": {
                "variable": {
                    "value": "label_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(label_weights, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_98": {
                "variable": {
                    "value": "one_hot_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(label_ids, [-1])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "bert_config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_106": {
                "variable": {
                    "value": "numerator",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "label_weights * per_example_loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "trainable_variables_160": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_49": {
                "name_or_scope": {
                    "value": "cls/seq_relationship",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_72": {
                "name_or_scope": {
                    "value": "cls/predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_76": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_gather_indexes(input_tensor, positions)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(input_tensor, units=bert_config.hidden_size, activation=modeling.get_activation(bert_config.hidden_act), kernel_initializer=modeling.create_initializer(bert_config.initializer_range))",
                            "Call"
                        ],
                        [
                            "modeling.layer_norm(input_tensor)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "bert_config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "modeling.get_activation(bert_config.hidden_act)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "modeling.create_initializer(bert_config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_128": {
                "msg": {
                    "value": "*** Features ***",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_181": {
                "msg": {
                    "value": "**** Trainable Variables ****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TPUEstimatorSpec_195": {
                "variable": {
                    "value": "output_spec",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_lm_loss + next_sentence_loss",
                            "BinOp"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimization.create_optimizer(total_loss, learning_rate, num_train_steps, num_warmup_steps, use_tpu)",
                            "Call"
                        ]
                    ]
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tpu_scaffold",
                            "Name"
                        ]
                    ]
                }
            },
            "range_36": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_58": {
                "a": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_gather_indexes(input_tensor, positions)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(input_tensor, units=bert_config.hidden_size, activation=modeling.get_activation(bert_config.hidden_act), kernel_initializer=modeling.create_initializer(bert_config.initializer_range))",
                            "Call"
                        ],
                        [
                            "modeling.layer_norm(input_tensor)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "output_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('output_weights', shape=[2, bert_config.hidden_size], initializer=modeling.create_initializer(bert_config.initializer_range))",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_62": {
                "input_tensor": {
                    "value": "one_hot_labels * log_probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_75": {
                "name_or_scope": {
                    "value": "transform",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_91": {
                "a": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_gather_indexes(input_tensor, positions)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(input_tensor, units=bert_config.hidden_size, activation=modeling.get_activation(bert_config.hidden_act), kernel_initializer=modeling.create_initializer(bert_config.initializer_range))",
                            "Call"
                        ],
                        [
                            "modeling.layer_norm(input_tensor)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "output_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('output_weights', shape=[2, bert_config.hidden_size], initializer=modeling.create_initializer(bert_config.initializer_range))",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_105": {
                "input_tensor": {
                    "value": "log_probs * one_hot_labels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_107": {
                "input_tensor": {
                    "value": "label_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(label_weights, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "info_130": {
                "msg": {
                    "value": "  name = %s, shape = %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sorted(features)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "features[name].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_186": {
                "msg": {
                    "value": "  name = %s, shape = %s%s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "var.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TPUEstimatorSpec_242": {
                "variable": {
                    "value": "output_spec",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_lm_loss + next_sentence_loss",
                            "BinOp"
                        ]
                    ]
                },
                "eval_metrics": {
                    "value": "eval_metrics",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(metric_fn, [masked_lm_example_loss, masked_lm_log_probs, masked_lm_ids, masked_lm_weights, next_sentence_example_loss, next_sentence_log_probs, next_sentence_labels])",
                            "Tuple"
                        ]
                    ]
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tpu_scaffold",
                            "Name"
                        ]
                    ]
                }
            },
            "zeros_initializer_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "init_from_checkpoint_179": {
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "assignment_map": {
                    "value": "assignment_map",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_206": {
                "variable": {
                    "value": "masked_lm_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masked_lm_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(masked_lm_log_probs, [-1, masked_lm_log_probs.shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, masked_lm_log_probs.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_208": {
                "variable": {
                    "value": "masked_lm_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_lm_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(masked_lm_log_probs, [-1, masked_lm_log_probs.shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_210": {
                "variable": {
                    "value": "masked_lm_example_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masked_lm_example_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(masked_lm_example_loss, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_211": {
                "variable": {
                    "value": "masked_lm_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masked_lm_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['masked_lm_ids']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(masked_lm_ids, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_212": {
                "variable": {
                    "value": "masked_lm_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masked_lm_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['masked_lm_weights']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(masked_lm_weights, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "accuracy_213": {
                "variable": {
                    "value": "masked_lm_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "masked_lm_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['masked_lm_ids']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(masked_lm_ids, [-1])",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "masked_lm_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(masked_lm_log_probs, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "masked_lm_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['masked_lm_weights']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(masked_lm_weights, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_217": {
                "variable": {
                    "value": "masked_lm_mean_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "masked_lm_example_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(masked_lm_example_loss, [-1])",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "masked_lm_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['masked_lm_weights']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(masked_lm_weights, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_220": {
                "variable": {
                    "value": "next_sentence_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_sentence_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(next_sentence_log_probs, [-1, next_sentence_log_probs.shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, next_sentence_log_probs.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_222": {
                "variable": {
                    "value": "next_sentence_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_sentence_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(next_sentence_log_probs, [-1, next_sentence_log_probs.shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_224": {
                "variable": {
                    "value": "next_sentence_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_sentence_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['next_sentence_labels']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(next_sentence_labels, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "accuracy_225": {
                "variable": {
                    "value": "next_sentence_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "next_sentence_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['next_sentence_labels']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(next_sentence_labels, [-1])",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "next_sentence_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(next_sentence_log_probs, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_227": {
                "variable": {
                    "value": "next_sentence_mean_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "next_sentence_example_loss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TPUEstimatorSpec_251": {
                "variable": {
                    "value": "output_spec",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_lm_loss + next_sentence_loss",
                            "BinOp"
                        ]
                    ]
                },
                "predictions": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=-1)",
                            "Call"
                        ],
                        [
                            "{'masked_lm_predictions': masked_lm_predictions}",
                            "Dict"
                        ]
                    ]
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tpu_scaffold",
                            "Name"
                        ]
                    ]
                }
            },
            "init_from_checkpoint_174": {
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "assignment_map": {
                    "value": "assignment_map",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Scaffold_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Code/Tapas/TAPAS/models/tapas_pretraining_model_test.py": {
        "tensorflow": {
            "TPUEstimator_65": {
                "variable": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": []
                },
                "use_tpu": {
                    "value": "params['use_tpu']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'batch_size': 2, 'init_checkpoint': None, 'learning_rate': 5e-05, 'num_train_steps': 50, 'num_warmup_steps': 10, 'num_eval_steps': 20, 'use_tpu': False}",
                            "Dict"
                        ]
                    ]
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tapas_pretraining_model.model_fn_builder(bert_config=bert_config, init_checkpoint=params['init_checkpoint'], learning_rate=params['learning_rate'], num_train_steps=params['num_train_steps'], num_warmup_steps=params['num_warmup_steps'], use_tpu=params['use_tpu'])",
                            "Call"
                        ]
                    ]
                },
                "config": {
                    "value": "tf.estimator.tpu.RunConfig(model_dir=self.get_temp_dir(), save_summary_steps=params['num_train_steps'], save_checkpoints_steps=params['num_train_steps'])",
                    "type": "Call",
                    "possible_values": []
                },
                "train_batch_size": {
                    "value": "params['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'batch_size': 2, 'init_checkpoint': None, 'learning_rate': 5e-05, 'num_train_steps': 50, 'num_warmup_steps': 10, 'num_eval_steps': 20, 'use_tpu': False}",
                            "Dict"
                        ]
                    ]
                },
                "predict_batch_size": {
                    "value": "params['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'batch_size': 2, 'init_checkpoint': None, 'learning_rate': 5e-05, 'num_train_steps': 50, 'num_warmup_steps': 10, 'num_eval_steps': 20, 'use_tpu': False}",
                            "Dict"
                        ]
                    ]
                },
                "eval_batch_size": {
                    "value": "params['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'batch_size': 2, 'init_checkpoint': None, 'learning_rate': 5e-05, 'num_train_steps': 50, 'num_warmup_steps': 10, 'num_eval_steps': 20, 'use_tpu': False}",
                            "Dict"
                        ]
                    ]
                }
            },
            "main_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_45": {
                "msg": {
                    "value": "'Setting random seed to {}'.format(42)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RunConfig_68": {
                "model_dir": {
                    "value": "self.get_temp_dir()",
                    "type": "Call",
                    "possible_values": []
                },
                "save_summary_steps": {
                    "value": "params['num_train_steps']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'batch_size': 2, 'init_checkpoint': None, 'learning_rate': 5e-05, 'num_train_steps': 50, 'num_warmup_steps': 10, 'num_eval_steps': 20, 'use_tpu': False}",
                            "Dict"
                        ]
                    ]
                },
                "save_checkpoints_steps": {
                    "value": "params['num_train_steps']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'batch_size': 2, 'init_checkpoint': None, 'learning_rate': 5e-05, 'num_train_steps': 50, 'num_warmup_steps': 10, 'num_eval_steps': 20, 'use_tpu': False}",
                            "Dict"
                        ]
                    ]
                }
            }
        }
    },
    "Code/Tapas/TAPAS/run_task_main.py": {
        "tensorflow": {
            "disable_v2_behavior_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RunConfig_429": {
                "variable": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": []
                },
                "cluster": {
                    "value": "tpu_cluster_resolver",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.distribute.cluster_resolver.TPUClusterResolver(tpu=tpu_options.tpu_name, zone=tpu_options.tpu_zone, project=tpu_options.gcp_project)",
                            "Call"
                        ]
                    ]
                },
                "master": {
                    "value": "tpu_options.master",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.model_dir or os.path.join(output_dir, 'model')",
                            "BoolOp"
                        ]
                    ]
                },
                "tf_random_seed": {
                    "value": "FLAGS.tf_random_seed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "save_checkpoints_steps": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "keep_checkpoint_max": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "keep_checkpoint_every_n_hours": {
                    "value": "4.0",
                    "type": "float",
                    "possible_values": []
                },
                "tpu_config": {
                    "value": "tf.estimator.tpu.TPUConfig(iterations_per_loop=tpu_options.iterations_per_loop, num_shards=tpu_options.num_tpu_cores, per_host_input_for_training=is_per_host)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TPUEstimator_443": {
                "variable": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "{'gradient_accumulation_steps': gradient_accumulation_steps}",
                    "type": "Dict",
                    "possible_values": []
                },
                "use_tpu": {
                    "value": "tpu_options.use_tpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tapas_classifier_model.model_fn_builder(tapas_config)",
                            "Call"
                        ]
                    ]
                },
                "config": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.estimator.tpu.RunConfig(cluster=tpu_cluster_resolver, master=tpu_options.master, model_dir=model_dir, tf_random_seed=FLAGS.tf_random_seed, save_checkpoints_steps=1000, keep_checkpoint_max=5, keep_checkpoint_every_n_hours=4.0, tpu_config=tf.estimator.tpu.TPUConfig(iterations_per_loop=tpu_options.iterations_per_loop, num_shards=tpu_options.num_tpu_cores, per_host_input_for_training=is_per_host))",
                            "Call"
                        ]
                    ]
                },
                "train_batch_size": {
                    "value": "train_batch_size // gradient_accumulation_steps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eval_batch_size": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "predict_batch_size": {
                    "value": "test_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "TPUClusterResolver_423": {
                "variable": {
                    "value": "tpu_cluster_resolver",
                    "type": "variable",
                    "possible_values": []
                },
                "tpu": {
                    "value": "tpu_options.tpu_name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "zone": {
                    "value": "tpu_options.tpu_zone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "project": {
                    "value": "tpu_options.gcp_project",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "copy_613": {
                "a": {
                    "value": "prediction_file",
                    "type": "variable",
                    "possible_values": []
                },
                "overwrite": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "copy_643": {
                "a": {
                    "value": "prediction_file",
                    "type": "variable",
                    "possible_values": []
                },
                "overwrite": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TFRecordWriter_263": {
                "path": {
                    "value": "example_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(example_dir, filename)",
                            "Call"
                        ]
                    ]
                },
                "options": {
                    "value": "_to_tf_compression_type(FLAGS.compression_type)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exists_699": {
                "path": {
                    "value": "prediction_file",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exists_748": {
                "path": {
                    "value": "tf_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_test_examples_file(task, output_dir, test_set=TestSet.DEV)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_logger_761": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TPUConfig_437": {
                "iterations_per_loop": {
                    "value": "tpu_options.iterations_per_loop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_shards": {
                    "value": "tpu_options.num_tpu_cores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "per_host_input_for_training": {
                    "value": "is_per_host",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.estimator.tpu.InputPipelineConfig.PER_HOST_V2",
                            "Attribute"
                        ]
                    ]
                }
            },
            "exists_740": {
                "path": {
                    "value": "interactions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_test_interactions_file(task, output_dir, test_set=TestSet.DEV)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_built_with_cuda_751": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_gpu_available_752": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "list_physical_devices_753": {
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "Code/Tapas/TAPAS/scripts/calc_metrics_test.py": {
        "tensorflow": {
            "GFile_33": {
                "name": {
                    "value": "data_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tempfile.mktemp(prefix='examples_')",
                            "Call"
                        ],
                        [
                            "_write_synthetic_dataset('table_1')",
                            "Call"
                        ],
                        [
                            "_write_synthetic_dataset('table_1')",
                            "Call"
                        ],
                        [
                            "_write_synthetic_dataset('table_1')",
                            "Call"
                        ],
                        [
                            "_write_synthetic_dataset(table_name)",
                            "Call"
                        ],
                        [
                            "_write_synthetic_dataset(table_name)",
                            "Call"
                        ],
                        [
                            "_write_dataset([['dev-0', '0', '0', '-', table_name, '[]', '[]', calc_metrics_utils._Answer.SUM, 'NAN', 0.5]])",
                            "Call"
                        ],
                        [
                            "_write_dataset([['dev-0', '0', '0', '-', table_name, '[]', '[]', calc_metrics_utils._Answer.NONE, '992.3900146484375', 0.5]])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_72": {
                "name": {
                    "value": "output_tables_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tempfile.mktemp(prefix='output_tables_file_', dir=test_tmpdir)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "wb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_89": {
                "name": {
                    "value": "tables_file",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_103": {
                "name": {
                    "value": "predictions_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tempfile.mktemp(prefix='predictions_')",
                            "Call"
                        ],
                        [
                            "_write_synthetic_predictions()",
                            "Call"
                        ],
                        [
                            "_write_synthetic_predictions()",
                            "Call"
                        ],
                        [
                            "_write_synthetic_predictions()",
                            "Call"
                        ],
                        [
                            "_write_synthetic_predictions()",
                            "Call"
                        ],
                        [
                            "_write_predictions(data=[['dev-0', '0', '0', '[]', '0', '1']])",
                            "Call"
                        ],
                        [
                            "_write_predictions(data=[['dev-0', '0', '0', '[\"(0, 0)\"]', '0', '0']])",
                            "Call"
                        ],
                        [
                            "_write_predictions(data=[['dev-0', '0', '0', '[\"(0,0)\"]']], headers=('id', 'annotator', 'position', 'answer_coordinates'))",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_121": {
                "name": {
                    "value": "table_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tempfile.mktemp(prefix='table_', dir=test_tmpdir)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_185": {
                "name": {
                    "value": "data_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tempfile.mktemp(prefix='examples_')",
                            "Call"
                        ],
                        [
                            "_write_synthetic_dataset('table_1')",
                            "Call"
                        ],
                        [
                            "_write_synthetic_dataset('table_1')",
                            "Call"
                        ],
                        [
                            "_write_synthetic_dataset('table_1')",
                            "Call"
                        ],
                        [
                            "_write_synthetic_dataset(table_name)",
                            "Call"
                        ],
                        [
                            "_write_synthetic_dataset(table_name)",
                            "Call"
                        ],
                        [
                            "_write_dataset([['dev-0', '0', '0', '-', table_name, '[]', '[]', calc_metrics_utils._Answer.SUM, 'NAN', 0.5]])",
                            "Call"
                        ],
                        [
                            "_write_dataset([['dev-0', '0', '0', '-', table_name, '[]', '[]', calc_metrics_utils._Answer.NONE, '992.3900146484375', 0.5]])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_69": {
                "name": {
                    "value": "os.path.join(tables_path, f)",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_221": {
                "name": {
                    "value": "output_tables_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tempfile.mktemp(prefix='output_tables_file_', dir=test_tmpdir)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "Code/Tapas/TAPAS/scripts/convert_predictions_utils.py": {
        "tensorflow": {
            "GFile_40": {
                "name": {
                    "value": "output_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output_directory, os.path.basename(prediction_file))",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "Code/Tapas/TAPAS/scripts/convert_predictions_utils_test.py": {
        "tensorflow": {
            "TFRecordWriter_34": {
                "path": {
                    "value": "interactions_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tempfile.mktemp(suffix='.tfrecord')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Code/Tapas/TAPAS/scripts/eval_wikisql.py": {
        "tensorflow": {
            "GFile_42": {
                "name": {
                    "value": "prediction_file",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_52": {
                "name": {
                    "value": "reference_file",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "Code/Tapas/TAPAS/scripts/prediction_utils.py": {
        "tensorflow": {
            "tf_record_iterator_48": {
                "path": {
                    "value": "interactions_file",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GFile_34": {
                "name": {
                    "value": "prediction_file",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "Code/Tapas/TAPAS/scripts/prediction_utils_test.py": {
        "tensorflow": {
            "TFRecordWriter_39": {
                "path": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tempfile.mktemp(suffix='.tfrecord')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Code/Tapas/TAPAS/utils/experiment_utils_test.py": {
        "tensorflow": {
            "generate_checkpoint_state_proto_44": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "save_dir": {
                    "value": "test_tmpdir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tempfile.mkdtemp()",
                            "Call"
                        ]
                    ]
                },
                "model_checkpoint_path": {
                    "value": "checkpoints[-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[os.path.join(test_tmpdir, checkpoint) for checkpoint in ['model.ckpt-00001', 'model.ckpt-00002', 'model.ckpt-00003']]",
                            "ListComp"
                        ]
                    ]
                },
                "all_model_checkpoint_paths": {
                    "value": "checkpoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[os.path.join(test_tmpdir, checkpoint) for checkpoint in ['model.ckpt-00001', 'model.ckpt-00002', 'model.ckpt-00003']]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Exists_64": {
                "filename": {
                    "value": "f'{marker_file_prefix}-{step}.done'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            }
        }
    },
    "Code/Tapas/TAPAS/utils/file_utils.py": {
        "tensorflow": {
            "makedirs_24": {
                "path": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "listdir_29": {
                "path": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "Code/Tapas/TAPAS/utils/pretrain_utils.py": {
        "tensorflow": {}
    },
    "Code/Tapas/TAPAS/utils/pretrain_utils_test.py": {
        "tensorflow": {
            "tf_record_iterator_37": {
                "path": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Example_38": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Code/Tapas/TAPAS/utils/pruning_utils_test.py": {
        "tensorflow": {
            "GFile_42": {
                "name": {
                    "value": "vocab_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, 'vocab.txt')",
                            "Call"
                        ],
                        [
                            "self._create_vocab(temp_dir)",
                            "Call"
                        ],
                        [
                            "self._create_vocab(temp_dir)",
                            "Call"
                        ],
                        [
                            "self._create_vocab(temp_dir)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "Code/Tapas/TAPAS/utils/span_prediction_utils.py": {
        "tensorflow": {
            "gather_nd_74": {
                "variable": {
                    "value": "span_index",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "indexes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_indexes(seq_length, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "flat_spans_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([batch_dims, flat_spans], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_75": {
                "variable": {
                    "value": "span_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "span_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(params=indexes, indices=flat_spans_2d)",
                            "Call"
                        ],
                        [
                            "tf.reshape(span_index, shape=(batch_size, num_spans, 2))",
                            "Call"
                        ],
                        [
                            "tf.slice(span_index, begin=[0, 0, start_or_end], size=[batch_size, num_spans, 1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(span_index, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, num_spans, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "slice_76": {
                "variable": {
                    "value": "span_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "span_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(params=indexes, indices=flat_spans_2d)",
                            "Call"
                        ],
                        [
                            "tf.reshape(span_index, shape=(batch_size, num_spans, 2))",
                            "Call"
                        ],
                        [
                            "tf.slice(span_index, begin=[0, 0, start_or_end], size=[batch_size, num_spans, 1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(span_index, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, start_or_end]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[batch_size, num_spans, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_78": {
                "variable": {
                    "value": "span_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "span_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(params=indexes, indices=flat_spans_2d)",
                            "Call"
                        ],
                        [
                            "tf.reshape(span_index, shape=(batch_size, num_spans, 2))",
                            "Call"
                        ],
                        [
                            "tf.slice(span_index, begin=[0, 0, start_or_end], size=[batch_size, num_spans, 1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(span_index, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_119": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_121": {
                "variable": {
                    "value": "left_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[label_ids, padding]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_123": {
                "variable": {
                    "value": "right_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[padding, label_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_125": {
                "variable": {
                    "value": "start_index",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "left_label_ids - right_label_ids > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_128": {
                "variable": {
                    "value": "start_index",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "start_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(left_label_ids - right_label_ids > 0, tf.float32)",
                            "Call"
                        ],
                        [
                            "start_index[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(start_index, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_130": {
                "variable": {
                    "value": "end_index",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "right_label_ids - left_label_ids > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_133": {
                "variable": {
                    "value": "end_index",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "end_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(right_label_ids - left_label_ids > 0, tf.float32)",
                            "Call"
                        ],
                        [
                            "end_index[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(end_index, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_152": {
                "variable": {
                    "value": "output_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "f'{name}_output_weights'",
                    "type": "JoinedStr",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "_classification_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_155": {
                "variable": {
                    "value": "output_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "f'{name}_output_bias'",
                    "type": "JoinedStr",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_178": {
                "variable": {
                    "value": "spans",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "all_spans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_181": {
                "variable": {
                    "value": "batch_dims",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.range(0, batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "repeat_183": {
                "variable": {
                    "value": "batch_dims",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.range(0, batch_size), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.repeat(batch_dims, repeats=num_spans * 2, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "num_spans * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_184": {
                "variable": {
                    "value": "flat_spans",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "spans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([start_indexes, end_indexes], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat(all_spans, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, num_spans * 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_186": {
                "variable": {
                    "value": "flat_spans_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_dims, flat_spans]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_197": {
                "variable": {
                    "value": "span_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "same_column & same_row",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_206": {
                "variable": {
                    "value": "masked_span_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "span_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(same_column & same_row, tf.bool)",
                            "Call"
                        ],
                        [
                            "_get_span_mask(column_ids, row_ids, flat_spans_2d)",
                            "Call"
                        ],
                        [
                            "_get_span_mask(column_ids, row_ids, flat_spans_2d)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "span_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_token_span_logits(embedding_layer, 'span')",
                            "Call"
                        ],
                        [
                            "_gather_indexes(start_logits, flat_spans_2d, start_or_end=0)",
                            "Call"
                        ],
                        [
                            "_gather_indexes(end_logits, flat_spans_2d, start_or_end=1)",
                            "Call"
                        ],
                        [
                            "_mask_spans(span_mask, span_logits)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.ones_like(span_logits) * _NEG_INFINITY",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_nd_248": {
                "variable": {
                    "value": "embedding_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "flat_spans_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([batch_dims, flat_spans], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_249": {
                "variable": {
                    "value": "embedding_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embedding_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(params=embeddings, indices=flat_spans_2d)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding_layer, shape=(batch_size, num_spans, embedding_dim * 2))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, num_spans, embedding_dim * 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "log_softmax_319": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.einsum('bsj,j->bs', embeddings, output_weights) + output_bias",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_322": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "compute_masked_example_loss(label_ids, per_example_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_411": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "is_cell_supervision_available",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(label_ids, axis=1) > 0",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.ones_like(per_example_loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.zeros_like(per_example_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_416": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(is_cell_supervision_available, tf.ones_like(per_example_loss), tf.zeros_like(per_example_loss))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "repeat_39": {
                "input": {
                    "value": "tf.expand_dims(tf.range(seq_length), axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "repeats": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[0]",
                            "Subscript"
                        ],
                        [
                            "shape[0]",
                            "Subscript"
                        ],
                        [
                            "shape[0]",
                            "Subscript"
                        ],
                        [
                            "shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_83": {
                "x": {
                    "value": "tf.where(condition, tf.ones_like(condition), tf.zeros_like(condition))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_174": {
                "variable": {
                    "value": "spans",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[start_indexes, end_indexes]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_271": {
                "variable": {
                    "value": "span_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "masked_span_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(span_mask, span_logits, tf.ones_like(span_logits) * _NEG_INFINITY)",
                            "Call"
                        ],
                        [
                            "_mask_spans(span_mask, span_logits)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_277": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "per_example_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(span_correct * span_probs, axis=-1) * has_correct_span",
                            "BinOp"
                        ],
                        [
                            "-tf.reduce_sum(label_ids * log_probs, axis=-1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "expand_dims_40": {
                "input": {
                    "value": "tf.range(seq_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_84": {
                "condition": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(condition)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.zeros_like(condition)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_98": {
                "x": {
                    "value": "tf.equal(start_ids, end_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "start_ids > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "einsum_157": {
                "equation": {
                    "value": "bsj,j->bs",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "output_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(f'{name}_output_weights', [hidden_size], initializer=_classification_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_321": {
                "input_tensor": {
                    "value": "label_ids * log_probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_410": {
                "input_tensor": {
                    "value": "label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_413": {
                "input": {
                    "value": "per_example_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(span_correct * span_probs, axis=-1) * has_correct_span",
                            "BinOp"
                        ],
                        [
                            "-tf.reduce_sum(label_ids * log_probs, axis=-1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "zeros_like_414": {
                "input": {
                    "value": "per_example_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(span_correct * span_probs, axis=-1) * has_correct_span",
                            "BinOp"
                        ],
                        [
                            "-tf.reduce_sum(label_ids * log_probs, axis=-1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "ones_like_84": {
                "input": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_84": {
                "input": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_98": {
                "x": {
                    "value": "start_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_gather_indexes(ids, flat_spans_2d, 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "end_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_gather_indexes(ids, flat_spans_2d, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_initializer_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_209": {
                "input": {
                    "value": "span_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_token_span_logits(embedding_layer, 'span')",
                            "Call"
                        ],
                        [
                            "_gather_indexes(start_logits, flat_spans_2d, start_or_end=0)",
                            "Call"
                        ],
                        [
                            "_gather_indexes(end_logits, flat_spans_2d, start_or_end=1)",
                            "Call"
                        ],
                        [
                            "_mask_spans(span_mask, span_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_259": {
                "x": {
                    "value": "start_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_gather_indexes(ids, flat_spans_2d, 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_262": {
                "x": {
                    "value": "end_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_gather_indexes(ids, flat_spans_2d, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_268": {
                "input_tensor": {
                    "value": "span_correct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_mask(is_span_start_correct & is_span_end_correct)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_274": {
                "input_tensor": {
                    "value": "span_correct * span_probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "Code/Tapas/TAPAS/utils/span_prediction_utils_test.py": {
        "tensorflow": {
            "disable_v2_behavior_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_27": {
                "variable": {
                    "value": "label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 0, 0, 1, 0], [0, 0, 1, 1, 1, 0], [0, 1, 0, 0, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "normal_51": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, seq_length, embedding_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_53": {
                "variable": {
                    "value": "start_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_57": {
                "variable": {
                    "value": "end_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_61": {
                "variable": {
                    "value": "column_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 1, 1, 1, 2], [0, 0, 1, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_65": {
                "variable": {
                    "value": "row_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 2, 2, 2, 2], [0, 3, 3, 3, 3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_79": {
                "variable": {
                    "value": "span_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "span_logits > -1000.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(span_logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.zeros_like(span_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normal_125": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, seq_length, embedding_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_127": {
                "variable": {
                    "value": "label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 1, 1, 0, 0], [0, 0, 1, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_132": {
                "variable": {
                    "value": "column_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 1, 1, 1, 2], [0, 0, 1, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_136": {
                "variable": {
                    "value": "row_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 2, 2, 2, 2], [0, 3, 3, 3, 3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_all_144": {
                "variable": {
                    "value": "all_finite",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.math.is_finite(span_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "main_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_81": {
                "input": {
                    "value": "span_logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_82": {
                "input": {
                    "value": "span_logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_finite_144": {
                "x": {
                    "value": "span_logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "global_variables_initializer_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Code/Tapas/TAPAS/utils/sqa_utils.py": {
        "tensorflow": {
            "GFile_105": {
                "name": {
                    "value": "report_filename",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TFRecordWriter_154": {
                "path": {
                    "value": "filepath + '.tfrecord'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GFile_44": {
                "name": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(input_dir, filename)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_67": {
                "name": {
                    "value": "table_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(input_dir, table_file)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "Code/Tapas/TAPAS/utils/tabfact_utils.py": {
        "tensorflow": {
            "listdir_155": {
                "path": {
                    "value": "csv_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(input_dir, 'data', 'all_csv')",
                            "Call"
                        ]
                    ]
                }
            },
            "GFile_129": {
                "name": {
                    "value": "input_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(input_dir, 'train_all.json')",
                            "Call"
                        ]
                    ]
                }
            },
            "GFile_156": {
                "name": {
                    "value": "os.path.join(csv_path, table_id)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Code/Tapas/TAPAS/utils/task_utils.py": {
        "tensorflow": {
            "makedirs_52": {
                "path": {
                    "value": "interactions_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_interaction_dir(output_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordWriter_58": {
                "path": {
                    "value": "tfrecord_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(interactions_dir, f'{name}.tfrecord')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Code/Tapas/TAPAS/utils/tf_example_utils.py": {
        "tensorflow": {
            "Feature_166": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=list(values))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_170": {
                "float_list": {
                    "value": "tf.train.FloatList(value=list(values))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_174": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=list(values))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_774": {
                "features": {
                    "value": "tf.train.Features(feature=features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_1212": {
                "features": {
                    "value": "tf.train.Features(feature=features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_166": {
                "value": {
                    "value": "list(values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FloatList_170": {
                "value": {
                    "value": "list(values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BytesList_174": {
                "value": {
                    "value": "list(values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Features_774": {
                "feature": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ],
                        [
                            "self._to_features(instance.tokens, {'column_ids': instance.column_ids, 'prev_label_ids': [0] * len(instance.tokens), 'row_ids': instance.row_ids, 'segment_ids': instance.segment_ids}, table=table, question=None)",
                            "Call"
                        ],
                        [
                            "self._to_features(serialized_example.tokens, feature_dict, table=table, question=question)",
                            "Call"
                        ]
                    ]
                }
            },
            "Features_1212": {
                "feature": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ],
                        [
                            "self._to_features(instance.tokens, {'column_ids': instance.column_ids, 'prev_label_ids': [0] * len(instance.tokens), 'row_ids': instance.row_ids, 'segment_ids': instance.segment_ids}, table=table, question=None)",
                            "Call"
                        ],
                        [
                            "self._to_features(serialized_example.tokens, feature_dict, table=table, question=question)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {}
    },
    "Code/Tapas/TAPAS/utils/wikisql_utils_test.py": {
        "tensorflow": {
            "GFile_31": {
                "name": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(input_dir, f'{name}.tables.jsonl')",
                            "Call"
                        ],
                        [
                            "os.path.join(input_dir, f'{name}.jsonl')",
                            "Call"
                        ],
                        [
                            "os.path.join(output_dir, 'dev.tsv')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_37": {
                "name": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(input_dir, f'{name}.tables.jsonl')",
                            "Call"
                        ],
                        [
                            "os.path.join(input_dir, f'{name}.jsonl')",
                            "Call"
                        ],
                        [
                            "os.path.join(output_dir, 'dev.tsv')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_83": {
                "name": {
                    "value": "table_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, wikisql_utils._TABLE_DIR_NAME, '1-0000001-1.csv')",
                            "Call"
                        ]
                    ]
                }
            },
            "GFile_97": {
                "name": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(input_dir, f'{name}.tables.jsonl')",
                            "Call"
                        ],
                        [
                            "os.path.join(input_dir, f'{name}.jsonl')",
                            "Call"
                        ],
                        [
                            "os.path.join(output_dir, 'dev.tsv')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Code/Tapas/TAPAS/utils/wtq_utils.py": {
        "tensorflow": {
            "GFile_75": {
                "name": {
                    "value": "file_path",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_90": {
                "name": {
                    "value": "table_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(input_dir, wtq_table_id)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_102": {
                "name": {
                    "value": "output_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, sqa_table_id)",
                            "Call"
                        ],
                        [
                            "os.path.join(output_dir, file_name)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_204": {
                "name": {
                    "value": "output_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, sqa_table_id)",
                            "Call"
                        ],
                        [
                            "os.path.join(output_dir, file_name)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}