{
    "strategy_prediction/main.py": {
        "sklearn": {
            "KFold_112": {
                "variable": {
                    "value": "kf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "num_folds",
                    "type": "variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "save_244": {
                "obj": {
                    "value": "models",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_cv_outputs['models']",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "ckptfile",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(logdir, 'best_ckpt.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_389": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_368": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "strategy_prediction/model.py": {
        "sklearn": {
            "accuracy_score_457": {
                "variable": {
                    "value": "this_results[accuracy]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "this_trues",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[item[label_ix] for item in trues]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "this_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[item[label_ix] for item in preds]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "f1_score_458": {
                "variable": {
                    "value": "this_results[positive_f1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "this_trues",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[item[label_ix] for item in trues]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "this_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[item[label_ix] for item in preds]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "classification_report_459": {
                "variable": {
                    "value": "this_results[cls_report]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "this_trues",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[item[label_ix] for item in trues]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "this_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[item[label_ix] for item in preds]",
                            "ListComp"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "ModuleList_57": {
                "variable": {
                    "value": "self.task_fcs1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(self.total_num_hidden, self.total_num_hidden // 2) for _ in range(self.args.num_labels)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_58": {
                "variable": {
                    "value": "self.task_fcs2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(self.total_num_hidden // 2, 1) for _ in range(self.args.num_labels)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_59": {
                "variable": {
                    "value": "self.task_dropouts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Dropout(self.args.dropout) for _ in range(self.args.num_labels)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_60": {
                "variable": {
                    "value": "self.task_activations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.get_activation_layer() for _ in range(self.args.num_labels)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[self.apply_final_layers(self.task_fcs1[i], self.task_fcs2[i], self.task_dropouts[i], self.task_activations[i], X[i], length) for i in range(self.args.num_labels)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(X, dim=1)",
                            "Call"
                        ],
                        [
                            "Xis",
                            "variable"
                        ],
                        [
                            "[torch.clone(X_feature) for _ in range(self.args.num_labels)]",
                            "ListComp"
                        ],
                        [
                            "[item + torch.clone(X_feature) for item in X]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_210": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_215": {
                "variable": {
                    "value": "self.training_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_43": {
                "variable": {
                    "value": "self.task_trans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.get_task_trans_model() for _ in range(self.args.num_labels)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_46": {
                "variable": {
                    "value": "self.after_trans_fcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(self.args.text_encoder_dims, self.args.text_output_dims) for _ in range(self.args.num_labels)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_47": {
                "variable": {
                    "value": "self.after_trans_dropouts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Dropout(self.args.dropout) for _ in range(self.args.num_labels)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_48": {
                "variable": {
                    "value": "self.after_trans_activations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.get_activation_layer() for _ in range(self.args.num_labels)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.feature_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.args.feature_input_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args.feature_encoder_dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_54": {
                "variable": {
                    "value": "self.feature_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_193": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckptfile",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.args.logdir, self.args.ckpt_file)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_57": {
                "in_features": {
                    "value": "self.total_num_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.total_num_hidden // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "in_features": {
                    "value": "self.total_num_hidden // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_59": {
                "p": {
                    "value": "self.args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Identity_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__292": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_355": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "self.args.text_encoder_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args.text_output_dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_47": {
                "p": {
                    "value": "self.args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clone_143": {
                "input": {
                    "value": "X_bert",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bert_layer(x_input_ids, token_type_ids=x_input_type_ids, attention_mask=x_input_mask)",
                            "Call"
                        ],
                        [
                            "X_bert[0]",
                            "Subscript"
                        ],
                        [
                            "X_bert[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clone_157": {
                "input": {
                    "value": "X_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.feature_fc(x_input_feats)",
                            "Call"
                        ],
                        [
                            "self.feature_activation(X_feature)",
                            "Call"
                        ],
                        [
                            "self.feature_dropout(X_feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "clone_159": {
                "input": {
                    "value": "X_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.feature_fc(x_input_feats)",
                            "Call"
                        ],
                        [
                            "self.feature_activation(X_feature)",
                            "Call"
                        ],
                        [
                            "self.feature_dropout(X_feature)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "strategy_prediction/data.py": {
        "torch": {
            "tensor_288": {
                "variable": {
                    "value": "all_data[x_input_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "all_data['x_input_ids']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_289": {
                "variable": {
                    "value": "all_data[x_input_type_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "all_data['x_input_type_ids']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_290": {
                "variable": {
                    "value": "all_data[x_input_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "all_data['x_input_mask']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_291": {
                "variable": {
                    "value": "all_data[x_input_feats]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "all_data['x_input_feats']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_292": {
                "variable": {
                    "value": "all_data[y]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "all_data['y']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_322": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_data['x_input_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_329": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_data['x_input_ids'], all_data['x_input_type_ids'], all_data['x_input_mask'], all_data['x_input_feats'], all_data['y'])",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(data)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_85": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckptfile",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.args.logdir, self.args.ckpt_file)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_325": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_data['x_input_ids'], all_data['x_input_type_ids'], all_data['x_input_mask'], all_data['x_input_feats'], all_data['y'])",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_327": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_data['x_input_ids'], all_data['x_input_type_ids'], all_data['x_input_mask'], all_data['x_input_feats'], all_data['y'])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}