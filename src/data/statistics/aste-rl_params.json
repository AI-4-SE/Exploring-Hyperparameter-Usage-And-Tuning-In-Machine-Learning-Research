{
    "Model.py": {
        "torch": {
            "Linear_11": {
                "variable": {
                    "value": "self.hid2state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim + statedim + 1024 + 25",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "statedim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.state2prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "statedim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "sent_count + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_15": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pos_vec, top_word_vec, sent_vec, memory]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_16": {
                "variable": {
                    "value": "outp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tanh(self.hid2state(inp))",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                },
                "training": {
                    "value": "training",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True if 'test' not in mode else False",
                            "IfExp"
                        ]
                    ]
                }
            },
            "softmax_17": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.state2prob(outp)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.hid2state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim + statedim * 2 + 1024 * 2 + 25",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "statedim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_26": {
                "variable": {
                    "value": "self.state2probL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(statedim, 3) for i in range(0, sent_count)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_29": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pos_vec, bot_bert_cls, bot_word_vec, aspect_vec, memory, target]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_30": {
                "variable": {
                    "value": "outp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tanh(self.hid2state(inp))",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                },
                "training": {
                    "value": "training",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True if 'test' not in mode else False",
                            "IfExp"
                        ]
                    ]
                }
            },
            "softmax_31": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.state2probL[sent - 1](outp)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.hid2state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim + statedim * 2 + 1024 * 2 + 25",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "statedim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_40": {
                "variable": {
                    "value": "self.state2probL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(statedim, 3) for i in range(0, sent_count)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_43": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pos_vec, bot_bert_cls, bot_word_vec, opinion_vec, memory, target]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_44": {
                "variable": {
                    "value": "outp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tanh(self.hid2state(inp))",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                },
                "training": {
                    "value": "training",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True if 'test' not in mode else False",
                            "IfExp"
                        ]
                    ]
                }
            },
            "softmax_45": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.state2probL[sent - 1](outp)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_58": {
                "variable": {
                    "value": "self.sentimentvector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "sent_count + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Embedding_59": {
                "variable": {
                    "value": "self.posvector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(all_pos_tags)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "25",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_60": {
                "variable": {
                    "value": "self.aspectvector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Embedding_61": {
                "variable": {
                    "value": "self.opinionvector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.top2target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "statedim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "statedim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.top2bot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "statedim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "statedim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.bot2top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "statedim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "statedim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "variable": {
                    "value": "self.opinion2aspect",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "statedim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "statedim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_85": {
                "variable": {
                    "value": "posvs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "posvs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.posvector(posin)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(posvs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "two_sentence_inputs_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[left_input['input_ids'], right_input['input_ids'][:, 1:-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "two_sentence_token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[left_input['token_type_ids'], torch.ones_like(right_input['token_type_ids'])[:, 1:-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "two_sentence_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[left_input['attention_mask'], right_input['attention_mask'][:, 1:-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_104": {
                "variable": {
                    "value": "wordintop",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[0, query_len:, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_81": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_16": {
                "input": {
                    "value": "self.hid2state(inp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_30": {
                "input": {
                    "value": "self.hid2state(inp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_44": {
                "input": {
                    "value": "self.hid2state(inp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_73": {
                "input": {
                    "value": "prob",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.softmax(self.state2prob(outp), dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.state2probL[sent - 1](outp), dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.state2probL[sent - 1](outp), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_148": {
                "variable": {
                    "value": "two_sentence_inputs_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[left_input['input_ids'], right_input['input_ids'][:, 1:-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "two_sentence_token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[left_input['token_type_ids'], torch.ones_like(right_input['token_type_ids'])[:, 1:-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_150": {
                "variable": {
                    "value": "two_sentence_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[left_input['attention_mask'], right_input['attention_mask'][:, 1:-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_152": {
                "variable": {
                    "value": "bot_bert_cls",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[0, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_153": {
                "variable": {
                    "value": "wordinbot",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[0, query_len:, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_174": {
                "variable": {
                    "value": "two_sentence_inputs_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[left_input['input_ids'], right_input['input_ids'][:, 1:-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_175": {
                "variable": {
                    "value": "two_sentence_token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[left_input['token_type_ids'], torch.ones_like(right_input['token_type_ids'])[:, 1:-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_176": {
                "variable": {
                    "value": "two_sentence_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[left_input['attention_mask'], right_input['attention_mask'][:, 1:-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_178": {
                "variable": {
                    "value": "bot_bert_cls",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[0, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_179": {
                "variable": {
                    "value": "wordinbot",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[0, query_len:, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "statedim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "in_features": {
                    "value": "statedim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_79": {
                "input": {
                    "value": "torch.multinomial(prob, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_101": {
                "input": {
                    "value": "right_input['token_type_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multinomial_79": {
                "input": {
                    "value": "prob",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.softmax(self.state2prob(outp), dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.state2probL[sent - 1](outp), dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.state2probL[sent - 1](outp), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_149": {
                "input": {
                    "value": "right_input['token_type_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_175": {
                "input": {
                    "value": "right_input['token_type_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "Optimize.py": {
        "torch": {
            "unsqueeze_157": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grads",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.FloatTensor(1).fill_(0).to(device)",
                            "Call"
                        ],
                        [
                            "grads + to_grad",
                            "BinOp"
                        ],
                        [
                            "torch.FloatTensor(1).fill_(0).to(device)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(grads, dim=0)",
                            "Call"
                        ],
                        [
                            "grads + aspect_to_grad + opinion_to_grad",
                            "BinOp"
                        ],
                        [
                            "torch.FloatTensor(1).fill_(0).to(device)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(grads, dim=0)",
                            "Call"
                        ],
                        [
                            "grads + calcTopGrad(top_action, top_actprob, top_reward, top_final_reward, pretrain, device)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_138": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_153": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_190": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_203": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grads",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.FloatTensor(1).fill_(0).to(device)",
                            "Call"
                        ],
                        [
                            "grads + to_grad",
                            "BinOp"
                        ],
                        [
                            "torch.FloatTensor(1).fill_(0).to(device)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(grads, dim=0)",
                            "Call"
                        ],
                        [
                            "grads + aspect_to_grad + opinion_to_grad",
                            "BinOp"
                        ],
                        [
                            "torch.FloatTensor(1).fill_(0).to(device)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(grads, dim=0)",
                            "Call"
                        ],
                        [
                            "grads + calcTopGrad(top_action, top_actprob, top_reward, top_final_reward, pretrain, device)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_144": {
                "input": {
                    "value": "top_actprob[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_164": {
                "variable": {
                    "value": "aspect_to_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aspect_to_grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-torch.log(bot_aspect_actprob[j][k])",
                            "UnaryOp"
                        ],
                        [
                            "torch.unsqueeze(aspect_to_grad, dim=0).to(device)",
                            "Call"
                        ],
                        [
                            "aspect_to_grad * 1.0",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_175": {
                "variable": {
                    "value": "opinion_to_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "opinion_to_grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-torch.log(bot_opinion_actprob[j][k])",
                            "UnaryOp"
                        ],
                        [
                            "torch.unsqueeze(opinion_to_grad, dim=0).to(device)",
                            "Call"
                        ],
                        [
                            "opinion_to_grad * 1.0",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_163": {
                "input": {
                    "value": "bot_aspect_actprob[j][k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_174": {
                "input": {
                    "value": "bot_opinion_actprob[j][k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "TrainProcess.py": {
        "torch": {
            "Adam_127": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "device_112": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:1 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_85": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_117": {
                "variable": {
                    "value": "pretrain_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.start",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_67": {
                "obj": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Model(args.lr, args.dim, args.statedim, dm.sent_count, args.dropout, all_pos_tags)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoints/ + str(experiment_id) + /model",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}