{
    "evaluate.py": {
        "tensorflow": {
            "Graph_119": {
                "variable": {
                    "value": "eval_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_122": {
                "variable": {
                    "value": "average_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_123": {
                "variable": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "div_158": {
                "variable": {
                    "value": "specificities",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tn",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tn + fp + kepsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "div_159": {
                "variable": {
                    "value": "sensitivities",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tp + fn + kepsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "import_meta_graph_171": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "'{}.meta'.format(model_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_default_graph_174": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_220": {
                "graph": {
                    "value": "eval_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_166": {
                "graph": {
                    "value": "tf.Graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_session_167": {
                "session": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Graph_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/dataset.py": {
        "tensorflow": {
            "parse_single_example_25": {
                "variable": {
                    "value": "parsed",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "proto",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'image/encoded': tf.FixedLenFeature((), tf.string), 'image/format': tf.FixedLenFeature((), tf.string), 'image/class/label': tf.FixedLenFeature((), tf.int64), 'image/height': tf.FixedLenFeature((), tf.int64), 'image/width': tf.FixedLenFeature((), tf.int64)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "decode_jpeg_27": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "parsed['image/encoded']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "channels": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "transpose_53": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(parsed['image/encoded'], num_channels)",
                            "Call"
                        ],
                        [
                            "normalization_fn(image)",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "aug['fn'](image, *aug['args'])",
                            "Call"
                        ],
                        [
                            "aug['fn'](image)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_55": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(parsed['image/class/label'], [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordDataset_16": {
                "filenames": {
                    "value": "tfrecords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[os.path.join(folder, n) for n in os.listdir(folder) if n.endswith(ext)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "FixedLenFeature_20": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_21": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_22": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_23": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_24": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_56": {
                "tensor": {
                    "value": "parsed['image/class/label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "lib/evaluation.py": {
        "tensorflow": {
            "get_default_graph_19": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/metrics.py": {
        "tensorflow": {
            "variables_initializer_16": {
                "variable": {
                    "value": "reset_op",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.framework.get_variables(s, collection=tf.GraphKeys.LOCAL_VARIABLES)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "reset",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_12": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'reset_metrics'",
                            "MethodArgument"
                        ],
                        [
                            "'confusion_matrix'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_21": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'reset_metrics'",
                            "MethodArgument"
                        ],
                        [
                            "'confusion_matrix'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_22": {
                "x": {
                    "value": "tf.reshape(tf.stack([tp, fp, fn, tn], 0), [num_labels, 2, 2], name='confusion_matrix')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_22": {
                "tensor": {
                    "value": "tf.stack([tp, fp, fn, tn], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_labels, 2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "confusion_matrix",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_22": {
                "values": {
                    "value": "[tp, fp, fn, tn]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/preprocess.py": {
        "tensorflow": {
            "cast_273": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.imread(os.path.abspath(image_path), -1)",
                            "Call"
                        ],
                        [
                            "cv2.imread(image_path)",
                            "Call"
                        ],
                        [
                            "cv2.resize(image, (size, size))",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 1.0 / 127.5)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_275": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.imread(os.path.abspath(image_path), -1)",
                            "Call"
                        ],
                        [
                            "cv2.imread(image_path)",
                            "Call"
                        ],
                        [
                            "cv2.resize(image, (size, size))",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 1.0 / 127.5)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0 / 127.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "subtract_277": {
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.imread(os.path.abspath(image_path), -1)",
                            "Call"
                        ],
                        [
                            "cv2.imread(image_path)",
                            "Call"
                        ],
                        [
                            "cv2.resize(image, (size, size))",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 1.0 / 127.5)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "convert_image_dtype_290": {
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.imread(os.path.abspath(image_path), -1)",
                            "Call"
                        ],
                        [
                            "cv2.imread(image_path)",
                            "Call"
                        ],
                        [
                            "cv2.resize(image, (size, size))",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 1.0 / 127.5)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "tensorflow": {
            "Session_91": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_with_default_114": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "images.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_with_default_115": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "InceptionV3_121": {
                "variable": {
                    "value": "base_model",
                    "type": "variable",
                    "possible_values": []
                },
                "include_top": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "weights": {
                    "value": "imagenet",
                    "type": "str",
                    "possible_values": []
                },
                "pooling": {
                    "value": "avg",
                    "type": "str",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder_with_default(images, images.shape, name='x')",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_125": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "base_model.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_128": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(base_model.output, units=1)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_131": {
                "variable": {
                    "value": "mean_xentropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=y, logits=logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_135": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_137": {
                "variable": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "decay": {
                    "value": "decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4e-05",
                            "Constant"
                        ]
                    ]
                }
            },
            "div_169": {
                "variable": {
                    "value": "specificities",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tn",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tn + fp + kepsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "div_170": {
                "variable": {
                    "value": "sensitivities",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tp + fn + kepsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "merge_all_173": {
                "variable": {
                    "value": "summaries_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_174": {
                "variable": {
                    "value": "train_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "save_summaries_dir + '/train'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "FileWriter_175": {
                "variable": {
                    "value": "test_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "save_summaries_dir + '/test'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Saver_193": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_meta_graph_260": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "'{}.meta'.format(save_model_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_session_92": {
                "session": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session()",
                            "Call"
                        ]
                    ]
                }
            },
            "set_image_data_format_94": {
                "data_format": {
                    "value": "image_data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'channels_first'",
                            "Constant"
                        ]
                    ]
                }
            },
            "scalar_167": {
                "name": {
                    "value": "auc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "auc",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_132": {
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder_with_default(labels, labels.shape, name='y')",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(base_model.output, units=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}