{
    "deploy.py": {
        "tensorflow": {
            "ConfigProto_21": {
                "variable": {
                    "value": "tf_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_23": {
                "config": {
                    "value": "tf_config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Exists_28": {
                "filename": {
                    "value": "config.result_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_29": {
                "dirname": {
                    "value": "config.result_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "main/deploy.py": {
        "tensorflow": {
            "ConfigProto_21": {
                "variable": {
                    "value": "tf_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_23": {
                "config": {
                    "value": "tf_config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Exists_28": {
                "filename": {
                    "value": "config.result_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_29": {
                "dirname": {
                    "value": "config.result_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "main/model.py": {
        "tensorflow": {
            "placeholder_15": {
                "variable": {
                    "value": "self.images",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 512, 512, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_16": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 512, 512, num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "round_19": {
                "variable": {
                    "value": "self.result",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.v_lens",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_23": {
                "variable": {
                    "value": "self.t_vars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_26": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_29": {
                "variable": {
                    "value": "self.summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.ckpt_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_30": {
                "variable": {
                    "value": "self.summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.loss_summaries",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_32": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_51": {
                "variable": {
                    "value": "class_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "labels * tf.square(tf.maximum(0.0, 0.9 - v_lens)) + 0.5 * (1.0 - labels) * tf.square(tf.maximum(0.0, v_lens - 0.1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_70": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "self.conv2d(x, 16, 5)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=2, t=2, z=16, routing=1)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=4, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=2, t=4, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=8, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=2, t=8, z=64, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=8, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'deconv', k=4, s=2, t=8, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, skip3], axis=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=4, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'deconv', k=4, s=2, t=4, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, skip2], axis=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=4, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'deconv', k=4, s=2, t=2, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, skip1], axis=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=1, s=1, t=1, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "self.conv2d(squeezed_x, 64, 1)",
                            "Call"
                        ],
                        [
                            "self.conv2d(squeezed_x, 128, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_89": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, skip3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_94": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, skip2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_99": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, skip1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_102": {
                "variable": {
                    "value": "squeezed_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "self.conv2d(x, 16, 5)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=2, t=2, z=16, routing=1)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=4, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=2, t=4, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=8, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=2, t=8, z=64, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=8, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'deconv', k=4, s=2, t=8, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, skip3], axis=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=4, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'deconv', k=4, s=2, t=4, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, skip2], axis=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=4, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'deconv', k=4, s=2, t=2, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, skip1], axis=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=1, s=1, t=1, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "self.conv2d(squeezed_x, 64, 1)",
                            "Call"
                        ],
                        [
                            "self.conv2d(squeezed_x, 128, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_157": {
                "variable": {
                    "value": "one_kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k, k, t_1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_158": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N, H_1, W_1, t_0, t_1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_194": {
                "variable": {
                    "value": "p_norm_sq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(p)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_195": {
                "variable": {
                    "value": "p_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "p_norm_sq + 1e-09",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_55": {
                "variable": {
                    "value": "recon_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square((images - recons) * labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_57": {
                "variable": {
                    "value": "recon_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(images - recons)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_116": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "self.conv2d(x, 16, 5)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=2, t=2, z=16, routing=1)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=4, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=2, t=4, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=8, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=2, t=8, z=64, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=8, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'deconv', k=4, s=2, t=8, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, skip3], axis=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=4, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'deconv', k=4, s=2, t=4, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, skip2], axis=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=4, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'deconv', k=4, s=2, t=2, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, skip1], axis=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=1, s=1, t=1, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "self.conv2d(squeezed_x, 64, 1)",
                            "Call"
                        ],
                        [
                            "self.conv2d(squeezed_x, 128, 1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_transpose_120": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "self.conv2d(x, 16, 5)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=2, t=2, z=16, routing=1)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=4, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=2, t=4, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=8, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=2, t=8, z=64, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=8, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'deconv', k=4, s=2, t=8, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, skip3], axis=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=4, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'deconv', k=4, s=2, t=4, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, skip2], axis=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=4, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'deconv', k=4, s=2, t=2, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, skip1], axis=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=1, s=1, t=1, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "self.conv2d(squeezed_x, 64, 1)",
                            "Call"
                        ],
                        [
                            "self.conv2d(squeezed_x, 128, 1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_154": {
                "variable": {
                    "value": "u_hat_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "u_hat_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv2d(u_t, t_1 * z_1, k, s)",
                            "Call"
                        ],
                        [
                            "tf.reshape(u_hat_t, [N, H_1, W_1, t_1, z_1])",
                            "Call"
                        ],
                        [
                            "self.conv2d_transpose(u_t, t_1 * z_1, k, s)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N, H_1, W_1, t_1, z_1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_179": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "r_t_mul_u_hat_t_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "sqrt_200": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(x), axis=-1, keep_dims=True) + 1e-09",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variables_initializer_25": {
                "var_list": {
                    "value": "self.t_vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Exists_27": {
                "filename": {
                    "value": "self.ckpt_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_28": {
                "dirname": {
                    "value": "self.ckpt_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_61": {
                "name": {
                    "value": "class_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "class_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(labels * tf.square(tf.maximum(0.0, 0.9 - v_lens)) + 0.5 * (1.0 - labels) * tf.square(tf.maximum(0.0, v_lens - 0.1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_62": {
                "name": {
                    "value": "recon_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "recon_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.square((images - recons) * labels))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.square(images - recons))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_63": {
                "name": {
                    "value": "total_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "total_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "class_loss + 0.0005 * recon_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_141": {
                "input": {
                    "value": "u_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "u_t_list",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_159": {
                "input": {
                    "value": "b_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stop_gradient_160": {
                "input": {
                    "value": "u_hat_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv2d(u_t, t_1 * z_1, k, s)",
                            "Call"
                        ],
                        [
                            "tf.reshape(u_hat_t, [N, H_1, W_1, t_1, z_1])",
                            "Call"
                        ],
                        [
                            "self.conv2d_transpose(u_t, t_1 * z_1, k, s)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool_170": {
                "variable": {
                    "value": "b_t_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, k, k, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_max_171": {
                "variable": {
                    "value": "b_t_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "b_t_max",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(b_t, [1, k, k, 1], [1, 1, 1, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(b_t_max, axis=3, keep_dims=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_172": {
                "variable": {
                    "value": "c_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "b_t - b_t_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_173": {
                "variable": {
                    "value": "sum_c_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(b_t - b_t_max)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "one_kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ones([k, k, t_1, 1])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_176": {
                "variable": {
                    "value": "r_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "c_t / sum_c_t",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(r_t, axis=4)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_194": {
                "x": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.add_n(r_t_mul_u_hat_t_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_55": {
                "x": {
                    "value": "(images - recons) * labels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_57": {
                "x": {
                    "value": "images - recons",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_117": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_121": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_141": {
                "value": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "t_0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape[3]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_159": {
                "value": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros([N, H_1, W_1, t_0, t_1])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "t_0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape[3]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_200": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_52": {
                "x": {
                    "value": "tf.maximum(0.0, 0.9 - v_lens)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_53": {
                "x": {
                    "value": "tf.maximum(0.0, v_lens - 0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_200": {
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "self.conv2d(x, 16, 5)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=2, t=2, z=16, routing=1)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=4, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=2, t=4, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=8, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=2, t=8, z=64, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=8, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'deconv', k=4, s=2, t=8, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, skip3], axis=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=4, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'deconv', k=4, s=2, t=4, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, skip2], axis=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=4, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'deconv', k=4, s=2, t=2, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, skip1], axis=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=1, s=1, t=1, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "self.conv2d(squeezed_x, 64, 1)",
                            "Call"
                        ],
                        [
                            "self.conv2d(squeezed_x, 128, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_52": {
                "x": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "0.9 - v_lens",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_53": {
                "x": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "v_lens - 0.1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_188": {
                "input_tensor": {
                    "value": "u_hat_t * v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "main/train.py": {
        "tensorflow": {
            "ConfigProto_40": {
                "variable": {
                    "value": "tf_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_20": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.pow(model1 - model2, 2), 1, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_random_seed_62": {
                "seed": {
                    "value": "2018",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_19": {
                "name": {
                    "value": "contrastive-loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_43": {
                "config": {
                    "value": "tf_config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_20": {
                "input_tensor": {
                    "value": "tf.pow(model1 - model2, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_21": {
                "x": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.reduce_sum(tf.pow(model1 - model2, 2), 1, keep_dims=True))",
                            "Call"
                        ]
                    ]
                }
            },
            "square_22": {
                "x": {
                    "value": "tf.maximum(margin - d, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_23": {
                "input_tensor": {
                    "value": "tmp + tmp2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_45": {
                "device_name": {
                    "value": "/device:GPU:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_20": {
                "x": {
                    "value": "model1 - model2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_22": {
                "x": {
                    "value": "margin - d",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_initializer_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "tensorflow": {
            "placeholder_15": {
                "variable": {
                    "value": "self.images",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 512, 512, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_16": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 512, 512, num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "round_19": {
                "variable": {
                    "value": "self.result",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.v_lens",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_23": {
                "variable": {
                    "value": "self.t_vars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_26": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_29": {
                "variable": {
                    "value": "self.summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.ckpt_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_30": {
                "variable": {
                    "value": "self.summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.loss_summaries",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_32": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_51": {
                "variable": {
                    "value": "class_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "labels * tf.square(tf.maximum(0.0, 0.9 - v_lens)) + 0.5 * (1.0 - labels) * tf.square(tf.maximum(0.0, v_lens - 0.1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_70": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "self.conv2d(x, 16, 5)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=2, t=2, z=16, routing=1)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=4, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=2, t=4, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=8, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=2, t=8, z=64, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=8, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'deconv', k=4, s=2, t=8, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, skip3], axis=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=4, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'deconv', k=4, s=2, t=4, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, skip2], axis=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=4, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'deconv', k=4, s=2, t=2, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, skip1], axis=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=1, s=1, t=1, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "self.conv2d(squeezed_x, 64, 1)",
                            "Call"
                        ],
                        [
                            "self.conv2d(squeezed_x, 128, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_89": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, skip3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_94": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, skip2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_99": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, skip1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_102": {
                "variable": {
                    "value": "squeezed_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "self.conv2d(x, 16, 5)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=2, t=2, z=16, routing=1)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=4, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=2, t=4, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=8, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=2, t=8, z=64, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=8, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'deconv', k=4, s=2, t=8, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, skip3], axis=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=4, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'deconv', k=4, s=2, t=4, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, skip2], axis=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=4, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'deconv', k=4, s=2, t=2, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, skip1], axis=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=1, s=1, t=1, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "self.conv2d(squeezed_x, 64, 1)",
                            "Call"
                        ],
                        [
                            "self.conv2d(squeezed_x, 128, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_157": {
                "variable": {
                    "value": "one_kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k, k, t_1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_158": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N, H_1, W_1, t_0, t_1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_194": {
                "variable": {
                    "value": "p_norm_sq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(p)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_195": {
                "variable": {
                    "value": "p_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "p_norm_sq + 1e-09",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_55": {
                "variable": {
                    "value": "recon_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square((images - recons) * labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_57": {
                "variable": {
                    "value": "recon_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(images - recons)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_116": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "self.conv2d(x, 16, 5)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=2, t=2, z=16, routing=1)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=4, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=2, t=4, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=8, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=2, t=8, z=64, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=8, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'deconv', k=4, s=2, t=8, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, skip3], axis=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=4, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'deconv', k=4, s=2, t=4, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, skip2], axis=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=4, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'deconv', k=4, s=2, t=2, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, skip1], axis=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=1, s=1, t=1, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "self.conv2d(squeezed_x, 64, 1)",
                            "Call"
                        ],
                        [
                            "self.conv2d(squeezed_x, 128, 1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_transpose_120": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "self.conv2d(x, 16, 5)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=2, t=2, z=16, routing=1)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=4, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=2, t=4, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=8, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=2, t=8, z=64, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=8, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'deconv', k=4, s=2, t=8, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, skip3], axis=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=4, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'deconv', k=4, s=2, t=4, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, skip2], axis=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=4, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'deconv', k=4, s=2, t=2, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, skip1], axis=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=1, s=1, t=1, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "self.conv2d(squeezed_x, 64, 1)",
                            "Call"
                        ],
                        [
                            "self.conv2d(squeezed_x, 128, 1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_154": {
                "variable": {
                    "value": "u_hat_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "u_hat_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv2d(u_t, t_1 * z_1, k, s)",
                            "Call"
                        ],
                        [
                            "tf.reshape(u_hat_t, [N, H_1, W_1, t_1, z_1])",
                            "Call"
                        ],
                        [
                            "self.conv2d_transpose(u_t, t_1 * z_1, k, s)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N, H_1, W_1, t_1, z_1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_179": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "r_t_mul_u_hat_t_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "sqrt_200": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(x), axis=-1, keep_dims=True) + 1e-09",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variables_initializer_25": {
                "var_list": {
                    "value": "self.t_vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Exists_27": {
                "filename": {
                    "value": "self.ckpt_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_28": {
                "dirname": {
                    "value": "self.ckpt_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_61": {
                "name": {
                    "value": "class_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "class_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(labels * tf.square(tf.maximum(0.0, 0.9 - v_lens)) + 0.5 * (1.0 - labels) * tf.square(tf.maximum(0.0, v_lens - 0.1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_62": {
                "name": {
                    "value": "recon_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "recon_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.square((images - recons) * labels))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.square(images - recons))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_63": {
                "name": {
                    "value": "total_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "total_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "class_loss + 0.0005 * recon_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_141": {
                "input": {
                    "value": "u_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "u_t_list",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_159": {
                "input": {
                    "value": "b_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stop_gradient_160": {
                "input": {
                    "value": "u_hat_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv2d(u_t, t_1 * z_1, k, s)",
                            "Call"
                        ],
                        [
                            "tf.reshape(u_hat_t, [N, H_1, W_1, t_1, z_1])",
                            "Call"
                        ],
                        [
                            "self.conv2d_transpose(u_t, t_1 * z_1, k, s)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool_170": {
                "variable": {
                    "value": "b_t_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, k, k, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_max_171": {
                "variable": {
                    "value": "b_t_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "b_t_max",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(b_t, [1, k, k, 1], [1, 1, 1, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(b_t_max, axis=3, keep_dims=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_172": {
                "variable": {
                    "value": "c_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "b_t - b_t_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_173": {
                "variable": {
                    "value": "sum_c_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(b_t - b_t_max)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "one_kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ones([k, k, t_1, 1])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_176": {
                "variable": {
                    "value": "r_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "c_t / sum_c_t",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(r_t, axis=4)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_194": {
                "x": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.add_n(r_t_mul_u_hat_t_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_55": {
                "x": {
                    "value": "(images - recons) * labels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_57": {
                "x": {
                    "value": "images - recons",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_117": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_121": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_141": {
                "value": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "t_0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape[3]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_159": {
                "value": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros([N, H_1, W_1, t_0, t_1])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "t_0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape[3]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_200": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_52": {
                "x": {
                    "value": "tf.maximum(0.0, 0.9 - v_lens)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_53": {
                "x": {
                    "value": "tf.maximum(0.0, v_lens - 0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_200": {
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "self.conv2d(x, 16, 5)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=2, t=2, z=16, routing=1)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=4, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=2, t=4, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=8, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=2, t=8, z=64, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=8, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'deconv', k=4, s=2, t=8, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, skip3], axis=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=4, z=32, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'deconv', k=4, s=2, t=4, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, skip2], axis=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=5, s=1, t=4, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'deconv', k=4, s=2, t=2, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, skip1], axis=3)",
                            "Call"
                        ],
                        [
                            "self.capsule(x, 'conv', k=1, s=1, t=1, z=16, routing=3)",
                            "Call"
                        ],
                        [
                            "self.conv2d(squeezed_x, 64, 1)",
                            "Call"
                        ],
                        [
                            "self.conv2d(squeezed_x, 128, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_52": {
                "x": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "0.9 - v_lens",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_53": {
                "x": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "v_lens - 0.1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_188": {
                "input_tensor": {
                    "value": "u_hat_t * v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "tensorflow": {
            "ConfigProto_40": {
                "variable": {
                    "value": "tf_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_20": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.pow(model1 - model2, 2), 1, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_random_seed_62": {
                "seed": {
                    "value": "2018",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_19": {
                "name": {
                    "value": "contrastive-loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_43": {
                "config": {
                    "value": "tf_config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_20": {
                "input_tensor": {
                    "value": "tf.pow(model1 - model2, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_21": {
                "x": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.reduce_sum(tf.pow(model1 - model2, 2), 1, keep_dims=True))",
                            "Call"
                        ]
                    ]
                }
            },
            "square_22": {
                "x": {
                    "value": "tf.maximum(margin - d, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_23": {
                "input_tensor": {
                    "value": "tmp + tmp2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_45": {
                "device_name": {
                    "value": "/device:GPU:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_20": {
                "x": {
                    "value": "model1 - model2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_22": {
                "x": {
                    "value": "margin - d",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_initializer_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}