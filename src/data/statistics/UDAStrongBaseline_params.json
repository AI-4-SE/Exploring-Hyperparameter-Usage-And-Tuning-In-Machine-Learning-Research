{
    "UDAsbs/evaluation_metrics/ranking.py": {
        "sklearn": {
            "average_precision_score_112": {
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matches[i, valid]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-distmat[i][indices[i]][valid]",
                            "UnaryOp"
                        ]
                    ]
                }
            }
        }
    },
    "sbs_traindbscan.py": {
        "sklearn": {
            "DBSCAN_305": {
                "variable": {
                    "value": "cluster",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.6",
                            "Constant"
                        ]
                    ]
                },
                "min_samples": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "metric": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_96": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Preprocessor(testset, root=dataset.images_dir, transform=test_transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_148": {
                "variable": {
                    "value": "model_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "models.create(args.arch, num_features=args.features, dropout=args.dropout, num_classes=ncs)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_149": {
                "variable": {
                    "value": "model_1_ema",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model_1_ema",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "models.create(args.arch, num_features=args.features, dropout=args.dropout, num_classes=ncs)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model_1_ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_294": {
                "variable": {
                    "value": "target_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(list(target_features_dict.values()))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_323": {
                "variable": {
                    "value": "model_1.module.classifier0_3500",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ncs[0] + source_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_324": {
                "variable": {
                    "value": "model_1_ema.module.classifier0_3500",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ncs[0] + source_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_326": {
                "variable": {
                    "value": "model_1.module.classifier3_0_3500",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ncs[0] + source_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_327": {
                "variable": {
                    "value": "model_1_ema.module.classifier3_0_3500",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ncs[0] + source_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_343": {
                "variable": {
                    "value": "source_centers",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "source_centers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.cat(sour_fea_dict[pid], 0).mean(0) for pid in sorted(sour_fea_dict.keys())]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(source_centers, 0)",
                            "Call"
                        ],
                        [
                            "F.normalize(source_centers, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_344": {
                "variable": {
                    "value": "source_centers",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_centers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.cat(sour_fea_dict[pid], 0).mean(0) for pid in sorted(sour_fea_dict.keys())]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(source_centers, 0)",
                            "Call"
                        ],
                        [
                            "F.normalize(source_centers, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_358": {
                "variable": {
                    "value": "contrast.index_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.arange(source_classes), -1 * torch.ones(k_memory).long())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_359": {
                "variable": {
                    "value": "contrast.memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(source_centers, torch.rand(k_memory, 2048))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_184": {
                "variable": {
                    "value": "self.dev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Softmax_247": {
                "variable": {
                    "value": "self.sm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogSoftmax_248": {
                "variable": {
                    "value": "self.log_sm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "KLDivLoss_250": {
                "variable": {
                    "value": "self.kl_distance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_252": {
                "variable": {
                    "value": "variance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.kl_distance(self.log_sm(pred1), self.sm(pred1_ema.detach()))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_254": {
                "variable": {
                    "value": "exp_variance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-variance",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Adam_443": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': args.lr * flag, 'weight_decay': args.weight_decay}]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_76": {
                "dataset": {
                    "value": "Preprocessor(train_set, root=dataset.images_dir, transform=train_transformer, mutual=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomMultipleGallerySampler(train_set, num_instances, choice_c)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "not rmgs_flag",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_162": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_294": {
                "tensors": {
                    "value": "list(target_features_dict.values())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_342": {
                "tensors": {
                    "value": "sour_fea_dict[pid]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_342": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_375": {
                "variable": {
                    "value": "target_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(target_features_dict.values())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_376": {
                "variable": {
                    "value": "target_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.normalize(torch.stack(list(target_features_dict.values())), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack(list(target_features_dict.values()))",
                            "Call"
                        ],
                        [
                            "F.normalize(target_features, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_401": {
                "variable": {
                    "value": "contrast.index_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.arange(source_classes), -1 * torch.ones(k_memory).long())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_404": {
                "variable": {
                    "value": "model_1.module.classifier0_3500",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ncs[0] + source_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_405": {
                "variable": {
                    "value": "model_1_ema.module.classifier0_3500",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ncs[0] + source_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_407": {
                "variable": {
                    "value": "model_1.module.classifier3_0_3500",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ncs[0] + source_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_408": {
                "variable": {
                    "value": "model_1_ema.module.classifier3_0_3500",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ncs[0] + source_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_358": {
                "start": {
                    "value": "source_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset_source.num_train_pids",
                            "Attribute"
                        ]
                    ]
                }
            },
            "rand_359": {
                "*size": {
                    "value": "k_memory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8192",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_358": {
                "*size": {
                    "value": "k_memory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8192",
                            "Constant"
                        ]
                    ]
                }
            },
            "arange_401": {
                "start": {
                    "value": "source_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset_source.num_train_pids",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_401": {
                "*size": {
                    "value": "k_memory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8192",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "sbs_traindbscan_unc.py": {
        "sklearn": {
            "DBSCAN_311": {
                "variable": {
                    "value": "cluster",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.6",
                            "Constant"
                        ]
                    ]
                },
                "min_samples": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "metric": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_102": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Preprocessor(testset, root=dataset.images_dir, transform=test_transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_154": {
                "variable": {
                    "value": "model_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "models.create(args.arch, num_features=args.features, dropout=args.dropout, num_classes=ncs)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_155": {
                "variable": {
                    "value": "model_1_ema",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model_1_ema",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "models.create(args.arch, num_features=args.features, dropout=args.dropout, num_classes=ncs)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model_1_ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_300": {
                "variable": {
                    "value": "target_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(list(target_features_dict.values()))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_329": {
                "variable": {
                    "value": "model_1.module.classifier0_3500",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ncs[0] + source_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_330": {
                "variable": {
                    "value": "model_1_ema.module.classifier0_3500",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ncs[0] + source_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_332": {
                "variable": {
                    "value": "model_1.module.classifier3_0_3500",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ncs[0] + source_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_333": {
                "variable": {
                    "value": "model_1_ema.module.classifier3_0_3500",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ncs[0] + source_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_349": {
                "variable": {
                    "value": "source_centers",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "source_centers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.cat(sour_fea_dict[pid], 0).mean(0) for pid in sorted(sour_fea_dict.keys())]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(source_centers, 0)",
                            "Call"
                        ],
                        [
                            "F.normalize(source_centers, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_350": {
                "variable": {
                    "value": "source_centers",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_centers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.cat(sour_fea_dict[pid], 0).mean(0) for pid in sorted(sour_fea_dict.keys())]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(source_centers, 0)",
                            "Call"
                        ],
                        [
                            "F.normalize(source_centers, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_364": {
                "variable": {
                    "value": "contrast.index_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.arange(source_classes), -1 * torch.ones(k_memory).long())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_365": {
                "variable": {
                    "value": "contrast.memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(source_centers, torch.rand(k_memory, 2048))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_190": {
                "variable": {
                    "value": "self.dev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Softmax_253": {
                "variable": {
                    "value": "self.sm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogSoftmax_254": {
                "variable": {
                    "value": "self.log_sm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "KLDivLoss_256": {
                "variable": {
                    "value": "self.kl_distance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_258": {
                "variable": {
                    "value": "variance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.kl_distance(self.log_sm(pred1), self.sm(pred1_ema.detach()))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_260": {
                "variable": {
                    "value": "exp_variance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-variance",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Adam_449": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': args.lr * flag, 'weight_decay': args.weight_decay}]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_76": {
                "dataset": {
                    "value": "Preprocessor(train_set, root=dataset.images_dir, transform=train_transformer, mutual=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomMultipleGallerySampler(train_set, num_instances, choice_c)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "not rmgs_flag",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_168": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_300": {
                "tensors": {
                    "value": "list(target_features_dict.values())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_348": {
                "tensors": {
                    "value": "sour_fea_dict[pid]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_348": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_381": {
                "variable": {
                    "value": "target_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(target_features_dict.values())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_382": {
                "variable": {
                    "value": "target_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.normalize(torch.stack(list(target_features_dict.values())), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack(list(target_features_dict.values()))",
                            "Call"
                        ],
                        [
                            "F.normalize(target_features, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_407": {
                "variable": {
                    "value": "contrast.index_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.arange(source_classes), -1 * torch.ones(k_memory).long())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_410": {
                "variable": {
                    "value": "model_1.module.classifier0_3500",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ncs[0] + source_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_411": {
                "variable": {
                    "value": "model_1_ema.module.classifier0_3500",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ncs[0] + source_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_413": {
                "variable": {
                    "value": "model_1.module.classifier3_0_3500",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ncs[0] + source_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_414": {
                "variable": {
                    "value": "model_1_ema.module.classifier3_0_3500",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ncs[0] + source_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_364": {
                "start": {
                    "value": "source_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset_source.num_train_pids",
                            "Attribute"
                        ]
                    ]
                }
            },
            "rand_365": {
                "*size": {
                    "value": "k_memory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8192",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_364": {
                "*size": {
                    "value": "k_memory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8192",
                            "Constant"
                        ]
                    ]
                }
            },
            "arange_407": {
                "start": {
                    "value": "source_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset_source.num_train_pids",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_407": {
                "*size": {
                    "value": "k_memory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8192",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "sbs_trainkmeans.py": {
        "sklearn": {
            "DBSCAN_260": {
                "variable": {
                    "value": "cluster",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.6",
                            "Constant"
                        ]
                    ]
                },
                "min_samples": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "metric": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "KMeans_369": {
                "variable": {
                    "value": "km",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "nc_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ncs",
                            "Name"
                        ]
                    ]
                },
                "random_state": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "args.n_jobs",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_102": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Preprocessor(testset, root=dataset.images_dir, transform=test_transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_149": {
                "variable": {
                    "value": "model_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "models.create(args.arch, num_features=args.features, dropout=args.dropout, num_classes=ncs)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_150": {
                "variable": {
                    "value": "model_1_ema",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model_1_ema",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "models.create(args.arch, num_features=args.features, dropout=args.dropout, num_classes=ncs)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model_1_ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_248": {
                "variable": {
                    "value": "target_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(list(target_features_dict.values()))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_315": {
                "variable": {
                    "value": "source_centers",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "source_centers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.cat(sour_fea_dict[pid], 0).mean(0) for pid in sorted(sour_fea_dict.keys())]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(source_centers, 0)",
                            "Call"
                        ],
                        [
                            "F.normalize(source_centers, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_316": {
                "variable": {
                    "value": "source_centers",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_centers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.cat(sour_fea_dict[pid], 0).mean(0) for pid in sorted(sour_fea_dict.keys())]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(source_centers, 0)",
                            "Call"
                        ],
                        [
                            "F.normalize(source_centers, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_329": {
                "variable": {
                    "value": "contrast.index_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.arange(source_classes), -1 * torch.ones(k_memory).long())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_330": {
                "variable": {
                    "value": "contrast.memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(source_centers, torch.rand(k_memory, 2048))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_184": {
                "variable": {
                    "value": "self.dev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_420": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': args.lr * flag, 'weight_decay': args.weight_decay}]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_82": {
                "dataset": {
                    "value": "Preprocessor(train_set, root=dataset.images_dir, transform=train_transformer, mutual=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomMultipleGallerySampler(train_set, num_instances, choice_c)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "not rmgs_flag",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_163": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_248": {
                "tensors": {
                    "value": "list(target_features_dict.values())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_314": {
                "tensors": {
                    "value": "sour_fea_dict[pid]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_314": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_347": {
                "variable": {
                    "value": "target_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(target_features_dict.values())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_348": {
                "variable": {
                    "value": "target_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.normalize(torch.stack(list(target_features_dict.values())), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack(list(target_features_dict.values()))",
                            "Call"
                        ],
                        [
                            "F.normalize(target_features, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_389": {
                "variable": {
                    "value": "contrast.index_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.arange(source_classes), -1 * torch.ones(k_memory).long())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_381": {
                "variable": {
                    "value": "dev",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "arange_329": {
                "start": {
                    "value": "source_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset_source.num_train_pids",
                            "Attribute"
                        ]
                    ]
                }
            },
            "rand_330": {
                "*size": {
                    "value": "k_memory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8192",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_329": {
                "*size": {
                    "value": "k_memory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8192",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_381": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_389": {
                "start": {
                    "value": "source_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset_source.num_train_pids",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_389": {
                "*size": {
                    "value": "k_memory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8192",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "UDAsbs/dist_metric.py": {
        "torch": {
            "stack_18": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features.values()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_19": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_tensor_23": {
                "obj": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "X.numpy()",
                            "Call"
                        ],
                        [
                            "self.metric.transform(X)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X)",
                            "Call"
                        ],
                        [
                            "self.metric.transform(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_26": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "X.numpy()",
                            "Call"
                        ],
                        [
                            "self.metric.transform(X)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X)",
                            "Call"
                        ],
                        [
                            "self.metric.transform(X)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "UDAsbs/evaluation_metrics/classification.py": {
        "torch": {
            "no_grad_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "UDAsbs/evaluators.py": {
        "torch": {
            "cat_67": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features[item[0]].unsqueeze(0) for item in query]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features[item[0]].unsqueeze(0) for item in gallery]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(features.values())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_75": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(list(features.values()))",
                            "Call"
                        ],
                        [
                            "x.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([features[item[0]].unsqueeze(0) for item in query], 0)",
                            "Call"
                        ],
                        [
                            "x.view(m, -1)",
                            "Call"
                        ],
                        [
                            "metric.transform(x)",
                            "Call"
                        ],
                        [
                            "metric.transform(x)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_75": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_76": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([features[item[0]].unsqueeze(0) for item in gallery], 0)",
                            "Call"
                        ],
                        [
                            "y.view(n, -1)",
                            "Call"
                        ],
                        [
                            "metric.transform(y)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_76": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_63": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(list(features.values()))",
                            "Call"
                        ],
                        [
                            "x.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([features[item[0]].unsqueeze(0) for item in query], 0)",
                            "Call"
                        ],
                        [
                            "x.view(m, -1)",
                            "Call"
                        ],
                        [
                            "metric.transform(x)",
                            "Call"
                        ],
                        [
                            "metric.transform(x)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_63": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mm_64": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(list(features.values()))",
                            "Call"
                        ],
                        [
                            "x.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([features[item[0]].unsqueeze(0) for item in query], 0)",
                            "Call"
                        ],
                        [
                            "x.view(m, -1)",
                            "Call"
                        ],
                        [
                            "metric.transform(x)",
                            "Call"
                        ],
                        [
                            "metric.transform(x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x.t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "UDAsbs/feature_extraction/database.py": {
        "torch": {}
    },
    "UDAsbs/layers/__init__.py": {
        "torch": {}
    },
    "UDAsbs/layers/batch_norm.py": {
        "torch": {
            "InstanceNorm2d_49": {
                "variable": {
                    "value": "self.IN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "half1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(planes / 2)",
                            "Call"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "split_53": {
                "variable": {
                    "value": "split",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.half",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out1, out2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_norm_72": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input.view(-1, C * self.num_splits, H, W)",
                    "type": "Call",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight.repeat(self.num_splits)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias.repeat(self.num_splits)",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_76": {
                "variable": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.running_mean.view(self.num_splits, self.num_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_77": {
                "variable": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.running_var.view(self.num_splits, self.num_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_65": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "batch_norm_80": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_norm_120": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_139": {
                "variable": {
                    "value": "state_dict[prefix + running_mean]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_141": {
                "variable": {
                    "value": "state_dict[prefix + running_var]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GroupNorm_201": {
                "num_groups": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "UDAsbs/layers/non_local.py": {
        "torch": {
            "Conv2d_16": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inter_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=self.inter_channels, out_channels=self.in_channels, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inter_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inter_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_45": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.theta(x).view(batch_size, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "theta_x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "phi_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.phi(x).view(batch_size, self.inter_channels, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_49": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_div_C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "f / N",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "g_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.g(x).view(batch_size, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "g_x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "self.inter_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "UDAsbs/layers/sync_bn/batchnorm.py": {
        "torch": {
            "batch_norm_67": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.view(input.size(0), self.num_features, -1)",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "UDAsbs/layers/sync_bn/batchnorm_reimpl.py": {
        "torch": {
            "Parameter_33": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_33": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_34": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_36": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "UDAsbs/layers/sync_bn/replicate.py": {
        "torch": {}
    },
    "UDAsbs/layers/sync_bn/unittest.py": {
        "torch": {
            "allclose_28": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "UDAsbs/loss/crossentropy.py": {
        "torch": {
            "LogSoftmax_13": {
                "variable": {
                    "value": "self.logsoftmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_23": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.logsoftmax(inputs)",
                            "Call"
                        ],
                        [
                            "self.logsoftmax(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "LogSoftmax_34": {
                "variable": {
                    "value": "self.logsoftmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_38": {
                "input": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(log_probs).scatter_(1, targets.unsqueeze(1), 1)",
                            "Call"
                        ],
                        [
                            "(1 - self.epsilon) * targets + self.epsilon / self.num_classes",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "UDAsbs/loss/invariance.py": {
        "torch": {
            "device_37": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Parameter_45": {
                "variable": {
                    "value": "self.em",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_classes, num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_63": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ExemplarMemory(self.em, alpha=alpha)(inputs, targets)",
                            "Call"
                        ],
                        [
                            "inputs / self.beta",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_71": {
                "variable": {
                    "value": "(_, index_sorted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ExemplarMemory(self.em, alpha=alpha)(inputs, targets)",
                            "Call"
                        ],
                        [
                            "inputs / self.beta",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_73": {
                "variable": {
                    "value": "ones_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "targets.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_74": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.smooth_hot(inputs.detach().clone(), targets.detach().clone(), self.knn)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(targets, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_75": {
                "variable": {
                    "value": "targets_onehot",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inputs.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_77": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ones_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(targets.size(0), k).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_58": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ExemplarMemory(self.em, alpha=alpha)(inputs, targets)",
                            "Call"
                        ],
                        [
                            "inputs / self.beta",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.smooth_hot(inputs.detach().clone(), targets.detach().clone(), self.knn)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(targets, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_45": {
                "*size": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "UDAsbs/loss/multisoftmax.py": {
        "torch": {
            "div_25": {
                "variable": {
                    "value": "log_D1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.select(1, 0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "P_pos.add(m * Pn + eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_29": {
                "variable": {
                    "value": "log_D0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P_neg.clone().fill_(m * Pn)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "P_neg.add(m * Pn + eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_40": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_45": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[bsz]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_54": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_62": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "torch.exp(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_64": {
                "variable": {
                    "value": "is_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.ones([bsz, 1], dtype=torch.long).cuda(), is_pos.long())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_70": {
                "input": {
                    "value": "x_logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x / (x + neg_div)",
                            "BinOp"
                        ],
                        [
                            "-torch.log(x_logit)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "ones_64": {
                "*size": {
                    "value": "[bsz, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "UDAsbs/loss/triplet.py": {
        "torch": {
            "pow_10": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_10": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_11": {
                "variable": {
                    "value": "yy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones_like(dist_ap)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_11": {
                "variable": {
                    "value": "yy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_11": {
                "variable": {
                    "value": "yy",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_20": {
                "variable": {
                    "value": "frac_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "y.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_33": {
                "variable": {
                    "value": "(sorted_mat_distance, positive_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "mat_distance + -9999999.0 * (1 - mat_similarity)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_37": {
                "variable": {
                    "value": "(sorted_mat_distance, negative_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "mat_distance + 9999999.0 * mat_similarity",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MarginRankingLoss_56": {
                "variable": {
                    "value": "self.margin_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "margin": {
                    "value": "margin",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_like_70": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_ap",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_83": {
                "variable": {
                    "value": "(m, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_90": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_91": {
                "variable": {
                    "value": "sum_exp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight * torch.exp(value - m)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_121": {
                "variable": {
                    "value": "triple_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dist_ap, dist_an)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_122": {
                "variable": {
                    "value": "triple_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "triple_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack((dist_ap, dist_an), dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(triple_dist, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack((dist_ap, dist_an), dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(triple_dist, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_167": {
                "variable": {
                    "value": "triple_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dist_ap, dist_an)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_168": {
                "variable": {
                    "value": "triple_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "triple_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack((dist_ap, dist_an), dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(triple_dist, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack((dist_ap, dist_an), dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(triple_dist, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_176": {
                "variable": {
                    "value": "triple_dist_ref",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dist_ap_ref, dist_an_ref)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_177": {
                "variable": {
                    "value": "triple_dist_ref",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "triple_dist_ref",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack((dist_ap_ref, dist_an_ref), dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(triple_dist_ref, dim=1).detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_21": {
                "input": {
                    "value": "torch.sum(torch.pow(x, 2), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_22": {
                "input": {
                    "value": "torch.sum(torch.pow(y, 2), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_61": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.normalize(emb)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_107": {
                "variable": {
                    "value": "emb1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.normalize(emb1)",
                            "Call"
                        ],
                        [
                            "F.normalize(emb1)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_108": {
                "variable": {
                    "value": "emb2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.normalize(emb2)",
                            "Call"
                        ],
                        [
                            "F.normalize(emb2)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_156": {
                "variable": {
                    "value": "emb1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.normalize(emb1)",
                            "Call"
                        ],
                        [
                            "F.normalize(emb1)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_157": {
                "variable": {
                    "value": "emb2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.normalize(emb2)",
                            "Call"
                        ],
                        [
                            "F.normalize(emb2)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_87": {
                "input": {
                    "value": "torch.sum(weight * torch.exp(value0), dim=dim, keepdim=keepdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_93": {
                "input": {
                    "value": "sum_exp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(weight * torch.exp(value - m))",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_140": {
                "tensors": {
                    "value": "(uncer_ap_ref, uncer_an_ref)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_174": {
                "input": {
                    "value": "mat_dist_ref",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "euclidean_dist(emb2, emb2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ap_idx.view(N, 1).expand(N, N)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_175": {
                "input": {
                    "value": "mat_dist_ref",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "euclidean_dist(emb2, emb2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "an_idx.view(N, 1).expand(N, N)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_87": {
                "input": {
                    "value": "weight * torch.exp(value0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "keepdim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "exp_91": {
                "input": {
                    "value": "value - m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_132": {
                "input": {
                    "value": "uncertainty",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ap_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gather_133": {
                "input": {
                    "value": "uncertainty",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "an_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gather_135": {
                "input": {
                    "value": "uncertainty",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ap_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gather_136": {
                "input": {
                    "value": "uncertainty",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "an_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gather_138": {
                "input": {
                    "value": "uncertainty",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ap_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gather_139": {
                "input": {
                    "value": "uncertainty",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "an_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_87": {
                "input": {
                    "value": "value0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "value - m",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_21": {
                "input": {
                    "value": "torch.pow(x, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_22": {
                "input": {
                    "value": "torch.pow(y, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_21": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_22": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones_like(dist_ap)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "UDAsbs/memorybank/NCEAverage.py": {
        "torch": {
            "clamp_19": {
                "variable": {
                    "value": "exponent",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "exponent",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-tensor / temp",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(exponent, min=-50, max=50)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-50",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_30": {
                "variable": {
                    "value": "(m, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_37": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_38": {
                "variable": {
                    "value": "sum_exp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight * torch.exp(value - m)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_72": {
                "variable": {
                    "value": "pseudo_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.index2label[index_choice][i.item()] for i in index]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_81": {
                "variable": {
                    "value": "memory_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.index2label[index_choice][i.item()] if i.item() != -1 else -1 for i in self.index_memory]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_90": {
                "variable": {
                    "value": "is_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.ones([batchSize, 1], dtype=torch.float).cuda(), is_pos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_92": {
                "variable": {
                    "value": "is_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros([batchSize, 1], dtype=torch.float).cuda(), is_neg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_124": {
                "variable": {
                    "value": "l_logist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "queue.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "((q1 + q2) / 2.0).transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_128": {
                "variable": {
                    "value": "l_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q1.view(batchSize, 1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "q2.view(batchSize, -1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_131": {
                "variable": {
                    "value": "sim_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(l_pos_self, l_logist)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_138": {
                "variable": {
                    "value": "alpha_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-s_p.detach() + 1 + self.m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_139": {
                "variable": {
                    "value": "alpha_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_n.detach() + self.m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_206": {
                "variable": {
                    "value": "self.t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1 + self.step",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "self.step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_216": {
                "variable": {
                    "value": "pseudo_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.index2label[self.choice_c][i.item()] for i in index]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_220": {
                "variable": {
                    "value": "memory_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.index2label[self.choice_c][i.item()] if i.item() != -1 else -1 for i in self.index_memory]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_229": {
                "variable": {
                    "value": "l_logist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "queue.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "q1.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_234": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((l_pos_self, l_logist), dim=1)",
                            "Call"
                        ],
                        [
                            "l_logist",
                            "Name"
                        ],
                        [
                            "l_logist",
                            "Name"
                        ],
                        [
                            "l_logist",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_243": {
                "variable": {
                    "value": "pseudo_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.index2label[self.choice_c][i.item()] for i in index]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_247": {
                "variable": {
                    "value": "memory_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.index2label[self.choice_c][i.item()] if i.item() != -1 else -1 for i in self.index_memory]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_256": {
                "variable": {
                    "value": "l_logist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "queue.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "q1.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_269": {
                "variable": {
                    "value": "alpha_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-s_p.detach() + 1 + self.m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_270": {
                "variable": {
                    "value": "alpha_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_n.detach() + self.m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_277": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logsumexp(logit_p - 99999.0 * is_neg, weight=exp_variance, dim=1) + logsumexp(logit_n - 99999.0 * is_pos, weight=exp_variance, dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_277": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_284": {
                "variable": {
                    "value": "pseudo_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.index2label[self.choice_c][i.item()] for i in index]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_288": {
                "variable": {
                    "value": "memory_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.index2label[self.choice_c][i] for i in range(self.sour_numclass)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_297": {
                "variable": {
                    "value": "l_logist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "queue.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "q1.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_305": {
                "variable": {
                    "value": "alpha_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-s_p.detach() + 1 + self.m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_306": {
                "variable": {
                    "value": "alpha_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_n.detach() + self.m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_317": {
                "variable": {
                    "value": "classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.index2label[0][i.item()] for i in classes]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_337": {
                "variable": {
                    "value": "dists",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "features.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "triu_340": {
                "variable": {
                    "value": "s_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(classes_eq.size())",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tril_357": {
                "variable": {
                    "value": "histogram_pos_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(histogram_pos_repeat.size())",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_362": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "histogram_neg * histogram_pos_cdf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_367": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.index2label[0][i.item()] for i in targets]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_372": {
                "variable": {
                    "value": "all_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.index2label[0][i.item()] if i.item() != -1 else -1 for i in self.index_memory]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_376": {
                "variable": {
                    "value": "sim_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.normalize(embedding, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "all_embedding.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_418": {
                "variable": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.normalize(embedding, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_421": {
                "variable": {
                    "value": "sim_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.normalize(embedding, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.memory[:self.queueSize - self.sour_numclass, :].t().detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_440": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.index2label[0][i.item()] for i in targets]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_102": {
                "variable": {
                    "value": "out_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batchSize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "q1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "q1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "q1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "q1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "q1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "q1.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "fmod_104": {
                "variable": {
                    "value": "out_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.arange(batchSize).cuda()",
                            "Call"
                        ],
                        [
                            "out_ids + self.index",
                            "BinOp"
                        ],
                        [
                            "torch.fmod(out_ids, self.queueSize)",
                            "Call"
                        ],
                        [
                            "out_ids.long()",
                            "Call"
                        ],
                        [
                            "torch.arange(batchSize).cuda()",
                            "Call"
                        ],
                        [
                            "torch.fmod(out_ids, self.queueSize)",
                            "Call"
                        ],
                        [
                            "out_ids.long()",
                            "Call"
                        ],
                        [
                            "torch.arange(batchSize).cuda()",
                            "Call"
                        ],
                        [
                            "torch.fmod(out_ids, self.queueSize - self.sour_numclass)",
                            "Call"
                        ],
                        [
                            "(out_ids + self.sour_numclass).long()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.queueSize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_160": {
                "variable": {
                    "value": "out_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batchSize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "q1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "q1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "q1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "q1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "q1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "q1.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "fmod_162": {
                "variable": {
                    "value": "out_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.arange(batchSize).cuda()",
                            "Call"
                        ],
                        [
                            "out_ids + self.index",
                            "BinOp"
                        ],
                        [
                            "torch.fmod(out_ids, self.queueSize)",
                            "Call"
                        ],
                        [
                            "out_ids.long()",
                            "Call"
                        ],
                        [
                            "torch.arange(batchSize).cuda()",
                            "Call"
                        ],
                        [
                            "torch.fmod(out_ids, self.queueSize)",
                            "Call"
                        ],
                        [
                            "out_ids.long()",
                            "Call"
                        ],
                        [
                            "torch.arange(batchSize).cuda()",
                            "Call"
                        ],
                        [
                            "torch.fmod(out_ids, self.queueSize - self.sour_numclass)",
                            "Call"
                        ],
                        [
                            "(out_ids + self.sour_numclass).long()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.queueSize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_324": {
                "variable": {
                    "value": "zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, indsa.size()[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_408": {
                "variable": {
                    "value": "pos_divide",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_pos_rk[ind * group:(ind + 1) * group, ind * group:(ind + 1) * group] / sim_all_rk[ind * group:(ind + 1) * group, ind * group:(ind + 1) * group]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_459": {
                "variable": {
                    "value": "pos_divide",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_pos_rk[ind * group:(ind + 1) * group, ind * group:(ind + 1) * group] / sim_all_rk[ind * group:(ind + 1) * group, ind * group:(ind + 1) * group]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_484": {
                "variable": {
                    "value": "out_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batchSize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "q1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "q1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "q1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "q1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "q1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "q1.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "fmod_486": {
                "variable": {
                    "value": "out_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.arange(batchSize).cuda()",
                            "Call"
                        ],
                        [
                            "out_ids + self.index",
                            "BinOp"
                        ],
                        [
                            "torch.fmod(out_ids, self.queueSize)",
                            "Call"
                        ],
                        [
                            "out_ids.long()",
                            "Call"
                        ],
                        [
                            "torch.arange(batchSize).cuda()",
                            "Call"
                        ],
                        [
                            "torch.fmod(out_ids, self.queueSize)",
                            "Call"
                        ],
                        [
                            "out_ids.long()",
                            "Call"
                        ],
                        [
                            "torch.arange(batchSize).cuda()",
                            "Call"
                        ],
                        [
                            "torch.fmod(out_ids, self.queueSize - self.sour_numclass)",
                            "Call"
                        ],
                        [
                            "(out_ids + self.sour_numclass).long()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.queueSize - self.sour_numclass",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_14": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 * x / (torch.norm(x, 2, axis, keepdim=True).expand_as(x) + 1e-12)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_20": {
                "input": {
                    "value": "exponent",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-tensor / temp",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(exponent, min=-50, max=50)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_34": {
                "input": {
                    "value": "torch.sum(weight * torch.exp(value0), dim=dim, keepdim=keepdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_40": {
                "input": {
                    "value": "sum_exp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(weight * torch.exp(value - m))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_52": {
                "data": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_54": {
                "*size": {
                    "value": "self.queueSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "inputSize",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_55": {
                "*size": {
                    "value": "self.queueSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softplus_151": {
                "input": {
                    "value": "logsumexp(logit_p - 99999.0 * is_neg, dim=1) + logsumexp(logit_n - 99999.0 * is_pos, dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_182": {
                "data": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_184": {
                "*size": {
                    "value": "self.queueSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "inputSize",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_185": {
                "*size": {
                    "value": "self.queueSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_186": {
                "*size": {
                    "value": "self.queueSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_312": {
                "input": {
                    "value": "logsumexp(logit_p - 99999.0 * is_neg, dim=1) + logsumexp(logit_n - 99999.0 * is_pos, dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_312": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_380": {
                "n": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "sim_dist.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_394": {
                "input": {
                    "value": "sim_sg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sigmoid(sim_diff, temp=self.anneal) * mask_indx",
                            "BinOp"
                        ],
                        [
                            "sigmoid(sim_diff, temp=self.anneal) * mask_indx",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_402": {
                "input": {
                    "value": "pos_sim_sg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sim_sg * pos_mask_repeat",
                            "BinOp"
                        ],
                        [
                            "sim_sg * pos_mask_repeat",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eye_425": {
                "n": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "sim_dist.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_438": {
                "input": {
                    "value": "sim_sg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sigmoid(sim_diff, temp=self.anneal) * mask_indx",
                            "BinOp"
                        ],
                        [
                            "sigmoid(sim_diff, temp=self.anneal) * mask_indx",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_443": {
                "data": {
                    "value": "[self.index2label[0][i.item()] if i.item() != -1 else -1 for i in self.index_memory]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_453": {
                "input": {
                    "value": "pos_sim_sg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sim_sg * pos_mask_repeat",
                            "BinOp"
                        ],
                        [
                            "sim_sg * pos_mask_repeat",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_482": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_34": {
                "input": {
                    "value": "weight * torch.exp(value0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "keepdim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "exp_38": {
                "input": {
                    "value": "value - m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_90": {
                "*size": {
                    "value": "[batchSize, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_92": {
                "*size": {
                    "value": "[batchSize, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_327": {
                "tensors": {
                    "value": "(indsa, zeros)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_340": {
                "*size": {
                    "value": "classes_eq.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "floor_348": {
                "input": {
                    "value": "s_repeat.data / self.step",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_357": {
                "*size": {
                    "value": "histogram_pos_repeat.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_411": {
                "input": {
                    "value": "pos_mask[ind * group]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_462": {
                "input": {
                    "value": "pos_mask[ind * group]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_34": {
                "input": {
                    "value": "value0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "value - m",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "UDAsbs/memorybank/NCECriterion.py": {
        "torch": {
            "div_25": {
                "variable": {
                    "value": "log_D1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.select(1, 0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "P_pos.add(m * Pn + eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_29": {
                "variable": {
                    "value": "log_D0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P_neg.clone().fill_(m * Pn)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "P_neg.add(m * Pn + eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_40": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_46": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[bsz]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_62": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ],
                        [
                            "torch.exp(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_65": {
                "variable": {
                    "value": "is_need",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.ones([bsz, 1], dtype=torch.float).cuda(), is_neg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_69": {
                "input": {
                    "value": "x_logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x[:, 0] / neg_div",
                            "BinOp"
                        ],
                        [
                            "-torch.log(x_logit)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "ones_65": {
                "*size": {
                    "value": "[bsz, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "UDAsbs/memorybank/alias_multinomial.py": {
        "torch": {
            "zeros_13": {
                "variable": {
                    "value": "self.prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(probs)",
                            "Call"
                        ],
                        [
                            "self.alias.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_57": {
                "variable": {
                    "value": "kk",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.prob.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_61": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.prob.index_select(0, kk)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "UDAsbs/metric_learning/distance.py": {
        "torch": {
            "normalize_70": {
                "variable": {
                    "value": "input1_normed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input1",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_71": {
                "variable": {
                    "value": "input2_normed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input2",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_56": {
                "input": {
                    "value": "input1",
                    "type": "Variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_56": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_57": {
                "input": {
                    "value": "input2",
                    "type": "Variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_57": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_72": {
                "input": {
                    "value": "input1_normed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.normalize(input1, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "input2_normed.t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "UDAsbs/models/dsbn.py": {
        "torch": {
            "BatchNorm2d_10": {
                "variable": {
                    "value": "self.BN_S",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_11": {
                "variable": {
                    "value": "self.BN_T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "split_19": {
                "variable": {
                    "value": "split",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "int(bs / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_22": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out1, out2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_29": {
                "variable": {
                    "value": "self.BN_S",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_30": {
                "variable": {
                    "value": "self.BN_T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "split_38": {
                "variable": {
                    "value": "split",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "int(bs / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_41": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out1, out2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "child.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_71": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "child.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "UDAsbs/models/gem_pooling.py": {
        "torch": {
            "Parameter_49": {
                "variable": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1) * norm",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_35": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clamp(min=self.eps).pow(self.p)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_35": {
                "input": {
                    "value": "1.0 / self.p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_49": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "UDAsbs/models/memory_bank.py": {
        "torch": {
            "clamp_21": {
                "variable": {
                    "value": "exponent",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "exponent",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-tensor / temp",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(exponent, min=-50, max=50)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-50",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_33": {
                "variable": {
                    "value": "(m, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_40": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_41": {
                "variable": {
                    "value": "sum_exp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight * torch.exp(value - m)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_82": {
                "variable": {
                    "value": "self.t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1 + self.step",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "self.step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_94": {
                "variable": {
                    "value": "pseudo_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.index2label[self.choice_c][i.item()] for i in index]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_108": {
                "variable": {
                    "value": "memory_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "memory_label_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_120": {
                "variable": {
                    "value": "l_logist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "queue.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "q1.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_131": {
                "variable": {
                    "value": "alpha_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-s_p.detach() + 1 + self.m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_132": {
                "variable": {
                    "value": "alpha_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_n.detach() + self.m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_146": {
                "variable": {
                    "value": "pseudo_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.index2label[self.choice_c][i.item()] for i in index]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_150": {
                "variable": {
                    "value": "memory_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.index2label[self.choice_c][i] for i in range(self.sour_numclass)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_159": {
                "variable": {
                    "value": "l_logist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "queue.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "q1.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_167": {
                "variable": {
                    "value": "alpha_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-s_p.detach() + 1 + self.m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_168": {
                "variable": {
                    "value": "alpha_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_n.detach() + self.m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_191": {
                "variable": {
                    "value": "out_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batchSize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "q1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "q1.shape[0]",
                            "Subscript"
                        ],
                        [
                            "q1.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "fmod_193": {
                "variable": {
                    "value": "out_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.arange(batchSize).cuda()",
                            "Call"
                        ],
                        [
                            "out_ids + self.index",
                            "BinOp"
                        ],
                        [
                            "torch.fmod(out_ids, self.queueSize - self.sour_numclass)",
                            "Call"
                        ],
                        [
                            "(out_ids + self.sour_numclass).long()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.queueSize - self.sour_numclass",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_15": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 * x / (torch.norm(x, 2, axis, keepdim=True).expand_as(x) + 1e-12)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_22": {
                "input": {
                    "value": "exponent",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-tensor / temp",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(exponent, min=-50, max=50)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_37": {
                "input": {
                    "value": "torch.sum(weight * torch.exp(value0), dim=dim, keepdim=keepdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_43": {
                "input": {
                    "value": "sum_exp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(weight * torch.exp(value - m))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_58": {
                "data": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_60": {
                "*size": {
                    "value": "self.queueSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "inputSize",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_61": {
                "*size": {
                    "value": "self.queueSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_62": {
                "*size": {
                    "value": "self.queueSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_139": {
                "input": {
                    "value": "logsumexp(logit_p - 99999.0 * is_neg, weight=exp_variance, dim=1) + logsumexp(logit_n - 99999.0 * is_pos, weight=exp_variance, dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softplus_174": {
                "input": {
                    "value": "logsumexp(logit_p - 99999.0 * is_neg, dim=1) + logsumexp(logit_n - 99999.0 * is_pos, dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_37": {
                "input": {
                    "value": "weight * torch.exp(value0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "keepdim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "exp_41": {
                "input": {
                    "value": "value - m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_37": {
                "input": {
                    "value": "value0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "value - m",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "UDAsbs/models/resnet.py": {
        "torch": {
            "Sequential_43": {
                "variable": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.memorybank_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mb_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_65": {
                "variable": {
                    "value": "self.mbn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mb_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_112": {
                "variable": {
                    "value": "self.NL_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Non_local(256, bn_norm, num_splits) for _ in range(non_layers[0])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_115": {
                "variable": {
                    "value": "self.NL_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Non_local(512, bn_norm, num_splits) for _ in range(non_layers[1])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_118": {
                "variable": {
                    "value": "self.NL_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Non_local(1024, bn_norm, num_splits) for _ in range(non_layers[2])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_121": {
                "variable": {
                    "value": "self.NL_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Non_local(2048, bn_norm, num_splits) for _ in range(non_layers[3])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "normalize_179": {
                "variable": {
                    "value": "bn_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.feat_bn(self.feat(x))",
                            "Call"
                        ],
                        [
                            "self.feat_bn(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(bn_x)",
                            "Call"
                        ],
                        [
                            "F.normalize(bn_x)",
                            "Call"
                        ],
                        [
                            "F.relu(bn_x)",
                            "Call"
                        ],
                        [
                            "self.drop(bn_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_183": {
                "variable": {
                    "value": "bn_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.feat_bn(self.feat(x))",
                            "Call"
                        ],
                        [
                            "self.feat_bn(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(bn_x)",
                            "Call"
                        ],
                        [
                            "F.normalize(bn_x)",
                            "Call"
                        ],
                        [
                            "F.relu(bn_x)",
                            "Call"
                        ],
                        [
                            "self.drop(bn_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_89": {
                "variable": {
                    "value": "self.feat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "resnet.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_90": {
                "variable": {
                    "value": "self.feat_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_96": {
                "variable": {
                    "value": "self.feat_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_99": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_185": {
                "variable": {
                    "value": "bn_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.feat_bn(self.feat(x))",
                            "Call"
                        ],
                        [
                            "self.feat_bn(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(bn_x)",
                            "Call"
                        ],
                        [
                            "F.normalize(bn_x)",
                            "Call"
                        ],
                        [
                            "F.relu(bn_x)",
                            "Call"
                        ],
                        [
                            "self.drop(bn_x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "UDAsbs/models/resnet_multi.py": {
        "torch": {
            "Sequential_43": {
                "variable": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.memorybank_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mb_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_66": {
                "variable": {
                    "value": "self.mbn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mb_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_133": {
                "variable": {
                    "value": "self.NL_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Non_local(256, bn_norm, num_splits) for _ in range(non_layers[0])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_136": {
                "variable": {
                    "value": "self.NL_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Non_local(512, bn_norm, num_splits) for _ in range(non_layers[1])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_139": {
                "variable": {
                    "value": "self.NL_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Non_local(1024, bn_norm, num_splits) for _ in range(non_layers[2])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_142": {
                "variable": {
                    "value": "self.NL_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Non_local(2048, bn_norm, num_splits) for _ in range(non_layers[3])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "normalize_228": {
                "variable": {
                    "value": "bn_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.feat_bn(x)",
                            "Call"
                        ],
                        [
                            "self.drop(bn_x)",
                            "Call"
                        ],
                        [
                            "F.normalize(bn_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_90": {
                "variable": {
                    "value": "self.feat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "resnet.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_91": {
                "variable": {
                    "value": "self.feat_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_97": {
                "variable": {
                    "value": "self.feat_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_98": {
                "variable": {
                    "value": "self.feat_bn_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_104": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "UDAsbs/multigpu.py": {
        "torch": {
            "empty_24": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(dataloader.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_40": {
                "variable": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_80": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "splits[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "TYPE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float64",
                            "MethodArgument"
                        ],
                        [
                            "torch.float64",
                            "MethodArgument"
                        ],
                        [
                            "torch.float64",
                            "MethodArgument"
                        ],
                        [
                            "torch.float64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_count_92": {
                "variable": {
                    "value": "ngpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_116": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "ngpu - model_gpus",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "A[0].size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "TYPE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float64",
                            "MethodArgument"
                        ],
                        [
                            "torch.float64",
                            "MethodArgument"
                        ],
                        [
                            "torch.float64",
                            "MethodArgument"
                        ],
                        [
                            "torch.float64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_121": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.empty(N, 1, device='cuda:0', dtype=TYPE)",
                            "Call"
                        ],
                        [
                            "torch.empty(ngpu - model_gpus, A[0].size(1), device='cuda:0', dtype=TYPE)",
                            "Call"
                        ],
                        [
                            "torch.sum(c, 0, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "synchronize_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_102": {
                "variable": {
                    "value": "summed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "PS[a]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "synchronize_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_27": {
                "*size": {
                    "value": "points_per_gpu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batches_per_gpu * dataloader.batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "'cuda:' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "TYPE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float64",
                            "MethodArgument"
                        ],
                        [
                            "torch.float64",
                            "MethodArgument"
                        ],
                        [
                            "torch.float64",
                            "MethodArgument"
                        ],
                        [
                            "torch.float64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "empty_31": {
                "*size": {
                    "value": "len(dataloader.dataset) - (ngpu_store - 1) * points_per_gpu",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "'cuda:' + str(model_gpus + ngpu_store - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "TYPE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float64",
                            "MethodArgument"
                        ],
                        [
                            "torch.float64",
                            "MethodArgument"
                        ],
                        [
                            "torch.float64",
                            "MethodArgument"
                        ],
                        [
                            "torch.float64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "exp_101": {
                "input": {
                    "value": "PS[a]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "PS[a]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[torch.empty(points_per_gpu, dim, device='cuda:' + str(i), dtype=TYPE) for i in range(model_gpus, model_gpus + ngpu_store - 1)]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "device_45": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_82": {
                "input": {
                    "value": "A[a]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "b_[a]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_118": {
                "input": {
                    "value": "b_[a]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "A[a]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_99": {
                "input": {
                    "value": "A[a]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "b_[a]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "UDAsbs/sinkhornknopp.py": {
        "torch": {
            "ones_173": {
                "variable": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(self.pseudo_loader.dataset)",
                            "Call"
                        ],
                        [
                            "max(self.L[nh].size())",
                            "Call"
                        ],
                        [
                            "max(self.L.size())",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_182": {
                "variable": {
                    "value": "ngpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_200": {
                "variable": {
                    "value": "argmaxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(self.pseudo_loader.dataset)",
                            "Call"
                        ],
                        [
                            "max(self.L[nh].size())",
                            "Call"
                        ],
                        [
                            "max(self.L.size())",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_204": {
                "variable": {
                    "value": "amax",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qq",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_34": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predicted[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_171": {
                "*size": {
                    "value": "(self.outs[nh], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_172": {
                "*size": {
                    "value": "(N, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "synchronize_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_191": {
                "variable": {
                    "value": "err",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(c.squeeze() / c_new.squeeze() - ones)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_198": {
                "input": {
                    "value": "qq",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "c[splits[i]:splits[i + 1], :].to('cuda:' + str(i + 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "qq",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mul_199": {
                "input": {
                    "value": "r.to('cuda:' + str(i + 1)).t()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "qq",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "qq",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_cache_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_191": {
                "input": {
                    "value": "c.squeeze() / c_new.squeeze() - ones",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "UDAsbs/trainers.py": {
        "torch": {
            "Softmax_199": {
                "variable": {
                    "value": "self.sm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogSoftmax_200": {
                "variable": {
                    "value": "self.log_sm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "KLDivLoss_202": {
                "variable": {
                    "value": "self.kl_distance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_357": {
                "variable": {
                    "value": "exp_variance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-variance",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_360": {
                "variable": {
                    "value": "loss_reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "variance",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(self.kl_distance(self.log_sm(ml_sour), self.sm(ml_sour_ema.detach())), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.kl_distance(self.log_sm(torch.cat((pred2, ml_sour), 1)), self.sm(torch.cat((pred2_ema, ml_sour_ema), 1).detach())), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.kl_distance(self.log_sm(tri_t), self.sm(tri_t_ema)), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_367": {
                "variable": {
                    "value": "variance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.kl_distance(self.log_sm(tri_t), self.sm(tri_t_ema))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_369": {
                "variable": {
                    "value": "exp_variance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-variance",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_384": {
                "variable": {
                    "value": "input_log_softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_385": {
                "variable": {
                    "value": "target_softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_logits / 0.2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_count_390": {
                "variable": {
                    "value": "device_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_397": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inputs_1_s, inputs_1_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_count_401": {
                "variable": {
                    "value": "device_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_410": {
                "variable": {
                    "value": "forward_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "bsz",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_411": {
                "variable": {
                    "value": "backward_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_412": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bsz",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_count_555": {
                "variable": {
                    "value": "device_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_562": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inputs_1_s, inputs_1_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_count_566": {
                "variable": {
                    "value": "device_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_283": {
                "variable": {
                    "value": "loss_ce_1_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_339": {
                "variable": {
                    "value": "variance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.kl_distance(self.log_sm(ml_sour), self.sm(ml_sour_ema.detach()))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_346": {
                "variable": {
                    "value": "variance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.kl_distance(self.log_sm(torch.cat((pred2, ml_sour), 1)), self.sm(torch.cat((pred2_ema, ml_sour_ema), 1).detach()))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "kl_div_386": {
                "input": {
                    "value": "input_log_softmax",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.log_softmax(input_logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_softmax",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(target_logits / 0.2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_507": {
                "variable": {
                    "value": "loss_kl",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_259": {
                "variable": {
                    "value": "ml_sour",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_out_t1",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "queue.transpose(1, 0).detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_260": {
                "variable": {
                    "value": "ml_sour_ema",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_out_t1_ema",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "queue.transpose(1, 0).detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_359": {
                "input": {
                    "value": "loss_3layer * exp_variance",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_371": {
                "input": {
                    "value": "variance",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(self.kl_distance(self.log_sm(ml_sour), self.sm(ml_sour_ema.detach())), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.kl_distance(self.log_sm(torch.cat((pred2, ml_sour), 1)), self.sm(torch.cat((pred2_ema, ml_sour_ema), 1).detach())), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.kl_distance(self.log_sm(tri_t), self.sm(tri_t_ema)), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_247": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_257": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_493": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_504": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_346": {
                "tensors": {
                    "value": "(pred2_ema, ml_sour_ema)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "UDAsbs/utils/__init__.py": {
        "torch": {
            "is_tensor_7": {
                "obj": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_17": {
                "ndarray": {
                    "value": "ndarray",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_tensor_18": {
                "obj": {
                    "value": "ndarray",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "UDAsbs/utils/common_functions.py": {
        "torch": {
            "zeros_117": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(rows * n, cols)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_133": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "int(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_146": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "int(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_32": {
                "ndarray": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_tensor_158": {
                "obj": {
                    "value": "input_val",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_234": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_236": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_244": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_filename",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_241": {
                "f": {
                    "value": "model_filename",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "UDAsbs/utils/data/functional_our.py": {
        "torch": {
            "from_numpy_29": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pic.transpose((2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_38": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(pic, np.int32, copy=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_40": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(pic, np.int16, copy=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_42": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(pic, np.float32, copy=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_44": {
                "ndarray": {
                    "value": "np.array(pic, np.uint8, copy=False)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "UDAsbs/utils/data/preprocessor.py": {
        "torch": {
            "randperm_96": {
                "n": {
                    "value": "self.num_cam",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_129": {
                "n": {
                    "value": "self.num_cam",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "UDAsbs/utils/data/sampler.py": {
        "torch": {
            "randperm_33": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.num_samples",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_68": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.pids)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "UDAsbs/utils/faiss_rerank.py": {
        "torch": {
            "softmax_81": {
                "variable": {
                    "value": "V[i, k_reciprocal_expansion_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "-dist",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_83": {
                "variable": {
                    "value": "V[i, k_reciprocal_expansion_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "-dist",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_79": {
                "input": {
                    "value": "target_features[i].unsqueeze(0).contiguous()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "target_features[k_reciprocal_expansion_index].t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "UDAsbs/utils/faiss_utils.py": {
        "torch": {
            "empty_26": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_31": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "synchronize_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_70": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nq",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "xb.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_76": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nq",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "xb.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "UDAsbs/utils/loss_and_miner_utils.py": {
        "torch": {
            "max_8": {
                "variable": {
                    "value": "(max_vals, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_10": {
                "variable": {
                    "value": "exp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inside_exp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x - max_vals",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_13": {
                "variable": {
                    "value": "inside_log",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "exp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(inside_exp)",
                            "Call"
                        ],
                        [
                            "exp * keep_mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clamp_52": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_norm + y_norm - 2.0 * torch.mm(x, y_t)",
                            "BinOp"
                        ],
                        [
                            "dist - torch.diag(dist.diag())",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dist, 0.0, np.inf)",
                            "Call"
                        ],
                        [
                            "dist + mask * eps",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(dist)",
                            "Call"
                        ],
                        [
                            "dist * (1.0 - mask)",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "np.inf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_213": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "labels.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "unique_216": {
                "variable": {
                    "value": "(indices, counts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(indices_tuple, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "return_counts": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_18": {
                "variable": {
                    "value": "inside_log[inside_log == 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "-max_vals[inside_log == 0]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_27": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "y.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_42": {
                "variable": {
                    "value": "y_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_45": {
                "variable": {
                    "value": "y_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_56": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_norm + y_norm - 2.0 * torch.mm(x, y_t)",
                            "BinOp"
                        ],
                        [
                            "dist - torch.diag(dist.diag())",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dist, 0.0, np.inf)",
                            "Call"
                        ],
                        [
                            "dist + mask * eps",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(dist)",
                            "Call"
                        ],
                        [
                            "dist * (1.0 - mask)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_19": {
                "input": {
                    "value": "inside_log",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(exp, dim=dim, keepdim=True)",
                            "Call"
                        ],
                        [
                            "inside_log + torch.exp(-max_vals)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "eye_78": {
                "n": {
                    "value": "matches.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_118": {
                "n": {
                    "value": "matches.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_216": {
                "tensors": {
                    "value": "indices_tuple",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_15": {
                "input": {
                    "value": "-max_vals",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mm_48": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "y_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.transpose(y, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(x, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_51": {
                "input": {
                    "value": "dist.diag()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_217": {
                "input": {
                    "value": "counts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "counts.float() / torch.sum(counts) * len(labels)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_204": {
                "tensors": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_192": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_200": {
                "input": {
                    "value": "c_f.longest_list([p_idx, n_idx])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "UDAsbs/utils/lr_scheduler.py": {
        "torch": {}
    },
    "UDAsbs/utils/rerank.py": {
        "torch": {
            "argsort_141": {
                "variable": {
                    "value": "initial_rank",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "original_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate([np.concatenate([q_q_dist, q_g_dist], axis=1), np.concatenate([q_g_dist.T, g_g_dist], axis=1)], axis=0)",
                            "Call"
                        ],
                        [
                            "np.power(original_dist, 2).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.transpose(1.0 * original_dist / np.max(original_dist, axis=0))",
                            "Call"
                        ],
                        [
                            "original_dist[:query_num,]",
                            "Subscript"
                        ],
                        [
                            "torch.pow(target_features, 2).sum(dim=1, keepdim=True) * 2",
                            "BinOp"
                        ],
                        [
                            "original_dist.expand(N, N) - 2 * torch.mm(target_features, target_features.t())",
                            "BinOp"
                        ],
                        [
                            "original_dist / original_dist.max(0)[0]",
                            "BinOp"
                        ],
                        [
                            "original_dist.t()",
                            "Call"
                        ],
                        [
                            "original_dist.cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_160": {
                "variable": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "all_num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gallery_num",
                            "Name"
                        ]
                    ]
                },
                "out": {
                    "value": "all_num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gallery_num",
                            "Name"
                        ]
                    ]
                }
            },
            "zeros_like_187": {
                "variable": {
                    "value": "jaccard_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "original_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate([np.concatenate([q_q_dist, q_g_dist], axis=1), np.concatenate([q_g_dist.T, g_g_dist], axis=1)], axis=0)",
                            "Call"
                        ],
                        [
                            "np.power(original_dist, 2).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.transpose(1.0 * original_dist / np.max(original_dist, axis=0))",
                            "Call"
                        ],
                        [
                            "original_dist[:query_num,]",
                            "Subscript"
                        ],
                        [
                            "torch.pow(target_features, 2).sum(dim=1, keepdim=True) * 2",
                            "BinOp"
                        ],
                        [
                            "original_dist.expand(N, N) - 2 * torch.mm(target_features, target_features.t())",
                            "BinOp"
                        ],
                        [
                            "original_dist / original_dist.max(0)[0]",
                            "BinOp"
                        ],
                        [
                            "original_dist.t()",
                            "Call"
                        ],
                        [
                            "original_dist.cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_129": {
                "variable": {
                    "value": "source_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_features.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_features.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unique_170": {
                "variable": {
                    "value": "k_reciprocal_expansion_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k_reciprocal_expansion_index",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "k_reciprocal_index",
                            "Name"
                        ],
                        [
                            "np.unique(k_reciprocal_expansion_index)",
                            "Call"
                        ],
                        [
                            "np.append(k_reciprocal_expansion_index, candidate_k_reciprocal_index)",
                            "Call"
                        ],
                        [
                            "k_reciprocal_index",
                            "Name"
                        ],
                        [
                            "torch.unique(k_reciprocal_expansion_index)",
                            "Call"
                        ],
                        [
                            "torch.cat((k_reciprocal_expansion_index, candidate_k_reciprocal_index))",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_171": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-original_dist[i, k_reciprocal_expansion_index]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_189": {
                "variable": {
                    "value": "temp_min",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "gallery_num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "q_g_dist.shape[0] + q_g_dist.shape[1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "nonzero_105": {
                "input": {
                    "value": "backward_k_neigh_index == i",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "pow_137": {
                "input": {
                    "value": "target_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_features.cuda()",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_137": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_121": {
                "input": {
                    "value": "target_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_features.cuda()",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_121": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_122": {
                "input": {
                    "value": "source_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "source_features.cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_122": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_124": {
                "input": {
                    "value": "-sour_tar_dist",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mm_138": {
                "input": {
                    "value": "target_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_features.cuda()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "target_features.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_168": {
                "variable": {
                    "value": "k_reciprocal_expansion_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(k_reciprocal_expansion_index, candidate_k_reciprocal_index)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_172": {
                "input": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.exp(-original_dist[i, k_reciprocal_expansion_index])",
                            "Call"
                        ],
                        [
                            "torch.exp(-original_dist[i, k_reciprocal_expansion_index])",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_190": {
                "input": {
                    "value": "V[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nonzero_185": {
                "input": {
                    "value": "V[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_194": {
                "input": {
                    "value": "V[i, indNonZero[j]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "UDAsbs/utils/serialization.py": {
        "torch": {
            "save_26": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fpath",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_34": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fpath",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_34": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "source_pretrain.py": {
        "torch": {
            "DataLoader_68": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Preprocessor(list(set(dataset.query) | set(dataset.gallery)), root=dataset.images_dir, transform=test_transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_115": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "models.create(args.arch, num_features=args.features, dropout=args.dropout, num_classes=[num_classes])",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_142": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': args.lr, 'weight_decay': args.weight_decay}]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_63": {
                "dataset": {
                    "value": "Preprocessor(train_set, root=dataset.images_dir, transform=train_transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomMultipleGallerySampler(train_set, num_instances)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "not rmgs_flag",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_83": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}