{
    "utils/loss.py": {
        "sklearn": {
            "KDTree_94": {
                "variable": {
                    "value": "tree1",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "array1[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "leaf_size": {
                    "value": "num_point + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "KDTree_95": {
                "variable": {
                    "value": "tree2",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "array2[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "leaf_size": {
                    "value": "num_point + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "convert_to_tensor_21": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.array(range(B))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_22": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(np.array(range(B)), dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(c, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.tile(c, [1, K])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(c, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_23": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(np.array(range(B)), dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(c, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.tile(c, [1, K])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(c, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, K]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_24": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(np.array(range(B)), dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(c, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.tile(c, [1, K])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(c, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_26": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(idx, axis=-1)",
                            "Call"
                        ],
                        [
                            "idx",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_27": {
                "variable": {
                    "value": "new",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[c, idx]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_nd_29": {
                "variable": {
                    "value": "select",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([c, idx], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_37": {
                "variable": {
                    "value": "cd_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cd_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * dists_forward + 0.5 * dists_backward",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(cd_dist, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_39": {
                "variable": {
                    "value": "cd_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cd_dist_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cd_dist / radius",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_49": {
                "variable": {
                    "value": "pos_dist1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pos_dist1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(gt_normal - fwd1) ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(pos_dist1, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_51": {
                "variable": {
                    "value": "neg_dist1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "neg_dist1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(gt_normal + fwd1) ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(neg_dist1, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_53": {
                "variable": {
                    "value": "dist1",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "pos_dist1 < neg_dist1",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "pos_dist1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(gt_normal - fwd1) ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(pos_dist1, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "neg_dist1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(gt_normal + fwd1) ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(neg_dist1, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_54": {
                "variable": {
                    "value": "dist1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dist1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(pos_dist1 < neg_dist1, pos_dist1, neg_dist1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(dist1, axis=1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_59": {
                "variable": {
                    "value": "pos_dist2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pos_dist2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(gen_normal - fwd2) ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(pos_dist2, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_61": {
                "variable": {
                    "value": "neg_dist2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "neg_dist2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(gen_normal + fwd2) ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(neg_dist2, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_63": {
                "variable": {
                    "value": "dist2",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "pos_dist2 < neg_dist2",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "pos_dist2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(gen_normal - fwd2) ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(pos_dist2, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "neg_dist2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(gen_normal + fwd2) ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(neg_dist2, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_64": {
                "variable": {
                    "value": "dist2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dist2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(pos_dist2 < neg_dist2, pos_dist2, neg_dist2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(dist2, axis=1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_68": {
                "variable": {
                    "value": "normal_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dist_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist / radius",
                            "BinOp"
                        ],
                        [
                            "dist / radius",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_76": {
                "variable": {
                    "value": "pos_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pos_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(gt_normal - gen_normal) ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(pos_dist, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_79": {
                "variable": {
                    "value": "neg_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "neg_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(gt_normal + gen_normal) ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(neg_dist, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_81": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "pos_dist < neg_dist",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "pos_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(gt_normal - gen_normal) ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(pos_dist, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "neg_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(gt_normal + gen_normal) ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(neg_dist, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_82": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * dist1 + 0.5 * dist2",
                            "BinOp"
                        ],
                        [
                            "tf.where(pos_dist < neg_dist, pos_dist, neg_dist)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(dist, axis=1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "dist + (av_dist1 + av_dist2) / batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_86": {
                "variable": {
                    "value": "normal_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dist_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist / radius",
                            "BinOp"
                        ],
                        [
                            "dist / radius",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_20": {
                "input": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(idx, axis=-1)",
                            "Call"
                        ],
                        [
                            "idx",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/pc_util.py": {
        "sklearn": {
            "NearestNeighbors_13": {
                "variable": {
                    "value": "knn_search",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "algorithm": {
                    "value": "auto",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "utils/tf_util.py": {
        "sklearn": {}
    },
    "main.py": {
        "tensorflow": {
            "placeholder_68": {
                "variable": {
                    "value": "training_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_70": {
                "variable": {
                    "value": "input_sparse_xyz_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(arg.batch_size, arg.num_point, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_71": {
                "variable": {
                    "value": "gt_sparse_normal_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(arg.batch_size, arg.num_point, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_72": {
                "variable": {
                    "value": "gt_dense_xyz_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(arg.batch_size, arg.num_point * arg.up_ratio, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_73": {
                "variable": {
                    "value": "gt_dense_normal_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(arg.batch_size, arg.num_point * arg.up_ratio, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_74": {
                "variable": {
                    "value": "input_r_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "arg.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_76": {
                "variable": {
                    "value": "shape_sparse_xyz_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, arg.num_shape_point, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_77": {
                "variable": {
                    "value": "shape_ddense_xyz_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, arg.num_point * arg.up_ratio * arg.num_patch, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_95": {
                "variable": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConfigProto_131": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_102": {
                "variable": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "arg.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "global_variables_initializer_135": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_137": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_regularization_loss_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_101": {
                "control_inputs": {
                    "value": "gen_update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[op for op in tf.get_collection(tf.GraphKeys.UPDATE_OPS) if op.name.startswith('generator')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Session_134": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_default_graph_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_97": {
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/model_pugeo.py": {
        "tensorflow": {
            "expand_dims_14": {
                "variable": {
                    "value": "input_point_cloud",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_cloud",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_cloud",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_22": {
                "variable": {
                    "value": "point_cloud_transformed",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "point_cloud",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_cloud",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "transform",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_transform_net(edge_feature, is_training, bn_decay, K=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_23": {
                "variable": {
                    "value": "input_point_cloud",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_cloud_transformed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(point_cloud, transform)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_max_38": {
                "variable": {
                    "value": "net_max_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "out2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.conv2d(out1, fd, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, weight_decay=weight_decay, scope='dgcnn_conv2', bn_decay=bn_decay)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_39": {
                "variable": {
                    "value": "net_mean_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "out2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.conv2d(out1, fd, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, weight_decay=weight_decay, scope='dgcnn_conv2', bn_decay=bn_decay)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_55": {
                "variable": {
                    "value": "net_max_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "out4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.conv2d(edge_feature, fd, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, weight_decay=weight_decay, scope='dgcnn_conv4', bn_decay=bn_decay)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_56": {
                "variable": {
                    "value": "net_mean_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "out4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.conv2d(edge_feature, fd, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, weight_decay=weight_decay, scope='dgcnn_conv4', bn_decay=bn_decay)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_72": {
                "variable": {
                    "value": "net_max_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "out6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.conv2d(edge_feature, fd, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, weight_decay=weight_decay, scope='dgcnn_conv6', bn_decay=bn_decay)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_73": {
                "variable": {
                    "value": "net_mean_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "out6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.conv2d(edge_feature, fd, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, weight_decay=weight_decay, scope='dgcnn_conv6', bn_decay=bn_decay)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tile_87": {
                "variable": {
                    "value": "expand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.max_pool2d(out8, [num_point, 1], padding='VALID', scope='maxpool')",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, num_point, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_89": {
                "variable": {
                    "value": "concat_unweight",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[expand, net_max_1, net_mean_1, out3, net_max_2, net_mean_2, out5, net_max_3, net_mean_3, out7, out8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_112": {
                "variable": {
                    "value": "out_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "out_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.conv2d(concat_unweight, 128, [1, 1], padding='VALID', stride=[1, 1], bn_decay=bn_decay, bn=True, is_training=is_training, scope='attention_conv1', weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(out_attention, 64, [1, 1], padding='VALID', stride=[1, 1], bn_decay=bn_decay, bn=True, is_training=is_training, scope='attention_conv2', weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(out_attention, len(feat_list), [1, 1], padding='VALID', stride=[1, 1], bn_decay=bn_decay, bn=True, is_training=is_training, scope='attention_conv3', weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.max_pool2d(out_attention, [num_point, 1], padding='VALID', scope='attention_maxpool')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(out_attention)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_113": {
                "variable": {
                    "value": "tmp_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.conv2d(concat_unweight, 128, [1, 1], padding='VALID', stride=[1, 1], bn_decay=bn_decay, bn=True, is_training=is_training, scope='attention_conv1', weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(out_attention, 64, [1, 1], padding='VALID', stride=[1, 1], bn_decay=bn_decay, bn=True, is_training=is_training, scope='attention_conv2', weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(out_attention, len(feat_list), [1, 1], padding='VALID', stride=[1, 1], bn_decay=bn_decay, bn=True, is_training=is_training, scope='attention_conv3', weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.max_pool2d(out_attention, [num_point, 1], padding='VALID', scope='attention_maxpool')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(out_attention)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_123": {
                "variable": {
                    "value": "attention_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(attention_weight, [1, num_point, 1, 1])",
                            "Call"
                        ],
                        [
                            "tmp2",
                            "variable"
                        ],
                        [
                            "tf.concat([attention_weight, tmp2], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, num_point, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_124": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "concat_unweight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=3, values=[expand, net_max_1, net_mean_1, out3, net_max_2, net_mean_2, out5, net_max_3, net_mean_3, out7, out8])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "attention_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(attention_weight, [1, num_point, 1, 1])",
                            "Call"
                        ],
                        [
                            "tmp2",
                            "variable"
                        ],
                        [
                            "tf.concat([attention_weight, tmp2], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_193": {
                "variable": {
                    "value": "coord_z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "coord_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.conv2d(concat_up, 1, [1, 1], padding='VALID', stride=[1, 1], activation_fn=None, bn=False, is_training=is_training, scope='fc_layer', weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.reshape(coord_z, [batch_size, up_ratio, num_point, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(coord_z, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.zeros_like(coord_z), tf.zeros_like(coord_z), coord_z], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(coord_z, affine_T)",
                            "Call"
                        ],
                        [
                            "tf.transpose(coord_z, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(coord_z, [batch_size, num_point * up_ratio, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, up_ratio, num_point, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_194": {
                "variable": {
                    "value": "coord_z",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "coord_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.conv2d(concat_up, 1, [1, 1], padding='VALID', stride=[1, 1], activation_fn=None, bn=False, is_training=is_training, scope='fc_layer', weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.reshape(coord_z, [batch_size, up_ratio, num_point, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(coord_z, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.zeros_like(coord_z), tf.zeros_like(coord_z), coord_z], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(coord_z, affine_T)",
                            "Call"
                        ],
                        [
                            "tf.transpose(coord_z, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(coord_z, [batch_size, num_point * up_ratio, -1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_195": {
                "variable": {
                    "value": "coord_z",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros_like(coord_z), tf.zeros_like(coord_z), coord_z]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_197": {
                "variable": {
                    "value": "coord_z",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "coord_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.conv2d(concat_up, 1, [1, 1], padding='VALID', stride=[1, 1], activation_fn=None, bn=False, is_training=is_training, scope='fc_layer', weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.reshape(coord_z, [batch_size, up_ratio, num_point, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(coord_z, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.zeros_like(coord_z), tf.zeros_like(coord_z), coord_z], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(coord_z, affine_T)",
                            "Call"
                        ],
                        [
                            "tf.transpose(coord_z, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(coord_z, [batch_size, num_point * up_ratio, -1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "affine_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.conv2d(concat, 9, [1, 1], padding='VALID', stride=[1, 1], bn_decay=bn_decay, activation_fn=None, bn=None, is_training=is_training, scope='patch_conv1', weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.reshape(affine_T, [batch_size, num_point, 3, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_198": {
                "variable": {
                    "value": "coord_z",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "coord_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.conv2d(concat_up, 1, [1, 1], padding='VALID', stride=[1, 1], activation_fn=None, bn=False, is_training=is_training, scope='fc_layer', weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.reshape(coord_z, [batch_size, up_ratio, num_point, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(coord_z, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.zeros_like(coord_z), tf.zeros_like(coord_z), coord_z], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(coord_z, affine_T)",
                            "Call"
                        ],
                        [
                            "tf.transpose(coord_z, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(coord_z, [batch_size, num_point * up_ratio, -1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_199": {
                "variable": {
                    "value": "coord_z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "coord_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.conv2d(concat_up, 1, [1, 1], padding='VALID', stride=[1, 1], activation_fn=None, bn=False, is_training=is_training, scope='fc_layer', weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.reshape(coord_z, [batch_size, up_ratio, num_point, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(coord_z, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.zeros_like(coord_z), tf.zeros_like(coord_z), coord_z], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(coord_z, affine_T)",
                            "Call"
                        ],
                        [
                            "tf.transpose(coord_z, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(coord_z, [batch_size, num_point * up_ratio, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, num_point * up_ratio, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_11": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'generator'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_116": {
                "variable": {
                    "value": "tmp1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "out_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.conv2d(concat_unweight, 128, [1, 1], padding='VALID', stride=[1, 1], bn_decay=bn_decay, bn=True, is_training=is_training, scope='attention_conv1', weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(out_attention, 64, [1, 1], padding='VALID', stride=[1, 1], bn_decay=bn_decay, bn=True, is_training=is_training, scope='attention_conv2', weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(out_attention, len(feat_list), [1, 1], padding='VALID', stride=[1, 1], bn_decay=bn_decay, bn=True, is_training=is_training, scope='attention_conv3', weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.max_pool2d(out_attention, [num_point, 1], padding='VALID', scope='attention_maxpool')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(out_attention)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, i]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_118": {
                "variable": {
                    "value": "tmp2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(out_attention, [0, 0, 0, i], [1, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 1, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "variable": {
                    "value": "uv_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "uv_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.conv2d(concat, up_ratio * 2, [1, 1], padding='VALID', stride=[1, 1], bn_decay=bn_decay, activation_fn=None, bn=None, is_training=is_training, scope='uv_conv1', weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.reshape(uv_2d, [batch_size, num_point, up_ratio, 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([uv_2d, tf.zeros([batch_size, num_point, up_ratio, 1])], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, num_point, up_ratio, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_134": {
                "variable": {
                    "value": "uv_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[uv_2d, tf.zeros([batch_size, num_point, up_ratio, 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_139": {
                "variable": {
                    "value": "affine_T",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "affine_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.conv2d(concat, 9, [1, 1], padding='VALID', stride=[1, 1], bn_decay=bn_decay, activation_fn=None, bn=None, is_training=is_training, scope='patch_conv1', weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.reshape(affine_T, [batch_size, num_point, 3, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, num_point, 3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_141": {
                "variable": {
                    "value": "uv_3d",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "uv_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.conv2d(concat, up_ratio * 2, [1, 1], padding='VALID', stride=[1, 1], bn_decay=bn_decay, activation_fn=None, bn=None, is_training=is_training, scope='uv_conv1', weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.reshape(uv_2d, [batch_size, num_point, up_ratio, 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([uv_2d, tf.zeros([batch_size, num_point, up_ratio, 1])], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "affine_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.conv2d(concat, 9, [1, 1], padding='VALID', stride=[1, 1], bn_decay=bn_decay, activation_fn=None, bn=None, is_training=is_training, scope='patch_conv1', weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.reshape(affine_T, [batch_size, num_point, 3, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_143": {
                "variable": {
                    "value": "uv_3d",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "uv_3d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(uv_2d, affine_T)",
                            "Call"
                        ],
                        [
                            "uv_3d + tf.tile(tf.expand_dims(point_cloud, axis=-2), [1, 1, up_ratio, 1])",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(uv_3d, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(uv_3d, [batch_size, num_point * up_ratio, -1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_144": {
                "variable": {
                    "value": "uv_3d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "uv_3d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(uv_2d, affine_T)",
                            "Call"
                        ],
                        [
                            "uv_3d + tf.tile(tf.expand_dims(point_cloud, axis=-2), [1, 1, up_ratio, 1])",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(uv_3d, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(uv_3d, [batch_size, num_point * up_ratio, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, num_point * up_ratio, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_149": {
                "variable": {
                    "value": "dense_normal_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dense_normal_offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.conv2d(concat, up_ratio * 3, [1, 1], padding='VALID', stride=[1, 1], bn_decay=bn_decay, activation_fn=None, bn=None, is_training=is_training, scope='normal_offset_conv1', weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.reshape(dense_normal_offset, [batch_size, num_point, up_ratio, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, num_point, up_ratio, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_151": {
                "variable": {
                    "value": "sparse_normal",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0, 0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_152": {
                "variable": {
                    "value": "sparse_normal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sparse_normal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([0, 0, 1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(sparse_normal, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(sparse_normal, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(sparse_normal, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(sparse_normal, [batch_size, num_point, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(sparse_normal, affine_T)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sparse_normal, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_153": {
                "variable": {
                    "value": "sparse_normal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sparse_normal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([0, 0, 1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(sparse_normal, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(sparse_normal, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(sparse_normal, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(sparse_normal, [batch_size, num_point, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(sparse_normal, affine_T)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sparse_normal, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_154": {
                "variable": {
                    "value": "sparse_normal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sparse_normal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([0, 0, 1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(sparse_normal, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(sparse_normal, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(sparse_normal, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(sparse_normal, [batch_size, num_point, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(sparse_normal, affine_T)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sparse_normal, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_155": {
                "variable": {
                    "value": "sparse_normal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sparse_normal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([0, 0, 1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(sparse_normal, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(sparse_normal, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(sparse_normal, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(sparse_normal, [batch_size, num_point, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(sparse_normal, affine_T)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sparse_normal, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, num_point, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_156": {
                "variable": {
                    "value": "sparse_normal",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "sparse_normal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([0, 0, 1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(sparse_normal, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(sparse_normal, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(sparse_normal, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(sparse_normal, [batch_size, num_point, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(sparse_normal, affine_T)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sparse_normal, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "affine_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.conv2d(concat, 9, [1, 1], padding='VALID', stride=[1, 1], bn_decay=bn_decay, activation_fn=None, bn=None, is_training=is_training, scope='patch_conv1', weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.reshape(affine_T, [batch_size, num_point, 3, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_normalize_157": {
                "variable": {
                    "value": "sparse_normal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sparse_normal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([0, 0, 1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(sparse_normal, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(sparse_normal, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(sparse_normal, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(sparse_normal, [batch_size, num_point, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(sparse_normal, affine_T)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sparse_normal, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "l2_normalize_161": {
                "variable": {
                    "value": "dense_normal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dense_normal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(sparse_normal, [1, 1, up_ratio, 1]) + dense_normal_offset",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(dense_normal, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(dense_normal, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(dense_normal, [batch_size, num_point * up_ratio, -1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_162": {
                "variable": {
                    "value": "dense_normal",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "dense_normal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(sparse_normal, [1, 1, up_ratio, 1]) + dense_normal_offset",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(dense_normal, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(dense_normal, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(dense_normal, [batch_size, num_point * up_ratio, -1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_163": {
                "variable": {
                    "value": "dense_normal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dense_normal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(sparse_normal, [1, 1, up_ratio, 1]) + dense_normal_offset",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(dense_normal, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(dense_normal, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(dense_normal, [batch_size, num_point * up_ratio, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, num_point * up_ratio, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_171": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "uv_3d * bradius_expand",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_173": {
                "variable": {
                    "value": "concat_up",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(concat_unweight, attention_weight)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(concat, 256, [1, 1], padding='VALID', stride=[1, 1], bn_decay=bn_decay, bn=True, is_training=is_training, scope='concat_conv', weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.dropout(concat, keep_prob=0.6, is_training=is_training, scope='dg1')",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "(1, up_ratio, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_174": {
                "variable": {
                    "value": "concat_up",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[concat_up, grid]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_203": {
                "input": {
                    "value": "sparse_normal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([0, 0, 1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(sparse_normal, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(sparse_normal, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(sparse_normal, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(sparse_normal, [batch_size, num_point, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(sparse_normal, affine_T)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sparse_normal, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_20": {
                "name_or_scope": {
                    "value": "transform_net1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_41": {
                "values": {
                    "value": "[net_max_1, net_mean_1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_46": {
                "input": {
                    "value": "out3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.conv2d(tf.concat([net_max_1, net_mean_1], axis=-1), fd, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, weight_decay=weight_decay, scope='dgcnn_conv3', bn_decay=bn_decay)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_58": {
                "values": {
                    "value": "[net_max_2, net_mean_2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_63": {
                "input": {
                    "value": "out5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.conv2d(tf.concat([net_max_2, net_mean_2], axis=-1), fd, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, weight_decay=weight_decay, scope='dgcnn_conv5', bn_decay=bn_decay)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_75": {
                "values": {
                    "value": "[net_max_3, net_mean_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_80": {
                "values": {
                    "value": "[out3, out5, out7]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_122": {
                "variable": {
                    "value": "attention_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[attention_weight, tmp2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_130": {
                "name_or_scope": {
                    "value": "uv_predict",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_136": {
                "name_or_scope": {
                    "value": "T_predict",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_146": {
                "name_or_scope": {
                    "value": "normal_predict",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_165": {
                "name_or_scope": {
                    "value": "up_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_167": {
                "input": {
                    "value": "bradius",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_142": {
                "input": {
                    "value": "tf.expand_dims(point_cloud, axis=-2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, up_ratio, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_159": {
                "input": {
                    "value": "sparse_normal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([0, 0, 1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(sparse_normal, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(sparse_normal, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(sparse_normal, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(sparse_normal, [batch_size, num_point, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(sparse_normal, affine_T)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(sparse_normal, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, up_ratio, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_195": {
                "input": {
                    "value": "coord_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.conv2d(concat_up, 1, [1, 1], padding='VALID', stride=[1, 1], activation_fn=None, bn=False, is_training=is_training, scope='fc_layer', weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.reshape(coord_z, [batch_size, up_ratio, num_point, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(coord_z, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.zeros_like(coord_z), tf.zeros_like(coord_z), coord_z], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(coord_z, affine_T)",
                            "Call"
                        ],
                        [
                            "tf.transpose(coord_z, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(coord_z, [batch_size, num_point * up_ratio, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_134": {
                "shape": {
                    "value": "[batch_size, num_point, up_ratio, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_142": {
                "input": {
                    "value": "point_cloud",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_cloud",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "tf_ops/CD/tf_nndistance.py": {
        "tensorflow": {}
    },
    "tf_ops/sampling/tf_sampling.py": {
        "tensorflow": {}
    },
    "utils/data_loader.py": {
        "tensorflow": {
            "clip_by_value_22": {
                "variable": {
                    "value": "angles",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.random_normal((batch_size, 3)) * angle_sigma",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-angle_clip",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "angle_clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.09",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "split_24": {
                "variable": {
                    "value": "(cos_x, cos_y, cos_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.cos(angles)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_25": {
                "variable": {
                    "value": "(sin_x, sin_y, sin_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.sin(angles)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_26": {
                "variable": {
                    "value": "one",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cos_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(tf.cos(angles), 3, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.split(tf.cos(angles), 3, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_27": {
                "variable": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cos_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(tf.cos(angles), 3, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.split(tf.cos(angles), 3, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_29": {
                "variable": {
                    "value": "Rx",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.concat([one, zero, zero], axis=1), tf.concat([zero, cos_x, sin_x], axis=1), tf.concat([zero, -sin_x, cos_x], axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_34": {
                "variable": {
                    "value": "Ry",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.concat([cos_y, zero, -sin_y], axis=1), tf.concat([zero, one, zero], axis=1), tf.concat([sin_y, zero, cos_y], axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_39": {
                "variable": {
                    "value": "Rz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.concat([cos_z, sin_z, zero], axis=1), tf.concat([-sin_z, cos_z, zero], axis=1), tf.concat([zero, zero, one], axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_70": {
                "variable": {
                    "value": "batch_data",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_data[:, :, :3] * scales, batch_data[:, :, 3:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_by_value_86": {
                "variable": {
                    "value": "jittered_data",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "sigma * tf.random_normal(tf.shape(batch_data))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-1 * clip",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_91": {
                "variable": {
                    "value": "jittered_data",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_data[:, :, :chn] + jittered_data[:, :, :chn], batch_data[:, :, chn:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_105": {
                "variable": {
                    "value": "(cos_x, cos_y, cos_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.cos(angles)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_106": {
                "variable": {
                    "value": "(sin_x, sin_y, sin_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.sin(angles)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_107": {
                "variable": {
                    "value": "one",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cos_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(tf.cos(angles), 3, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.split(tf.cos(angles), 3, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_108": {
                "variable": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cos_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(tf.cos(angles), 3, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.split(tf.cos(angles), 3, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_110": {
                "variable": {
                    "value": "Rx",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.concat([one, zero, zero], axis=1), tf.concat([zero, cos_x, sin_x], axis=1), tf.concat([zero, -sin_x, cos_x], axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_115": {
                "variable": {
                    "value": "Ry",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.concat([cos_y, zero, -sin_y], axis=1), tf.concat([zero, one, zero], axis=1), tf.concat([sin_y, zero, cos_y], axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_120": {
                "variable": {
                    "value": "Rz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.concat([cos_z, sin_z, zero], axis=1), tf.concat([-sin_z, cos_z, zero], axis=1), tf.concat([zero, zero, one], axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_154": {
                "variable": {
                    "value": "centroid",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pc - centroid",
                            "BinOp"
                        ],
                        [
                            "pc / furthest_distance",
                            "BinOp"
                        ],
                        [
                            "pc",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_156": {
                "variable": {
                    "value": "furthest_distance",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.sqrt(tf.reduce_sum(pc ** 2, axis=-1, keepdims=True))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_47": {
                "a": {
                    "value": "Ry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.concat([cos_y, zero, -sin_y], axis=1), tf.concat([zero, one, zero], axis=1), tf.concat([sin_y, zero, cos_y], axis=1)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.concat([cos_y, zero, -sin_y], axis=1), tf.concat([zero, one, zero], axis=1), tf.concat([sin_y, zero, cos_y], axis=1)], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "Rx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.concat([one, zero, zero], axis=1), tf.concat([zero, cos_x, sin_x], axis=1), tf.concat([zero, -sin_x, cos_x], axis=1)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.concat([one, zero, zero], axis=1), tf.concat([zero, cos_x, sin_x], axis=1), tf.concat([zero, -sin_x, cos_x], axis=1)], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_50": {
                "variable": {
                    "value": "batch_data",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.matmul(batch_data[:, :, :3], rotation_matrix), tf.matmul(batch_data[:, :, 3:], rotation_matrix), batch_data[:, :, 6:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_55": {
                "variable": {
                    "value": "batch_data",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "batch_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.matmul(batch_data[:, :, :3], rotation_matrix), tf.matmul(batch_data[:, :, 3:], rotation_matrix), batch_data[:, :, 6:]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(batch_data, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_data[:, :, :3] * scales, batch_data[:, :, 3:]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.matmul(batch_data[:, :, :3], rotation_matrix), tf.matmul(batch_data[:, :, 3:], rotation_matrix), batch_data[:, :, 6:]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(batch_data, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "batch_data",
                            "Method Argument"
                        ],
                        [
                            "batch_data",
                            "Method Argument"
                        ],
                        [
                            "batch_data",
                            "Method Argument"
                        ],
                        [
                            "batch_data",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ],
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_73": {
                "variable": {
                    "value": "batch_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_gt[:, :, :3] * scales, batch_gt[:, :, 3:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_128": {
                "a": {
                    "value": "Ry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.concat([cos_y, zero, -sin_y], axis=1), tf.concat([zero, one, zero], axis=1), tf.concat([sin_y, zero, cos_y], axis=1)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.concat([cos_y, zero, -sin_y], axis=1), tf.concat([zero, one, zero], axis=1), tf.concat([sin_y, zero, cos_y], axis=1)], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "Rx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.concat([one, zero, zero], axis=1), tf.concat([zero, cos_x, sin_x], axis=1), tf.concat([zero, -sin_x, cos_x], axis=1)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.concat([one, zero, zero], axis=1), tf.concat([zero, cos_x, sin_x], axis=1), tf.concat([zero, -sin_x, cos_x], axis=1)], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_131": {
                "variable": {
                    "value": "batch_data",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.matmul(batch_data[:, :, :3], rotation_matrix), tf.matmul(batch_data[:, :, 3:], rotation_matrix), batch_data[:, :, 6:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_136": {
                "variable": {
                    "value": "batch_data",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "batch_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.matmul(batch_data[:, :, :3], rotation_matrix), tf.matmul(batch_data[:, :, 3:], rotation_matrix), batch_data[:, :, 6:]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(batch_data, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_data[:, :, :3] * scales, batch_data[:, :, 3:]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.matmul(batch_data[:, :, :3], rotation_matrix), tf.matmul(batch_data[:, :, 3:], rotation_matrix), batch_data[:, :, 6:]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(batch_data, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "batch_data",
                            "Method Argument"
                        ],
                        [
                            "batch_data",
                            "Method Argument"
                        ],
                        [
                            "batch_data",
                            "Method Argument"
                        ],
                        [
                            "batch_data",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ],
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_196": {
                "variable": {
                    "value": "self.max_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "step_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step_ratio",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "ratio",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_197": {
                "variable": {
                    "value": "self.is_combined",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "is_combined",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_198": {
                "variable": {
                    "value": "self.ratio_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_199": {
                "variable": {
                    "value": "self.iscombined_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_200": {
                "variable": {
                    "value": "self.update_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.max_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.ratio_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_201": {
                "variable": {
                    "value": "self.update_iscombined",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.is_combined",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.iscombined_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_202": {
                "variable": {
                    "value": "label_shapes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.saved_patch_size[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_203": {
                "variable": {
                    "value": "self.offsets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.cumsum(label_shapes, exclusive=True), tf.cumsum(label_shapes, exclusive=False)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TFRecordDataset_208": {
                "variable": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filenames": {
                    "value": "record_paths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "glob(records)",
                            "Call"
                        ]
                    ]
                }
            },
            "parse_single_example_233": {
                "variable": {
                    "value": "read_data",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "variable",
                    "possible_values": [
                        [
                            "serialized_example",
                            "Method Argument"
                        ]
                    ]
                },
                "features": {
                    "value": "self.read_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_236": {
                "variable": {
                    "value": "label_pc",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[read_data[k] for k in self.features_names[1:]]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_251": {
                "variable": {
                    "value": "tmp2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.range(1, max_idx + 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Categorical_255": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "tf.constant([1.0], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "ratio_sample_weight",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cond_256": {
                "variable": {
                    "value": "pick_ratio_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.is_combined",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : dist.sample([])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : max_idx",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "constant_263": {
                "variable": {
                    "value": "radius",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.ones(self.batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_277": {
                "variable": {
                    "value": "batch_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(self.batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_278": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_indices, rnd_pts]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_nd_279": {
                "variable": {
                    "value": "rnd_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "label_pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([read_data[k] for k in self.features_names[1:]], axis=0)",
                            "Call"
                        ],
                        [
                            "decoded['label']",
                            "Subscript"
                        ],
                        [
                            "label_input_ratio['label']",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([batch_indices, rnd_pts], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_281": {
                "variable": {
                    "value": "label_patches",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "label_pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([read_data[k] for k in self.features_names[1:]], axis=0)",
                            "Call"
                        ],
                        [
                            "decoded['label']",
                            "Subscript"
                        ],
                        [
                            "label_input_ratio['label']",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "knn_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "knn_point(self.num_in_point * ratio, label_pc, rnd_pts)",
                            "Call"
                        ],
                        [
                            "knn_point(self.num_in_point, input_pc, rnd_pts)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_283": {
                "variable": {
                    "value": "input_patches",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "input_pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "read_data[self.features_names[0]]",
                            "Subscript"
                        ],
                        [
                            "decoded['input']",
                            "Subscript"
                        ],
                        [
                            "label_input_ratio['input']",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "knn_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "knn_point(self.num_in_point * ratio, label_pc, rnd_pts)",
                            "Call"
                        ],
                        [
                            "knn_point(self.num_in_point, input_pc, rnd_pts)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_284": {
                "variable": {
                    "value": "label_patches",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(label_pc, knn_index)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label_patches, axis=1)",
                            "Call"
                        ],
                        [
                            "normalize_point_cloud(label_patches)",
                            "Call"
                        ],
                        [
                            "label_input_radius_ratio['label']",
                            "Subscript"
                        ],
                        [
                            "rotate_point_cloud_and_gt(input_patches, label_patches)",
                            "Call"
                        ],
                        [
                            "random_scale_point_cloud_and_gt(input_patches, label_patches, scale_low=0.8, scale_high=1.2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_285": {
                "variable": {
                    "value": "input_patches",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(input_pc, knn_index)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(input_patches, axis=1)",
                            "Call"
                        ],
                        [
                            "(input_patches - centroid) / furthest_distance",
                            "BinOp"
                        ],
                        [
                            "label_input_radius_ratio['input']",
                            "Subscript"
                        ],
                        [
                            "rotate_point_cloud_and_gt(input_patches, label_patches)",
                            "Call"
                        ],
                        [
                            "random_scale_point_cloud_and_gt(input_patches, label_patches, scale_low=0.8, scale_high=1.2)",
                            "Call"
                        ],
                        [
                            "tf.gather(input_patches, point_idx, axis=1)",
                            "Call"
                        ],
                        [
                            "jitter_perturbation_point_cloud(input_patches, sigma=self.jitter_sigma, clip=self.jitter_max)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_289": {
                "variable": {
                    "value": "radius",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.ones(self.batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_24": {
                "x": {
                    "value": "angles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(tf.random_normal((batch_size, 3)) * angle_sigma, -angle_clip, angle_clip)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform((batch_size, 3), dtype=tf.float32) * 2 * np.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_25": {
                "x": {
                    "value": "angles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(tf.random_normal((batch_size, 3)) * angle_sigma, -angle_clip, angle_clip)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform((batch_size, 3), dtype=tf.float32) * 2 * np.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_75": {
                "input": {
                    "value": "scales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform((B, 1, 1), minval=scale_low, maxval=scale_high, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "random_scale_point_cloud_and_gt(input_patches, label_patches, scale_low=0.8, scale_high=1.2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_105": {
                "x": {
                    "value": "angles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(tf.random_normal((batch_size, 3)) * angle_sigma, -angle_clip, angle_clip)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform((batch_size, 3), dtype=tf.float32) * 2 * np.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_106": {
                "x": {
                    "value": "angles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(tf.random_normal((batch_size, 3)) * angle_sigma, -angle_clip, angle_clip)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform((batch_size, 3), dtype=tf.float32) * 2 * np.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_140": {
                "variable": {
                    "value": "batch_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.matmul(batch_gt[:, :, :3], rotation_matrix), tf.matmul(batch_gt[:, :, 3:], rotation_matrix), batch_gt[:, :, 6:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_145": {
                "variable": {
                    "value": "batch_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "batch_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([batch_gt[:, :, :3] * scales, batch_gt[:, :, 3:]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.matmul(batch_gt[:, :, :3], rotation_matrix), tf.matmul(batch_gt[:, :, 3:], rotation_matrix), batch_gt[:, :, 6:]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(batch_gt, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ],
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_157": {
                "x": {
                    "value": "tf.reduce_sum(pc ** 2, axis=-1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_250": {
                "x": {
                    "value": "tmp1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(1, max_idx + 2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_252": {
                "x": {
                    "value": "tmp2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.range(1, max_idx + 2))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_304": {
                "variable": {
                    "value": "input_patches",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "input_patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(input_pc, knn_index)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(input_patches, axis=1)",
                            "Call"
                        ],
                        [
                            "(input_patches - centroid) / furthest_distance",
                            "BinOp"
                        ],
                        [
                            "label_input_radius_ratio['input']",
                            "Subscript"
                        ],
                        [
                            "rotate_point_cloud_and_gt(input_patches, label_patches)",
                            "Call"
                        ],
                        [
                            "random_scale_point_cloud_and_gt(input_patches, label_patches, scale_low=0.8, scale_high=1.2)",
                            "Call"
                        ],
                        [
                            "tf.gather(input_patches, point_idx, axis=1)",
                            "Call"
                        ],
                        [
                            "jitter_perturbation_point_cloud(input_patches, sigma=self.jitter_sigma, clip=self.jitter_max)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "point_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_shuffle(tf.range(num_point))[:int(num_point * self.drop_out)]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_30": {
                "values": {
                    "value": "[one, zero, zero]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_31": {
                "values": {
                    "value": "[zero, cos_x, sin_x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_32": {
                "values": {
                    "value": "[zero, -sin_x, cos_x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_35": {
                "values": {
                    "value": "[cos_y, zero, -sin_y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_36": {
                "values": {
                    "value": "[zero, one, zero]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_37": {
                "values": {
                    "value": "[sin_y, zero, cos_y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_40": {
                "values": {
                    "value": "[cos_z, sin_z, zero]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_41": {
                "values": {
                    "value": "[-sin_z, cos_z, zero]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_42": {
                "values": {
                    "value": "[zero, zero, one]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_111": {
                "values": {
                    "value": "[one, zero, zero]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_112": {
                "values": {
                    "value": "[zero, cos_x, sin_x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_113": {
                "values": {
                    "value": "[zero, -sin_x, cos_x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_116": {
                "values": {
                    "value": "[cos_y, zero, -sin_y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_117": {
                "values": {
                    "value": "[zero, one, zero]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_118": {
                "values": {
                    "value": "[sin_y, zero, cos_y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_121": {
                "values": {
                    "value": "[cos_z, sin_z, zero]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_122": {
                "values": {
                    "value": "[-sin_z, cos_z, zero]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_123": {
                "values": {
                    "value": "[zero, zero, one]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_157": {
                "input_tensor": {
                    "value": "pc ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "FixedLenFeature_194": {
                "shape": {
                    "value": "[size, 6]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shuffle_and_repeat_209": {
                "buffer_size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_245": {
                "x": {
                    "value": "self.step_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_51": {
                "a": {
                    "value": "batch_data[:, :, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ],
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_52": {
                "a": {
                    "value": "batch_data[:, :, 3:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ],
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_86": {
                "input": {
                    "value": "batch_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.matmul(batch_data[:, :, :3], rotation_matrix), tf.matmul(batch_data[:, :, 3:], rotation_matrix), batch_data[:, :, 6:]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(batch_data, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_data[:, :, :3] * scales, batch_data[:, :, 3:]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.matmul(batch_data[:, :, :3], rotation_matrix), tf.matmul(batch_data[:, :, 3:], rotation_matrix), batch_data[:, :, 6:]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(batch_data, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "batch_data",
                            "Method Argument"
                        ],
                        [
                            "batch_data",
                            "Method Argument"
                        ],
                        [
                            "batch_data",
                            "Method Argument"
                        ],
                        [
                            "batch_data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_132": {
                "a": {
                    "value": "batch_data[:, :, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ],
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_133": {
                "a": {
                    "value": "batch_data[:, :, 3:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ],
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ]
                    ]
                }
            },
            "cumsum_203": {
                "x": {
                    "value": "label_shapes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(self.saved_patch_size[1:], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "exclusive": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cumsum_204": {
                "x": {
                    "value": "label_shapes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(self.saved_patch_size[1:], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "exclusive": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_255": {
                "value": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_141": {
                "a": {
                    "value": "batch_gt[:, :, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ],
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_142": {
                "a": {
                    "value": "batch_gt[:, :, 3:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ],
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ]
                    ]
                }
            },
            "log_245": {
                "x": {
                    "value": "tf.cast(self.step_ratio, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "range_303": {}
        }
    },
    "utils/transform_nets.py": {
        "tensorflow": {
            "reduce_max_26": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.conv2d(edge_feature, 64, [1, 1], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='tconv1', bn_decay=bn_decay, is_dist=is_dist)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(net, 128, [1, 1], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='tconv2', bn_decay=bn_decay, is_dist=is_dist)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(net, axis=-2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(net, 1024, [1, 1], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='tconv3', bn_decay=bn_decay, is_dist=is_dist)",
                            "Call"
                        ],
                        [
                            "tf_util.max_pool2d(net, [num_point, 1], padding='VALID', scope='tmaxpool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(net, 512, bn=True, is_training=is_training, scope='tfc1', bn_decay=bn_decay, is_dist=is_dist)",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(net, 256, bn=True, is_training=is_training, scope='tfc2', bn_decay=bn_decay, is_dist=is_dist)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_35": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.conv2d(edge_feature, 64, [1, 1], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='tconv1', bn_decay=bn_decay, is_dist=is_dist)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(net, 128, [1, 1], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='tconv2', bn_decay=bn_decay, is_dist=is_dist)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(net, axis=-2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(net, 1024, [1, 1], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='tconv3', bn_decay=bn_decay, is_dist=is_dist)",
                            "Call"
                        ],
                        [
                            "tf_util.max_pool2d(net, [num_point, 1], padding='VALID', scope='tmaxpool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(net, 512, bn=True, is_training=is_training, scope='tfc1', bn_decay=bn_decay, is_dist=is_dist)",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(net, 256, bn=True, is_training=is_training, scope='tfc2', bn_decay=bn_decay, is_dist=is_dist)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_54": {
                "variable": {
                    "value": "transform",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "transform",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(net, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(transform, biases)",
                            "Call"
                        ],
                        [
                            "tf.reshape(transform, [batch_size, K, K])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, K, K]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_51": {
                "variable": {
                    "value": "transform",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.conv2d(edge_feature, 64, [1, 1], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='tconv1', bn_decay=bn_decay, is_dist=is_dist)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(net, 128, [1, 1], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='tconv2', bn_decay=bn_decay, is_dist=is_dist)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(net, axis=-2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(net, 1024, [1, 1], padding='VALID', stride=[1, 1], bn=True, is_training=is_training, scope='tconv3', bn_decay=bn_decay, is_dist=is_dist)",
                            "Call"
                        ],
                        [
                            "tf_util.max_pool2d(net, [num_point, 1], padding='VALID', scope='tmaxpool')",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(net, 512, bn=True, is_training=is_training, scope='tfc1', bn_decay=bn_decay, is_dist=is_dist)",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(net, 256, bn=True, is_training=is_training, scope='tfc2', bn_decay=bn_decay, is_dist=is_dist)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', [256, K * K], initializer=tf.constant_initializer(0.0), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_52": {
                "variable": {
                    "value": "transform",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "transform",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(net, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(transform, biases)",
                            "Call"
                        ],
                        [
                            "tf.reshape(transform, [batch_size, K, K])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [K * K], initializer=tf.constant_initializer(0.0), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "biases + tf.constant(np.eye(K).flatten(), dtype=tf.float32)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "transform_XYZ",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_44": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[256, K * K]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_47": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[K * K]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_50": {
                "value": {
                    "value": "np.eye(K).flatten()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_43": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_45": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_48": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    }
}