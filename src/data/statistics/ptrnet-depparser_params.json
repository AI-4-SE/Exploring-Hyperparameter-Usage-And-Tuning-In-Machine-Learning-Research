{
    "examples/HPtrNetParser.py": {
        "torch": {
            "device_162": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_190": {
                "ndarray": {
                    "value": "table",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.empty([word_alphabet.size(), word_dim], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.empty([num_chars, char_dim], dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_208": {
                "ndarray": {
                    "value": "table",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.empty([word_alphabet.size(), word_dim], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.empty([num_chars, char_dim], dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_242": {
                "params": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "filter(lambda param: param.requires_grad, params)",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "learning_rate",
                            "Name"
                        ],
                        [
                            "lr * decay_rate",
                            "BinOp"
                        ]
                    ]
                },
                "betas": {
                    "value": "betas",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(0.9, 0.9)",
                            "Tuple"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.gamma",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.epsilon",
                            "Attribute"
                        ]
                    ]
                }
            },
            "clip_grad_norm__332": {
                "parameters": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.clip",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_399": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_244": {
                "params": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "filter(lambda param: param.requires_grad, params)",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "learning_rate",
                            "Name"
                        ],
                        [
                            "lr * decay_rate",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.9",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.gamma",
                            "Attribute"
                        ]
                    ]
                },
                "nesterov": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_335": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_484": {
                "obj": {
                    "value": "network.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.model_name",
                            "Attribute"
                        ],
                        [
                            "os.path.join(model_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adamax_246": {
                "params": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "filter(lambda param: param.requires_grad, params)",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "learning_rate",
                            "Name"
                        ],
                        [
                            "lr * decay_rate",
                            "BinOp"
                        ]
                    ]
                },
                "betas": {
                    "value": "betas",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(0.9, 0.9)",
                            "Tuple"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.gamma",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.epsilon",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_549": {
                "f": {
                    "value": "model_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.model_name",
                            "Attribute"
                        ],
                        [
                            "os.path.join(model_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "neuronlp2/io/conll03_data.py": {
        "torch": {
            "device_309": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_362": {
                "variable": {
                    "value": "words",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "wid_inputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.empty([batch_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "wid_inputs * (1 - noise * single)",
                            "BinOp"
                        ],
                        [
                            "np.empty([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "wid_inputs * (1 - noise * single)",
                            "BinOp"
                        ],
                        [
                            "np.empty([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_363": {
                "variable": {
                    "value": "chars",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cid_inputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.empty([batch_size, bucket_length, char_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.empty([bucket_size, bucket_length, char_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.empty([bucket_size, bucket_length, char_length], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_364": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pid_inputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.empty([batch_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.empty([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.empty([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_365": {
                "variable": {
                    "value": "chunks",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "chid_inputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.empty([batch_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.empty([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.empty([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_366": {
                "variable": {
                    "value": "ners",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "nid_inputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.empty([batch_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.empty([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.empty([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_367": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "masks",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros([batch_size, bucket_length], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros([bucket_size, bucket_length], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros([bucket_size, bucket_length], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(masks).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_368": {
                "variable": {
                    "value": "single",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "single",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros([batch_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.zeros([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.zeros([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(single).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_369": {
                "variable": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lengths",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.empty(bucket_size, dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lengths).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_393": {
                "n": {
                    "value": "bucket_size",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ],
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ],
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ],
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ],
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randperm_426": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "bucket_size",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ],
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ],
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ],
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ],
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "neuronlp2/io/conllx_data.py": {
        "torch": {
            "device_316": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_369": {
                "variable": {
                    "value": "words",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "wid_inputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.empty([batch_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "wid_inputs * (1 - noise * single)",
                            "BinOp"
                        ],
                        [
                            "np.empty([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "wid_inputs * (1 - noise * single)",
                            "BinOp"
                        ],
                        [
                            "np.empty([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_370": {
                "variable": {
                    "value": "chars",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cid_inputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.empty([batch_size, bucket_length, char_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.empty([bucket_size, bucket_length, char_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.empty([bucket_size, bucket_length, char_length], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_371": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pid_inputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.empty([batch_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.empty([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.empty([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_372": {
                "variable": {
                    "value": "heads",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "hid_inputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.empty([batch_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.empty([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.empty([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_373": {
                "variable": {
                    "value": "types",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "tid_inputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.empty([batch_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.empty([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.empty([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_374": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "masks",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros([batch_size, bucket_length], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros([bucket_size, bucket_length], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros([bucket_size, bucket_length], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(masks).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_375": {
                "variable": {
                    "value": "single",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "single",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros([batch_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.zeros([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.zeros([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(single).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_376": {
                "variable": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lengths",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.empty(bucket_size, dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lengths).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_400": {
                "n": {
                    "value": "bucket_size",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ],
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ],
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ],
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ],
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randperm_433": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "bucket_size",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ],
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ],
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ],
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ],
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "neuronlp2/io/conllx_stacked_data.py": {
        "torch": {
            "device_126": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_205": {
                "variable": {
                    "value": "words",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "wid_inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.empty([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_206": {
                "variable": {
                    "value": "chars",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cid_inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.empty([bucket_size, bucket_length, char_length], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_207": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pid_inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.empty([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_208": {
                "variable": {
                    "value": "heads",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "hid_inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.empty([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_209": {
                "variable": {
                    "value": "types",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "tid_inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.empty([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_210": {
                "variable": {
                    "value": "masks_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "masks_e",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros([bucket_size, bucket_length], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(masks_e).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_211": {
                "variable": {
                    "value": "single",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "single",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros([bucket_size, bucket_length], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(single).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_212": {
                "variable": {
                    "value": "lengths_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lengths_e",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.empty(bucket_size, dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lengths_e).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_214": {
                "variable": {
                    "value": "stacked_heads",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "stack_hid_inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.empty([bucket_size, 2 * bucket_length - 1], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_215": {
                "variable": {
                    "value": "children",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "chid_inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.empty([bucket_size, 2 * bucket_length - 1], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_216": {
                "variable": {
                    "value": "siblings",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ssid_inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.empty([bucket_size, 2 * bucket_length - 1], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_217": {
                "variable": {
                    "value": "stacked_types",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "stack_tid_inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.empty([bucket_size, 2 * bucket_length - 1], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_218": {
                "variable": {
                    "value": "skip_connect",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "skip_connect_inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.empty([bucket_size, 2 * bucket_length - 1], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_219": {
                "variable": {
                    "value": "masks_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "masks_d",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros([bucket_size, 2 * bucket_length - 1], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(masks_d).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_220": {
                "variable": {
                    "value": "lengths_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lengths_d",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.empty(bucket_size, dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lengths_d).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_247": {
                "n": {
                    "value": "bucket_size",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ],
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ],
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randperm_282": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "bucket_size",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ],
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ],
                        [
                            "bucket_sizes[bucket_id]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "neuronlp2/models/parsing.py": {
        "torch": {
            "Embedding_25": {
                "variable": {
                    "value": "self.word_embedd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_words",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "word_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "_weight": {
                    "value": "embedd_word",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout2d_29": {
                "variable": {
                    "value": "self.dropout_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p_in",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.33",
                            "MethodArgument"
                        ],
                        [
                            "0.33",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout2d_30": {
                "variable": {
                    "value": "self.dropout_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p_out",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.33",
                            "MethodArgument"
                        ],
                        [
                            "0.33",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.arc_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_size * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "arc_space",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.arc_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_size * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "arc_space",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "self.type_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_size * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "type_space",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.type_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_size * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "type_space",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "elu_103": {
                "variable": {
                    "value": "arc_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.arc_h(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_104": {
                "variable": {
                    "value": "arc_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.arc_c(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_107": {
                "variable": {
                    "value": "type_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.type_h(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_108": {
                "variable": {
                    "value": "type_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.type_c(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "arc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[arc_h, arc_c]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "type",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[type_h, type_c]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_145": {
                "variable": {
                    "value": "batch_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_softmax_158": {
                "variable": {
                    "value": "loss_arc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_arc",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.attention(arc[0], arc[1], mask_d=mask, mask_e=mask).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "out_arc + minus_mask.unsqueeze(2) + minus_mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "out_arc + torch.diag(out_arc.new_full((max_len,), -np.inf))",
                            "BinOp"
                        ],
                        [
                            "out_arc + minus_mask.unsqueeze(2) + minus_mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "self.attention(arc_h, arc_c, mask_d=mask_d, mask_e=mask_e).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "out_arc + minus_mask_d.unsqueeze(2) + minus_mask_e.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "self.attention(arc_h, arc_c.expand(num_hyp, *arc_c.size())).squeeze(dim=1).squeeze(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_160": {
                "variable": {
                    "value": "loss_type",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_type",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.bilinear(type_h, type_c)",
                            "Call"
                        ],
                        [
                            "self.bilinear(type_h, type_c)",
                            "Call"
                        ],
                        [
                            "out_type[:, :, leading_symbolic:]",
                            "Subscript"
                        ],
                        [
                            "self.bilinear(type_h, type_c)",
                            "Call"
                        ],
                        [
                            "self.bilinear(type_h, type_c)",
                            "Call"
                        ],
                        [
                            "self.bilinear(type_h[base_index], type_c[child_index])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_173": {
                "variable": {
                    "value": "child_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_186": {
                "variable": {
                    "value": "batch_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_softmax_265": {
                "variable": {
                    "value": "loss_arc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_arc",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.attention(arc[0], arc[1], mask_d=mask, mask_e=mask).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "out_arc + minus_mask.unsqueeze(2) + minus_mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "out_arc + torch.diag(out_arc.new_full((max_len,), -np.inf))",
                            "BinOp"
                        ],
                        [
                            "out_arc + minus_mask.unsqueeze(2) + minus_mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "self.attention(arc_h, arc_c, mask_d=mask_d, mask_e=mask_e).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "out_arc + minus_mask_d.unsqueeze(2) + minus_mask_e.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "self.attention(arc_h, arc_c.expand(num_hyp, *arc_c.size())).squeeze(dim=1).squeeze(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_267": {
                "variable": {
                    "value": "loss_type",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_type",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.bilinear(type_h, type_c)",
                            "Call"
                        ],
                        [
                            "self.bilinear(type_h, type_c)",
                            "Call"
                        ],
                        [
                            "out_type[:, :, leading_symbolic:]",
                            "Subscript"
                        ],
                        [
                            "self.bilinear(type_h, type_c)",
                            "Call"
                        ],
                        [
                            "self.bilinear(type_h, type_c)",
                            "Call"
                        ],
                        [
                            "self.bilinear(type_h[base_index], type_c[child_index])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "permute_267": {
                "variable": {
                    "value": "loss_type",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_269": {
                "variable": {
                    "value": "energy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_arc.unsqueeze(1) + loss_type",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_284": {
                "variable": {
                    "value": "self.word_embedd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_words",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "word_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "_weight": {
                    "value": "embedd_word",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout2d_288": {
                "variable": {
                    "value": "self.dropout_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p_in",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.33",
                            "MethodArgument"
                        ],
                        [
                            "0.33",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout2d_289": {
                "variable": {
                    "value": "self.dropout_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p_out",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.33",
                            "MethodArgument"
                        ],
                        [
                            "0.33",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_329": {
                "variable": {
                    "value": "self.src_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_dec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_size_decoder",
                            "Name"
                        ]
                    ]
                }
            },
            "Linear_340": {
                "variable": {
                    "value": "self.hx_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_342": {
                "variable": {
                    "value": "self.arc_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "arc_space",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_343": {
                "variable": {
                    "value": "self.arc_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "arc_space",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_346": {
                "variable": {
                    "value": "self.type_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "type_space",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_347": {
                "variable": {
                    "value": "self.type_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "type_space",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_394": {
                "variable": {
                    "value": "batch_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "elu_413": {
                "variable": {
                    "value": "src_encoding",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.src_dense(src_encoding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_427": {
                "variable": {
                    "value": "batch_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "elu_446": {
                "variable": {
                    "value": "src_encoding",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.src_dense(src_encoding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_498": {
                "variable": {
                    "value": "arc_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.arc_c(output_enc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_500": {
                "variable": {
                    "value": "type_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.type_c(output_enc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_512": {
                "variable": {
                    "value": "arc_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.arc_h(output_dec)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_513": {
                "variable": {
                    "value": "type_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.type_h(output_dec)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_536": {
                "variable": {
                    "value": "batch_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_softmax_550": {
                "variable": {
                    "value": "loss_arc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_arc",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.attention(arc[0], arc[1], mask_d=mask, mask_e=mask).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "out_arc + minus_mask.unsqueeze(2) + minus_mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "out_arc + torch.diag(out_arc.new_full((max_len,), -np.inf))",
                            "BinOp"
                        ],
                        [
                            "out_arc + minus_mask.unsqueeze(2) + minus_mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "self.attention(arc_h, arc_c, mask_d=mask_d, mask_e=mask_e).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "out_arc + minus_mask_d.unsqueeze(2) + minus_mask_e.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "self.attention(arc_h, arc_c.expand(num_hyp, *arc_c.size())).squeeze(dim=1).squeeze(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_552": {
                "variable": {
                    "value": "loss_type",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_type",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.bilinear(type_h, type_c)",
                            "Call"
                        ],
                        [
                            "self.bilinear(type_h, type_c)",
                            "Call"
                        ],
                        [
                            "out_type[:, :, leading_symbolic:]",
                            "Subscript"
                        ],
                        [
                            "self.bilinear(type_h, type_c)",
                            "Call"
                        ],
                        [
                            "self.bilinear(type_h, type_c)",
                            "Call"
                        ],
                        [
                            "self.bilinear(type_h[base_index], type_c[child_index])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_556": {
                "variable": {
                    "value": "coverage",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_arc",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.log_softmax(out_arc, dim=1)",
                            "Call"
                        ],
                        [
                            "loss_arc * mask.unsqueeze(2) * mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "loss_arc[batch_index, heads.t(), child_index][1:]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(out_arc, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(out_arc, dim=2)",
                            "Call"
                        ],
                        [
                            "loss_arc * mask_d.unsqueeze(2) * mask_e.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "loss_arc1 * label_smooth + loss_arc2 * (1 - label_smooth)",
                            "BinOp"
                        ],
                        [
                            "loss_arc[batch_index, head_index, children.t()].transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cumsum_556": {
                "variable": {
                    "value": "coverage",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eq_560": {
                "variable": {
                    "value": "mask_leaf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "children",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "children[:, :max_len_d]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros(beam, int(2 * length - 1)).type_as(output_enc).long()",
                            "Call"
                        ],
                        [
                            "children.cpu().numpy()[0]",
                            "Subscript"
                        ],
                        [
                            "np.zeros([batch, 2 * max_len_e - 1], dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "stacked_heads",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "stacked_heads[:, :max_len_d]",
                            "Subscript"
                        ],
                        [
                            "[[0] for _ in range(beam)]",
                            "ListComp"
                        ],
                        [
                            "[[new_stacked_heads[i][j] for j in range(len(new_stacked_heads[i]))] for i in range(num_hyp)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "arange_580": {
                "variable": {
                    "value": "head_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len_d",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_649": {
                "variable": {
                    "value": "children",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "beam",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "int(2 * length - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_856": {
                "variable": {
                    "value": "arc_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.arc_c(output_enc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_858": {
                "variable": {
                    "value": "type_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.type_c(output_enc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_82": {
                "variable": {
                    "value": "char",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "char",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.char_embedd(input_char)",
                            "Call"
                        ],
                        [
                            "char.view(char_size[0] * char_size[1], char_size[2], char_size[3]).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(char).view(char_size[0], char_size[1], -1)",
                            "Call"
                        ],
                        [
                            "self.dropout_in(char)",
                            "Call"
                        ],
                        [
                            "self.char_embedd(input_char)",
                            "Call"
                        ],
                        [
                            "char.view(char_size[0] * char_size[1], char_size[2], char_size[3]).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(char).view(char_size[0], char_size[1], -1)",
                            "Call"
                        ],
                        [
                            "self.dropout_in(char)",
                            "Call"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_86": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input, char]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input, pos]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_369": {
                "variable": {
                    "value": "char",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "char",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.char_embedd(input_char)",
                            "Call"
                        ],
                        [
                            "char.view(char_size[0] * char_size[1], char_size[2], char_size[3]).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(char).view(char_size[0], char_size[1], -1)",
                            "Call"
                        ],
                        [
                            "self.dropout_in(char)",
                            "Call"
                        ],
                        [
                            "self.char_embedd(input_char)",
                            "Call"
                        ],
                        [
                            "char.view(char_size[0] * char_size[1], char_size[2], char_size[3]).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(char).view(char_size[0], char_size[1], -1)",
                            "Call"
                        ],
                        [
                            "self.dropout_in(char)",
                            "Call"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_373": {
                "variable": {
                    "value": "src_encoding",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[src_encoding, char]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_380": {
                "variable": {
                    "value": "src_encoding",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[src_encoding, pos]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_466": {
                "variable": {
                    "value": "cn",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cn[-2], cn[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_466": {
                "variable": {
                    "value": "cn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_473": {
                "variable": {
                    "value": "hn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cn",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([cn[-2], cn[-1]], dim=1).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "self.hx_dense(cn)",
                            "Call"
                        ],
                        [
                            "torch.cat([cn, cn.new_zeros(self.decoder_layers - 1, batch, hidden_size)], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_486": {
                "variable": {
                    "value": "hn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.hx_dense(hn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_688": {
                "variable": {
                    "value": "src_encoding",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.src_dense(src_encoding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_695": {
                "variable": {
                    "value": "arc_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.arc_h(output_dec.unsqueeze(1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_697": {
                "variable": {
                    "value": "type_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.type_h(output_dec)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_703": {
                "variable": {
                    "value": "hyp_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_arc",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.attention(arc[0], arc[1], mask_d=mask, mask_e=mask).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "out_arc + minus_mask.unsqueeze(2) + minus_mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "out_arc + torch.diag(out_arc.new_full((max_len,), -np.inf))",
                            "BinOp"
                        ],
                        [
                            "out_arc + minus_mask.unsqueeze(2) + minus_mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "self.attention(arc_h, arc_c, mask_d=mask_d, mask_e=mask_e).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "out_arc + minus_mask_d.unsqueeze(2) + minus_mask_e.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "self.attention(arc_h, arc_c.expand(num_hyp, *arc_c.size())).squeeze(dim=1).squeeze(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sort_707": {
                "variable": {
                    "value": "(new_hypothesis_scores, hyp_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "new_hypothesis_scores.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_795": {
                "variable": {
                    "value": "hyp_type_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_type",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.bilinear(type_h, type_c)",
                            "Call"
                        ],
                        [
                            "self.bilinear(type_h, type_c)",
                            "Call"
                        ],
                        [
                            "out_type[:, :, leading_symbolic:]",
                            "Subscript"
                        ],
                        [
                            "self.bilinear(type_h, type_c)",
                            "Call"
                        ],
                        [
                            "self.bilinear(type_h, type_c)",
                            "Call"
                        ],
                        [
                            "self.bilinear(type_h[base_index], type_c[child_index])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_26": {
                "num_embeddings": {
                    "value": "num_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "pos_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "_weight": {
                    "value": "embedd_pos",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_27": {
                "num_embeddings": {
                    "value": "num_chars",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "char_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "_weight": {
                    "value": "embedd_char",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv1d_28": {
                "in_channels": {
                    "value": "char_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diag_202": {
                "input": {
                    "value": "out_arc.new_full((max_len,), -np.inf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_285": {
                "num_embeddings": {
                    "value": "num_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "pos_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "_weight": {
                    "value": "embedd_pos",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_286": {
                "num_embeddings": {
                    "value": "num_chars",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "char_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "_weight": {
                    "value": "embedd_char",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv1d_287": {
                "in_channels": {
                    "value": "char_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_471": {
                "variable": {
                    "value": "cn",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cn, cn.new_zeros(self.decoder_layers - 1, batch, hidden_size)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_489": {
                "variable": {
                    "value": "hn",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hn, hn.new_zeros(self.decoder_layers - 1, batch, hidden_size)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_788": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(ids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_672": {
                "tensors": {
                    "value": "[skip_connects[i].pop() for i in range(num_hyp)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_523": {
                "tensors": {
                    "value": "[arc_h, arc_c]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_523": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_527": {
                "tensors": {
                    "value": "[type_h, type_c]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_527": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "neuronlp2/models/parsing2.py": {
        "torch": {
            "Linear_17": {
                "variable": {
                    "value": "self.parent_hn_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.sib_hn_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.pre_hn_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.parent_hn_dense_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.sib_hn_dense_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.pre_hn_dense_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_23": {
                "variable": {
                    "value": "self.bias_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout2d_24": {
                "variable": {
                    "value": "self.dropout_hn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.33",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_29": {
                "variable": {
                    "value": "batch_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "elu_48": {
                "variable": {
                    "value": "src_encoding",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.src_dense(src_encoding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_52": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "length_decoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_162": {
                "variable": {
                    "value": "children",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "beam",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "int(2 * length - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_425": {
                "variable": {
                    "value": "self.parent_hn_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_426": {
                "variable": {
                    "value": "self.sib_hn_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_427": {
                "variable": {
                    "value": "self.pre_hn_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_428": {
                "variable": {
                    "value": "self.parent_hn_dense_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_429": {
                "variable": {
                    "value": "self.sib_hn_dense_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_430": {
                "variable": {
                    "value": "self.pre_hn_dense_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_431": {
                "variable": {
                    "value": "self.bias_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout2d_432": {
                "variable": {
                    "value": "self.dropout_hn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.33",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_437": {
                "variable": {
                    "value": "batch_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "elu_456": {
                "variable": {
                    "value": "src_encoding",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.src_dense(src_encoding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_460": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "length_decoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_569": {
                "variable": {
                    "value": "children",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "beam",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "int(2 * length - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_831": {
                "variable": {
                    "value": "self.parent_hn_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_832": {
                "variable": {
                    "value": "self.sib_hn_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_833": {
                "variable": {
                    "value": "self.pre_hn_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_834": {
                "variable": {
                    "value": "self.parent_hn_dense_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_835": {
                "variable": {
                    "value": "self.sib_hn_dense_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_836": {
                "variable": {
                    "value": "self.pre_hn_dense_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_837": {
                "variable": {
                    "value": "self.bias_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout2d_838": {
                "variable": {
                    "value": "self.dropout_hn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.33",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_843": {
                "variable": {
                    "value": "batch_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "elu_862": {
                "variable": {
                    "value": "src_encoding",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.src_dense(src_encoding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_866": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "length_decoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_976": {
                "variable": {
                    "value": "children",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "beam",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "int(2 * length - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_210": {
                "variable": {
                    "value": "src_encoding",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.src_dense(src_encoding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_244": {
                "variable": {
                    "value": "arc_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.arc_h(output_dec.unsqueeze(1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_246": {
                "variable": {
                    "value": "type_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.type_h(output_dec)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_252": {
                "variable": {
                    "value": "hyp_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_arc",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.attention(arc_h, arc_c.expand(num_hyp, *arc_c.size())).squeeze(dim=1).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.attention(arc_h, arc_c.expand(num_hyp, *arc_c.size())).squeeze(dim=1).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.attention(arc_h, arc_c.expand(num_hyp, *arc_c.size())).squeeze(dim=1).squeeze(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sort_256": {
                "variable": {
                    "value": "(new_hypothesis_scores, hyp_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "new_hypothesis_scores.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_368": {
                "variable": {
                    "value": "hyp_type_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_type",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.bilinear(type_h[base_index], type_c[child_index])",
                            "Call"
                        ],
                        [
                            "self.bilinear(type_h[base_index], type_c[child_index])",
                            "Call"
                        ],
                        [
                            "self.bilinear(type_h[base_index], type_c[child_index])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "elu_617": {
                "variable": {
                    "value": "src_encoding",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.src_dense(src_encoding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_650": {
                "variable": {
                    "value": "arc_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.arc_h(output_dec.unsqueeze(1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_652": {
                "variable": {
                    "value": "type_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.type_h(output_dec)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_658": {
                "variable": {
                    "value": "hyp_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_arc",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.attention(arc_h, arc_c.expand(num_hyp, *arc_c.size())).squeeze(dim=1).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.attention(arc_h, arc_c.expand(num_hyp, *arc_c.size())).squeeze(dim=1).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.attention(arc_h, arc_c.expand(num_hyp, *arc_c.size())).squeeze(dim=1).squeeze(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sort_662": {
                "variable": {
                    "value": "(new_hypothesis_scores, hyp_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "new_hypothesis_scores.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_774": {
                "variable": {
                    "value": "hyp_type_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_type",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.bilinear(type_h[base_index], type_c[child_index])",
                            "Call"
                        ],
                        [
                            "self.bilinear(type_h[base_index], type_c[child_index])",
                            "Call"
                        ],
                        [
                            "self.bilinear(type_h[base_index], type_c[child_index])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "elu_1024": {
                "variable": {
                    "value": "src_encoding",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.src_dense(src_encoding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_1058": {
                "variable": {
                    "value": "arc_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.arc_h(output_dec.unsqueeze(1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_1060": {
                "variable": {
                    "value": "type_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.type_h(output_dec)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_1066": {
                "variable": {
                    "value": "hyp_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_arc",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.attention(arc_h, arc_c.expand(num_hyp, *arc_c.size())).squeeze(dim=1).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.attention(arc_h, arc_c.expand(num_hyp, *arc_c.size())).squeeze(dim=1).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "self.attention(arc_h, arc_c.expand(num_hyp, *arc_c.size())).squeeze(dim=1).squeeze(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sort_1070": {
                "variable": {
                    "value": "(new_hypothesis_scores, hyp_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "new_hypothesis_scores.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_1182": {
                "variable": {
                    "value": "hyp_type_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_type",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.bilinear(type_h[base_index], type_c[child_index])",
                            "Call"
                        ],
                        [
                            "self.bilinear(type_h[base_index], type_c[child_index])",
                            "Call"
                        ],
                        [
                            "self.bilinear(type_h[base_index], type_c[child_index])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_85": {
                "variable": {
                    "value": "gate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp_hn_pre_gate + tmp_hn_parent_gate + tmp_hn_sib_gate + self.bias_gate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_235": {
                "variable": {
                    "value": "gate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp_hn_pre_gate + tmp_hn_parent_gate + tmp_hn_sib_gate + self.bias_gate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_361": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(ids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_492": {
                "variable": {
                    "value": "gate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp_hn_parent_gate + tmp_hn_sib_gate + self.bias_gate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_641": {
                "variable": {
                    "value": "gate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp_hn_parent_gate + tmp_hn_sib_gate + self.bias_gate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_767": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(ids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_899": {
                "variable": {
                    "value": "gate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp_hn_parent_gate + tmp_hn_sib_gate + self.bias_gate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_1049": {
                "variable": {
                    "value": "gate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp_hn_parent_gate + tmp_hn_sib_gate + self.bias_gate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_1175": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(ids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_65": {
                "*size": {
                    "value": "hn[1].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "*size": {
                    "value": "hn[1].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_194": {
                "tensors": {
                    "value": "[skip_connects[i].pop() for i in range(num_hyp)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_213": {
                "*size": {
                    "value": "hx[1].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_214": {
                "*size": {
                    "value": "hx[1].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_473": {
                "*size": {
                    "value": "hn[1].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_474": {
                "*size": {
                    "value": "hn[1].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_601": {
                "tensors": {
                    "value": "[skip_connects[i].pop() for i in range(num_hyp)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_620": {
                "*size": {
                    "value": "hx[1].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_621": {
                "*size": {
                    "value": "hx[1].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_879": {
                "*size": {
                    "value": "hn[1].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_880": {
                "*size": {
                    "value": "hn[1].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1008": {
                "tensors": {
                    "value": "[skip_connects[i].pop() for i in range(num_hyp)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_1027": {
                "*size": {
                    "value": "hx[1].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1028": {
                "*size": {
                    "value": "hx[1].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_86": {
                "input": {
                    "value": "tmp_hn_pre * gate + tmp_hn_parent * gate + tmp_hn_sib * gate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_236": {
                "input": {
                    "value": "tmp_hn_pre * gate + tmp_hn_parent * gate + tmp_hn_sib * gate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_493": {
                "input": {
                    "value": "tmp_hn_pre * gate + tmp_hn_parent * gate + tmp_hn_sib * gate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_642": {
                "input": {
                    "value": "tmp_hn_pre * gate + tmp_hn_parent * gate + tmp_hn_sib * gate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_900": {
                "input": {
                    "value": "tmp_hn_parent * gate + tmp_hn_sib * gate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_1050": {
                "input": {
                    "value": "tmp_hn_parent * gate + tmp_hn_sib * gate",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "neuronlp2/models/sequence_labeling.py": {
        "torch": {
            "Embedding_15": {
                "variable": {
                    "value": "self.word_embedd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_words",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "word_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "_weight": {
                    "value": "embedd_word",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_16": {
                "variable": {
                    "value": "self.char_embedd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_chars",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "char_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "_weight": {
                    "value": "embedd_char",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv1d_17": {
                "variable": {
                    "value": "self.conv1d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "char_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout2d_19": {
                "variable": {
                    "value": "self.dropout_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p_in",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.33",
                            "MethodArgument"
                        ],
                        [
                            "0.33",
                            "MethodArgument"
                        ],
                        [
                            "0.33",
                            "MethodArgument"
                        ],
                        [
                            "0.33",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_21": {
                "variable": {
                    "value": "self.dropout_rnn_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p_rnn[0]",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "(0.5",
                            "MethodArgument"
                        ],
                        [
                            "(0.33",
                            "MethodArgument"
                        ],
                        [
                            "(0.5",
                            "MethodArgument"
                        ],
                        [
                            "(0.33",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_22": {
                "variable": {
                    "value": "self.dropout_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p_out",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.33",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.33",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.dense_softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_size * 2",
                            "BinOp"
                        ],
                        [
                            "tag_space",
                            "Name"
                        ],
                        [
                            "tag_space if tag_space else hidden_size * 2",
                            "IfExp"
                        ],
                        [
                            "tag_space if tag_space else hidden_size * 2",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LogSoftmax_41": {
                "variable": {
                    "value": "self.logsoftmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "NLLLoss_42": {
                "variable": {
                    "value": "self.nll_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_78": {
                "variable": {
                    "value": "char",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "char",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.char_embedd(input_char)",
                            "Call"
                        ],
                        [
                            "char.view(char_size[0] * char_size[1], char_size[2], char_size[3]).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(char).view(char_size[0], char_size[1], -1)",
                            "Call"
                        ],
                        [
                            "self.dropout_in(char)",
                            "Call"
                        ],
                        [
                            "self.char_embedd(input_char)",
                            "Call"
                        ],
                        [
                            "char.view(char_size[0] * char_size[1], char_size[2], char_size[3]).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(char).view(char_size[0], char_size[1], -1)",
                            "Call"
                        ],
                        [
                            "self.dropout_in(char)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_85": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[word, char]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_117": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output[:, :, leading_symbolic:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout2d_146": {
                "variable": {
                    "value": "self.dropout_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p_out",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.33",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.33",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tanh_173": {
                "variable": {
                    "value": "char",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "char",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.char_embedd(input_char)",
                            "Call"
                        ],
                        [
                            "char.view(char_size[0] * char_size[1], char_size[2], char_size[3]).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(char).view(char_size[0], char_size[1], -1)",
                            "Call"
                        ],
                        [
                            "self.dropout_in(char)",
                            "Call"
                        ],
                        [
                            "self.char_embedd(input_char)",
                            "Call"
                        ],
                        [
                            "char.view(char_size[0] * char_size[1], char_size[2], char_size[3]).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(char).view(char_size[0], char_size[1], -1)",
                            "Call"
                        ],
                        [
                            "self.dropout_in(char)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_180": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[word, char]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_size * 2",
                            "BinOp"
                        ],
                        [
                            "tag_space",
                            "Name"
                        ],
                        [
                            "tag_space if tag_space else hidden_size * 2",
                            "IfExp"
                        ],
                        [
                            "tag_space if tag_space else hidden_size * 2",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "tag_space",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "elu_102": {
                "input": {
                    "value": "self.dense(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eq_135": {
                "input": {
                    "value": "preds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "preds + leading_symbolic",
                            "BinOp"
                        ],
                        [
                            "self.crf.decode(output, mask=mask, leading_symbolic=leading_symbolic)",
                            "Call"
                        ],
                        [
                            "self.crf.decode(output, mask=mask, leading_symbolic=leading_symbolic)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "target",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "target[:, :max_len].contiguous()",
                            "Call"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eq_238": {
                "input": {
                    "value": "preds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "preds + leading_symbolic",
                            "BinOp"
                        ],
                        [
                            "self.crf.decode(output, mask=mask, leading_symbolic=leading_symbolic)",
                            "Call"
                        ],
                        [
                            "self.crf.decode(output, mask=mask, leading_symbolic=leading_symbolic)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "target",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "target[:, :max_len].contiguous()",
                            "Call"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_238": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eq_286": {
                "input": {
                    "value": "preds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "preds + leading_symbolic",
                            "BinOp"
                        ],
                        [
                            "self.crf.decode(output, mask=mask, leading_symbolic=leading_symbolic)",
                            "Call"
                        ],
                        [
                            "self.crf.decode(output, mask=mask, leading_symbolic=leading_symbolic)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "target",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "target[:, :max_len].contiguous()",
                            "Call"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_286": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "elu_190": {
                "input": {
                    "value": "self.dense(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_190": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eq_131": {
                "input": {
                    "value": "preds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "preds + leading_symbolic",
                            "BinOp"
                        ],
                        [
                            "self.crf.decode(output, mask=mask, leading_symbolic=leading_symbolic)",
                            "Call"
                        ],
                        [
                            "self.crf.decode(output, mask=mask, leading_symbolic=leading_symbolic)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "target",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "target[:, :max_len].contiguous()",
                            "Call"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "eq_240": {
                "input": {
                    "value": "preds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "preds + leading_symbolic",
                            "BinOp"
                        ],
                        [
                            "self.crf.decode(output, mask=mask, leading_symbolic=leading_symbolic)",
                            "Call"
                        ],
                        [
                            "self.crf.decode(output, mask=mask, leading_symbolic=leading_symbolic)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "target",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "target[:, :max_len].contiguous()",
                            "Call"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "eq_288": {
                "input": {
                    "value": "preds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "preds + leading_symbolic",
                            "BinOp"
                        ],
                        [
                            "self.crf.decode(output, mask=mask, leading_symbolic=leading_symbolic)",
                            "Call"
                        ],
                        [
                            "self.crf.decode(output, mask=mask, leading_symbolic=leading_symbolic)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "target",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "target[:, :max_len].contiguous()",
                            "Call"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "target[:, :max_len]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "neuronlp2/nlinalg/nlinalg.py": {
        "torch": {
            "log_18": {
                "input": {
                    "value": "torch.eig(x.data)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_21": {
                "input": {
                    "value": "torch.log(u_chol.diag())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_21": {
                "input": {
                    "value": "u_chol.diag()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_38": {
                "input": {
                    "value": "torch.exp(x - xmax).sum()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_42": {
                "input": {
                    "value": "torch.exp(x - xmax).sum(dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eig_18": {
                "input": {
                    "value": "x.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_38": {
                "input": {
                    "value": "x - xmax",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_42": {
                "input": {
                    "value": "x - xmax",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_42": {
                "input": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "neuronlp2/nn/_functions/masked_rnn.py": {
        "torch": {
            "cat_28": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0).view(input.size(0), *output[0].size())",
                            "Call"
                        ],
                        [
                            "output.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "hidden[0] if isinstance(hidden, tuple) else hidden",
                            "IfExp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "input.dim() - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_66": {
                "variable": {
                    "value": "next_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "next_hidden",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "(torch.cat(next_h, 0).view(total_layers, *next_h[0].size()), torch.cat(next_c, 0).view(total_layers, *next_c[0].size()))",
                            "Tuple"
                        ],
                        [
                            "torch.cat(next_hidden, 0).view(total_layers, *next_hidden[0].size())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "(torch.cat(next_h, 0).view(num_layers, *next_h[0].size()), torch.cat(next_c, 0).view(num_layers, *next_c[0].size()))",
                            "Tuple"
                        ],
                        [
                            "torch.cat(next_hidden, 0).view(num_layers, *next_hidden[0].size())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_147": {
                "variable": {
                    "value": "next_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "next_hidden",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "(torch.cat(next_h, 0).view(total_layers, *next_h[0].size()), torch.cat(next_c, 0).view(total_layers, *next_c[0].size()))",
                            "Tuple"
                        ],
                        [
                            "torch.cat(next_hidden, 0).view(total_layers, *next_hidden[0].size())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "(torch.cat(next_h, 0).view(num_layers, *next_h[0].size()), torch.cat(next_c, 0).view(num_layers, *next_c[0].size()))",
                            "Tuple"
                        ],
                        [
                            "torch.cat(next_hidden, 0).view(num_layers, *next_hidden[0].size())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_57": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat(all_output, input.dim() - 1)",
                            "Call"
                        ],
                        [
                            "F.dropout(input, p=dropout, training=train, inplace=False)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "F.dropout(input, p=dropout, training=train, inplace=False)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "training": {
                    "value": "train",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_138": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat(all_output, input.dim() - 1)",
                            "Call"
                        ],
                        [
                            "F.dropout(input, p=dropout, training=train, inplace=False)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "F.dropout(input, p=dropout, training=train, inplace=False)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "training": {
                    "value": "train",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_62": {
                "tensors": {
                    "value": "next_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_63": {
                "tensors": {
                    "value": "next_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_143": {
                "tensors": {
                    "value": "next_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_144": {
                "tensors": {
                    "value": "next_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "neuronlp2/nn/_functions/skipconnect_rnn.py": {
        "torch": {
            "cat_12": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden, hidden_skip]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_16": {
                "variable": {
                    "value": "hy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.linear(input, w_ih, b_ih) + F.linear(hidden, w_hh, b_hh)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_24": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden, hidden_skip]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_28": {
                "variable": {
                    "value": "hy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.linear(input, w_ih, b_ih) + F.linear(hidden, w_hh, b_hh)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_36": {
                "variable": {
                    "value": "hx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hx, hidden_skip]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_43": {
                "variable": {
                    "value": "ingate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ingate",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.sigmoid(ingate)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(ingate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_44": {
                "variable": {
                    "value": "forgetgate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "forgetgate",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.sigmoid(forgetgate)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(forgetgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_45": {
                "variable": {
                    "value": "cellgate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cellgate",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.tanh(cellgate)",
                            "Call"
                        ],
                        [
                            "F.tanh(cellgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_46": {
                "variable": {
                    "value": "outgate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outgate",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.sigmoid(outgate)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(outgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_59": {
                "variable": {
                    "value": "hx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hx, hidden_skip]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_73": {
                "variable": {
                    "value": "ingate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ingate",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.sigmoid(ingate)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(ingate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_74": {
                "variable": {
                    "value": "forgetgate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "forgetgate",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.sigmoid(forgetgate)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(forgetgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_75": {
                "variable": {
                    "value": "cellgate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cellgate",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.tanh(cellgate)",
                            "Call"
                        ],
                        [
                            "F.tanh(cellgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_76": {
                "variable": {
                    "value": "outgate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outgate",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.sigmoid(outgate)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(outgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_86": {
                "variable": {
                    "value": "hx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden, hidden_skip]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "baddbmm_89": {
                "variable": {
                    "value": "gi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b_ih.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch1": {
                    "value": "input",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(4, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(3, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "torch.cat(all_output, input.dim() - 1)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ]
                    ]
                },
                "batch2": {
                    "value": "w_ih",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "baddbmm_90": {
                "variable": {
                    "value": "gh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b_hh.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch1": {
                    "value": "hx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([hx, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx.expand(4, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "torch.cat([hx, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx.expand(3, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ]
                    ]
                },
                "batch2": {
                    "value": "w_hh",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_94": {
                "variable": {
                    "value": "resetgate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_r + h_r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_95": {
                "variable": {
                    "value": "inputgate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_i + h_i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_96": {
                "variable": {
                    "value": "newgate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_n + resetgate * h_n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "hx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden, hidden_skip]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linear_116": {
                "variable": {
                    "value": "gi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(4, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(3, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "torch.cat(all_output, input.dim() - 1)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_ih",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_ih",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linear_117": {
                "variable": {
                    "value": "gh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([hx, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx.expand(4, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "torch.cat([hx, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx.expand(3, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_hh",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_hh",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_121": {
                "variable": {
                    "value": "resetgate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_r + h_r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_122": {
                "variable": {
                    "value": "inputgate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_i + h_i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_123": {
                "variable": {
                    "value": "newgate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_n + resetgate * h_n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_64": {
                "variable": {
                    "value": "igates",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(4, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(3, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "torch.cat(all_output, input.dim() - 1)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_ih",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linear_65": {
                "variable": {
                    "value": "hgates",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([hx, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx.expand(4, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "torch.cat([hx, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx.expand(3, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_hh",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linear_111": {
                "variable": {
                    "value": "gi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(4, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(3, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "torch.cat(all_output, input.dim() - 1)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_ih",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linear_112": {
                "variable": {
                    "value": "gh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([hx, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx.expand(4, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "torch.cat([hx, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx.expand(3, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_hh",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_137": {
                "variable": {
                    "value": "batch_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "h0.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "baddbmm_39": {
                "input": {
                    "value": "b_hh.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch1": {
                    "value": "hx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([hx, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx.expand(4, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "torch.cat([hx, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx.expand(3, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ]
                    ]
                },
                "batch2": {
                    "value": "w_hh",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_49": {
                "input": {
                    "value": "cy",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "forgetgate * cx + ingate * cellgate",
                            "BinOp"
                        ],
                        [
                            "forgetgate * cx + ingate * cellgate",
                            "BinOp"
                        ]
                    ]
                }
            },
            "linear_69": {
                "input": {
                    "value": "hx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([hx, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx.expand(4, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "torch.cat([hx, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx.expand(3, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_hh",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_hh",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tanh_79": {
                "input": {
                    "value": "cy",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "forgetgate * cx + ingate * cellgate",
                            "BinOp"
                        ],
                        [
                            "forgetgate * cx + ingate * cellgate",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_197": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "input.dim() - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_206": {
                "variable": {
                    "value": "next_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "next_hidden",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "(torch.cat(next_h, 0).view(total_layers, *next_h[0].size()), torch.cat(next_c, 0).view(total_layers, *next_c[0].size()))",
                            "Tuple"
                        ],
                        [
                            "torch.cat(next_hidden, 0).view(total_layers, *next_hidden[0].size())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "(torch.cat(next_h, 0).view(num_layers, *next_h[0].size()), torch.cat(next_c, 0).view(num_layers, *next_c[0].size()))",
                            "Tuple"
                        ],
                        [
                            "torch.cat(next_hidden, 0).view(num_layers, *next_hidden[0].size())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_283": {
                "variable": {
                    "value": "next_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "next_hidden",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "(torch.cat(next_h, 0).view(total_layers, *next_h[0].size()), torch.cat(next_c, 0).view(total_layers, *next_c[0].size()))",
                            "Tuple"
                        ],
                        [
                            "torch.cat(next_hidden, 0).view(total_layers, *next_hidden[0].size())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "(torch.cat(next_h, 0).view(num_layers, *next_h[0].size()), torch.cat(next_c, 0).view(num_layers, *next_c[0].size()))",
                            "Tuple"
                        ],
                        [
                            "torch.cat(next_hidden, 0).view(num_layers, *next_hidden[0].size())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linear_16": {
                "input": {
                    "value": "hidden",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hidden * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hidden * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "cell(input[i], hidden, hidden_skip)",
                            "Call"
                        ],
                        [
                            "(hx + (hp1 - hx) * mask[i], cx + (cp1 - cx) * mask[i])",
                            "Tuple"
                        ],
                        [
                            "hidden + (hidden_next - hidden) * mask[i]",
                            "BinOp"
                        ],
                        [
                            "list(zip(*hidden))",
                            "Call"
                        ],
                        [
                            "cell(input, hidden, hidden_skip)",
                            "Call"
                        ],
                        [
                            "(hx + (hp1 - hx) * mask, cx + (cp1 - cx) * mask)",
                            "Tuple"
                        ],
                        [
                            "hidden + (hidden_next - hidden) * mask",
                            "BinOp"
                        ],
                        [
                            "list(zip(*hidden))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_hh",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_hh",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linear_28": {
                "input": {
                    "value": "hidden",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hidden * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "torch.cat([hidden, hidden_skip], dim=1)",
                            "Call"
                        ],
                        [
                            "hidden * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "cell(input[i], hidden, hidden_skip)",
                            "Call"
                        ],
                        [
                            "(hx + (hp1 - hx) * mask[i], cx + (cp1 - cx) * mask[i])",
                            "Tuple"
                        ],
                        [
                            "hidden + (hidden_next - hidden) * mask[i]",
                            "BinOp"
                        ],
                        [
                            "list(zip(*hidden))",
                            "Call"
                        ],
                        [
                            "cell(input, hidden, hidden_skip)",
                            "Call"
                        ],
                        [
                            "(hx + (hp1 - hx) * mask, cx + (cp1 - cx) * mask)",
                            "Tuple"
                        ],
                        [
                            "hidden + (hidden_next - hidden) * mask",
                            "BinOp"
                        ],
                        [
                            "list(zip(*hidden))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_hh",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_hh",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_202": {
                "tensors": {
                    "value": "next_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_203": {
                "tensors": {
                    "value": "next_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_279": {
                "tensors": {
                    "value": "next_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_280": {
                "tensors": {
                    "value": "next_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "neuronlp2/nn/_functions/variational_rnn.py": {
        "torch": {
            "relu_13": {
                "variable": {
                    "value": "hy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.linear(input, w_ih, b_ih) + F.linear(hidden, w_hh, b_hh)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_22": {
                "variable": {
                    "value": "hy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.linear(input, w_ih, b_ih) + F.linear(hidden, w_hh, b_hh)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_36": {
                "variable": {
                    "value": "ingate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ingate",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.sigmoid(ingate)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(ingate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_37": {
                "variable": {
                    "value": "forgetgate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "forgetgate",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.sigmoid(forgetgate)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(forgetgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_38": {
                "variable": {
                    "value": "cellgate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cellgate",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.tanh(cellgate)",
                            "Call"
                        ],
                        [
                            "F.tanh(cellgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_39": {
                "variable": {
                    "value": "outgate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outgate",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.sigmoid(outgate)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(outgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_64": {
                "variable": {
                    "value": "ingate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ingate",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.sigmoid(ingate)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(ingate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_65": {
                "variable": {
                    "value": "forgetgate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "forgetgate",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.sigmoid(forgetgate)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(forgetgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_66": {
                "variable": {
                    "value": "cellgate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cellgate",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.tanh(cellgate)",
                            "Call"
                        ],
                        [
                            "F.tanh(cellgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_67": {
                "variable": {
                    "value": "outgate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outgate",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.sigmoid(outgate)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(outgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "baddbmm_79": {
                "variable": {
                    "value": "gi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b_ih.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch1": {
                    "value": "input",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(4, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(3, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "torch.cat(all_output, input.dim() - 1)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ]
                    ]
                },
                "batch2": {
                    "value": "w_ih",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "baddbmm_80": {
                "variable": {
                    "value": "gh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b_hh.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch1": {
                    "value": "hx",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "hx.expand(4, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "hidden.expand(3, *hidden.size()) if noise_hidden is None else hidden.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "hidden if noise_hidden is None else hidden * noise_hidden",
                            "IfExp"
                        ]
                    ]
                },
                "batch2": {
                    "value": "w_hh",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_84": {
                "variable": {
                    "value": "resetgate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_r + h_r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_85": {
                "variable": {
                    "value": "inputgate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_i + h_i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_86": {
                "variable": {
                    "value": "newgate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_n + resetgate * h_n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_103": {
                "variable": {
                    "value": "gi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(4, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(3, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "torch.cat(all_output, input.dim() - 1)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_ih",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_ih",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linear_104": {
                "variable": {
                    "value": "gh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hx",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "hx.expand(4, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "hidden.expand(3, *hidden.size()) if noise_hidden is None else hidden.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "hidden if noise_hidden is None else hidden * noise_hidden",
                            "IfExp"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_hh",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_hh",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_108": {
                "variable": {
                    "value": "resetgate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_r + h_r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_109": {
                "variable": {
                    "value": "inputgate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_i + h_i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_110": {
                "variable": {
                    "value": "newgate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_n + resetgate * h_n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_52": {
                "variable": {
                    "value": "igates",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(4, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(3, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "torch.cat(all_output, input.dim() - 1)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_ih",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linear_98": {
                "variable": {
                    "value": "gi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(4, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "input.expand(3, *input.size()) if noise_in is None else input.unsqueeze(0) * noise_in",
                            "IfExp"
                        ],
                        [
                            "input * noise_in",
                            "BinOp"
                        ],
                        [
                            "torch.cat(all_output, input.dim() - 1)",
                            "Call"
                        ],
                        [
                            "input.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_ih",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linear_99": {
                "variable": {
                    "value": "gh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hx",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "hx.expand(4, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "hidden.expand(3, *hidden.size()) if noise_hidden is None else hidden.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "hidden if noise_hidden is None else hidden * noise_hidden",
                            "IfExp"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_hh",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0).view(input.size(0), *output[0].size())",
                            "Call"
                        ],
                        [
                            "output.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "hidden[0] if isinstance(hidden, tuple) else hidden",
                            "IfExp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "baddbmm_32": {
                "input": {
                    "value": "b_hh.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch1": {
                    "value": "hx",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "hx.expand(4, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "hidden.expand(3, *hidden.size()) if noise_hidden is None else hidden.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "hidden if noise_hidden is None else hidden * noise_hidden",
                            "IfExp"
                        ]
                    ]
                },
                "batch2": {
                    "value": "w_hh",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_42": {
                "input": {
                    "value": "cy",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "forgetgate * cx + ingate * cellgate",
                            "BinOp"
                        ],
                        [
                            "forgetgate * cx + ingate * cellgate",
                            "BinOp"
                        ]
                    ]
                }
            },
            "linear_60": {
                "input": {
                    "value": "hx",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "hx.expand(4, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "hx * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "hidden.expand(3, *hidden.size()) if noise_hidden is None else hidden.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ],
                        [
                            "hidden if noise_hidden is None else hidden * noise_hidden",
                            "IfExp"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_hh",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_hh",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tanh_70": {
                "input": {
                    "value": "cy",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "forgetgate * cx + ingate * cellgate",
                            "BinOp"
                        ],
                        [
                            "forgetgate * cx + ingate * cellgate",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_163": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "input.dim() - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_172": {
                "variable": {
                    "value": "next_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "next_hidden",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "(torch.cat(next_h, 0).view(total_layers, *next_h[0].size()), torch.cat(next_c, 0).view(total_layers, *next_c[0].size()))",
                            "Tuple"
                        ],
                        [
                            "torch.cat(next_hidden, 0).view(total_layers, *next_hidden[0].size())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "(torch.cat(next_h, 0).view(num_layers, *next_h[0].size()), torch.cat(next_c, 0).view(num_layers, *next_c[0].size()))",
                            "Tuple"
                        ],
                        [
                            "torch.cat(next_hidden, 0).view(num_layers, *next_hidden[0].size())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_248": {
                "variable": {
                    "value": "next_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "next_hidden",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "(torch.cat(next_h, 0).view(total_layers, *next_h[0].size()), torch.cat(next_c, 0).view(total_layers, *next_c[0].size()))",
                            "Tuple"
                        ],
                        [
                            "torch.cat(next_hidden, 0).view(total_layers, *next_hidden[0].size())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "(torch.cat(next_h, 0).view(num_layers, *next_h[0].size()), torch.cat(next_c, 0).view(num_layers, *next_c[0].size()))",
                            "Tuple"
                        ],
                        [
                            "torch.cat(next_hidden, 0).view(num_layers, *next_hidden[0].size())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linear_13": {
                "input": {
                    "value": "hidden",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "hidden * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "hidden * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "cell(input[i], hidden)",
                            "Call"
                        ],
                        [
                            "(hx + (hp1 - hx) * mask[i], cx + (cp1 - cx) * mask[i])",
                            "Tuple"
                        ],
                        [
                            "hidden + (hidden_next - hidden) * mask[i]",
                            "BinOp"
                        ],
                        [
                            "list(zip(*hidden))",
                            "Call"
                        ],
                        [
                            "cell(input, hidden)",
                            "Call"
                        ],
                        [
                            "(hx + (hp1 - hx) * mask, cx + (cp1 - cx) * mask)",
                            "Tuple"
                        ],
                        [
                            "hidden + (hidden_next - hidden) * mask",
                            "BinOp"
                        ],
                        [
                            "list(zip(*hidden))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_hh",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_hh",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linear_22": {
                "input": {
                    "value": "hidden",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "hidden * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "hidden * noise_hidden",
                            "BinOp"
                        ],
                        [
                            "cell(input[i], hidden)",
                            "Call"
                        ],
                        [
                            "(hx + (hp1 - hx) * mask[i], cx + (cp1 - cx) * mask[i])",
                            "Tuple"
                        ],
                        [
                            "hidden + (hidden_next - hidden) * mask[i]",
                            "BinOp"
                        ],
                        [
                            "list(zip(*hidden))",
                            "Call"
                        ],
                        [
                            "cell(input, hidden)",
                            "Call"
                        ],
                        [
                            "(hx + (hp1 - hx) * mask, cx + (cp1 - cx) * mask)",
                            "Tuple"
                        ],
                        [
                            "hidden + (hidden_next - hidden) * mask",
                            "BinOp"
                        ],
                        [
                            "list(zip(*hidden))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_hh",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_hh",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linear_53": {
                "input": {
                    "value": "hidden[0] * noise_hidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "w_hh",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_168": {
                "tensors": {
                    "value": "next_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_169": {
                "tensors": {
                    "value": "next_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_244": {
                "tensors": {
                    "value": "next_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_245": {
                "tensors": {
                    "value": "next_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "neuronlp2/nn/init.py": {
        "torch": {
            "no_grad_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "neuronlp2/nn/modules/attention.py": {
        "torch": {
            "Parameter_34": {
                "variable": {
                    "value": "self.W_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_labels, self.input_size_decoder)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self.W_e",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_labels, self.input_size_encoder)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_labels, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_74": {
                "variable": {
                    "value": "out_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input_d.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_74": {
                "variable": {
                    "value": "out_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_77": {
                "variable": {
                    "value": "out_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W_e",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input_e.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_77": {
                "variable": {
                    "value": "out_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_127": {
                "variable": {
                    "value": "self.W_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.input_size_decoder, self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_128": {
                "variable": {
                    "value": "self.W_e",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.input_size_encoder, self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_129": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_130": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.hidden_size, self.num_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_164": {
                "variable": {
                    "value": "out_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.W_d",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_164": {
                "variable": {
                    "value": "out_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_168": {
                "variable": {
                    "value": "out_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.W_e",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_168": {
                "variable": {
                    "value": "out_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_171": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_d + out_e + self.b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_38": {
                "variable": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_labels, self.input_size_decoder, self.input_size_encoder)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_84": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_d.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_87": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.matmul(input_d.unsqueeze(1), self.U)",
                            "Call"
                        ],
                        [
                            "torch.matmul(output, input_e.unsqueeze(1).transpose(2, 3))",
                            "Call"
                        ],
                        [
                            "output + out_d + out_e + self.b",
                            "BinOp"
                        ],
                        [
                            "out_d + out_d + self.b",
                            "BinOp"
                        ],
                        [
                            "output * mask_d.unsqueeze(1).unsqueeze(3) * mask_e.unsqueeze(1).unsqueeze(2)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "input_e.unsqueeze(1).transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_177": {
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.tanh(out_d + out_e + self.b)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_177": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "neuronlp2/nn/modules/crf.py": {
        "torch": {
            "Linear_33": {
                "variable": {
                    "value": "self.state_nn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_114": {
                "variable": {
                    "value": "batch_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_165": {
                "variable": {
                    "value": "batch_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_176": {
                "variable": {
                    "value": "(_, back_pointer[-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pi[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_250": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "energy",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.forward(input, mask=mask)",
                            "Call"
                        ],
                        [
                            "self.forward(input, mask=mask)",
                            "Call"
                        ],
                        [
                            "self.forward(input_h, input_c, mask=mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_290": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_292": {
                "variable": {
                    "value": "batch_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.trans_nn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_labels * self.num_labels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "self.trans_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_labels, self.num_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_174": {
                "variable": {
                    "value": "(pi[t], pointer[t])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "energy_transpose[t] + pi_prev.unsqueeze(2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "diag_226": {
                "input": {
                    "value": "output.new_full((length,), -np.inf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_268": {
                "n": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "neuronlp2/nn/modules/linear.py": {
        "torch": {
            "Parameter_29": {
                "variable": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.out_features, self.left_features, self.right_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.W_l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.out_features, self.left_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_31": {
                "variable": {
                    "value": "self.W_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.out_features, self.left_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bilinear_70": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input1": {
                    "value": "input_left",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_left.view(batch, self.left_features)",
                            "Call"
                        ]
                    ]
                },
                "input2": {
                    "value": "input_right",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_right.view(batch, self.right_features)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_71": {
                "input": {
                    "value": "input_left",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_left.view(batch, self.left_features)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.W_l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "neuronlp2/nn/modules/masked_rnn.py": {
        "torch": {}
    },
    "neuronlp2/nn/modules/skipconnect_rnn.py": {
        "torch": {
            "Parameter_422": {
                "variable": {
                    "value": "self.weight_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size, input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_423": {
                "variable": {
                    "value": "self.weight_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size, hidden_size * 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_537": {
                "variable": {
                    "value": "self.weight_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(4 * hidden_size, input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_538": {
                "variable": {
                    "value": "self.weight_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(4 * hidden_size, 2 * hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_644": {
                "variable": {
                    "value": "self.weight_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(4, input_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_645": {
                "variable": {
                    "value": "self.weight_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(4, 2 * hidden_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_744": {
                "variable": {
                    "value": "self.weight_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3 * hidden_size, input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_745": {
                "variable": {
                    "value": "self.weight_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3 * hidden_size, hidden_size * 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_844": {
                "variable": {
                    "value": "self.weight_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3, input_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_845": {
                "variable": {
                    "value": "self.weight_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3, hidden_size * 2, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_425": {
                "variable": {
                    "value": "self.bias_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_426": {
                "variable": {
                    "value": "self.bias_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_540": {
                "variable": {
                    "value": "self.bias_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(4 * hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_541": {
                "variable": {
                    "value": "self.bias_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(4 * hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_647": {
                "variable": {
                    "value": "self.bias_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(4, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_648": {
                "variable": {
                    "value": "self.bias_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(4, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_747": {
                "variable": {
                    "value": "self.bias_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3 * hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_748": {
                "variable": {
                    "value": "self.bias_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3 * hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_847": {
                "variable": {
                    "value": "self.bias_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_848": {
                "variable": {
                    "value": "self.bias_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "neuronlp2/nn/modules/variational_rnn.py": {
        "torch": {
            "Parameter_441": {
                "variable": {
                    "value": "self.weight_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size, input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_442": {
                "variable": {
                    "value": "self.weight_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_554": {
                "variable": {
                    "value": "self.weight_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(4, input_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_555": {
                "variable": {
                    "value": "self.weight_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(4, hidden_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_652": {
                "variable": {
                    "value": "self.weight_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3, input_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_653": {
                "variable": {
                    "value": "self.weight_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3, hidden_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_757": {
                "variable": {
                    "value": "self.weight_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(4 * hidden_size, input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_758": {
                "variable": {
                    "value": "self.weight_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(4 * hidden_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_855": {
                "variable": {
                    "value": "self.weight_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3 * hidden_size, input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_856": {
                "variable": {
                    "value": "self.weight_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3 * hidden_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_444": {
                "variable": {
                    "value": "self.bias_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_445": {
                "variable": {
                    "value": "self.bias_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_557": {
                "variable": {
                    "value": "self.bias_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(4, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_558": {
                "variable": {
                    "value": "self.bias_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(4, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_655": {
                "variable": {
                    "value": "self.bias_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_656": {
                "variable": {
                    "value": "self.bias_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_760": {
                "variable": {
                    "value": "self.bias_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(4 * hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_761": {
                "variable": {
                    "value": "self.bias_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(4 * hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_858": {
                "variable": {
                    "value": "self.bias_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3 * hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_859": {
                "variable": {
                    "value": "self.bias_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3 * hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "neuronlp2/nn/utils.py": {
        "torch": {
            "pack_padded_sequence_62": {
                "variable": {
                    "value": "seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rnn_input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rnn_input.index_select(batch_dim, order)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lengths",
                            "Name"
                        ],
                        [
                            "lens.tolist()",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "batch_first",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_72": {
                "variable": {
                    "value": "(output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "seq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rnn_utils.pack_padded_sequence(rnn_input, lens, batch_first=batch_first)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "batch_first",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sort_35": {
                "variable": {
                    "value": "(lens, order)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sort_39": {
                "variable": {
                    "value": "(_, rev_order)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "order",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ne_36": {
                "input": {
                    "value": "lens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lengths",
                            "Name"
                        ],
                        [
                            "lens.tolist()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}