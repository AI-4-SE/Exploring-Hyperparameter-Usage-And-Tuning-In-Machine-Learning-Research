{
    "bounds.py": {
        "torch": {
            "tensor_65": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_65": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_84": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "with_margin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([value - margin, value + margin], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.stack([value, value + margin], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.stack([value - margin, value], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.stack([value - margin, value + margin], dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_139": {
                "variable": {
                    "value": "masked_res",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "cki,c->cki",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[res, masked_positive]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_171": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "with_margin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([value - margin, value + margin], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.stack([value, value + margin], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.stack([value - margin, value], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.stack([value - margin, value + margin], dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_242": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1 - value, value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_14": {
                "*size": {
                    "value": "(self.C, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_94": {
                "*size": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_103": {
                "equation": {
                    "value": "c,c->c",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[positive_class, self.idc_mask]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_108": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.C, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_114": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "cki,c->cki",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[res, masked_positive]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_125": {
                "*size": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_134": {
                "equation": {
                    "value": "c,c->c",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[positive_class, self.idc_mask]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_135": {
                "equation": {
                    "value": "c,c->c",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[weak_positive_class, self.idc_mask]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_168": {
                "tensors": {
                    "value": "[value - margin, value + margin]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tensor_194": {},
            "stack_76": {
                "tensors": {
                    "value": "[value - margin, value + margin]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_100": {
                "equation": {
                    "value": "cwh->c",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[target]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_131": {
                "equation": {
                    "value": "cwh->c",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[target]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_132": {
                "equation": {
                    "value": "cwh->c",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[weak_target]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_182": {
                "equation": {
                    "value": "cwh->c",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[target]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_78": {
                "tensors": {
                    "value": "[value, value + margin]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_80": {
                "tensors": {
                    "value": "[value - margin, value]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_84": {
                "*size": {
                    "value": "*value.shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_164": {
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval(self.sizes.loc[self.sizes.val_ids == filename, pred_size_col].values[0])",
                            "Call"
                        ],
                        [
                            "self.sizes.loc[self.sizes.val_ids == filename, pred_size_col].values[0]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor([value]).squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.__fn__(target[None, ...].type(torch.float32), self.power)[0].type(torch.float32)",
                            "Call"
                        ],
                        [
                            "self.__fn__(target[None, ...].type(torch.float32), self.power)[0].type(torch.float32)",
                            "Call"
                        ],
                        [
                            "eval(self.sizes.loc[self.sizes.val_ids == filename, pred_size_col].values[0]) * 256 * 256",
                            "BinOp"
                        ],
                        [
                            "value_gt",
                            "variable"
                        ],
                        [
                            "value / (w * h)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_171": {
                "*size": {
                    "value": "*value.shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_200": {
                "equation": {
                    "value": "cwh->c",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[weak_target]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "dataloader.py": {
        "torch": {
            "randperm_451": {
                "n": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(self.data_source)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_30": {
                "data": {
                    "value": "nd",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "data": {
                    "value": "nd",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "data": {
                    "value": "nd",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_43": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "data": {
                    "value": "nd",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "data": {
                    "value": "nd",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "data": {
                    "value": "nd",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "data": {
                    "value": "nd",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "data": {
                    "value": "nd",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_91": {
                "data": {
                    "value": "nd",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_98": {
                "data": {
                    "value": "nd",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_104": {
                "data": {
                    "value": "nd",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_113": {
                "data": {
                    "value": "nd",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_122": {
                "data": {
                    "value": "nd",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_450": {
                "high": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(self.data_source)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.num_samples,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_137": {
                "*size": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dice3d.py": {
        "torch": {
            "unique_32": {
                "variable": {
                    "value": "unique_patients",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_grp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_grp",
                            "Method Argument"
                        ],
                        [
                            "all_grp",
                            "Method Argument"
                        ],
                        [
                            "all_grp",
                            "Method Argument"
                        ],
                        [
                            "all_grp",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_36": {
                "variable": {
                    "value": "batch_hd",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(unique_patients), C)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "metric_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "metric_axis",
                            "Method Argument"
                        ],
                        [
                            "metric_axis",
                            "Method Argument"
                        ],
                        [
                            "metric_axis",
                            "Method Argument"
                        ],
                        [
                            "metric_axis",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "index_select_75": {
                "variable": {
                    "value": "hd_3d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_hd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((len(unique_patients), C))",
                            "Call"
                        ],
                        [
                            "torch.zeros((len(unique_patients), C))",
                            "Call"
                        ],
                        [
                            "torch.zeros((len(unique_patients), C))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(metric_axis)",
                            "Call"
                        ],
                        [
                            "torch.tensor(metric_axis)",
                            "Call"
                        ],
                        [
                            "torch.tensor(metric_axis)",
                            "Call"
                        ],
                        [
                            "torch.tensor(metric_axis)",
                            "Call"
                        ]
                    ]
                }
            },
            "unique_92": {
                "variable": {
                    "value": "unique_patients",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_grp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_grp",
                            "Method Argument"
                        ],
                        [
                            "all_grp",
                            "Method Argument"
                        ],
                        [
                            "all_grp",
                            "Method Argument"
                        ],
                        [
                            "all_grp",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_96": {
                "variable": {
                    "value": "batch_dice",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(unique_patients), C)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_97": {
                "variable": {
                    "value": "batch_hd",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(unique_patients), C)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_98": {
                "variable": {
                    "value": "batch_asd",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(unique_patients), C)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_112": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "metric_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "metric_axis",
                            "Method Argument"
                        ],
                        [
                            "metric_axis",
                            "Method Argument"
                        ],
                        [
                            "metric_axis",
                            "Method Argument"
                        ],
                        [
                            "metric_axis",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "index_select_113": {
                "variable": {
                    "value": "dice_3d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_dice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((len(unique_patients), C))",
                            "Call"
                        ],
                        [
                            "torch.zeros((len(unique_patients), C))",
                            "Call"
                        ],
                        [
                            "torch.zeros((len(unique_patients), C))",
                            "Call"
                        ],
                        [
                            "torch.zeros((len(unique_patients), C))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(metric_axis)",
                            "Call"
                        ],
                        [
                            "torch.tensor(metric_axis)",
                            "Call"
                        ],
                        [
                            "torch.tensor(metric_axis)",
                            "Call"
                        ],
                        [
                            "torch.tensor(metric_axis)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_168": {
                "variable": {
                    "value": "hd_3d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_hd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((len(unique_patients), C))",
                            "Call"
                        ],
                        [
                            "torch.zeros((len(unique_patients), C))",
                            "Call"
                        ],
                        [
                            "torch.zeros((len(unique_patients), C))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(metric_axis)",
                            "Call"
                        ],
                        [
                            "torch.tensor(metric_axis)",
                            "Call"
                        ],
                        [
                            "torch.tensor(metric_axis)",
                            "Call"
                        ],
                        [
                            "torch.tensor(metric_axis)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_169": {
                "variable": {
                    "value": "asd_3d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_asd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((len(unique_patients), C))",
                            "Call"
                        ],
                        [
                            "torch.zeros((len(unique_patients), C))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(metric_axis)",
                            "Call"
                        ],
                        [
                            "torch.tensor(metric_axis)",
                            "Call"
                        ],
                        [
                            "torch.tensor(metric_axis)",
                            "Call"
                        ],
                        [
                            "torch.tensor(metric_axis)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_171": {
                "variable": {
                    "value": "asd_3d_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.nanmean(asd_3d, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unique_200": {
                "variable": {
                    "value": "unique_patients",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_grp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_grp",
                            "Method Argument"
                        ],
                        [
                            "all_grp",
                            "Method Argument"
                        ],
                        [
                            "all_grp",
                            "Method Argument"
                        ],
                        [
                            "all_grp",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_205": {
                "variable": {
                    "value": "batch_dice",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(unique_patients), C)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_206": {
                "variable": {
                    "value": "batch_hd",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(unique_patients), C)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_207": {
                "variable": {
                    "value": "batch_asd",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(unique_patients), C)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_264": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "metric_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "metric_axis",
                            "Method Argument"
                        ],
                        [
                            "metric_axis",
                            "Method Argument"
                        ],
                        [
                            "metric_axis",
                            "Method Argument"
                        ],
                        [
                            "metric_axis",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "index_select_265": {
                "variable": {
                    "value": "dice_3d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_dice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((len(unique_patients), C))",
                            "Call"
                        ],
                        [
                            "torch.zeros((len(unique_patients), C))",
                            "Call"
                        ],
                        [
                            "torch.zeros((len(unique_patients), C))",
                            "Call"
                        ],
                        [
                            "torch.zeros((len(unique_patients), C))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(metric_axis)",
                            "Call"
                        ],
                        [
                            "torch.tensor(metric_axis)",
                            "Call"
                        ],
                        [
                            "torch.tensor(metric_axis)",
                            "Call"
                        ],
                        [
                            "torch.tensor(metric_axis)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_266": {
                "variable": {
                    "value": "hd_3d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_hd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((len(unique_patients), C))",
                            "Call"
                        ],
                        [
                            "torch.zeros((len(unique_patients), C))",
                            "Call"
                        ],
                        [
                            "torch.zeros((len(unique_patients), C))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(metric_axis)",
                            "Call"
                        ],
                        [
                            "torch.tensor(metric_axis)",
                            "Call"
                        ],
                        [
                            "torch.tensor(metric_axis)",
                            "Call"
                        ],
                        [
                            "torch.tensor(metric_axis)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_267": {
                "variable": {
                    "value": "asd_3d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_asd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((len(unique_patients), C))",
                            "Call"
                        ],
                        [
                            "torch.zeros((len(unique_patients), C))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(metric_axis)",
                            "Call"
                        ],
                        [
                            "torch.tensor(metric_axis)",
                            "Call"
                        ],
                        [
                            "torch.tensor(metric_axis)",
                            "Call"
                        ],
                        [
                            "torch.tensor(metric_axis)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_341": {
                "variable": {
                    "value": "batch_dice",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(unique_patients), C)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unique_370": {
                "variable": {
                    "value": "unique_patients",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_grp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_grp",
                            "Method Argument"
                        ],
                        [
                            "all_grp",
                            "Method Argument"
                        ],
                        [
                            "all_grp",
                            "Method Argument"
                        ],
                        [
                            "all_grp",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_371": {
                "variable": {
                    "value": "batch_dice",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(unique_patients), C)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_372": {
                "variable": {
                    "value": "batch_avd",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(unique_patients), C)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_385": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "metric_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "metric_axis",
                            "Method Argument"
                        ],
                        [
                            "metric_axis",
                            "Method Argument"
                        ],
                        [
                            "metric_axis",
                            "Method Argument"
                        ],
                        [
                            "metric_axis",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "index_select_386": {
                "variable": {
                    "value": "dice_3d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_dice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((len(unique_patients), C))",
                            "Call"
                        ],
                        [
                            "torch.zeros((len(unique_patients), C))",
                            "Call"
                        ],
                        [
                            "torch.zeros((len(unique_patients), C))",
                            "Call"
                        ],
                        [
                            "torch.zeros((len(unique_patients), C))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(metric_axis)",
                            "Call"
                        ],
                        [
                            "torch.tensor(metric_axis)",
                            "Call"
                        ],
                        [
                            "torch.tensor(metric_axis)",
                            "Call"
                        ],
                        [
                            "torch.tensor(metric_axis)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_387": {
                "variable": {
                    "value": "avd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_avd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((len(unique_patients), C))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(metric_axis)",
                            "Call"
                        ],
                        [
                            "torch.tensor(metric_axis)",
                            "Call"
                        ],
                        [
                            "torch.tensor(metric_axis)",
                            "Call"
                        ],
                        [
                            "torch.tensor(metric_axis)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_105": {
                "variable": {
                    "value": "inter_card_p",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bc->c",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[torch.masked_select(all_inter_card, all_grp == p).reshape((-1, C))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_106": {
                "variable": {
                    "value": "card_gt_p",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bc->c",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[torch.masked_select(all_card_gt, all_grp == p).reshape((-1, C))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_107": {
                "variable": {
                    "value": "card_pred_p",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bc->c",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[torch.masked_select(all_card_pred, all_grp == p).reshape((-1, C))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_219": {
                "variable": {
                    "value": "inter_card_p",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bc->c",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[torch.masked_select(all_inter_card, all_grp == p).reshape((-1, C))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_220": {
                "variable": {
                    "value": "card_gt_p",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bc->c",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[torch.masked_select(all_card_gt, all_grp == p).reshape((-1, C))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_221": {
                "variable": {
                    "value": "card_pred_p",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bc->c",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[torch.masked_select(all_card_pred, all_grp == p).reshape((-1, C))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_359": {
                "variable": {
                    "value": "t_seg",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "t_seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ndarray(shape=(w, h, n))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(t_seg)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_360": {
                "variable": {
                    "value": "t_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "t_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ndarray(shape=(w, h, n))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(t_gt)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_374": {
                "variable": {
                    "value": "inter_card_p",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bc->c",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[torch.masked_select(all_inter_card, all_grp == p).reshape((-1, C))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_375": {
                "variable": {
                    "value": "card_gt_p",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bc->c",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[torch.masked_select(all_card_gt, all_grp == p).reshape((-1, C))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_376": {
                "variable": {
                    "value": "card_pred_p",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bc->c",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[torch.masked_select(all_card_pred, all_grp == p).reshape((-1, C))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_67": {
                "variable": {
                    "value": "hd_3d_var",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(hd_3d_var_vec)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "round_78": {
                "input": {
                    "value": "hd_3d_mean * 10 ** 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_81": {
                "input": {
                    "value": "hd_3d_sd * 10 ** 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_115": {
                "input": {
                    "value": "dice_3d_mean * 10 ** 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_117": {
                "input": {
                    "value": "dice_3d_sd * 10 ** 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_172": {
                "input": {
                    "value": "hd_3d_mean * 10 ** 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_173": {
                "input": {
                    "value": "asd_3d_mean * 10 ** 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_176": {
                "input": {
                    "value": "hd_3d_sd * 10 ** 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_177": {
                "input": {
                    "value": "asd_3d_sd * 10 ** 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_251": {
                "variable": {
                    "value": "hd_3d_var",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(hd_3d_var_vec)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_252": {
                "variable": {
                    "value": "asd_3d_var",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(asd_3d_var_vec)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "round_272": {
                "input": {
                    "value": "dice_3d_mean * 10 ** 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_273": {
                "input": {
                    "value": "hd_3d_mean * 10 ** 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_274": {
                "input": {
                    "value": "asd_3d_mean * 10 ** 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_279": {
                "input": {
                    "value": "dice_3d_sd * 10 ** 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_280": {
                "input": {
                    "value": "hd_3d_sd * 10 ** 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_281": {
                "input": {
                    "value": "asd_3d_sd * 10 ** 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_160": {
                "variable": {
                    "value": "hd_3d_var",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(hd_3d_var_vec)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_161": {
                "variable": {
                    "value": "asd_3d_var",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(asd_3d_var_vec)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_34": {
                "input": {
                    "value": "unique_patients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unique(all_grp)",
                            "Call"
                        ],
                        [
                            "unique_patients[unique_patients != torch.ones_like(unique_patients) * 666]",
                            "Subscript"
                        ],
                        [
                            "[u.item() for u in unique_patients]",
                            "ListComp"
                        ],
                        [
                            "torch.unique(all_grp)",
                            "Call"
                        ],
                        [
                            "unique_patients[unique_patients != torch.ones_like(unique_patients) * 666]",
                            "Subscript"
                        ],
                        [
                            "[u.item() for u in unique_patients]",
                            "ListComp"
                        ],
                        [
                            "torch.unique(all_grp)",
                            "Call"
                        ],
                        [
                            "unique_patients[unique_patients != torch.ones_like(unique_patients) * 666]",
                            "Subscript"
                        ],
                        [
                            "[u.item() for u in unique_patients]",
                            "ListComp"
                        ],
                        [
                            "list(set(patients))",
                            "Call"
                        ],
                        [
                            "torch.unique(all_grp)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_94": {
                "input": {
                    "value": "unique_patients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unique(all_grp)",
                            "Call"
                        ],
                        [
                            "unique_patients[unique_patients != torch.ones_like(unique_patients) * 666]",
                            "Subscript"
                        ],
                        [
                            "[u.item() for u in unique_patients]",
                            "ListComp"
                        ],
                        [
                            "torch.unique(all_grp)",
                            "Call"
                        ],
                        [
                            "unique_patients[unique_patients != torch.ones_like(unique_patients) * 666]",
                            "Subscript"
                        ],
                        [
                            "[u.item() for u in unique_patients]",
                            "ListComp"
                        ],
                        [
                            "torch.unique(all_grp)",
                            "Call"
                        ],
                        [
                            "unique_patients[unique_patients != torch.ones_like(unique_patients) * 666]",
                            "Subscript"
                        ],
                        [
                            "[u.item() for u in unique_patients]",
                            "ListComp"
                        ],
                        [
                            "list(set(patients))",
                            "Call"
                        ],
                        [
                            "torch.unique(all_grp)",
                            "Call"
                        ]
                    ]
                }
            },
            "masked_select_105": {
                "input": {
                    "value": "all_inter_card",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_inter_card",
                            "Method Argument"
                        ],
                        [
                            "all_inter_card",
                            "Method Argument"
                        ],
                        [
                            "all_inter_card",
                            "Method Argument"
                        ]
                    ]
                },
                "mask": {
                    "value": "all_grp == p",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reshape_105": {
                "input": {
                    "value": "(-1, C)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "masked_select_106": {
                "input": {
                    "value": "all_card_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_card_gt",
                            "Method Argument"
                        ],
                        [
                            "all_card_gt",
                            "Method Argument"
                        ],
                        [
                            "all_card_gt",
                            "Method Argument"
                        ],
                        [
                            "all_card_gt",
                            "Method Argument"
                        ]
                    ]
                },
                "mask": {
                    "value": "all_grp == p",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reshape_106": {
                "input": {
                    "value": "(-1, C)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "masked_select_107": {
                "input": {
                    "value": "all_card_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_card_pred",
                            "Method Argument"
                        ],
                        [
                            "all_card_pred",
                            "Method Argument"
                        ],
                        [
                            "all_card_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "mask": {
                    "value": "all_grp == p",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reshape_107": {
                "input": {
                    "value": "(-1, C)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_like_203": {
                "input": {
                    "value": "unique_patients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unique(all_grp)",
                            "Call"
                        ],
                        [
                            "unique_patients[unique_patients != torch.ones_like(unique_patients) * 666]",
                            "Subscript"
                        ],
                        [
                            "[u.item() for u in unique_patients]",
                            "ListComp"
                        ],
                        [
                            "torch.unique(all_grp)",
                            "Call"
                        ],
                        [
                            "unique_patients[unique_patients != torch.ones_like(unique_patients) * 666]",
                            "Subscript"
                        ],
                        [
                            "[u.item() for u in unique_patients]",
                            "ListComp"
                        ],
                        [
                            "torch.unique(all_grp)",
                            "Call"
                        ],
                        [
                            "unique_patients[unique_patients != torch.ones_like(unique_patients) * 666]",
                            "Subscript"
                        ],
                        [
                            "[u.item() for u in unique_patients]",
                            "ListComp"
                        ],
                        [
                            "list(set(patients))",
                            "Call"
                        ],
                        [
                            "torch.unique(all_grp)",
                            "Call"
                        ]
                    ]
                }
            },
            "masked_select_219": {
                "input": {
                    "value": "all_inter_card",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_inter_card",
                            "Method Argument"
                        ],
                        [
                            "all_inter_card",
                            "Method Argument"
                        ],
                        [
                            "all_inter_card",
                            "Method Argument"
                        ]
                    ]
                },
                "mask": {
                    "value": "all_grp == p",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reshape_219": {
                "input": {
                    "value": "(-1, C)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "masked_select_220": {
                "input": {
                    "value": "all_card_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_card_gt",
                            "Method Argument"
                        ],
                        [
                            "all_card_gt",
                            "Method Argument"
                        ],
                        [
                            "all_card_gt",
                            "Method Argument"
                        ],
                        [
                            "all_card_gt",
                            "Method Argument"
                        ]
                    ]
                },
                "mask": {
                    "value": "all_grp == p",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reshape_220": {
                "input": {
                    "value": "(-1, C)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "masked_select_221": {
                "input": {
                    "value": "all_card_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_card_pred",
                            "Method Argument"
                        ],
                        [
                            "all_card_pred",
                            "Method Argument"
                        ],
                        [
                            "all_card_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "mask": {
                    "value": "all_grp == p",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reshape_221": {
                "input": {
                    "value": "(-1, C)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "masked_select_374": {
                "input": {
                    "value": "all_inter_card",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_inter_card",
                            "Method Argument"
                        ],
                        [
                            "all_inter_card",
                            "Method Argument"
                        ],
                        [
                            "all_inter_card",
                            "Method Argument"
                        ]
                    ]
                },
                "mask": {
                    "value": "all_grp == p",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reshape_374": {
                "input": {
                    "value": "(-1, C)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "masked_select_375": {
                "input": {
                    "value": "all_card_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_card_gt",
                            "Method Argument"
                        ],
                        [
                            "all_card_gt",
                            "Method Argument"
                        ],
                        [
                            "all_card_gt",
                            "Method Argument"
                        ],
                        [
                            "all_card_gt",
                            "Method Argument"
                        ]
                    ]
                },
                "mask": {
                    "value": "all_grp == p",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reshape_375": {
                "input": {
                    "value": "(-1, C)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "masked_select_376": {
                "input": {
                    "value": "all_card_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_card_pred",
                            "Method Argument"
                        ],
                        [
                            "all_card_pred",
                            "Method Argument"
                        ],
                        [
                            "all_card_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "mask": {
                    "value": "all_grp == p",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reshape_376": {
                "input": {
                    "value": "(-1, C)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "round_380": {
                "input": {
                    "value": "dice_3d * 10 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "layers.py": {
        "torch": {
            "Sequential_42": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_dim, out_dim, kernel_size=kernel_size, stride=stride, padding=padding, dilation=dilation)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_dim, out_dim, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_dim, out_dim, kernel_size=[kernelSize, 1], padding=tuple([2, 0]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_dim, out_dim, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_block(in_dim, out_dim, act_fn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_107": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(in_dim, out_dim, kernel_size=3, stride=2, padding=1, output_padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_116": {
                "variable": {
                    "value": "pool",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_8": {
                "*args": {
                    "value": "layer(nin, nout, kernel_size=kernel_size, stride=stride, padding=padding, bias=bias, dilation=dilation)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "*args": {
                    "value": "convBatch(nin, nout, kernel_size=kernel_size, stride=stride, padding=padding, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "*args": {
                    "value": "interpolate(mode='nearest', scale_factor=upscale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_89": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_124": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "convBatch(nin, nout)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_129": {
                "variable": {
                    "value": "self.res",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_10": {
                "num_features": {
                    "value": "nout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nout",
                            "Method Argument"
                        ],
                        [
                            "nout",
                            "Method Argument"
                        ],
                        [
                            "nout",
                            "Method Argument"
                        ],
                        [
                            "nout",
                            "Method Argument"
                        ],
                        [
                            "nout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "PReLU_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_29": {
                "input": {
                    "value": "cin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cin",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "self.mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "self.scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_44": {
                "num_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_53": {
                "num_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "PReLU_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[kernelSize, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "tuple([2, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "in_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, kernelSize]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "tuple([0, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "num_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "PReLU_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_72": {
                "num_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "PReLU_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_82": {
                "in_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_83": {
                "num_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_108": {
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_109": {
                "num_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_131": {
                "variable": {
                    "value": "self.res",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(nin, nout, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_138": {
                "input": {
                    "value": "out + self.res(input)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm2d_93": {
                "num_features": {
                    "value": "nout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nout",
                            "Method Argument"
                        ],
                        [
                            "nout",
                            "Method Argument"
                        ],
                        [
                            "nout",
                            "Method Argument"
                        ],
                        [
                            "nout",
                            "Method Argument"
                        ],
                        [
                            "nout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_126": {
                "in_channels": {
                    "value": "nout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nout",
                            "Method Argument"
                        ],
                        [
                            "nout",
                            "Method Argument"
                        ],
                        [
                            "nout",
                            "Method Argument"
                        ],
                        [
                            "nout",
                            "Method Argument"
                        ],
                        [
                            "nout",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nout",
                            "Method Argument"
                        ],
                        [
                            "nout",
                            "Method Argument"
                        ],
                        [
                            "nout",
                            "Method Argument"
                        ],
                        [
                            "nout",
                            "Method Argument"
                        ],
                        [
                            "nout",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_127": {
                "num_features": {
                    "value": "nout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nout",
                            "Method Argument"
                        ],
                        [
                            "nout",
                            "Method Argument"
                        ],
                        [
                            "nout",
                            "Method Argument"
                        ],
                        [
                            "nout",
                            "Method Argument"
                        ],
                        [
                            "nout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_132": {
                "in_channels": {
                    "value": "nin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nin",
                            "Method Argument"
                        ],
                        [
                            "nin",
                            "Method Argument"
                        ],
                        [
                            "nin",
                            "Method Argument"
                        ],
                        [
                            "nin",
                            "Method Argument"
                        ],
                        [
                            "nin",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nout",
                            "Method Argument"
                        ],
                        [
                            "nout",
                            "Method Argument"
                        ],
                        [
                            "nout",
                            "Method Argument"
                        ],
                        [
                            "nout",
                            "Method Argument"
                        ],
                        [
                            "nout",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_133": {
                "num_features": {
                    "value": "nout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nout",
                            "Method Argument"
                        ],
                        [
                            "nout",
                            "Method Argument"
                        ],
                        [
                            "nout",
                            "Method Argument"
                        ],
                        [
                            "nout",
                            "Method Argument"
                        ],
                        [
                            "nout",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "losses.py": {
        "torch": {
            "einsum_55": {
                "variable": {
                    "value": "mask_weighted",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bcwh,c->bcwh",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[mask, Tensor(self.weights).to(mask.device)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_80": {
                "variable": {
                    "value": "mask_weighted",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bcwh,c->bcwh",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[mask, Tensor(self.weights).to(mask.device)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_232": {
                "variable": {
                    "value": "bce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_258": {
                "variable": {
                    "value": "mask_weighted",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bcwh,c->bcwh",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[tc, Tensor(self.weights).to(tc.device)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_30": {
                "equation": {
                    "value": "f'bcwh,bcwh->bc'",
                    "type": "JoinedStr",
                    "possible_values": []
                },
                "*operands": {
                    "value": "pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "probs[:, self.idc, ...].type(torch.float32)",
                            "Call"
                        ],
                        [
                            "probs[:, self.idc, ...].type(torch.float32)",
                            "Call"
                        ],
                        [
                            "probs[:, self.idc, ...].type(torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_106": {
                "variable": {
                    "value": "where",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "full_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('bcwh->b', trimmed) == w * h",
                            "Compare"
                        ]
                    ]
                }
            },
            "flatten_106": {
                "variable": {
                    "value": "where",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_109": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_138": {
                "variable": {
                    "value": "bounds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bounds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(bounds, 2)",
                            "Call"
                        ],
                        [
                            "bounds[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "bounds",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_31": {
                "equation": {
                    "value": "f'bkwh->bk'",
                    "type": "JoinedStr",
                    "possible_values": []
                },
                "*operands": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target[:, self.idc, ...].type(torch.float32)",
                            "Call"
                        ],
                        [
                            "target[:, self.idc, ...].type(torch.float32)",
                            "Call"
                        ],
                        [
                            "target[:, self.idc, ...].type(torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_33": {
                "input": {
                    "value": "intersection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "einsum(f'bcwh,bcwh->bc', pc, tc)",
                            "Call"
                        ],
                        [
                            "w * einsum('bcwh,bcwh->bc', pc, tc)",
                            "BinOp"
                        ],
                        [
                            "w * einsum('bcwh,bcwh->bc', pc, tc)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "einsum_56": {
                "equation": {
                    "value": "bcwh,bcwh->",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[mask_weighted, log_p]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_81": {
                "equation": {
                    "value": "bcwh,bcwh->",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[mask_weighted, log_p]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_103": {
                "equation": {
                    "value": "bcwh->b",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "trimmed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target[:, self.idc, ...]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "einsum_212": {
                "equation": {
                    "value": "bc,bc->",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[gt_prop, log_est_prop]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_250": {
                "equation": {
                    "value": "bcwh,bcwh->bc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "probs[:, self.idc, ...].type(torch.float32)",
                            "Call"
                        ],
                        [
                            "probs[:, self.idc, ...].type(torch.float32)",
                            "Call"
                        ],
                        [
                            "probs[:, self.idc, ...].type(torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_259": {
                "equation": {
                    "value": "bcwh,bcwh->",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[mask_weighted, log_p]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_281": {
                "equation": {
                    "value": "bcwh,bcwh->bc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "probs[:, self.idc, ...].type(torch.float32)",
                            "Call"
                        ],
                        [
                            "probs[:, self.idc, ...].type(torch.float32)",
                            "Call"
                        ],
                        [
                            "probs[:, self.idc, ...].type(torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_130": {
                "input": {
                    "value": "torch.zeros_like(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_251": {
                "equation": {
                    "value": "bcwh->bc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target[:, self.idc, ...].type(torch.float32)",
                            "Call"
                        ],
                        [
                            "target[:, self.idc, ...].type(torch.float32)",
                            "Call"
                        ],
                        [
                            "target[:, self.idc, ...].type(torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_282": {
                "equation": {
                    "value": "bcwh->bc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target[:, self.idc, ...].type(torch.float32)",
                            "Call"
                        ],
                        [
                            "target[:, self.idc, ...].type(torch.float32)",
                            "Call"
                        ],
                        [
                            "target[:, self.idc, ...].type(torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_130": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_202": {
                "input": {
                    "value": "est_prop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.__fn__(probs, self.power)",
                            "Call"
                        ],
                        [
                            "est_prop.squeeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_249": {
                "equation": {
                    "value": "bcwh->bc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target[:, self.idc, ...].type(torch.float32)",
                            "Call"
                        ],
                        [
                            "target[:, self.idc, ...].type(torch.float32)",
                            "Call"
                        ],
                        [
                            "target[:, self.idc, ...].type(torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_253": {
                "equation": {
                    "value": "bc->b",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "intersection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "einsum(f'bcwh,bcwh->bc', pc, tc)",
                            "Call"
                        ],
                        [
                            "w * einsum('bcwh,bcwh->bc', pc, tc)",
                            "BinOp"
                        ],
                        [
                            "w * einsum('bcwh,bcwh->bc', pc, tc)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "einsum_280": {
                "equation": {
                    "value": "bcwh->bc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target[:, self.idc, ...].type(torch.float32)",
                            "Call"
                        ],
                        [
                            "target[:, self.idc, ...].type(torch.float32)",
                            "Call"
                        ],
                        [
                            "target[:, self.idc, ...].type(torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_284": {
                "equation": {
                    "value": "bc->b",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "intersection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "einsum(f'bcwh,bcwh->bc', pc, tc)",
                            "Call"
                        ],
                        [
                            "w * einsum('bcwh,bcwh->bc', pc, tc)",
                            "BinOp"
                        ],
                        [
                            "w * einsum('bcwh,bcwh->bc', pc, tc)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "Adam_47": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.l_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_82": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "metric_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.metric_axis",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu') if cpu else torch.device('cuda')",
                            "IfExp"
                        ],
                        [
                            "setup(args, n_class, dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_219": {
                "variable": {
                    "value": "dice_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_dices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((total_images, C), dtype=dtype, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(metric_axis, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_219": {
                "variable": {
                    "value": "dice_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_101": {
                "*size": {
                    "value": "(total_images, C)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval(args.dtype)",
                            "Call"
                        ],
                        [
                            "eval(args.dtype)",
                            "Call"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu') if cpu else torch.device('cuda')",
                            "IfExp"
                        ],
                        [
                            "setup(args, n_class, dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_102": {
                "*size": {
                    "value": "(total_images, C)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval(args.dtype)",
                            "Call"
                        ],
                        [
                            "eval(args.dtype)",
                            "Call"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu') if cpu else torch.device('cuda')",
                            "IfExp"
                        ],
                        [
                            "setup(args, n_class, dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_103": {
                "*size": {
                    "value": "(total_images, C)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval(args.dtype)",
                            "Call"
                        ],
                        [
                            "eval(args.dtype)",
                            "Call"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu') if cpu else torch.device('cuda')",
                            "IfExp"
                        ],
                        [
                            "setup(args, n_class, dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_104": {
                "*size": {
                    "value": "(total_images, C)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval(args.dtype)",
                            "Call"
                        ],
                        [
                            "eval(args.dtype)",
                            "Call"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu') if cpu else torch.device('cuda')",
                            "IfExp"
                        ],
                        [
                            "setup(args, n_class, dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_105": {
                "*size": {
                    "value": "total_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(loader.dataset)",
                            "Call"
                        ],
                        [
                            "max(total_images, total_images_t)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval(args.dtype)",
                            "Call"
                        ],
                        [
                            "eval(args.dtype)",
                            "Call"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu') if cpu else torch.device('cuda')",
                            "IfExp"
                        ],
                        [
                            "setup(args, n_class, dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_106": {
                "*size": {
                    "value": "total_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(loader.dataset)",
                            "Call"
                        ],
                        [
                            "max(total_images, total_images_t)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval(args.dtype)",
                            "Call"
                        ],
                        [
                            "eval(args.dtype)",
                            "Call"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu') if cpu else torch.device('cuda')",
                            "IfExp"
                        ],
                        [
                            "setup(args, n_class, dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_107": {
                "*size": {
                    "value": "(total_images, C)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval(args.dtype)",
                            "Call"
                        ],
                        [
                            "eval(args.dtype)",
                            "Call"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu') if cpu else torch.device('cuda')",
                            "IfExp"
                        ],
                        [
                            "setup(args, n_class, dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_108": {
                "*size": {
                    "value": "(total_images, C)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval(args.dtype)",
                            "Call"
                        ],
                        [
                            "eval(args.dtype)",
                            "Call"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu') if cpu else torch.device('cuda')",
                            "IfExp"
                        ],
                        [
                            "setup(args, n_class, dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_109": {
                "*size": {
                    "value": "(total_images, C)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval(args.dtype)",
                            "Call"
                        ],
                        [
                            "eval(args.dtype)",
                            "Call"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu') if cpu else torch.device('cuda')",
                            "IfExp"
                        ],
                        [
                            "setup(args, n_class, dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_110": {
                "*size": {
                    "value": "(total_images, C)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval(args.dtype)",
                            "Call"
                        ],
                        [
                            "eval(args.dtype)",
                            "Call"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu') if cpu else torch.device('cuda')",
                            "IfExp"
                        ],
                        [
                            "setup(args, n_class, dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_34": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_38": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_40": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_160": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_277": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_318": {
                "obj": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_class(1, n_class).type(dtype).to(device)",
                            "Call"
                        ],
                        [
                            "torch.load(args.model_weights, map_location='cpu')",
                            "Call"
                        ],
                        [
                            "torch.load(args.model_weights)",
                            "Call"
                        ],
                        [
                            "setup(args, n_class, dtype)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "Path(savedir, 'best_2d.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_327": {
                "obj": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_class(1, n_class).type(dtype).to(device)",
                            "Call"
                        ],
                        [
                            "torch.load(args.model_weights, map_location='cpu')",
                            "Call"
                        ],
                        [
                            "torch.load(args.model_weights)",
                            "Call"
                        ],
                        [
                            "setup(args, n_class, dtype)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "Path(savedir, 'last.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_grad_enabled_147": {
                "mode": {
                    "value": "mode == 'train'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "softmax_150": {
                "input": {
                    "value": "pred_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(target_image)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_151": {
                "input": {
                    "value": "pred_logits_source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(source_image)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_169": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_190": {
                "*size": {
                    "value": "[1, C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "index_select_205": {
                "input": {
                    "value": "all_dices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((total_images, C), dtype=dtype, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(metric_axis, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "networks.py": {
        "torch": {
            "Conv2d_30": {
                "variable": {
                    "value": "self.down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_31": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_45": {
                "variable": {
                    "value": "self.maxpool0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "return_indices": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "variable": {
                    "value": "self.conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "int(in_dim / projectionFactor)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int(in_dim / projectionFactor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "PReLU_49": {
                "variable": {
                    "value": "self.PReLU0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(in_dim / projectionFactor)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(in_dim / projectionFactor)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int(in_dim / projectionFactor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "PReLU_53": {
                "variable": {
                    "value": "self.PReLU1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_57": {
                "variable": {
                    "value": "self.do",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "PReLU_58": {
                "variable": {
                    "value": "self.PReLU3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_79": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "maxpool_output.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "depth_to_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "abs(maxpool_output.shape[1] - do.shape[1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "maxpool_output.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "maxpool_output.shape[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "maxpool_output.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "maxpool_output_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(maxpool_output, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(in_dim / projectionFactor)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(in_dim / projectionFactor)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "Method Argument"
                        ],
                        [
                            "dilation",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "Method Argument"
                        ],
                        [
                            "dilation",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_103": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int(in_dim / projectionFactor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "PReLU_104": {
                "variable": {
                    "value": "self.PReLU1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_108": {
                "variable": {
                    "value": "self.do",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "PReLU_109": {
                "variable": {
                    "value": "self.PReLU3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_137": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(in_dim / projectionFactor)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(in_dim / projectionFactor)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "Method Argument"
                        ],
                        [
                            "dilation",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "Method Argument"
                        ],
                        [
                            "dilation",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_139": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int(in_dim / projectionFactor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "PReLU_140": {
                "variable": {
                    "value": "self.PReLU1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_144": {
                "variable": {
                    "value": "self.do",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_145": {
                "variable": {
                    "value": "self.conv_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_146": {
                "variable": {
                    "value": "self.PReLU3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_179": {
                "variable": {
                    "value": "self.do",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropoutRate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropoutRate",
                            "Method Argument"
                        ],
                        [
                            "dropoutRate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "PReLU_180": {
                "variable": {
                    "value": "self.PReLU_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_214": {
                "variable": {
                    "value": "self.do",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropoutRate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropoutRate",
                            "Method Argument"
                        ],
                        [
                            "dropoutRate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "PReLU_215": {
                "variable": {
                    "value": "self.PReLU_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_241": {
                "variable": {
                    "value": "self.conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "int(in_dim / projectionFactor)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_242": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int(in_dim / projectionFactor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "PReLU_243": {
                "variable": {
                    "value": "self.PReLU0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_245": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(in_dim / projectionFactor)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(in_dim / projectionFactor)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_246": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int(in_dim / projectionFactor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "PReLU_247": {
                "variable": {
                    "value": "self.PReLU1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_251": {
                "variable": {
                    "value": "self.do",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "PReLU_252": {
                "variable": {
                    "value": "self.PReLU3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_278": {
                "variable": {
                    "value": "self.conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nin",
                            "Method Argument"
                        ],
                        [
                            "nin",
                            "Method Argument"
                        ],
                        [
                            "nin",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_279": {
                "variable": {
                    "value": "self.maxpool0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "return_indices": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxUnpool2d_323": {
                "variable": {
                    "value": "self.unpool_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_327": {
                "variable": {
                    "value": "self.PReLU_Up_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxUnpool2d_334": {
                "variable": {
                    "value": "self.unpool_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_337": {
                "variable": {
                    "value": "self.PReLU_Up_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_342": {
                "variable": {
                    "value": "self.out_025",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.n_kernels * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nout",
                            "Method Argument"
                        ],
                        [
                            "nout",
                            "Method Argument"
                        ],
                        [
                            "nout",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_343": {
                "variable": {
                    "value": "self.out_05",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.n_kernels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nout",
                            "Method Argument"
                        ],
                        [
                            "nout",
                            "Method Argument"
                        ],
                        [
                            "nout",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_344": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.n_kernels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nout",
                            "Method Argument"
                        ],
                        [
                            "nout",
                            "Method Argument"
                        ],
                        [
                            "nout",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_349": {
                "variable": {
                    "value": "outputInitial",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(conv_0, maxpool_0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_429": {
                "variable": {
                    "value": "self.conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "convBatch(nin, nG)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_431": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "convBatch(nG * 1, nG * 2, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_433": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "convBatch(nG * 2, nG * 4, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_436": {
                "variable": {
                    "value": "self.bridge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "convBatch(nG * 4, nG * 8, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_441": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "convBatch(nG * 12, nG * 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_444": {
                "variable": {
                    "value": "self.conv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "convBatch(nG * 6, nG * 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_447": {
                "variable": {
                    "value": "self.conv7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "convBatch(nG * 3, nG * 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_449": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nG",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nout",
                            "Method Argument"
                        ],
                        [
                            "nout",
                            "Method Argument"
                        ],
                        [
                            "nout",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_473": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(nin, 64, 3, padding=100)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_480": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 128, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_487": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128, 256, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_496": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(256, 512, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_505": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(512, 512, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_514": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(512, 4096, 7)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_525": {
                "variable": {
                    "value": "self.score_pool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_526": {
                "variable": {
                    "value": "self.score_pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_539": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compose_acc(self.forward_path, x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(score, size=score_pool4.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "score + score_pool3",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(score, size=score_pool3.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "score_pool4.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_541": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compose_acc(self.forward_path, x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(score, size=score_pool4.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "score + score_pool3",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(score, size=score_pool3.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "score_pool3.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_543": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compose_acc(self.forward_path, x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(score, size=score_pool4.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "score + score_pool3",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(score, size=score_pool3.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_587": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_588": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_589": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_590": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_591": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_593": {
                "variable": {
                    "value": "self.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_384": {
                "tensors": {
                    "value": "(unpool_0, bn1_4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_395": {
                "tensors": {
                    "value": "(unpool_1, outputInitial)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_462": {
                "tensors": {
                    "value": "(y2, x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_474": {
                "in_channels": {
                    "value": "nin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nin",
                            "Method Argument"
                        ],
                        [
                            "nin",
                            "Method Argument"
                        ],
                        [
                            "nin",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_475": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_476": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_477": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_478": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_481": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_482": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_483": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_484": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_485": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_488": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_489": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_490": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_491": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_492": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_493": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_494": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_497": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_498": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_499": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_500": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_501": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_502": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_503": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_506": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_507": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_508": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_509": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_510": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_511": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_512": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_515": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_516": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_517": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_518": {
                "in_channels": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_519": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_520": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_521": {
                "in_channels": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_460": {
                "tensors": {
                    "value": "(y0, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_461": {
                "tensors": {
                    "value": "(y1, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train_regression.py": {
        "torch": {
            "MSELoss_51": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_34": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_53": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.lr",
                            "Attribute"
                        ],
                        [
                            "lr * 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_55": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.lr",
                            "Attribute"
                        ],
                        [
                            "lr * 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_213": {
                "variable": {
                    "value": "sizes",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bcwh->bc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_28": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "net.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "8192",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.n_class",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_115": {
                "*size": {
                    "value": "(args.epc, len(train_loader))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu') if cpu else torch.device('cuda')",
                            "IfExp"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_117": {
                "*size": {
                    "value": "(args.epc, len(train_set), args.n_class)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu') if cpu else torch.device('cuda')",
                            "IfExp"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_119": {
                "*size": {
                    "value": "(args.epc, len(train_set), args.n_class)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu') if cpu else torch.device('cuda')",
                            "IfExp"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_121": {
                "*size": {
                    "value": "(args.epc, len(train_set), args.n_class)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu') if cpu else torch.device('cuda')",
                            "IfExp"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_123": {
                "*size": {
                    "value": "(args.epc, len(val_loader))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu') if cpu else torch.device('cuda')",
                            "IfExp"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_125": {
                "*size": {
                    "value": "(args.epc, len(val_set), args.n_class)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu') if cpu else torch.device('cuda')",
                            "IfExp"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_127": {
                "*size": {
                    "value": "(args.epc, len(val_set), args.n_class)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu') if cpu else torch.device('cuda')",
                            "IfExp"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_129": {
                "*size": {
                    "value": "(args.epc, len(val_set), args.n_class)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu') if cpu else torch.device('cuda')",
                            "IfExp"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_199": {
                "*size": {
                    "value": "total_iteration",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(loader)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu') if cpu else torch.device('cuda')",
                            "IfExp"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_200": {
                "*size": {
                    "value": "(total_images, args.n_class)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu') if cpu else torch.device('cuda')",
                            "IfExp"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_201": {
                "*size": {
                    "value": "(total_images, args.n_class)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu') if cpu else torch.device('cuda')",
                            "IfExp"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_202": {
                "*size": {
                    "value": "(total_images, args.n_class)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu') if cpu else torch.device('cuda')",
                            "IfExp"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_222": {
                "variable": {
                    "value": "new_img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[viewed, viewed, viewed]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_171": {
                "obj": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(args.weights)",
                            "Call"
                        ],
                        [
                            "models.resnet101(pretrained=True)",
                            "Call"
                        ],
                        [
                            "net_class(1, args.n_class)",
                            "Call"
                        ],
                        [
                            "do_epc(i, 'train', net, train_loader, device, criterion, args, optimizer)",
                            "Call"
                        ],
                        [
                            "do_epc(i, 'val', net, val_loader, device, criterion, args)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "str(Path(args.save_dest, 'pred_size.pkl'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_174": {
                "obj": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(args.weights)",
                            "Call"
                        ],
                        [
                            "models.resnet101(pretrained=True)",
                            "Call"
                        ],
                        [
                            "net_class(1, args.n_class)",
                            "Call"
                        ],
                        [
                            "do_epc(i, 'train', net, train_loader, device, criterion, args, optimizer)",
                            "Call"
                        ],
                        [
                            "do_epc(i, 'val', net, val_loader, device, criterion, args)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "str(Path(args.save_dest, 'pred_size' + str(i) + '.pkl'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_237": {
                "input": {
                    "value": "predicted_sizes.detach() - sizes.detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_238": {
                "input": {
                    "value": "sizes.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_239": {
                "input": {
                    "value": "predicted_sizes.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "data": {
                    "value": "nd",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "data": {
                    "value": "nd",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "einsum_195": {
                "variable": {
                    "value": "ress",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bcwh->bc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[resp]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_217": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cw, ch]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_236": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cw, ch]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_245": {
                "variable": {
                    "value": "cart[0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "grid[1] - np.floor(w / 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_246": {
                "variable": {
                    "value": "cart[1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "-grid[0] + np.floor(h / 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_276": {
                "variable": {
                    "value": "_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t.sum(axis).type(dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "_sum.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_338": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[seg == c for c in range(C)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_555": {
                "variable": {
                    "value": "unique_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_p",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_570": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, C)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t.dtype()",
                            "Call"
                        ],
                        [
                            "torch.float32",
                            "Attribute"
                        ],
                        [
                            "torch.float32",
                            "Method Argument"
                        ],
                        [
                            "torch.float32",
                            "Method Argument"
                        ],
                        [
                            "torch.float32",
                            "Method Argument"
                        ],
                        [
                            "torch.float32",
                            "Method Argument"
                        ],
                        [
                            "torch.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "preds.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_587": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, C)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t.dtype()",
                            "Call"
                        ],
                        [
                            "torch.float32",
                            "Attribute"
                        ],
                        [
                            "torch.float32",
                            "Method Argument"
                        ],
                        [
                            "torch.float32",
                            "Method Argument"
                        ],
                        [
                            "torch.float32",
                            "Method Argument"
                        ],
                        [
                            "torch.float32",
                            "Method Argument"
                        ],
                        [
                            "torch.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "preds.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_588": {
                "variable": {
                    "value": "res2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, C)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t.dtype()",
                            "Call"
                        ],
                        [
                            "torch.float32",
                            "Attribute"
                        ],
                        [
                            "torch.float32",
                            "Method Argument"
                        ],
                        [
                            "torch.float32",
                            "Method Argument"
                        ],
                        [
                            "torch.float32",
                            "Method Argument"
                        ],
                        [
                            "torch.float32",
                            "Method Argument"
                        ],
                        [
                            "torch.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "preds.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_619": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, c, w, h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t.dtype()",
                            "Call"
                        ],
                        [
                            "torch.float32",
                            "Attribute"
                        ],
                        [
                            "torch.float32",
                            "Method Argument"
                        ],
                        [
                            "torch.float32",
                            "Method Argument"
                        ],
                        [
                            "torch.float32",
                            "Method Argument"
                        ],
                        [
                            "torch.float32",
                            "Method Argument"
                        ],
                        [
                            "torch.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "preds.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_795": {
                "variable": {
                    "value": "bounds",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_151": {
                "equation": {
                    "value": "bcwh->bc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "intersection(a, b).type(torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_155": {
                "equation": {
                    "value": "bcwh->bc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "union(a, b).type(torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eq_271": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256 * 256",
                            "BinOp"
                        ],
                        [
                            "changes.items()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b in range(B)",
                            "Call"
                        ],
                        [
                            "b in range(B)",
                            "Call"
                        ],
                        [
                            "changes.items()",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "all_271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "allclose_277": {
                "input": {
                    "value": "_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t.sum(axis).type(dtype)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "_ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(_sum, dtype=_sum.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_290": {
                "equation": {
                    "value": "sum_str",
                    "type": "variable",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[intersection(label, pred)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_291": {
                "equation": {
                    "value": "sum_str",
                    "type": "variable",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[label]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_292": {
                "equation": {
                    "value": "sum_str",
                    "type": "variable",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[pred]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ZeroPad2d_531": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0, padd_lr, padd_lr)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_532": {
                "variable": {
                    "value": "mask_resize",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[new_w, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t.dtype()",
                            "Call"
                        ],
                        [
                            "torch.float32",
                            "Attribute"
                        ],
                        [
                            "torch.float32",
                            "Method Argument"
                        ],
                        [
                            "torch.float32",
                            "Method Argument"
                        ],
                        [
                            "torch.float32",
                            "Method Argument"
                        ],
                        [
                            "torch.float32",
                            "Method Argument"
                        ],
                        [
                            "torch.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_535": {
                "variable": {
                    "value": "new_t",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "wh,bcwh->bcwh",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[mask_resize, t]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "masked_select_558": {
                "variable": {
                    "value": "haus_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "haus_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "haus_s",
                            "Method Argument"
                        ]
                    ]
                },
                "mask": {
                    "value": "all_p == p",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reshape_558": {
                "variable": {
                    "value": "haus_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(-1, C)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Upsample_675": {
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Upsample_680": {
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_814": {
                "variable": {
                    "value": "bce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_187": {
                "equation": {
                    "value": "bcwh->bc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[a]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "div_194": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256 * 256",
                            "BinOp"
                        ],
                        [
                            "changes.items()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "amax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a.max(dim=1, keepdim=True)[0] + 1e-10",
                            "BinOp"
                        ]
                    ]
                }
            },
            "einsum_202": {
                "equation": {
                    "value": "bcwh->c",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[a]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_212": {
                "equation": {
                    "value": "bcwh->bc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[a]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_214": {
                "equation": {
                    "value": "bcwh,wh->bc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[flotted, ws]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_215": {
                "equation": {
                    "value": "bcwh,wh->bc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[flotted, hs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_231": {
                "equation": {
                    "value": "bcwh->bc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[a]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_233": {
                "equation": {
                    "value": "bcwh,wh->bc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[flotted, ws]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_234": {
                "equation": {
                    "value": "bcwh,wh->bc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[flotted, hs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_254": {
                "equation": {
                    "value": "bcwh->bc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[a]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_256": {
                "equation": {
                    "value": "bcwh,wh->bc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[flotted, im]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unique_263": {
                "input": {
                    "value": "a.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_196": {
                "input": {
                    "value": "ress",
                    "type": "variable",
                    "possible_values": [
                        [
                            "einsum('bcwh->bc', [resp]).type(torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tensor_815": {}
        }
    }
}