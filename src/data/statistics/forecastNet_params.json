{
    "TensorFlow/convForecastNet.py": {
        "tensorflow": {
            "conv1d_35": {
                "variable": {
                    "value": "hidden1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.expand_dims(X, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "conv + str(i) + a",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "average_pooling1d_41": {
                "variable": {
                    "value": "hidden2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(inputs=tf.expand_dims(X, axis=2), filters=hidden_dim, kernel_size=2, padding='same', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='conv' + str(i) + 'a')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(inputs=tf.expand_dims(concat, axis=2), filters=hidden_dim, kernel_size=2, padding='same', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='conv' + str(i) + 'a')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(inputs=tf.expand_dims(X, axis=2), filters=hidden_dim, kernel_size=2, padding='same', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='conv' + str(i) + 'a')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(inputs=tf.expand_dims(concat, axis=2), filters=hidden_dim, kernel_size=2, padding='same', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='conv' + str(i) + 'a')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "pool + str(i) + a",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv1d_42": {
                "variable": {
                    "value": "hidden3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.average_pooling1d(inputs=hidden1, pool_size=2, strides=1, name='pool' + str(i) + 'a')",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(inputs=hidden1, pool_size=2, strides=1, name='pool' + str(i) + 'a')",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(inputs=hidden1, pool_size=2, strides=1, name='pool' + str(i) + 'a')",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(inputs=hidden1, pool_size=2, strides=1, name='pool' + str(i) + 'a')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "conv + str(i) + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "average_pooling1d_48": {
                "variable": {
                    "value": "hidden4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(inputs=hidden2, filters=hidden_dim, kernel_size=2, padding='same', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='conv' + str(i) + 'b')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(inputs=hidden2, filters=hidden_dim, kernel_size=2, padding='same', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='conv' + str(i) + 'b')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(inputs=hidden2, filters=hidden_dim, kernel_size=2, padding='same', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='conv' + str(i) + 'b')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(inputs=hidden2, filters=hidden_dim, kernel_size=2, padding='same', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='conv' + str(i) + 'b')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "pool + str(i) + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "flatten_49": {
                "variable": {
                    "value": "hidden5",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "hidden4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.average_pooling1d(inputs=hidden3, pool_size=2, strides=1, name='pool' + str(i) + 'b')",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(inputs=hidden3, pool_size=2, strides=1, name='pool' + str(i) + 'b')",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(inputs=hidden3, pool_size=2, strides=1, name='pool' + str(i) + 'b')",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(inputs=hidden3, pool_size=2, strides=1, name='pool' + str(i) + 'b')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "'flat' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_51": {
                "variable": {
                    "value": "hidden6",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(hidden4, name='flat' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(hidden4, name='flat' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(hidden4, name='flat' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(hidden4, name='flat' + str(i))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "dense0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_56": {
                "variable": {
                    "value": "output_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=hidden5, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='dense0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden5, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='dense' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden5, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='dense0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden5, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='dense' + str(i))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "output_mu0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_57": {
                "variable": {
                    "value": "output_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=hidden5, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='dense0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden5, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='dense' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden5, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='dense0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden5, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='dense' + str(i))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.softplus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "output_sigma0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cond_58": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : output_mu",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : gaussian_sample(output_mu, output_sigma)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "output0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_110": {
                "variable": {
                    "value": "outputs_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "outputs_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(outputs_mu, axis=1, name='outputs_mu')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "outputs_mu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_111": {
                "variable": {
                    "value": "outputs_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "outputs_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(outputs_sigma, axis=1, name='outputs_sigma')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "outputs_sigma",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_112": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(outputs, axis=1, name='outputs')",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(outputs, axis=1, name='outputs')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "outputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_136": {
                "variable": {
                    "value": "hidden1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.expand_dims(X, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "conv + str(i) + a",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "average_pooling1d_142": {
                "variable": {
                    "value": "hidden2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(inputs=tf.expand_dims(X, axis=2), filters=hidden_dim, kernel_size=2, padding='same', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='conv' + str(i) + 'a')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(inputs=tf.expand_dims(concat, axis=2), filters=hidden_dim, kernel_size=2, padding='same', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='conv' + str(i) + 'a')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(inputs=tf.expand_dims(X, axis=2), filters=hidden_dim, kernel_size=2, padding='same', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='conv' + str(i) + 'a')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(inputs=tf.expand_dims(concat, axis=2), filters=hidden_dim, kernel_size=2, padding='same', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='conv' + str(i) + 'a')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "pool + str(i) + a",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv1d_143": {
                "variable": {
                    "value": "hidden3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.average_pooling1d(inputs=hidden1, pool_size=2, strides=1, name='pool' + str(i) + 'a')",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(inputs=hidden1, pool_size=2, strides=1, name='pool' + str(i) + 'a')",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(inputs=hidden1, pool_size=2, strides=1, name='pool' + str(i) + 'a')",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(inputs=hidden1, pool_size=2, strides=1, name='pool' + str(i) + 'a')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "conv + str(i) + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "average_pooling1d_149": {
                "variable": {
                    "value": "hidden4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(inputs=hidden2, filters=hidden_dim, kernel_size=2, padding='same', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='conv' + str(i) + 'b')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(inputs=hidden2, filters=hidden_dim, kernel_size=2, padding='same', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='conv' + str(i) + 'b')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(inputs=hidden2, filters=hidden_dim, kernel_size=2, padding='same', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='conv' + str(i) + 'b')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(inputs=hidden2, filters=hidden_dim, kernel_size=2, padding='same', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='conv' + str(i) + 'b')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "pool + str(i) + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "flatten_150": {
                "variable": {
                    "value": "hidden5",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "hidden4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.average_pooling1d(inputs=hidden3, pool_size=2, strides=1, name='pool' + str(i) + 'b')",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(inputs=hidden3, pool_size=2, strides=1, name='pool' + str(i) + 'b')",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(inputs=hidden3, pool_size=2, strides=1, name='pool' + str(i) + 'b')",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(inputs=hidden3, pool_size=2, strides=1, name='pool' + str(i) + 'b')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "'flat' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_151": {
                "variable": {
                    "value": "hidden6",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(hidden4, name='flat' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(hidden4, name='flat' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(hidden4, name='flat' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(hidden4, name='flat' + str(i))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "dense0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_156": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=hidden5, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='dense0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden5, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='dense' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden5, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='dense0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden5, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='dense' + str(i))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "output0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_192": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(outputs, axis=1, name='outputs')",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(outputs, axis=1, name='outputs')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "outputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_195": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs - Y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cond_70": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.concat((hidden6, X, tf.slice(Y, [0, i - 1], [-1, 1])), axis=1, name='concat' + str(i))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.concat((hidden6, X, output), axis=1, name='concat' + str(i))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "conv1d_79": {
                "variable": {
                    "value": "hidden1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.expand_dims(concat, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "conv + str(i) + a",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "average_pooling1d_85": {
                "variable": {
                    "value": "hidden2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(inputs=tf.expand_dims(X, axis=2), filters=hidden_dim, kernel_size=2, padding='same', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='conv' + str(i) + 'a')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(inputs=tf.expand_dims(concat, axis=2), filters=hidden_dim, kernel_size=2, padding='same', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='conv' + str(i) + 'a')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(inputs=tf.expand_dims(X, axis=2), filters=hidden_dim, kernel_size=2, padding='same', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='conv' + str(i) + 'a')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(inputs=tf.expand_dims(concat, axis=2), filters=hidden_dim, kernel_size=2, padding='same', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='conv' + str(i) + 'a')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "pool + str(i) + a",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv1d_86": {
                "variable": {
                    "value": "hidden3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.average_pooling1d(inputs=hidden1, pool_size=2, strides=1, name='pool' + str(i) + 'a')",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(inputs=hidden1, pool_size=2, strides=1, name='pool' + str(i) + 'a')",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(inputs=hidden1, pool_size=2, strides=1, name='pool' + str(i) + 'a')",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(inputs=hidden1, pool_size=2, strides=1, name='pool' + str(i) + 'a')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "conv + str(i) + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "average_pooling1d_92": {
                "variable": {
                    "value": "hidden4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(inputs=hidden2, filters=hidden_dim, kernel_size=2, padding='same', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='conv' + str(i) + 'b')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(inputs=hidden2, filters=hidden_dim, kernel_size=2, padding='same', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='conv' + str(i) + 'b')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(inputs=hidden2, filters=hidden_dim, kernel_size=2, padding='same', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='conv' + str(i) + 'b')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(inputs=hidden2, filters=hidden_dim, kernel_size=2, padding='same', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='conv' + str(i) + 'b')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "pool + str(i) + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "flatten_93": {
                "variable": {
                    "value": "hidden5",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "hidden4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.average_pooling1d(inputs=hidden3, pool_size=2, strides=1, name='pool' + str(i) + 'b')",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(inputs=hidden3, pool_size=2, strides=1, name='pool' + str(i) + 'b')",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(inputs=hidden3, pool_size=2, strides=1, name='pool' + str(i) + 'b')",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(inputs=hidden3, pool_size=2, strides=1, name='pool' + str(i) + 'b')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "'flat' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_94": {
                "variable": {
                    "value": "hidden6",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(hidden4, name='flat' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(hidden4, name='flat' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(hidden4, name='flat' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(hidden4, name='flat' + str(i))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'dense' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_98": {
                "variable": {
                    "value": "output_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=hidden5, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='dense0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden5, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='dense' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden5, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='dense0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden5, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='dense' + str(i))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "'output_mu' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_99": {
                "variable": {
                    "value": "output_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=hidden5, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='dense0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden5, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='dense' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden5, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='dense0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden5, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='dense' + str(i))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.softplus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'output_sigma' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cond_100": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : output_mu",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : gaussian_sample(output_mu, output_sigma)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "'output' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cond_162": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.concat((hidden6, X, tf.slice(Y, [0, i - 1], [-1, 1])), axis=1, name='concat' + str(i))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.concat((hidden6, X, output), axis=1, name='concat' + str(i))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "conv1d_170": {
                "variable": {
                    "value": "hidden1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.expand_dims(concat, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "conv + str(i) + a",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "average_pooling1d_176": {
                "variable": {
                    "value": "hidden2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(inputs=tf.expand_dims(X, axis=2), filters=hidden_dim, kernel_size=2, padding='same', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='conv' + str(i) + 'a')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(inputs=tf.expand_dims(concat, axis=2), filters=hidden_dim, kernel_size=2, padding='same', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='conv' + str(i) + 'a')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(inputs=tf.expand_dims(X, axis=2), filters=hidden_dim, kernel_size=2, padding='same', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='conv' + str(i) + 'a')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(inputs=tf.expand_dims(concat, axis=2), filters=hidden_dim, kernel_size=2, padding='same', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='conv' + str(i) + 'a')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "pool + str(i) + a",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv1d_177": {
                "variable": {
                    "value": "hidden3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.average_pooling1d(inputs=hidden1, pool_size=2, strides=1, name='pool' + str(i) + 'a')",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(inputs=hidden1, pool_size=2, strides=1, name='pool' + str(i) + 'a')",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(inputs=hidden1, pool_size=2, strides=1, name='pool' + str(i) + 'a')",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(inputs=hidden1, pool_size=2, strides=1, name='pool' + str(i) + 'a')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "conv + str(i) + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "average_pooling1d_183": {
                "variable": {
                    "value": "hidden4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(inputs=hidden2, filters=hidden_dim, kernel_size=2, padding='same', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='conv' + str(i) + 'b')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(inputs=hidden2, filters=hidden_dim, kernel_size=2, padding='same', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='conv' + str(i) + 'b')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(inputs=hidden2, filters=hidden_dim, kernel_size=2, padding='same', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='conv' + str(i) + 'b')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(inputs=hidden2, filters=hidden_dim, kernel_size=2, padding='same', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='conv' + str(i) + 'b')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "pool + str(i) + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "flatten_184": {
                "variable": {
                    "value": "hidden5",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "hidden4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.average_pooling1d(inputs=hidden3, pool_size=2, strides=1, name='pool' + str(i) + 'b')",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(inputs=hidden3, pool_size=2, strides=1, name='pool' + str(i) + 'b')",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(inputs=hidden3, pool_size=2, strides=1, name='pool' + str(i) + 'b')",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(inputs=hidden3, pool_size=2, strides=1, name='pool' + str(i) + 'b')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "'flat' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_185": {
                "variable": {
                    "value": "hidden6",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(hidden4, name='flat' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(hidden4, name='flat' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(hidden4, name='flat' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(hidden4, name='flat' + str(i))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'dense' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_189": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=hidden5, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='dense0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden5, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='dense' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden5, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='dense0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden5, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='dense' + str(i))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "'output' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_35": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_136": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_72": {
                "values": {
                    "value": "(hidden6, X, tf.slice(Y, [0, i - 1], [-1, 1]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "'concat' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_74": {
                "values": {
                    "value": "(hidden6, X, output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "'concat' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_79": {
                "input": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(is_training, lambda : tf.concat((hidden6, X, tf.slice(Y, [0, i - 1], [-1, 1])), axis=1, name='concat' + str(i)), lambda : tf.concat((hidden6, X, output), axis=1, name='concat' + str(i)))",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.concat((hidden6, X, tf.slice(Y, [0, i - 1], [-1, 1])), axis=1, name='concat' + str(i)), lambda : tf.concat((hidden6, X, output), axis=1, name='concat' + str(i)))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_163": {
                "values": {
                    "value": "(hidden6, X, tf.slice(Y, [0, i - 1], [-1, 1]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "'concat' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_165": {
                "values": {
                    "value": "(hidden6, X, output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "'concat' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_170": {
                "input": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(is_training, lambda : tf.concat((hidden6, X, tf.slice(Y, [0, i - 1], [-1, 1])), axis=1, name='concat' + str(i)), lambda : tf.concat((hidden6, X, output), axis=1, name='concat' + str(i)))",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.concat((hidden6, X, tf.slice(Y, [0, i - 1], [-1, 1])), axis=1, name='concat' + str(i)), lambda : tf.concat((hidden6, X, output), axis=1, name='concat' + str(i)))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "slice_72": {
                "input_": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, i - 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_163": {
                "input_": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, i - 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "TensorFlow/denseForecastNet.py": {
        "tensorflow": {
            "dense_35": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "hiddenA0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_39": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=X, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenA0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenB0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concat, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenA' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenB' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=X, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hidden0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenB0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concat, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hidden' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenB' + str(i))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "hiddenB0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_43": {
                "variable": {
                    "value": "output_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=X, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenA0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenB0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concat, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenA' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenB' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=X, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hidden0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenB0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concat, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hidden' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenB' + str(i))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "output_mu0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_44": {
                "variable": {
                    "value": "output_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=X, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenA0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenB0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concat, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenA' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenB' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=X, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hidden0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenB0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concat, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hidden' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenB' + str(i))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.softplus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "output_sigma0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cond_45": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : output_mu",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : gaussian_sample(output_mu, output_sigma)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "output0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_83": {
                "variable": {
                    "value": "outputs_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "outputs_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(outputs_mu, axis=1, name='outputs_mu')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "outputs_mu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_84": {
                "variable": {
                    "value": "outputs_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "outputs_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(outputs_sigma, axis=1, name='outputs_sigma')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "outputs_sigma",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_85": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(outputs, axis=1, name='outputs')",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(outputs, axis=1, name='outputs')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "outputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_109": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "hidden0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_113": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=X, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenA0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenB0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concat, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenA' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenB' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=X, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hidden0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenB0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concat, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hidden' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenB' + str(i))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "hiddenB0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_117": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=X, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenA0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenB0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concat, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenA' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenB' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=X, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hidden0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenB0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concat, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hidden' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenB' + str(i))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "tap0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_142": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(outputs, axis=1, name='outputs')",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(outputs, axis=1, name='outputs')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "outputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_145": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(outputs - Y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_57": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.concat((X, hidden, tf.slice(Y, [0, i - 1], [-1, 1])), axis=1, name='concat' + str(i))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.concat((X, hidden, output), axis=1, name='concat' + str(i))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "dense_64": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(is_training, lambda : tf.concat((X, hidden, tf.slice(Y, [0, i - 1], [-1, 1])), axis=1, name='concat' + str(i)), lambda : tf.concat((X, hidden, output), axis=1, name='concat' + str(i)))",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.concat((X, hidden, tf.slice(Y, [0, i - 1], [-1, 1])), axis=1, name='concat' + str(i)), lambda : tf.concat((X, hidden, output), axis=1, name='concat' + str(i)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'hiddenA' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_68": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=X, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenA0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenB0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concat, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenA' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenB' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=X, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hidden0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenB0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concat, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hidden' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenB' + str(i))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'hiddenB' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_72": {
                "variable": {
                    "value": "output_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=X, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenA0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenB0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concat, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenA' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenB' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=X, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hidden0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenB0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concat, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hidden' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenB' + str(i))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "'output_mu' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_73": {
                "variable": {
                    "value": "output_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=X, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenA0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenB0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concat, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenA' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenB' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=X, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hidden0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenB0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concat, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hidden' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenB' + str(i))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.softplus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'output_sigma' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cond_74": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : output_mu",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : gaussian_sample(output_mu, output_sigma)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "'output' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cond_124": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.concat((X, hidden, tf.slice(Y, [0, i - 1], [-1, 1])), axis=1, name='concat' + str(i))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.concat((X, hidden, output), axis=1, name='concat' + str(i))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "dense_130": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(is_training, lambda : tf.concat((X, hidden, tf.slice(Y, [0, i - 1], [-1, 1])), axis=1, name='concat' + str(i)), lambda : tf.concat((X, hidden, output), axis=1, name='concat' + str(i)))",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.concat((X, hidden, tf.slice(Y, [0, i - 1], [-1, 1])), axis=1, name='concat' + str(i)), lambda : tf.concat((X, hidden, output), axis=1, name='concat' + str(i)))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'hidden' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_134": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=X, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenA0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenB0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concat, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenA' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenB' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=X, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hidden0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenB0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concat, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hidden' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenB' + str(i))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'hiddenB' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_138": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=X, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenA0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenB0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concat, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenA' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenB' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=X, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hidden0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenB0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concat, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hidden' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hidden, units=hidden_dim, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer(), bias_initializer=tf.zeros_initializer(), name='hiddenB' + str(i))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "'output' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_145": {
                "x": {
                    "value": "outputs - Y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_initializer_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_58": {
                "values": {
                    "value": "(X, hidden, tf.slice(Y, [0, i - 1], [-1, 1]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "'concat' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_59": {
                "values": {
                    "value": "(X, hidden, output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "'concat' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_initializer_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_125": {
                "values": {
                    "value": "(X, hidden, tf.slice(Y, [0, i - 1], [-1, 1]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "'concat' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_126": {
                "values": {
                    "value": "(X, hidden, output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "'concat' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_initializer_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "slice_58": {
                "input_": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, i - 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_125": {
                "input_": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, i - 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "TensorFlow/evaluate.py": {
        "tensorflow": {
            "Saver_28": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "TensorFlow/forecastNet.py": {
        "tensorflow": {
            "AdamOptimizer_59": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_73": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.in_seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "X",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_74": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.out_seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "Y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_76": {
                "variable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "is_training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_125": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "TensorFlow/gaussian.py": {
        "tensorflow": {
            "add_22": {
                "variable": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu",
                            "Method Argument"
                        ],
                        [
                            "mu",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.multiply(sigma, gauss_sample)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_34": {
                "variable": {
                    "value": "log_lik",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.log(sigma) + 0.5 * tf.div(tf.square(Y - mu), tf.square(sigma))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_22": {
                "x": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sigma",
                            "Method Argument"
                        ],
                        [
                            "sigma",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "gauss_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal(shape=tf.shape(mu), mean=0.0, stddev=1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_21": {
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu",
                            "Method Argument"
                        ],
                        [
                            "mu",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_34": {
                "x": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sigma",
                            "Method Argument"
                        ],
                        [
                            "sigma",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "div_34": {
                "x": {
                    "value": "tf.square(Y - mu)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.square(sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_34": {
                "x": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sigma",
                            "Method Argument"
                        ],
                        [
                            "sigma",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "TensorFlow/train.py": {
        "tensorflow": {
            "global_variables_initializer_33": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_36": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Pytorch/convForecastNet.py": {
        "torch": {
            "ModuleList_39": {
                "variable": {
                    "value": "self.conv_layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv1d(in_channels=1, out_channels=hidden_dim, kernel_size=5, padding=2) for i in range(out_seq_length)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_40": {
                "variable": {
                    "value": "self.conv_layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv1d(in_channels=hidden_dim, out_channels=hidden_dim, kernel_size=3, padding=1) for i in range(out_seq_length)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_44": {
                "variable": {
                    "value": "self.flatten_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "flatten_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[nn.Linear(hidden_dim * (input_dim * in_seq_length), hidden_dim)]",
                            "List"
                        ],
                        [
                            "[nn.Linear(hidden_dim * (input_dim * in_seq_length), hidden_dim)]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_45": {
                "variable": {
                    "value": "self.mu_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(hidden_dim, output_dim) for i in range(out_seq_length)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_46": {
                "variable": {
                    "value": "self.sigma_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(hidden_dim, output_dim) for i in range(out_seq_length)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.out_seq_length, input.shape[0], self.output_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_72": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.out_seq_length, input.shape[0], self.output_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_73": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.out_seq_length, input.shape[0], self.output_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_125": {
                "variable": {
                    "value": "self.conv_layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv1d(in_channels=1, out_channels=hidden_dim, kernel_size=5, padding=2) for i in range(out_seq_length)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_126": {
                "variable": {
                    "value": "self.conv_layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv1d(in_channels=hidden_dim, out_channels=hidden_dim, kernel_size=3, padding=1) for i in range(out_seq_length)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_130": {
                "variable": {
                    "value": "self.flatten_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "flatten_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[nn.Linear(hidden_dim * (input_dim * in_seq_length), hidden_dim)]",
                            "List"
                        ],
                        [
                            "[nn.Linear(hidden_dim * (input_dim * in_seq_length), hidden_dim)]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_131": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(hidden_dim, output_dim) for i in range(out_seq_length)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_153": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.out_seq_length, input.shape[0], self.output_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_79": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv_layer1[i](next_cell_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_81": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv_layer2[i](hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_84": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.flatten_layer[i](hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_88": {
                "variable": {
                    "value": "sigma_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sigma_layer[i](hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normal_91": {
                "variable": {
                    "value": "outputs[i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mean": {
                    "value": "mu_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mu_layer[i](hidden)",
                            "Call"
                        ]
                    ]
                },
                "std": {
                    "value": "sigma_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softplus(self.sigma_layer[i](hidden))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_159": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv_layer1[i](next_cell_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_161": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv_layer2[i](hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_164": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.flatten_layer[i](hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "hidden_dim * (input_dim * in_seq_length)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_95": {
                "variable": {
                    "value": "next_cell_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input, hidden, target[i, :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_95": {
                "variable": {
                    "value": "next_cell_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "next_cell_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input, hidden, outputs[i, :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_97": {
                "variable": {
                    "value": "next_cell_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_127": {
                "in_features": {
                    "value": "hidden_dim * (input_dim * in_seq_length)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_172": {
                "variable": {
                    "value": "next_cell_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input, hidden, target[i, :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_172": {
                "variable": {
                    "value": "next_cell_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_174": {
                "variable": {
                    "value": "next_cell_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input, hidden, outputs[i, :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_174": {
                "variable": {
                    "value": "next_cell_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_39": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_40": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "hidden_dim * (input_dim * in_seq_length + hidden_dim + output_dim)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_45": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_125": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_126": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_129": {
                "in_features": {
                    "value": "hidden_dim * (input_dim * in_seq_length + hidden_dim + output_dim)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_131": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "Pytorch/dataHelpers.py": {
        "torch": {
            "reshape_23": {
                "variable": {
                    "value": "input_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(input_reshaped, (batch_size, -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "Pytorch/denseForecastNet.py": {
        "torch": {
            "ModuleList_44": {
                "variable": {
                    "value": "self.hidden_layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "hidden_layer1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[nn.Linear(input_dim_comb, hidden_dim)]",
                            "List"
                        ],
                        [
                            "[nn.Linear(input_dim_comb, hidden_dim)]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_45": {
                "variable": {
                    "value": "self.hidden_layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(hidden_dim, hidden_dim) for i in range(out_seq_length)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_46": {
                "variable": {
                    "value": "self.mu_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(hidden_dim, output_dim) for i in range(out_seq_length)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_47": {
                "variable": {
                    "value": "self.sigma_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(hidden_dim, output_dim) for i in range(out_seq_length)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.out_seq_length, input.shape[0], self.output_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_61": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.out_seq_length, input.shape[0], self.output_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.out_seq_length, input.shape[0], self.output_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_111": {
                "variable": {
                    "value": "self.hidden_layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "hidden_layer1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[nn.Linear(input_dim_comb, hidden_dim)]",
                            "List"
                        ],
                        [
                            "[nn.Linear(input_dim_comb, hidden_dim)]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_112": {
                "variable": {
                    "value": "self.hidden_layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(hidden_dim, hidden_dim) for i in range(out_seq_length)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_113": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(hidden_dim, output_dim) for i in range(out_seq_length)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_124": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.out_seq_length, input.shape[0], self.output_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_67": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.hidden_layer1[i](next_cell_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_68": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.hidden_layer2[i](out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_71": {
                "variable": {
                    "value": "sigma_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sigma_layer[i](out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normal_74": {
                "variable": {
                    "value": "outputs[i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mean": {
                    "value": "mu_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mu_layer[i](out)",
                            "Call"
                        ]
                    ]
                },
                "std": {
                    "value": "sigma_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softplus(self.sigma_layer[i](out))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_129": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.hidden_layer1[i](next_cell_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_130": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.hidden_layer2[i](hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "input_dim_comb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim * in_seq_length",
                            "BinOp"
                        ],
                        [
                            "input_dim * in_seq_length",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_77": {
                "variable": {
                    "value": "next_cell_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input, out, target[i, :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "next_cell_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input, out, outputs[i, :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_108": {
                "in_features": {
                    "value": "input_dim_comb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim * in_seq_length",
                            "BinOp"
                        ],
                        [
                            "input_dim * in_seq_length",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_136": {
                "variable": {
                    "value": "next_cell_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input, hidden, target[i, :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "next_cell_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input, hidden, outputs[i, :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "input_dim_comb + hidden_dim + output_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_45": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_47": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_110": {
                "in_features": {
                    "value": "input_dim_comb + hidden_dim + output_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_112": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_113": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "Pytorch/evaluate.py": {
        "torch": {
            "load_29": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fcstnet.save_file",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "fcstnet.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_35": {
                "variable": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(test_x).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "format_input(test_x)",
                            "Call"
                        ],
                        [
                            "test_x.to(fcstnet.device)",
                            "Call"
                        ],
                        [
                            "test_x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_37": {
                "variable": {
                    "value": "test_y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(test_y).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "test_y.to(fcstnet.device)",
                            "Call"
                        ],
                        [
                            "test_y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_57": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(y_pred_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_57": {
                "tensors": {
                    "value": "y_pred_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "Pytorch/forecastNet.py": {
        "torch": {
            "device_53": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_75": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_94": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.save_file",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_106": {
                "variable": {
                    "value": "empty_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.out_seq_length, test_x.shape[1], self.output_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_101": {
                "variable": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(test_x).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "format_input(test_x)",
                            "Call"
                        ],
                        [
                            "test_x.to(self.device)",
                            "Call"
                        ],
                        [
                            "test_x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Pytorch/gaussian.py": {
        "torch": {
            "mean_26": {
                "variable": {
                    "value": "loglik",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n * torch.log(sigma) + 0.5 * ((z - mu) ** 2 / sigma ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_37": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(input - target) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_26": {
                "input": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sigma",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "Pytorch/train.py": {
        "torch": {
            "from_numpy_42": {
                "variable": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(train_x).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "format_input(train_x)",
                            "Call"
                        ],
                        [
                            "train_x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_44": {
                "variable": {
                    "value": "train_y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(train_y).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "train_y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_46": {
                "variable": {
                    "value": "validation_x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "validation_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(validation_x).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "format_input(validation_x)",
                            "Call"
                        ],
                        [
                            "validation_x.to(fcstnet.device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_48": {
                "variable": {
                    "value": "validation_y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "validation_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(validation_y).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "validation_y.to(fcstnet.device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_60": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fcstnet.save_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_174": {
                "obj": {
                    "value": "{'model_state_dict': fcstnet.model.state_dict(), 'optimizer_state_dict': fcstnet.optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "fcstnet.save_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mse_loss_114": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fcstnet.model(input, target, is_training=True)",
                            "Call"
                        ],
                        [
                            "fcstnet.model(input, target, is_training=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_y[:, sample:sample + fcstnet.batch_size, :]",
                            "Subscript"
                        ],
                        [
                            "target.to(fcstnet.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_152": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_valid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fcstnet.model(validation_x, validation_y, is_training=False)",
                            "Call"
                        ],
                        [
                            "fcstnet.model(validation_x, validation_y, is_training=False)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "validation_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(validation_y).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "validation_y.to(fcstnet.device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}