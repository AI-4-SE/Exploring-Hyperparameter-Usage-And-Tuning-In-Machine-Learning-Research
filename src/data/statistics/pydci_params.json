{
    "src/classification/svmlight.py": {
        "sklearn": {
            "dump_svmlight_file_55": {
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vstack((X, self.transduction))",
                            "Call"
                        ],
                        [
                            "np.vstack((X, self.transduction))",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "np.concatenate((y, np.zeros(self.transduction.shape[0])))",
                            "Call"
                        ],
                        [
                            "np.zeros(X.shape[0])",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "traindata_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "join(self.tmpdir.name, 'train.dat')",
                            "Call"
                        ]
                    ]
                },
                "zero_based": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dump_svmlight_file_85": {
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vstack((X, self.transduction))",
                            "Call"
                        ],
                        [
                            "np.vstack((X, self.transduction))",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "np.concatenate((y, np.zeros(self.transduction.shape[0])))",
                            "Call"
                        ],
                        [
                            "np.zeros(X.shape[0])",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "testdata_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "join(self.tmpdir.name, 'test' + random_code + '.dat')",
                            "Call"
                        ]
                    ]
                },
                "zero_based": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/cross_domain_cross_lingual_sentiment_baselines.py": {
        "sklearn": {
            "GridSearchCV_15": {
                "variable": {
                    "value": "svm",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "LinearSVC()",
                    "type": "Call",
                    "possible_values": []
                },
                "param_grid": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'C': [10 ** i for i in range(-5, 5)]}",
                            "Dict"
                        ]
                    ]
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "cv": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_val_score_17": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "svm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GridSearchCV(LinearSVC(), parameters, n_jobs=-1, verbose=1, cv=5)",
                            "Call"
                        ],
                        [
                            "GridSearchCV(LinearSVC(), parameters, n_jobs=-1, verbose=1, cv=5)",
                            "Call"
                        ]
                    ]
                },
                "X": {
                    "value": "target.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "target.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cv": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GridSearchCV_21": {
                "variable": {
                    "value": "svm",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "LinearSVC()",
                    "type": "Call",
                    "possible_values": []
                },
                "param_grid": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'C': [10 ** i for i in range(-5, 5)]}",
                            "Dict"
                        ]
                    ]
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "cv": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LinearSVC_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearSVC_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/cross_domain_sentiment_baselines.py": {
        "sklearn": {
            "GridSearchCV_16": {
                "variable": {
                    "value": "svm",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "LinearSVC()",
                    "type": "Call",
                    "possible_values": []
                },
                "param_grid": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'C': [10 ** i for i in range(-5, 5)]}",
                            "Dict"
                        ]
                    ]
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "cv": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_val_score_17": {
                "variable": {
                    "value": "upper[domain.domain]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "estimator": {
                    "value": "svm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GridSearchCV(LinearSVC(), parameters, n_jobs=-1, verbose=1, cv=5)",
                            "Call"
                        ],
                        [
                            "GridSearchCV(LinearSVC(), parameters, n_jobs=-1, verbose=1, cv=5)",
                            "Call"
                        ]
                    ]
                },
                "X": {
                    "value": "domain.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "domain.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cv": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GridSearchCV_20": {
                "variable": {
                    "value": "svm",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "LinearSVC()",
                    "type": "Call",
                    "possible_values": []
                },
                "param_grid": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'C': [10 ** i for i in range(-5, 5)]}",
                            "Dict"
                        ]
                    ]
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "cv": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LinearSVC_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearSVC_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/cross_domain_sentiment_baselines_transductive.py": {
        "sklearn": {
            "cross_val_score_17": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "isvm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SVMlight(svmlightbase=svmlight_home, verbose=0, transduction=None)",
                            "Call"
                        ],
                        [
                            "SVMlight(svmlightbase=svmlight_home, verbose=0, transduction=None).fit(source.X, source.y)",
                            "Call"
                        ]
                    ]
                },
                "X": {
                    "value": "domain.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "domain.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cv": {
                    "value": "nfolds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ]
                    ]
                }
            }
        }
    },
    "src/cross_domain_topic_baselines.py": {
        "sklearn": {
            "LinearSVC_17": {
                "variable": {
                    "value": "svm",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_val_score_23": {
                "variable": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "svm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LinearSVC()",
                            "Call"
                        ]
                    ]
                },
                "X": {
                    "value": "target.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "target.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cv": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/cross_domain_topic_baselines_transductive.py": {
        "sklearn": {
            "cross_val_score_30": {
                "variable": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "isvm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SVMlight(svmlightbase=svmlight_home, verbose=0, transduction=None).fit(source.X, source.y)",
                            "Call"
                        ]
                    ]
                },
                "X": {
                    "value": "target.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "target.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cv": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/cross_lingual_sentiment_baselines.py": {
        "sklearn": {
            "GridSearchCV_17": {
                "variable": {
                    "value": "svm",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "LinearSVC()",
                    "type": "Call",
                    "possible_values": []
                },
                "param_grid": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'C': [10 ** i for i in range(-5, 5)]}",
                            "Dict"
                        ]
                    ]
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "cv": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_val_score_19": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "svm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GridSearchCV(LinearSVC(), parameters, n_jobs=-1, verbose=1, cv=5)",
                            "Call"
                        ],
                        [
                            "GridSearchCV(LinearSVC(), parameters, n_jobs=-1, verbose=1, cv=5)",
                            "Call"
                        ]
                    ]
                },
                "X": {
                    "value": "target.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "target.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cv": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GridSearchCV_23": {
                "variable": {
                    "value": "svm",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "LinearSVC()",
                    "type": "Call",
                    "possible_values": []
                },
                "param_grid": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'C': [10 ** i for i in range(-5, 5)]}",
                            "Dict"
                        ]
                    ]
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "cv": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LinearSVC_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearSVC_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/cross_lingual_sentiment_baselines_transductive.py": {
        "sklearn": {
            "cross_val_score_16": {
                "variable": {
                    "value": "uacc",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "isvm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SVMlight(svmlightbase=svmlight_home, verbose=0)",
                            "Call"
                        ],
                        [
                            "SVMlight(svmlightbase=svmlight_home, verbose=0).fit(source.X, source.y)",
                            "Call"
                        ]
                    ]
                },
                "X": {
                    "value": "target.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "target.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cv": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/data/fetch.py": {
        "sklearn": {
            "fetch_20newsgroups_195": {
                "variable": {
                    "value": "news",
                    "type": "variable",
                    "possible_values": []
                },
                "data_home": {
                    "value": "dataset_home",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'../datasets/MDS'",
                            "Method Argument"
                        ],
                        [
                            "'../datasets/Webis-CLS-10'",
                            "Method Argument"
                        ],
                        [
                            "'../datasets/Reuters21578'",
                            "Method Argument"
                        ],
                        [
                            "'../datasets/20news'",
                            "Method Argument"
                        ],
                        [
                            "'../datasets/SRAA'",
                            "Method Argument"
                        ]
                    ]
                },
                "subset": {
                    "value": "all",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_files_227": {
                "variable": {
                    "value": "sraa",
                    "type": "variable",
                    "possible_values": []
                },
                "container_path": {
                    "value": "join(dataset_home, 'sraa')",
                    "type": "Call",
                    "possible_values": []
                },
                "encoding": {
                    "value": "latin1",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/data/tasks.py": {
        "sklearn": {
            "CountVectorizer_26": {
                "variable": {
                    "value": "counter",
                    "type": "variable",
                    "possible_values": []
                },
                "token_pattern": {
                    "value": "tokken_pattern",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'(?u)\\\\b\\\\w\\\\w+\\\\b'",
                            "Method Argument"
                        ]
                    ]
                },
                "min_df": {
                    "value": "min_df",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TfidfVectorizer_29": {
                "variable": {
                    "value": "vectorizer",
                    "type": "variable",
                    "possible_values": []
                },
                "sublinear_tf": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "token_pattern": {
                    "value": "tokken_pattern",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'(?u)\\\\b\\\\w\\\\w+\\\\b'",
                            "Method Argument"
                        ]
                    ]
                },
                "vocabulary": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "counter.fit(labeled_docs).vocabulary_",
                            "Attribute"
                        ]
                    ]
                }
            },
            "CountVectorizer_31": {
                "variable": {
                    "value": "vectorizer",
                    "type": "variable",
                    "possible_values": []
                },
                "token_pattern": {
                    "value": "tokken_pattern",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'(?u)\\\\b\\\\w\\\\w+\\\\b'",
                            "Method Argument"
                        ]
                    ]
                },
                "vocabulary": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "counter.fit(labeled_docs).vocabulary_",
                            "Attribute"
                        ]
                    ]
                }
            },
            "TfidfVectorizer_34": {
                "variable": {
                    "value": "vectorizer",
                    "type": "variable",
                    "possible_values": []
                },
                "sublinear_tf": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "token_pattern": {
                    "value": "tokken_pattern",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'(?u)\\\\b\\\\w\\\\w+\\\\b'",
                            "Method Argument"
                        ]
                    ]
                },
                "min_df": {
                    "value": "min_df",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CountVectorizer_36": {
                "variable": {
                    "value": "vectorizer",
                    "type": "variable",
                    "possible_values": []
                },
                "token_pattern": {
                    "value": "tokken_pattern",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'(?u)\\\\b\\\\w\\\\w+\\\\b'",
                            "Method Argument"
                        ]
                    ]
                },
                "min_df": {
                    "value": "min_df",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "StratifiedKFold_172": {
                "variable": {
                    "value": "skf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "nfolds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "47",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CountVectorizer_87": {
                "token_pattern": {
                    "value": "patt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'(?u)\\\\b\\\\w+\\\\b'",
                            "str"
                        ],
                        [
                            "'(?u)\\\\b\\\\w+\\\\b'",
                            "str"
                        ]
                    ]
                }
            },
            "CountVectorizer_134": {
                "token_pattern": {
                    "value": "patt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'(?u)\\\\b\\\\w+\\\\b'",
                            "str"
                        ],
                        [
                            "'(?u)\\\\b\\\\w+\\\\b'",
                            "str"
                        ]
                    ]
                }
            }
        }
    },
    "src/data/tasks_topics.py": {
        "sklearn": {
            "TfidfVectorizer_43": {
                "variable": {
                    "value": "vectorizer",
                    "type": "variable",
                    "possible_values": []
                },
                "sublinear_tf": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "min_df": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strip_accents": {
                    "value": "unicode",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CountVectorizer_45": {
                "variable": {
                    "value": "vectorizer",
                    "type": "variable",
                    "possible_values": []
                },
                "min_df": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strip_accents": {
                    "value": "unicode",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TfidfTransformer_19": {
                "variable": {
                    "value": "tfidf",
                    "type": "variable",
                    "possible_values": []
                },
                "sublinear_tf": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/experiments/common.py": {
        "sklearn": {
            "LinearSVC_35": {
                "variable": {
                    "value": "svm",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GridSearchCV_38": {
                "variable": {
                    "value": "svm",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "svm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LinearSVC()",
                            "Call"
                        ],
                        [
                            "GridSearchCV(svm, parameters, n_jobs=-1, verbose=1, cv=5)",
                            "Call"
                        ],
                        [
                            "svm.best_estimator_",
                            "Attribute"
                        ],
                        [
                            "SVMlight(svmlightbase=svmlight_home, verbose=0, transduction=T)",
                            "Call"
                        ],
                        [
                            "GridSearchCV(svm, parameters, n_jobs=-1, verbose=1, cv=5)",
                            "Call"
                        ],
                        [
                            "svm.best_estimator_",
                            "Attribute"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'C': [10 ** i for i in range(-5, 5)]}",
                            "Dict"
                        ],
                        [
                            "{'C': [10 ** i for i in range(-5, 5)]}",
                            "Dict"
                        ]
                    ]
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "cv": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GridSearchCV_77": {
                "variable": {
                    "value": "svm",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "svm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LinearSVC()",
                            "Call"
                        ],
                        [
                            "GridSearchCV(svm, parameters, n_jobs=-1, verbose=1, cv=5)",
                            "Call"
                        ],
                        [
                            "svm.best_estimator_",
                            "Attribute"
                        ],
                        [
                            "SVMlight(svmlightbase=svmlight_home, verbose=0, transduction=T)",
                            "Call"
                        ],
                        [
                            "GridSearchCV(svm, parameters, n_jobs=-1, verbose=1, cv=5)",
                            "Call"
                        ],
                        [
                            "svm.best_estimator_",
                            "Attribute"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'C': [10 ** i for i in range(-5, 5)]}",
                            "Dict"
                        ],
                        [
                            "{'C': [10 ** i for i in range(-5, 5)]}",
                            "Dict"
                        ]
                    ]
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "cv": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/dci.py": {
        "sklearn": {
            "normalize_148": {
                "variable": {
                    "value": "_X",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "_X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.dot(FP)",
                            "Call"
                        ],
                        [
                            "normalize(_X, norm='l2', axis=1)",
                            "Call"
                        ],
                        [
                            "zscores(_X)",
                            "Call"
                        ]
                    ]
                },
                "norm": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_141": {
                "X": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dcf(F, P)",
                            "Call"
                        ],
                        [
                            "zscores(dists)",
                            "Call"
                        ]
                    ]
                },
                "norm": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "copy": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "normalize_157": {
                "X": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "csr_matrix(F)",
                            "Call"
                        ],
                        [
                            "1 * (F > 0)",
                            "BinOp"
                        ],
                        [
                            "1 * (F > 0)",
                            "BinOp"
                        ],
                        [
                            "F",
                            "Method Argument"
                        ],
                        [
                            "F",
                            "Method Argument"
                        ],
                        [
                            "F",
                            "Method Argument"
                        ],
                        [
                            "F",
                            "Method Argument"
                        ]
                    ]
                },
                "norm": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "copy": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "normalize_158": {
                "X": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "csr_matrix(P)",
                            "Call"
                        ],
                        [
                            "1 * (P > 0)",
                            "BinOp"
                        ],
                        [
                            "1 * (P > 0)",
                            "BinOp"
                        ],
                        [
                            "P",
                            "Method Argument"
                        ],
                        [
                            "P",
                            "Method Argument"
                        ],
                        [
                            "P",
                            "Method Argument"
                        ],
                        [
                            "P",
                            "Method Argument"
                        ]
                    ]
                },
                "norm": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "copy": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}