{
    "deepxde/data/dataset.py": {
        "sklearn": {
            "StandardScaler_59": {
                "variable": {
                    "value": "scaler",
                    "type": "Name",
                    "possible_values": []
                },
                "with_mean": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "with_std": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "deepxde/data/mf.py": {
        "sklearn": {
            "StandardScaler_137": {
                "variable": {
                    "value": "self.scaler_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "with_mean": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "with_std": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "cond_116": {
                "variable": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(model.net.data_id, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : len(self.X_lo_train)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : 0",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "equal_117": {
                "x": {
                    "value": "model.net.data_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "deepxde/data/op_dataset.py": {
        "sklearn": {
            "StandardScaler_59": {
                "variable": {
                    "value": "scaler",
                    "type": "Name",
                    "possible_values": []
                },
                "with_mean": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "with_std": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "deepxde/geometry/geometry_nd.py": {
        "sklearn": {
            "normalize_119": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.normal(size=(n, self.dim))",
                            "Call"
                        ],
                        [
                            "preprocessing.normalize(X)",
                            "Call"
                        ],
                        [
                            "U ** (1 / self.dim) * X",
                            "BinOp"
                        ],
                        [
                            "stats.norm.ppf(X)",
                            "Call"
                        ],
                        [
                            "np.random.normal(size=(n, self.dim))",
                            "Call"
                        ],
                        [
                            "preprocessing.normalize(X)",
                            "Call"
                        ],
                        [
                            "stats.norm.ppf(U)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_131": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.normal(size=(n, self.dim))",
                            "Call"
                        ],
                        [
                            "preprocessing.normalize(X)",
                            "Call"
                        ],
                        [
                            "U ** (1 / self.dim) * X",
                            "BinOp"
                        ],
                        [
                            "stats.norm.ppf(X)",
                            "Call"
                        ],
                        [
                            "np.random.normal(size=(n, self.dim))",
                            "Call"
                        ],
                        [
                            "preprocessing.normalize(X)",
                            "Call"
                        ],
                        [
                            "stats.norm.ppf(U)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Heat_eq_3D.py": {
        "tensorflow": {
            "gradients_19": {
                "ys": {
                    "value": "u",
                    "type": "Name",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.linspace(0, 1, 10)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_21": {
                "ys": {
                    "value": "du_x",
                    "type": "Name",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.linspace(0, 1, 10)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_22": {
                "ys": {
                    "value": "du_y",
                    "type": "Name",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.linspace(0, 1, 10)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_23": {
                "ys": {
                    "value": "du_z",
                    "type": "Name",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.linspace(0, 1, 10)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "deepxde/array_ops.py": {
        "tensorflow": {
            "convert_to_tensor_28": {
                "value": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(value)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "config.real(tf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_39": {
                "variable": {
                    "value": "tup[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "config.real(tf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_42": {
                "values": {
                    "value": "tup",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(tup)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "deepxde/boundary_conditions.py": {
        "tensorflow": {
            "reshape_102": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs[:, self.component:self.component + 1]",
                            "Subscript"
                        ],
                        [
                            "outputs[beg:end, self.component:self.component + 1]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(outputs, [-1, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_33": {
                "input_tensor": {
                    "value": "dydx * n",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gradients_31": {
                "ys": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs[:, self.component:self.component + 1]",
                            "Subscript"
                        ],
                        [
                            "outputs[beg:end, self.component:self.component + 1]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(outputs, [-1, 2])",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "deepxde/callbacks.py": {
        "tensorflow": {
            "gradients_288": {
                "ys": {
                    "value": "y[:, component_y:component_y + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "deepxde/data/func_constraint.py": {
        "tensorflow": {
            "cond_38": {
                "variable": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(model.net.data_id, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : self.constraint(model.net.x, outputs, self.train_x)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self.constraint(model.net.x, outputs, self.test_x)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "equal_39": {
                "x": {
                    "value": "model.net.data_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_43": {
                "shape": {
                    "value": "tf.shape(f)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_43": {
                "input": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond(tf.equal(model.net.data_id, 0), lambda : self.constraint(model.net.x, outputs, self.train_x), lambda : self.constraint(model.net.x, outputs, self.test_x))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "deepxde/data/ide.py": {
        "tensorflow": {
            "cond_82": {
                "pred": {
                    "value": "tf.equal(model.net.data_id, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "losses_train",
                    "type": "Name",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "losses_test",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "equal_82": {
                "x": {
                    "value": "model.net.data_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_65": {
                "shape": {
                    "value": "tf.shape(fi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_79": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "config.real(tf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_65": {
                "input": {
                    "value": "fi",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_70": {
                "shape": {
                    "value": "tf.shape(error)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "shape": {
                    "value": "tf.shape(fi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_70": {
                "input": {
                    "value": "error",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bc.error(self.train_x, model.net.x, outputs, beg, end)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_78": {
                "input": {
                    "value": "fi",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "deepxde/data/pde.py": {
        "tensorflow": {
            "cond_70": {
                "pred": {
                    "value": "tf.equal(model.net.data_id, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "losses_train",
                    "type": "Name",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "losses_test",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "equal_70": {
                "x": {
                    "value": "model.net.data_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "shape": {
                    "value": "tf.shape(error)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_67": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "config.real(tf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_58": {
                "input": {
                    "value": "error",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bc.error(self.train_x, model.net.x, outputs, beg, end)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_62": {
                "shape": {
                    "value": "tf.shape(error)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "shape": {
                    "value": "tf.shape(fi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_62": {
                "input": {
                    "value": "error",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bc.error(self.train_x, model.net.x, outputs, beg, end)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_66": {
                "input": {
                    "value": "fi",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "deepxde/fractional.py": {
        "tensorflow": {
            "zeros_215": {
                "variable": {
                    "value": "int_mat",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, self.disc.resolution[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "config.real(tf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_251": {
                "variable": {
                    "value": "int_mat",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[int_mat, tf.zeros([1, self.disc.resolution[0]], dtype=config.real(tf))]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_249": {
                "variable": {
                    "value": "row",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "row",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.zeros(1, dtype=config.real(tf)), tf.reverse(self.get_weight(i), [0]), tf.zeros(self.disc.resolution[0] - i - 2, dtype=config.real(tf))], 0)",
                            "Call"
                        ],
                        [
                            "row + tf.concat([tf.zeros(i), self.get_weight(self.disc.resolution[0] - 1 - i)], 0)",
                            "BinOp"
                        ],
                        [
                            "tf.concat([tf.reverse(self.get_weight(i), [0]), tf.zeros(self.disc.resolution[0] - i - 1)], 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(row, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_250": {
                "variable": {
                    "value": "int_mat",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[int_mat, row]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_219": {
                "variable": {
                    "value": "row",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros(1, dtype=config.real(tf)), tf.reverse(self.get_weight(i), [0]), tf.zeros(self.disc.resolution[0] - i - 2, dtype=config.real(tf))]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_239": {
                "variable": {
                    "value": "row",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reverse(self.get_weight(i), [0]), tf.zeros(self.disc.resolution[0] - i - 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_229": {
                "values": {
                    "value": "[tf.zeros(i - 1, dtype=config.real(tf)), self.get_weight(self.disc.resolution[0] - 1 - i), tf.zeros(1, dtype=config.real(tf))]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_246": {
                "values": {
                    "value": "[tf.zeros(i), self.get_weight(self.disc.resolution[0] - 1 - i)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_252": {
                "shape": {
                    "value": "[1, self.disc.resolution[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "config.real(tf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_221": {
                "shape": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "config.real(tf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reverse_222": {
                "tensor": {
                    "value": "self.get_weight(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_223": {
                "shape": {
                    "value": "self.disc.resolution[0] - i - 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "config.real(tf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_231": {
                "shape": {
                    "value": "i - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "config.real(tf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_233": {
                "shape": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "config.real(tf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reverse_241": {
                "tensor": {
                    "value": "self.get_weight(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_242": {
                "shape": {
                    "value": "self.disc.resolution[0] - i - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_247": {
                "shape": {
                    "value": "i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "range(self.disc.resolution[0])",
                            "Call"
                        ],
                        [
                            "range(1, self.disc.resolution[0] - 1)",
                            "Call"
                        ],
                        [
                            "range(1, self.disc.resolution[0] - 1)",
                            "Call"
                        ],
                        [
                            "range(self.x0.shape[0])",
                            "Call"
                        ],
                        [
                            "range(self.x0.shape[0])",
                            "Call"
                        ],
                        [
                            "range(1, self.nt)",
                            "Call"
                        ],
                        [
                            "range(1, self.nt)",
                            "Call"
                        ],
                        [
                            "range(len(self.x0))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "deepxde/losses.py": {
        "tensorflow": {
            "mean_squared_error_9": {
                "y_true": {
                    "value": "y_true",
                    "type": "Name",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_17": {
                "onehot_labels": {
                    "value": "y_true",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reduce_mean_13": {
                "input_tensor": {
                    "value": "tf.abs(y_true - y_pred) / y_true",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_13": {
                "x": {
                    "value": "y_true - y_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "deepxde/maps/activations.py": {
        "tensorflow": {}
    },
    "deepxde/maps/fnn.py": {
        "tensorflow": {
            "placeholder_54": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "config.real(tf)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.layer_size[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_70": {
                "variable": {
                    "value": "self.y_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "config.real(tf)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.layer_size[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_89": {
                "variable": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([fan_in, units], stddev=math.sqrt(2 / fan_in))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_90": {
                "variable": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones(units)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_92": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "b": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([fan_in, units], stddev=math.sqrt(2 / fan_in)))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(W, axis=0) * g",
                            "BinOp"
                        ]
                    ]
                }
            },
            "batch_normalization_103": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "self.dense(y, self.layer_size[i + 1], activation=self.activation)",
                            "Call"
                        ],
                        [
                            "self.dense_batchnorm_v1(y, self.layer_size[i + 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(y, rate=self.dropout_rate, training=self.dropout)",
                            "Call"
                        ],
                        [
                            "self.dense_batchnorm_v2(y, self.layer_size[i + 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, W)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "self.dense(inputs, units, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(y, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.dense(inputs, units, activation=self.activation)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_76": {
                "inputs": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "units": {
                    "value": "units",
                    "type": "Name",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "self.kernel_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "self.regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_94": {
                "variable": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(units)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_109": {
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "self.dense(y, self.layer_size[i + 1], activation=self.activation)",
                            "Call"
                        ],
                        [
                            "self.dense_batchnorm_v1(y, self.layer_size[i + 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(y, rate=self.dropout_rate, training=self.dropout)",
                            "Call"
                        ],
                        [
                            "self.dense_batchnorm_v2(y, self.layer_size[i + 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, W)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "self.dense(inputs, units, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(y, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.dense(inputs, units, activation=self.activation)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_67": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "self.dense(y, self.layer_size[i + 1], activation=self.activation)",
                            "Call"
                        ],
                        [
                            "self.dense_batchnorm_v1(y, self.layer_size[i + 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(y, rate=self.dropout_rate, training=self.dropout)",
                            "Call"
                        ],
                        [
                            "self.dense_batchnorm_v2(y, self.layer_size[i + 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, W)",
                            "Call"
                        ],
                        [
                            "y + b",
                            "BinOp"
                        ],
                        [
                            "self.dense(inputs, units, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(y, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.dense(inputs, units, activation=self.activation)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_90": {
                "shape": {
                    "value": "units",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "l2_normalize_91": {
                "x": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([fan_in, units], stddev=math.sqrt(2 / fan_in)))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(W, axis=0) * g",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_94": {
                "shape": {
                    "value": "units",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "deepxde/maps/initializers.py": {
        "tensorflow": {
            "zeros_initializer_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_dtype_65": {
                "type_value": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.dtype",
                            "Attribute"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "truncated_normal_81": {
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math.sqrt(scale) / 0.8796256610342398",
                            "BinOp"
                        ],
                        [
                            "math.sqrt(scale)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.dtype",
                            "Attribute"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "deepxde/maps/map.py": {
        "tensorflow": {
            "placeholder_17": {
                "variable": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_18": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_19": {
                "variable": {
                    "value": "self.data_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "deepxde/maps/mfnn.py": {
        "tensorflow": {
            "placeholder_52": {
                "variable": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "config.real(tf)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.layer_size_lo[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_66": {
                "variable": {
                    "value": "X_hi",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.X, self.y_lo]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_93": {
                "variable": {
                    "value": "self.target_lo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "config.real(tf)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.layer_size_lo[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_94": {
                "variable": {
                    "value": "self.target_hi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "config.real(tf)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.layer_size_hi[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_83": {
                "variable": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "config.real(tf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_87": {
                "variable": {
                    "value": "alpha1",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "config.real(tf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_89": {
                "variable": {
                    "value": "alpha2",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "config.real(tf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_97": {
                "inputs": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "units": {
                    "value": "units",
                    "type": "Name",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "self.kernel_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "deepxde/maps/opnn.py": {
        "tensorflow": {
            "placeholder_62": {
                "variable": {
                    "value": "self.X_func",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "config.real(tf)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.layer_size_func[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_63": {
                "variable": {
                    "value": "self.X_loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "config.real(tf)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.layer_size_loc[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_99": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "equation": {
                    "value": "bi,bi->b",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "y_func",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.X_func",
                            "Attribute"
                        ],
                        [
                            "self.dense(y_func, self.layer_size_func[i], activation=self.activation, regularizer=self.regularizer)",
                            "Call"
                        ],
                        [
                            "self.dense(y_func, self.layer_size_func[-1], use_bias=self.use_bias)",
                            "Call"
                        ],
                        [
                            "self.stacked_dense(y_func, self.layer_size_func[i], stack_size, self.activation)",
                            "Call"
                        ],
                        [
                            "self.stacked_dense(y_func, 1, stack_size, use_bias=self.use_bias)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "y_loc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.X_loc",
                            "Attribute"
                        ],
                        [
                            "self.dense(y_loc, self.layer_size_loc[i], activation=self.activation, regularizer=self.regularizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_100": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_106": {
                "variable": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "config.real(tf)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_103": {
                "variable": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_109": {
                "inputs": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "units": {
                    "value": "units",
                    "type": "Name",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "self.kernel_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Variable_136": {
                "variable": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.kernel_initializer_stacked([stack_size, input_dim, units])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_139": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "bi,nij->bnj",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(self.kernel_initializer_stacked([stack_size, input_dim, units]))",
                            "Call"
                        ],
                        [
                            "tf.Variable(self.kernel_initializer_stacked([stack_size, input_dim]))",
                            "Call"
                        ],
                        [
                            "tf.Variable(self.kernel_initializer_stacked([stack_size, input_dim, units]))",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_142": {
                "variable": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.kernel_initializer_stacked([stack_size, input_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_143": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "bni,ni->bn",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(self.kernel_initializer_stacked([stack_size, input_dim, units]))",
                            "Call"
                        ],
                        [
                            "tf.Variable(self.kernel_initializer_stacked([stack_size, input_dim]))",
                            "Call"
                        ],
                        [
                            "tf.Variable(self.kernel_initializer_stacked([stack_size, input_dim, units]))",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_145": {
                "variable": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.kernel_initializer_stacked([stack_size, input_dim, units])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_148": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "bni,nij->bnj",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(self.kernel_initializer_stacked([stack_size, input_dim, units]))",
                            "Call"
                        ],
                        [
                            "tf.Variable(self.kernel_initializer_stacked([stack_size, input_dim]))",
                            "Call"
                        ],
                        [
                            "tf.Variable(self.kernel_initializer_stacked([stack_size, input_dim, units]))",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_152": {
                "variable": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(stack_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_154": {
                "variable": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([stack_size, units])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "shape": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_152": {
                "shape": {
                    "value": "stack_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.layer_size_func[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_154": {
                "shape": {
                    "value": "[stack_size, units]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "deepxde/maps/regularizers.py": {
        "tensorflow": {}
    },
    "deepxde/maps/resnet.py": {
        "tensorflow": {
            "placeholder_54": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "config.real(tf)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.input_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_61": {
                "variable": {
                    "value": "self.y_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "config.real(tf)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.output_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_64": {
                "inputs": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "units": {
                    "value": "units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "activation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "self.kernel_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "self.regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "deepxde/model.py": {
        "tensorflow": {
            "convert_to_tensor_79": {
                "variable": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_83": {
                "variable": {
                    "value": "self.totalloss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_189": {
                "variable": {
                    "value": "tfconfig",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_191": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "tfconfig",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_192": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_regularization_loss_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_319": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "deepxde/real.py": {
        "tensorflow": {}
    },
    "deepxde/train.py": {
        "tensorflow": {
            "get_collection_37": {
                "variable": {
                    "value": "update_ops",
                    "type": "Name",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_46": {
                "variable": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "control_dependencies_38": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_60": {
                "learning_rate": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MomentumOptimizer_61": {
                "learning_rate": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_nesterov": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_62": {
                "learning_rate": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdadeltaOptimizer_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_64": {
                "learning_rate": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AdamOptimizer_65": {
                "learning_rate": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "inverse_time_decay_49": {
                "learning_rate": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "decay[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "decay[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cosine_decay_52": {
                "learning_rate": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "decay[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "alpha": {
                    "value": "decay[2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "deepxde/utils.py": {
        "tensorflow": {
            "variables_initializer_97": {
                "var_list": {
                    "value": "uninitialized_variables",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[name_to_var[name.decode('utf-8')] for name in session.run(tf.report_uninitialized_variables(var_list))]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "global_variables_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "report_uninitialized_variables_95": {
                "var_list": {
                    "value": "var_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "examples/Burgers.py": {
        "tensorflow": {
            "gradients_22": {
                "ys": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "exact.flatten()[:, None]",
                            "Subscript"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "gradients_24": {
                "ys": {
                    "value": "dy_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gradients(y, x)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "examples/Burgers_RAR.py": {
        "tensorflow": {
            "gradients_22": {
                "ys": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "exact.flatten()[:, None]",
                            "Subscript"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "gradients_24": {
                "ys": {
                    "value": "dy_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gradients(y, x)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "examples/Euler_beam.py": {
        "tensorflow": {
            "gradients_13": {
                "ys": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "gradients_14": {
                "ys": {
                    "value": "dy_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gradients(y, x)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "gradients_17": {
                "ys": {
                    "value": "ddy(x, y)",
                    "type": "Call",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "gradients_20": {
                "ys": {
                    "value": "dddy(x, y)",
                    "type": "Call",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "examples/Lorenz_inverse.py": {
        "tensorflow": {
            "Variable_17": {
                "variable": {
                    "value": "C1",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_18": {
                "variable": {
                    "value": "C2",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_19": {
                "variable": {
                    "value": "C3",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gradients_28": {
                "ys": {
                    "value": "y1",
                    "type": "Name",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "gradients_29": {
                "ys": {
                    "value": "y2",
                    "type": "Name",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "gradients_30": {
                "ys": {
                    "value": "y3",
                    "type": "Name",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "examples/Poisson_Dirichlet_1d.py": {
        "tensorflow": {
            "gradients_14": {
                "ys": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.predict(x, operator=pde)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "geom.uniform_points(1000, True)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_15": {
                "ys": {
                    "value": "dy_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gradients(y, x)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "geom.uniform_points(1000, True)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_16": {
                "x": {
                    "value": "np.pi * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "examples/Poisson_Lshape.py": {
        "tensorflow": {
            "gradients_13": {
                "ys": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "gradients_15": {
                "ys": {
                    "value": "dy_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gradients(y, x)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "gradients_16": {
                "ys": {
                    "value": "dy_y",
                    "type": "Name",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "examples/Poisson_Neumann_1d.py": {
        "tensorflow": {
            "gradients_13": {
                "ys": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "gradients_14": {
                "ys": {
                    "value": "dy_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gradients(y, x)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "examples/Poisson_Robin_1d.py": {
        "tensorflow": {
            "gradients_13": {
                "ys": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "gradients_14": {
                "ys": {
                    "value": "dy_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gradients(y, x)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "examples/Poisson_periodic_1d.py": {
        "tensorflow": {
            "gradients_13": {
                "ys": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "gradients_14": {
                "ys": {
                    "value": "dy_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gradients(y, x)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "sin_15": {
                "x": {
                    "value": "np.pi * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "examples/Volterra_IDE.py": {
        "tensorflow": {
            "matmul_14": {
                "variable": {
                    "value": "rhs",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "int_mat",
                    "type": "Name",
                    "possible_values": []
                },
                "b": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "gradients_15": {
                "ys": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "size_16": {
                "input": {
                    "value": "rhs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(int_mat, y)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/diffusion_1d.py": {
        "tensorflow": {
            "gradients_13": {
                "ys": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "gradients_15": {
                "ys": {
                    "value": "dy_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gradients(y, x)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "exp_19": {
                "x": {
                    "value": "-x[:, 1:]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sin_20": {
                "x": {
                    "value": "np.pi * x[:, 0:1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "examples/diffusion_1d_exactBC.py": {
        "tensorflow": {
            "gradients_13": {
                "ys": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "gradients_15": {
                "ys": {
                    "value": "dy_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gradients(y, x)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "exp_19": {
                "x": {
                    "value": "-x[:, 1:]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sin_41": {
                "x": {
                    "value": "np.pi * x[:, 0:1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_20": {
                "x": {
                    "value": "np.pi * x[:, 0:1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "examples/diffusion_1d_inverse.py": {
        "tensorflow": {
            "Variable_12": {
                "variable": {
                    "value": "C",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gradients_15": {
                "ys": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "gradients_17": {
                "ys": {
                    "value": "dy_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gradients(y, x)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "exp_21": {
                "x": {
                    "value": "-x[:, 1:]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sin_22": {
                "x": {
                    "value": "np.pi * x[:, 0:1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "examples/ide.py": {
        "tensorflow": {
            "matmul_16": {
                "variable": {
                    "value": "lhs1",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "int_mat",
                    "type": "Name",
                    "possible_values": []
                },
                "b": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "gradients_17": {
                "ys": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cos_18": {
                "x": {
                    "value": "2 * np.pi * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_18": {
                "x": {
                    "value": "np.pi * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "size_19": {
                "input": {
                    "value": "lhs1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(int_mat, y)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/ode_system.py": {
        "tensorflow": {
            "gradients_18": {
                "ys": {
                    "value": "y1",
                    "type": "Name",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "gradients_19": {
                "ys": {
                    "value": "y2",
                    "type": "Name",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "examples/reaction_inverse.py": {
        "tensorflow": {
            "Variable_23": {
                "variable": {
                    "value": "kf",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_24": {
                "variable": {
                    "value": "D",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gradients_28": {
                "ys": {
                    "value": "ca",
                    "type": "Name",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "gradients_31": {
                "ys": {
                    "value": "cb",
                    "type": "Name",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "gradients_30": {
                "ys": {
                    "value": "dca_x",
                    "type": "Name",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "gradients_33": {
                "ys": {
                    "value": "dcb_x",
                    "type": "Name",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    }
}