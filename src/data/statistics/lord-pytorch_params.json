{
    "model/modules.py": {
        "torch": {
            "Embedding_15": {
                "variable": {
                    "value": "self.class_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config['n_classes']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config['class_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Embedding_73": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_96": {
                "variable": {
                    "value": "self.adain_per_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(in_features=code_dim, out_features=adain_dim * 2) for _ in range(n_adain_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "adain_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f(x) for f in self.adain_per_layer]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "self.fc_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features=content_dim, out_features=self.__initial_height * self.__initial_width * (adain_dim // 8))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_140": {
                "variable": {
                    "value": "self.adain_conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_149": {
                "variable": {
                    "value": "self.adain_conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.adain_conv_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_151": {
                "variable": {
                    "value": "self.last_conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=adain_dim, out_channels=64, padding=2, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_181": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=img_shape[-1], out_channels=64, kernel_size=7, stride=1, padding=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_198": {
                "variable": {
                    "value": "self.fc_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features=4096, out_features=256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_norm_233": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.contiguous().view(1, b * c, *x.shape[2:])",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "running_var": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.contiguous().view(-1)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bias.contiguous().view(-1)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_274": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "I1 - I2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_274": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_80": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(x)",
                            "Call"
                        ],
                        [
                            "x + noise",
                            "BinOp"
                        ],
                        [
                            "self.fc_layers(content_code)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, self.__adain_dim, self.__initial_height, self.__initial_width)",
                            "Call"
                        ],
                        [
                            "self.adain_conv_layers(x)",
                            "Call"
                        ],
                        [
                            "self.last_conv_layers(x)",
                            "Call"
                        ],
                        [
                            "self.conv_layers(x)",
                            "Call"
                        ],
                        [
                            "x.view((batch_size, -1))",
                            "Call"
                        ],
                        [
                            "self.fc_layers(x)",
                            "Call"
                        ],
                        [
                            "self.vggnet.features[i](x)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_277": {
                "variable": {
                    "value": "layer_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f1[i] - f2[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_277": {
                "variable": {
                    "value": "layer_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_118": {
                "in_features": {
                    "value": "content_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.__initial_height * self.__initial_width * (adain_dim // 8)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_125": {
                "in_features": {
                    "value": "self.__initial_height * self.__initial_width * (adain_dim // 8)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.__initial_height * self.__initial_width * (adain_dim // 4)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_132": {
                "in_features": {
                    "value": "self.__initial_height * self.__initial_width * (adain_dim // 4)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.__initial_height * self.__initial_width * adain_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_152": {
                "in_channels": {
                    "value": "adain_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_155": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "img_shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_182": {
                "in_channels": {
                    "value": "img_shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_185": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_188": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_191": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_194": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_199": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_202": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_205": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "code_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_97": {
                "in_features": {
                    "value": "code_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "adain_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Upsample_143": {
                "scale_factor": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_144": {
                "in_channels": {
                    "value": "adain_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "adain_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/training.py": {
        "torch": {
            "device_25": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_61": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NamedTensorDataset(data)",
                            "Call"
                        ],
                        [
                            "NamedTensorDataset(data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.config['train']['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_72": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': itertools.chain(self.latent_model.modulation.parameters(), self.latent_model.generator.parameters()), 'lr': self.config['train']['learning_rate']['generator']}, {'params': itertools.chain(self.latent_model.content_embedding.parameters(), self.latent_model.class_embedding.parameters()), 'lr': self.config['train']['learning_rate']['latent']}]",
                    "type": "List",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_83": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Adam([{'params': itertools.chain(self.latent_model.modulation.parameters(), self.latent_model.generator.parameters()), 'lr': self.config['train']['learning_rate']['generator']}, {'params': itertools.chain(self.latent_model.content_embedding.parameters(), self.latent_model.class_embedding.parameters()), 'lr': self.config['train']['learning_rate']['latent']}], betas=(0.5, 0.999))",
                            "Call"
                        ],
                        [
                            "Adam(params=self.amortized_model.parameters(), lr=self.config['train_encoders']['learning_rate']['max'], betas=(0.5, 0.999))",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "self.config['train']['n_epochs'] * len(data_loader)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "self.config['train']['learning_rate']['min']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SummaryWriter_89": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "tensorboard_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_139": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NamedTensorDataset(data)",
                            "Call"
                        ],
                        [
                            "NamedTensorDataset(data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.config['train']['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_149": {
                "variable": {
                    "value": "embedding_criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_151": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.amortized_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config['train_encoders']['learning_rate']['max']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_157": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Adam([{'params': itertools.chain(self.latent_model.modulation.parameters(), self.latent_model.generator.parameters()), 'lr': self.config['train']['learning_rate']['generator']}, {'params': itertools.chain(self.latent_model.content_embedding.parameters(), self.latent_model.class_embedding.parameters()), 'lr': self.config['train']['learning_rate']['latent']}], betas=(0.5, 0.999))",
                            "Call"
                        ],
                        [
                            "Adam(params=self.amortized_model.parameters(), lr=self.config['train_encoders']['learning_rate']['max'], betas=(0.5, 0.999))",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "self.config['train_encoders']['n_epochs'] * len(data_loader)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "self.config['train_encoders']['learning_rate']['min']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SummaryWriter_163": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "tensorboard_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_221": {
                "variable": {
                    "value": "img_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "random.choice(len(dataset), size=n_samples, replace=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_226": {
                "variable": {
                    "value": "blank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "samples['img'][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_247": {
                "variable": {
                    "value": "img_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "random.choice(len(dataset), size=n_samples, replace=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_252": {
                "variable": {
                    "value": "blank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "samples['img'][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_237": {
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.cat([blank] + list(samples['img']), dim=2)]",
                            "List"
                        ],
                        [
                            "[torch.cat([blank] + list(samples['img']), dim=2)]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_263": {
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.cat([blank] + list(samples['img']), dim=2)]",
                            "List"
                        ],
                        [
                            "[torch.cat([blank] + list(samples['img']), dim=2)]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_46": {
                "obj": {
                    "value": "self.latent_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_dir, 'latent.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_49": {
                "obj": {
                    "value": "self.amortized_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_dir, 'amortized.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_103": {
                "variable": {
                    "value": "content_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out['content_code'] ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_103": {
                "variable": {
                    "value": "content_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_227": {
                "tensors": {
                    "value": "[blank] + list(samples['img'])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_253": {
                "tensors": {
                    "value": "[blank] + list(samples['img'])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_35": {
                "f": {
                    "value": "os.path.join(model_dir, 'latent.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_39": {
                "f": {
                    "value": "os.path.join(model_dir, 'amortized.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_55": {
                "ndarray": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "permute_55": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_56": {
                "ndarray": {
                    "value": "np.arange(imgs.shape[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_57": {
                "ndarray": {
                    "value": "classes.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_133": {
                "ndarray": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "permute_133": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_134": {
                "ndarray": {
                    "value": "np.arange(imgs.shape[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_135": {
                "ndarray": {
                    "value": "classes.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_235": {
                "tensors": {
                    "value": "converted_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[samples['img'][i]]",
                            "List"
                        ],
                        [
                            "[samples['img'][i]]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_261": {
                "tensors": {
                    "value": "converted_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[samples['img'][i]]",
                            "List"
                        ],
                        [
                            "[samples['img'][i]]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/utils.py": {
        "torch": {}
    }
}