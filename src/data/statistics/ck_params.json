{
    "ck1/ck/repo/module/model.sklearn/module.py": {
        "sklearn": {
            "DecisionTreeClassifier_183": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "pmd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mp.get('max_depth', None)",
                            "Call"
                        ]
                    ]
                },
                "max_leaf_nodes": {
                    "value": "pmln",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mp.get('max_leaf_nodes', None)",
                            "Call"
                        ]
                    ]
                }
            },
            "DecisionTreeRegressor_185": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "pmd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mp.get('max_depth', None)",
                            "Call"
                        ]
                    ]
                },
                "max_leaf_nodes": {
                    "value": "pmln",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mp.get('max_leaf_nodes', None)",
                            "Call"
                        ]
                    ]
                }
            },
            "export_graphviz_197": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "decision_tree": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tree.DecisionTreeClassifier(max_depth=pmd, max_leaf_nodes=pmln)",
                            "Call"
                        ],
                        [
                            "tree.DecisionTreeRegressor(max_depth=pmd, max_leaf_nodes=pmln)",
                            "Call"
                        ],
                        [
                            "clf.fit(ftable1, ctable)",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ]
                    ]
                },
                "out_file": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tree.export_graphviz(clf, out_file=f)",
                            "Call"
                        ],
                        [
                            "open(fn2, 'wb')",
                            "Call"
                        ],
                        [
                            "open(mf1, 'rb')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ck1/ck/repo/module/model.tf/module_dnn_classifier.py": {
        "tensorflow": {
            "DNNClassifier_92": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "feature_columns": {
                    "value": "feature_columns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.feature_column.numeric_column('x', shape=[feature_length])]",
                            "List"
                        ]
                    ]
                },
                "hidden_units": {
                    "value": "xhidden_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_params.get('hidden_units', [])",
                            "Call"
                        ],
                        [
                            "dx['hidden_units']",
                            "Subscript"
                        ],
                        [
                            "[10, 20, 10]",
                            "List"
                        ]
                    ]
                },
                "n_classes": {
                    "value": "xn_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_label + 1",
                            "BinOp"
                        ],
                        [
                            "dx['n_classes']",
                            "Subscript"
                        ]
                    ]
                },
                "model_dir": {
                    "value": "fod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d['model_dir']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "numpy_input_fn_109": {
                "variable": {
                    "value": "train_input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'x': np.array(ftable)}",
                    "type": "Dict",
                    "possible_values": []
                },
                "y": {
                    "value": "np.array(ctable)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_epochs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "numpy_input_fn_129": {
                "variable": {
                    "value": "test_input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'x': np.array(ftable_test)}",
                    "type": "Dict",
                    "possible_values": []
                },
                "y": {
                    "value": "np.array(ctable_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_epochs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "numeric_column_89": {
                "key": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[feature_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "numpy_input_fn_164": {
                "variable": {
                    "value": "predict_input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'x': np.array(ftable, dtype=np.float32)}",
                    "type": "Dict",
                    "possible_values": []
                },
                "num_epochs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "ck1/ck/repo/module/model.tf/module_dnn_linear_combined_classifier.py": {
        "tensorflow": {
            "DNNLinearCombinedClassifier_87": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "linear_feature_columns": {
                    "value": "feature_columns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.feature_column.numeric_column('x', shape=[feature_length])]",
                            "List"
                        ]
                    ]
                },
                "dnn_feature_columns": {
                    "value": "feature_columns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.feature_column.numeric_column('x', shape=[feature_length])]",
                            "List"
                        ]
                    ]
                },
                "dnn_hidden_units": {
                    "value": "xhidden_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_params.get('hidden_units', [])",
                            "Call"
                        ],
                        [
                            "dx['hidden_units']",
                            "Subscript"
                        ],
                        [
                            "[10, 20, 10]",
                            "List"
                        ]
                    ]
                },
                "n_classes": {
                    "value": "xn_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_label + 1",
                            "BinOp"
                        ],
                        [
                            "dx['n_classes']",
                            "Subscript"
                        ]
                    ]
                },
                "model_dir": {
                    "value": "fod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d['model_dir']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "numpy_input_fn_105": {
                "variable": {
                    "value": "train_input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'x': np.array(ftable)}",
                    "type": "Dict",
                    "possible_values": []
                },
                "y": {
                    "value": "np.array(ctable)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_epochs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "numpy_input_fn_124": {
                "variable": {
                    "value": "test_input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'x': np.array(ftable_test)}",
                    "type": "Dict",
                    "possible_values": []
                },
                "y": {
                    "value": "np.array(ctable_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_epochs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "numeric_column_85": {
                "key": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[feature_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "numpy_input_fn_158": {
                "variable": {
                    "value": "predict_input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'x': np.array(ftable, dtype=np.float32)}",
                    "type": "Dict",
                    "possible_values": []
                },
                "num_epochs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "ck1/ck/repo/module/model.tf/module_linear_classifier.py": {
        "tensorflow": {
            "LinearClassifier_87": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "feature_columns": {
                    "value": "feature_columns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.feature_column.numeric_column('x', shape=[feature_length])]",
                            "List"
                        ]
                    ]
                },
                "n_classes": {
                    "value": "xn_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_label + 1",
                            "BinOp"
                        ],
                        [
                            "dx['n_classes']",
                            "Subscript"
                        ]
                    ]
                },
                "model_dir": {
                    "value": "fod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d['model_dir']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "numpy_input_fn_103": {
                "variable": {
                    "value": "train_input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'x': np.array(ftable)}",
                    "type": "Dict",
                    "possible_values": []
                },
                "y": {
                    "value": "np.array(ctable)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_epochs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "numpy_input_fn_122": {
                "variable": {
                    "value": "test_input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'x': np.array(ftable_test)}",
                    "type": "Dict",
                    "possible_values": []
                },
                "y": {
                    "value": "np.array(ctable_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_epochs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "numeric_column_85": {
                "key": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[feature_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "numpy_input_fn_156": {
                "variable": {
                    "value": "predict_input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'x': np.array(ftable, dtype=np.float32)}",
                    "type": "Dict",
                    "possible_values": []
                },
                "num_epochs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "cm-mlops/script/get-tensorflow/detect-version.py": {
        "tensorflow": {}
    },
    "cm-mlops/script/app-image-classification-torch-py/src/pytorch_classify_preprocessed.py": {
        "torch": {
            "load_49": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'pytorch/vision' + torchvision_version",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "TORCH_MODEL_NAME",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.getenv('ML_TORCH_MODEL_NAME', 'resnet50')",
                            "Call"
                        ]
                    ]
                },
                "pretrained": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_73": {
                "variable": {
                    "value": "torch_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "batch_data",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cm-mlops/script/get-pytorch/detect-version.py": {
        "torch": {}
    }
}