{
    "examples/al_test.py": {
        "sklearn": {
            "make_moons_7": {
                "variable": {
                    "value": "(X, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "noise": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "examples/poisson_directed.py": {
        "sklearn": {
            "make_moons_6": {
                "variable": {
                    "value": "(X, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "noise": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "examples/randomized_svd.py": {
        "sklearn": {
            "make_moons_6": {
                "variable": {
                    "value": "(X, L)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "noise": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "examples/spectral_twomoons.py": {
        "sklearn": {
            "make_moons_6": {
                "variable": {
                    "value": "(X, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "noise": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "examples/ssl_twomoons.py": {
        "sklearn": {
            "make_moons_6": {
                "variable": {
                    "value": "(X, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "noise": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "graphlearning/clustering.py": {
        "sklearn": {
            "KMeans_196": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "num_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.num_clusters",
                            "Attribute"
                        ],
                        [
                            "num_clusters",
                            "Method Argument"
                        ],
                        [
                            "num_clusters",
                            "Method Argument"
                        ],
                        [
                            "num_clusters",
                            "Method Argument"
                        ],
                        [
                            "num_clusters",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "KMeans_278": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "self.num_clusters",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "graphlearning/ssl.py": {
        "torch": {
            "from_numpy_810": {
                "variable": {
                    "value": "Dbt",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Db",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D * source",
                            "BinOp"
                        ],
                        [
                            "mu * dt * source",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_818": {
                "variable": {
                    "value": "ut",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.conjgrad(L, D * source, tol=self.tol)",
                            "Call"
                        ],
                        [
                            "D * u",
                            "BinOp"
                        ],
                        [
                            "np.zeros((n, k))",
                            "Call"
                        ],
                        [
                            "Db + P * u",
                            "BinOp"
                        ],
                        [
                            "V @ (L @ (V.T @ source))",
                            "BinOp"
                        ],
                        [
                            "ut.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "utils.labels_to_onehot(labels)",
                            "Call"
                        ],
                        [
                            "P * u + Db",
                            "BinOp"
                        ],
                        [
                            "utils.labels_to_onehot(labels)",
                            "Call"
                        ],
                        [
                            "ut.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.zeros((n,))",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(u, dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "utils.labels_to_onehot(u)",
                            "Call"
                        ],
                        [
                            "np.random.rand(k, n)",
                            "Call"
                        ],
                        [
                            "utils.labels_to_onehot(np.argmax(u, axis=0)).T",
                            "Attribute"
                        ],
                        [
                            "Z @ Xt",
                            "BinOp"
                        ],
                        [
                            "utils.labels_to_onehot(np.argmax(u, axis=0)).T",
                            "Attribute"
                        ],
                        [
                            "np.zeros((n, num_classes))",
                            "Call"
                        ],
                        [
                            "V @ (P @ u)",
                            "BinOp"
                        ],
                        [
                            "utils.labels_to_onehot(labels)",
                            "Call"
                        ],
                        [
                            "np.zeros((n, k))",
                            "Call"
                        ],
                        [
                            "u - np.mean(u, axis=0)",
                            "BinOp"
                        ],
                        [
                            "np.zeros((n, k))",
                            "Call"
                        ],
                        [
                            "Pt @ u",
                            "BinOp"
                        ],
                        [
                            "np.array(u)",
                            "Call"
                        ],
                        [
                            "np.copy(K)",
                            "Call"
                        ],
                        [
                            "u + w",
                            "BinOp"
                        ],
                        [
                            "np.zeros((k, n))",
                            "Call"
                        ],
                        [
                            "self.graph.dijkstra(train_ind[train_labels], bdy_val=0, f=self.f)",
                            "Call"
                        ],
                        [
                            "np.zeros(l.shape)",
                            "Call"
                        ],
                        [
                            "utils.labels_to_onehot(u[l])",
                            "Call"
                        ],
                        [
                            "self.graph.amle(train_ind, train_labels, tol=self.tol, max_num_it=self.max_num_it, weighted=self.weighted, prog=self.prog)",
                            "Call"
                        ],
                        [
                            "self.graph.peikonal(train_ind[train_labels], bdy_val=0, f=self.f, p=self.p, max_num_it=self.max_num_it, tol=self.tol, num_bisection_it=self.num_bisection_it, prog=False)",
                            "Call"
                        ],
                        [
                            "self.graph.plaplace(train_ind, train_labels, self.p, max_num_it=self.max_num_it, tol=self.tol)",
                            "Call"
                        ],
                        [
                            "utils.conjgrad(M * L * M, M * Y, tol=1e-06)",
                            "Call"
                        ],
                        [
                            "M * u",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_654": {
                "variable": {
                    "value": "ut",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.conjgrad(L, D * source, tol=self.tol)",
                            "Call"
                        ],
                        [
                            "D * u",
                            "BinOp"
                        ],
                        [
                            "np.zeros((n, k))",
                            "Call"
                        ],
                        [
                            "Db + P * u",
                            "BinOp"
                        ],
                        [
                            "V @ (L @ (V.T @ source))",
                            "BinOp"
                        ],
                        [
                            "ut.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "utils.labels_to_onehot(labels)",
                            "Call"
                        ],
                        [
                            "P * u + Db",
                            "BinOp"
                        ],
                        [
                            "utils.labels_to_onehot(labels)",
                            "Call"
                        ],
                        [
                            "ut.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.zeros((n,))",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(u, dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "utils.labels_to_onehot(u)",
                            "Call"
                        ],
                        [
                            "np.random.rand(k, n)",
                            "Call"
                        ],
                        [
                            "utils.labels_to_onehot(np.argmax(u, axis=0)).T",
                            "Attribute"
                        ],
                        [
                            "Z @ Xt",
                            "BinOp"
                        ],
                        [
                            "utils.labels_to_onehot(np.argmax(u, axis=0)).T",
                            "Attribute"
                        ],
                        [
                            "np.zeros((n, num_classes))",
                            "Call"
                        ],
                        [
                            "V @ (P @ u)",
                            "BinOp"
                        ],
                        [
                            "utils.labels_to_onehot(labels)",
                            "Call"
                        ],
                        [
                            "np.zeros((n, k))",
                            "Call"
                        ],
                        [
                            "u - np.mean(u, axis=0)",
                            "BinOp"
                        ],
                        [
                            "np.zeros((n, k))",
                            "Call"
                        ],
                        [
                            "Pt @ u",
                            "BinOp"
                        ],
                        [
                            "np.array(u)",
                            "Call"
                        ],
                        [
                            "np.copy(K)",
                            "Call"
                        ],
                        [
                            "u + w",
                            "BinOp"
                        ],
                        [
                            "np.zeros((k, n))",
                            "Call"
                        ],
                        [
                            "self.graph.dijkstra(train_ind[train_labels], bdy_val=0, f=self.f)",
                            "Call"
                        ],
                        [
                            "np.zeros(l.shape)",
                            "Call"
                        ],
                        [
                            "utils.labels_to_onehot(u[l])",
                            "Call"
                        ],
                        [
                            "self.graph.amle(train_ind, train_labels, tol=self.tol, max_num_it=self.max_num_it, weighted=self.weighted, prog=self.prog)",
                            "Call"
                        ],
                        [
                            "self.graph.peikonal(train_ind[train_labels], bdy_val=0, f=self.f, p=self.p, max_num_it=self.max_num_it, tol=self.tol, num_bisection_it=self.num_bisection_it, prog=False)",
                            "Call"
                        ],
                        [
                            "self.graph.plaplace(train_ind, train_labels, self.p, max_num_it=self.max_num_it, tol=self.tol)",
                            "Call"
                        ],
                        [
                            "utils.conjgrad(M * L * M, M * Y, tol=1e-06)",
                            "Call"
                        ],
                        [
                            "M * u",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_655": {
                "variable": {
                    "value": "Dbt",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Db",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D * source",
                            "BinOp"
                        ],
                        [
                            "mu * dt * source",
                            "BinOp"
                        ]
                    ]
                }
            },
            "addmm_820": {
                "variable": {
                    "value": "ut",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Dbt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(Db).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Db).float().cuda()",
                            "Call"
                        ]
                    ]
                },
                "mat1": {
                    "value": "Pt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.torch_sparse(P).cuda()",
                            "Call"
                        ],
                        [
                            "utils.torch_sparse(P).cuda()",
                            "Call"
                        ],
                        [
                            "np.copy(P)",
                            "Call"
                        ],
                        [
                            "P @ Pt @ np.transpose(P) + alpha * v @ np.transpose(v) + lam * Id",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "ut",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(u).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.sparse.addmm(Dbt, Pt, ut)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(u).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.sparse.addmm(Dbt, Pt, ut)",
                            "Call"
                        ]
                    ]
                }
            },
            "addmm_658": {
                "variable": {
                    "value": "ut",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Dbt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(Db).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Db).float().cuda()",
                            "Call"
                        ]
                    ]
                },
                "mat1": {
                    "value": "Pt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.torch_sparse(P).cuda()",
                            "Call"
                        ],
                        [
                            "utils.torch_sparse(P).cuda()",
                            "Call"
                        ],
                        [
                            "np.copy(P)",
                            "Call"
                        ],
                        [
                            "P @ Pt @ np.transpose(P) + alpha * v @ np.transpose(v) + lam * Id",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "ut",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(u).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.sparse.addmm(Dbt, Pt, ut)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(u).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.sparse.addmm(Dbt, Pt, ut)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "graphlearning/utils.py": {
        "torch": {}
    },
    "graphlearning/weightmatrix.py": {
        "torch": {
            "device_508": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_514": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data - data.min()",
                            "BinOp"
                        ],
                        [
                            "data / data.max()",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(data).float()",
                            "Call"
                        ],
                        [
                            "data.to(device)",
                            "Call"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_516": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((data.shape[0],)).astype(int)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(target).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_518": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyDataset(data, target)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_522": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_471": {
                "variable": {
                    "value": "BCE",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "recon_x",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "x.view(-1, data.shape[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_445": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.lw[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.lw[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_446": {
                "variable": {
                    "value": "self.fc21",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.lw[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.lw[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_447": {
                "variable": {
                    "value": "self.fc22",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.lw[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.lw[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_448": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.lw[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.lw[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_449": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.lw[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.lw[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_452": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_456": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_457": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_461": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc3(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_507": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_529": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_462": {
                "input": {
                    "value": "self.fc4(h3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_477": {
                "input": {
                    "value": "1 + logvar - mu.pow(2) - logvar.exp()",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}