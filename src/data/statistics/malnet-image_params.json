{
    "main.py": {
        "sklearn": {
            "classification_report_64": {
                "variable": {
                    "value": "report",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_gen.classes.tolist()",
                            "Call"
                        ],
                        [
                            "self.val_gen.classes.tolist()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "labels": {
                    "value": "args['class_indexes']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "copy.deepcopy(args_og)",
                            "Call"
                        ]
                    ]
                },
                "target_names": {
                    "value": "args['class_labels']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "copy.deepcopy(args_og)",
                            "Call"
                        ]
                    ]
                },
                "output_dict": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "confusion_matrix_77": {
                "variable": {
                    "value": "cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_gen.classes.tolist()",
                            "Call"
                        ],
                        [
                            "self.val_gen.classes.tolist()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "labels": {
                    "value": "args['class_indexes']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "copy.deepcopy(args_og)",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_63": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_gen.classes.tolist()",
                            "Call"
                        ],
                        [
                            "self.val_gen.classes.tolist()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "roc_curve_84": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_gen.classes.tolist()",
                            "Call"
                        ],
                        [
                            "self.val_gen.classes.tolist()",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "pos_label": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "roc_auc_score_89": {
                "variable": {
                    "value": "auc_macro_score",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_gen.classes.tolist()",
                            "Call"
                        ],
                        [
                            "self.val_gen.classes.tolist()",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "roc_auc_score_90": {
                "variable": {
                    "value": "auc_class_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_gen.classes.tolist()",
                            "Call"
                        ],
                        [
                            "self.val_gen.classes.tolist()",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "f1_score_48": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_gen.classes.tolist()",
                            "Call"
                        ],
                        [
                            "self.val_gen.classes.tolist()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "Model_118": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[base_model.input]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[output]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_model_166": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "args['log_dir'] + 'best_model.pt'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "compile": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ImageDataGenerator_173": {
                "variable": {
                    "value": "train_gen",
                    "type": "variable",
                    "possible_values": []
                },
                "rescale": {
                    "value": "1.0 / 255",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ImageDataGenerator_182": {
                "variable": {
                    "value": "val_gen",
                    "type": "variable",
                    "possible_values": []
                },
                "rescale": {
                    "value": "1.0 / 255",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ImageDataGenerator_191": {
                "variable": {
                    "value": "test_gen",
                    "type": "variable",
                    "possible_values": []
                },
                "rescale": {
                    "value": "1.0 / 255",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GlobalAveragePooling2D_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_117": {
                "units": {
                    "value": "args['num_classes']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_49": {
                "name": {
                    "value": "macro-f1",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "macro_f1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(f1_score(y_true, y_pred, average='macro'), 3)",
                            "Call"
                        ],
                        [
                            "round(f1_score(y_true, y_pred, average='macro'), 3)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "epoch",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "gradcam.py": {
        "tensorflow": {
            "load_img_25": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "img_path",
                    "type": "variable",
                    "possible_values": []
                },
                "target_size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "img_to_array_26": {
                "variable": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": []
                },
                "img": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keras.preprocessing.image.load_img(img_path, target_size=(256, 256))",
                            "Call"
                        ],
                        [
                            "keras.preprocessing.image.load_img(file_path)",
                            "Call"
                        ],
                        [
                            "keras.preprocessing.image.img_to_array(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_35": {
                "variable": {
                    "value": "last_conv_layer_model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "model.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "last_conv_layer.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Input_38": {
                "variable": {
                    "value": "classifier_input",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "last_conv_layer.output.shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Model_42": {
                "variable": {
                    "value": "classifier_model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "classifier_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keras.Input(shape=last_conv_layer.output.shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifier_input",
                            "variable"
                        ],
                        [
                            "model.get_layer(layer_name)(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_59": {
                "variable": {
                    "value": "pooled_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tape.gradient(top_class_channel, last_conv_layer_output)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "(0, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_img_84": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "file_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "img_to_array_85": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "img": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keras.preprocessing.image.load_img(img_path, target_size=(256, 256))",
                            "Call"
                        ],
                        [
                            "keras.preprocessing.image.load_img(file_path)",
                            "Call"
                        ],
                        [
                            "keras.preprocessing.image.img_to_array(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "array_to_img_98": {
                "variable": {
                    "value": "jet_heatmap",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "jet_heatmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jet_colors[heatmap]",
                            "Subscript"
                        ],
                        [
                            "keras.preprocessing.image.array_to_img(jet_heatmap)",
                            "Call"
                        ],
                        [
                            "jet_heatmap.resize((img.shape[1], img.shape[0]))",
                            "Call"
                        ],
                        [
                            "keras.preprocessing.image.img_to_array(jet_heatmap)",
                            "Call"
                        ]
                    ]
                }
            },
            "img_to_array_100": {
                "variable": {
                    "value": "jet_heatmap",
                    "type": "variable",
                    "possible_values": []
                },
                "img": {
                    "value": "jet_heatmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jet_colors[heatmap]",
                            "Subscript"
                        ],
                        [
                            "keras.preprocessing.image.array_to_img(jet_heatmap)",
                            "Call"
                        ],
                        [
                            "jet_heatmap.resize((img.shape[1], img.shape[0]))",
                            "Call"
                        ],
                        [
                            "keras.preprocessing.image.img_to_array(jet_heatmap)",
                            "Call"
                        ]
                    ]
                }
            },
            "array_to_img_104": {
                "variable": {
                    "value": "superimposed_img",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "superimposed_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jet_heatmap * 0.4 + img",
                            "BinOp"
                        ],
                        [
                            "keras.preprocessing.image.array_to_img(superimposed_img)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_model_126": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/raid/sfreitas3/malnet-image/info/logs/num_excluded=0/group=type/color=grayscale/pretrain=False/model=resnet18_loss=categorical_crossentropy_reweight=effective_num_beta=0.999/epochs=100/best_model.pt'",
                            "str"
                        ]
                    ]
                },
                "compile": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_52": {
                "variable": {
                    "value": "top_pred_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "GradientTape_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "losses.py": {
        "tensorflow": {
            "cast_32": {
                "variable": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_true, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "epsilon_34": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_38": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.clip(y_pred, epsilon, 1.0 - epsilon)",
                            "Call"
                        ],
                        [
                            "K.clip(y_pred, epsilon, 1.0 - epsilon)",
                            "Call"
                        ]
                    ]
                },
                "a_min": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.epsilon()",
                            "Call"
                        ],
                        [
                            "K.epsilon()",
                            "Call"
                        ]
                    ]
                },
                "a_max": {
                    "value": "1.0 - epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_40": {
                "variable": {
                    "value": "p_t",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "K.equal(y_true, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.clip(y_pred, epsilon, 1.0 - epsilon)",
                            "Call"
                        ],
                        [
                            "K.clip(y_pred, epsilon, 1.0 - epsilon)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1 - y_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_43": {
                "variable": {
                    "value": "alpha_t",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "K.equal(y_true, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "alpha_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.ones_like(y_true) * alpha",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "1 - alpha_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_50": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "K.sum(loss, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "epsilon_94": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_95": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.clip(y_pred, epsilon, 1.0 - epsilon)",
                            "Call"
                        ],
                        [
                            "K.clip(y_pred, epsilon, 1.0 - epsilon)",
                            "Call"
                        ]
                    ]
                },
                "a_min": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.epsilon()",
                            "Call"
                        ],
                        [
                            "K.epsilon()",
                            "Call"
                        ]
                    ]
                },
                "a_max": {
                    "value": "1.0 - epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_104": {
                "a": {
                    "value": "K.sum(loss, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_40": {
                "x": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_true, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_42": {
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_true, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_43": {
                "x": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_true, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_45": {
                "x": {
                    "value": "p_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(K.equal(y_true, 1), y_pred, 1 - y_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_46": {
                "x": {
                    "value": "1 - p_t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0",
                            "Method Argument"
                        ],
                        [
                            "2.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_50": {
                "a": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight * cross_entropy",
                            "BinOp"
                        ],
                        [
                            "K.mean(K.sum(loss, axis=1))",
                            "Call"
                        ],
                        [
                            "alpha * K.pow(1 - y_pred, gamma) * cross_entropy",
                            "BinOp"
                        ],
                        [
                            "args['loss']",
                            "Subscript"
                        ],
                        [
                            "[categorical_focal_loss(alpha=[alpha], gamma=2)]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_98": {
                "x": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.clip(y_pred, epsilon, 1.0 - epsilon)",
                            "Call"
                        ],
                        [
                            "K.clip(y_pred, epsilon, 1.0 - epsilon)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_104": {
                "a": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight * cross_entropy",
                            "BinOp"
                        ],
                        [
                            "K.mean(K.sum(loss, axis=1))",
                            "Call"
                        ],
                        [
                            "alpha * K.pow(1 - y_pred, gamma) * cross_entropy",
                            "BinOp"
                        ],
                        [
                            "args['loss']",
                            "Subscript"
                        ],
                        [
                            "[categorical_focal_loss(alpha=[alpha], gamma=2)]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_101": {
                "x": {
                    "value": "1 - y_pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0",
                            "Method Argument"
                        ],
                        [
                            "2.0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}