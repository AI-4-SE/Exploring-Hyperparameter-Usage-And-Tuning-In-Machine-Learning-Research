{
    "core/test.py": {
        "torch": {
            "sigmoid_49": {
                "variable": {
                    "value": "score",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "label_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "FeatEmbder(feat)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "core/train.py": {
        "torch": {
            "DataParallel_35": {
                "variable": {
                    "value": "FeatExtor",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "FeatExtor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DataParallel(FeatExtor)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_36": {
                "variable": {
                    "value": "DepthEstor",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "DepthEstor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DataParallel(DepthEstor)",
                            "Call"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_41": {
                "variable": {
                    "value": "criterionCls",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_42": {
                "variable": {
                    "value": "criterionDepth",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_47": {
                "variable": {
                    "value": "optimizer_all",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "itertools.chain(FeatExtor.parameters(), DepthEstor.parameters(), FeatEmbder.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_meta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(args.beta1, args.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "save_265": {
                "obj": {
                    "value": "FeatExtor.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_save_path, 'FeatExtor-final.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_267": {
                "obj": {
                    "value": "FeatEmbder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_save_path, 'FeatEmbder-final.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_269": {
                "obj": {
                    "value": "DepthEstor.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_save_path, 'DepthEstor-final.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "catimg1",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cat_img1_real, cat_img1_fake]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "depth_img1",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[depth_img1_real, depth_img1_fake]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_96": {
                "variable": {
                    "value": "lab1",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lab1_real, lab1_fake]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "catimg2",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cat_img2_real, cat_img2_fake]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "depth_img2",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[depth_img2_real, depth_img2_fake]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "lab2",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lab2_real, lab2_fake]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "catimg3",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cat_img3_real, cat_img3_fake]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "depth_img3",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[depth_img3_real, depth_img3_fake]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "lab3",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lab3_real, lab3_fake]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "catimg",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[catimg1, catimg2, catimg3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "depth_GT",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[depth_img1, depth_img2, depth_img3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lab1, lab2, lab3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_154": {
                "variable": {
                    "value": "grads_FeatEmbder",
                    "type": "Name",
                    "possible_values": []
                },
                "outputs": {
                    "value": "Loss_cls",
                    "type": "Name",
                    "possible_values": [
                        [
                            "criterionCls(pred.squeeze(), lab_rand)",
                            "Call"
                        ],
                        [
                            "criterionCls(pred.squeeze(), lab_rand)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "FeatEmbder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_257": {
                "obj": {
                    "value": "FeatExtor.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_save_path, 'FeatExtor-{}.pt'.format(epoch + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_259": {
                "obj": {
                    "value": "FeatEmbder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_save_path, 'FeatEmbder-{}.pt'.format(epoch + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_261": {
                "obj": {
                    "value": "DepthEstor.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_save_path, 'DepthEstor-{}.pt'.format(epoch + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_245": {
                "obj": {
                    "value": "FeatExtor.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_save_path, 'FeatExtor-{}-{}.pt'.format(epoch + 1, step + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_247": {
                "obj": {
                    "value": "FeatEmbder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_save_path, 'FeatEmbder-{}-{}.pt'.format(epoch + 1, step + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_249": {
                "obj": {
                    "value": "DepthEstor.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_save_path, 'DepthEstor-{}-{}.pt'.format(epoch + 1, step + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/DatasetLoader.py": {
        "torch": {
            "DataLoader_100": {
                "variable": {
                    "value": "data_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DatasetLoader(name=name, getreal=getreal, transform=pre_process)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "ori_catimg",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ori_rgbimg, ori_hsvimg]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/TargetDatasetLoader.py": {
        "torch": {
            "DataLoader_67": {
                "variable": {
                    "value": "data_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DatasetLoader(name=name, transform=pre_process)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "catimg",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rgbimg, hsvimg]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/samplers.py": {
        "torch": {
            "randperm_21": {
                "variable": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": []
                },
                "n": {
                    "value": "self.num_identities",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {}
    },
    "misc/evaluate.py": {
        "torch": {
            "CrossEntropyLoss_20": {
                "variable": {
                    "value": "criterion",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_26": {
                "variable": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rgbimages, hsvimages]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "misc/utils.py": {
        "torch": {
            "arange_196": {
                "variable": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "len(dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_202": {
                "variable": {
                    "value": "sampler",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "excerpt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "indices.narrow(0, 0, candidates_num).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_139": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "random.randint(1, 10000)",
                            "Call"
                        ],
                        [
                            "manual_seed",
                            "Name"
                        ]
                    ]
                }
            },
            "is_available_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_158": {
                "variable": {
                    "value": "state_dict",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "restore",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "is_available_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_198": {
                "variable": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": []
                },
                "n": {
                    "value": "len(dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_all_141": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "random.randint(1, 10000)",
                            "Call"
                        ],
                        [
                            "manual_seed",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "models/DGFANet.py": {
        "torch": {
            "Conv2d_13": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3(in_channels, out_channels)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.downconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3(in_channels, 128)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3(in_channels, 128)",
                    "type": null,
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_109": {
                "variable": {
                    "value": "re_dx2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "dx2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.down1(dx1)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_110": {
                "variable": {
                    "value": "re_dx3",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "dx3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.down2(dx2)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_111": {
                "variable": {
                    "value": "catfeat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[re_dx2, re_dx3, dx4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_block(0, in_channels=in_channels, out_channels=128, momentum=self.momentum, pooling=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_221": {
                "variable": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv' + str(index), nn.Conv2d(in_channels, out_channels, K_SIZE, stride=stride, padding=padding)), ('bn' + str(index), nn.BatchNorm2d(out_channels, momentum=momentum, affine=True)), ('relu' + str(index), nn.ReLU(inplace=True)), ('pool' + str(index), nn.MaxPool2d(2))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_231": {
                "variable": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv' + str(index), nn.Conv2d(in_channels, out_channels, K_SIZE, padding=padding)), ('bn' + str(index), nn.BatchNorm2d(out_channels, momentum=momentum, affine=True)), ('relu' + str(index), nn.ReLU(inplace=True))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_142": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.downconv(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "params['features.0.conv0.weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "params['features.0.conv0.bias']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_norm_147": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, params['features.0.conv0.weight'], params['features.0.conv0.bias'], padding=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(out, params['features.0.bn0.running_mean'], params['features.0.bn0.running_var'], params['features.0.bn0.weight'], params['features.0.bn0.bias'], momentum=self.momentum, training=True)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, params['features.1.conv1.weight'], params['features.1.conv1.bias'], padding=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(out, params['features.1.bn1.running_mean'], params['features.1.bn1.running_var'], params['features.1.bn1.weight'], params['features.1.bn1.bias'], momentum=self.momentum, training=True)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, params['features.2.conv2.weight'], params['features.2.conv2.bias'], padding=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(out, params['features.2.bn2.running_mean'], params['features.2.bn2.running_var'], params['features.2.bn2.weight'], params['features.2.bn2.bias'], momentum=self.momentum, training=True)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(out, 1)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.linear(out, params['fc.weight'], params['fc.bias'])",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "params['features.0.bn0.running_mean']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "running_var": {
                    "value": "params['features.0.bn0.running_var']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "params['features.0.bn0.weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "params['features.0.bn0.bias']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_155": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, params['features.0.conv0.weight'], params['features.0.conv0.bias'], padding=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(out, params['features.0.bn0.running_mean'], params['features.0.bn0.running_var'], params['features.0.bn0.weight'], params['features.0.bn0.bias'], momentum=self.momentum, training=True)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, params['features.1.conv1.weight'], params['features.1.conv1.bias'], padding=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(out, params['features.1.bn1.running_mean'], params['features.1.bn1.running_var'], params['features.1.bn1.weight'], params['features.1.bn1.bias'], momentum=self.momentum, training=True)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, params['features.2.conv2.weight'], params['features.2.conv2.bias'], padding=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(out, params['features.2.bn2.running_mean'], params['features.2.bn2.running_var'], params['features.2.bn2.weight'], params['features.2.bn2.bias'], momentum=self.momentum, training=True)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(out, 1)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.linear(out, params['fc.weight'], params['fc.bias'])",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_156": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, params['features.0.conv0.weight'], params['features.0.conv0.bias'], padding=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(out, params['features.0.bn0.running_mean'], params['features.0.bn0.running_var'], params['features.0.bn0.weight'], params['features.0.bn0.bias'], momentum=self.momentum, training=True)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, params['features.1.conv1.weight'], params['features.1.conv1.bias'], padding=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(out, params['features.1.bn1.running_mean'], params['features.1.bn1.running_var'], params['features.1.bn1.weight'], params['features.1.bn1.bias'], momentum=self.momentum, training=True)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, params['features.2.conv2.weight'], params['features.2.conv2.bias'], padding=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(out, params['features.2.bn2.running_mean'], params['features.2.bn2.running_var'], params['features.2.bn2.weight'], params['features.2.bn2.bias'], momentum=self.momentum, training=True)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(out, 1)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.linear(out, params['fc.weight'], params['fc.bias'])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_159": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, params['features.0.conv0.weight'], params['features.0.conv0.bias'], padding=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(out, params['features.0.bn0.running_mean'], params['features.0.bn0.running_var'], params['features.0.bn0.weight'], params['features.0.bn0.bias'], momentum=self.momentum, training=True)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, params['features.1.conv1.weight'], params['features.1.conv1.bias'], padding=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(out, params['features.1.bn1.running_mean'], params['features.1.bn1.running_var'], params['features.1.bn1.weight'], params['features.1.bn1.bias'], momentum=self.momentum, training=True)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, params['features.2.conv2.weight'], params['features.2.conv2.bias'], padding=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(out, params['features.2.bn2.running_mean'], params['features.2.bn2.running_var'], params['features.2.bn2.weight'], params['features.2.bn2.bias'], momentum=self.momentum, training=True)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(out, 1)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.linear(out, params['fc.weight'], params['fc.bias'])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "params['features.1.conv1.weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "params['features.1.conv1.bias']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_norm_164": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, params['features.0.conv0.weight'], params['features.0.conv0.bias'], padding=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(out, params['features.0.bn0.running_mean'], params['features.0.bn0.running_var'], params['features.0.bn0.weight'], params['features.0.bn0.bias'], momentum=self.momentum, training=True)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, params['features.1.conv1.weight'], params['features.1.conv1.bias'], padding=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(out, params['features.1.bn1.running_mean'], params['features.1.bn1.running_var'], params['features.1.bn1.weight'], params['features.1.bn1.bias'], momentum=self.momentum, training=True)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, params['features.2.conv2.weight'], params['features.2.conv2.bias'], padding=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(out, params['features.2.bn2.running_mean'], params['features.2.bn2.running_var'], params['features.2.bn2.weight'], params['features.2.bn2.bias'], momentum=self.momentum, training=True)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(out, 1)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.linear(out, params['fc.weight'], params['fc.bias'])",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "params['features.1.bn1.running_mean']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "running_var": {
                    "value": "params['features.1.bn1.running_var']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "params['features.1.bn1.weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "params['features.1.bn1.bias']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_172": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, params['features.0.conv0.weight'], params['features.0.conv0.bias'], padding=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(out, params['features.0.bn0.running_mean'], params['features.0.bn0.running_var'], params['features.0.bn0.weight'], params['features.0.bn0.bias'], momentum=self.momentum, training=True)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, params['features.1.conv1.weight'], params['features.1.conv1.bias'], padding=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(out, params['features.1.bn1.running_mean'], params['features.1.bn1.running_var'], params['features.1.bn1.weight'], params['features.1.bn1.bias'], momentum=self.momentum, training=True)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, params['features.2.conv2.weight'], params['features.2.conv2.bias'], padding=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(out, params['features.2.bn2.running_mean'], params['features.2.bn2.running_var'], params['features.2.bn2.weight'], params['features.2.bn2.bias'], momentum=self.momentum, training=True)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(out, 1)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.linear(out, params['fc.weight'], params['fc.bias'])",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_173": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, params['features.0.conv0.weight'], params['features.0.conv0.bias'], padding=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(out, params['features.0.bn0.running_mean'], params['features.0.bn0.running_var'], params['features.0.bn0.weight'], params['features.0.bn0.bias'], momentum=self.momentum, training=True)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, params['features.1.conv1.weight'], params['features.1.conv1.bias'], padding=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(out, params['features.1.bn1.running_mean'], params['features.1.bn1.running_var'], params['features.1.bn1.weight'], params['features.1.bn1.bias'], momentum=self.momentum, training=True)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, params['features.2.conv2.weight'], params['features.2.conv2.bias'], padding=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(out, params['features.2.bn2.running_mean'], params['features.2.bn2.running_var'], params['features.2.bn2.weight'], params['features.2.bn2.bias'], momentum=self.momentum, training=True)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(out, 1)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.linear(out, params['fc.weight'], params['fc.bias'])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_175": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, params['features.0.conv0.weight'], params['features.0.conv0.bias'], padding=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(out, params['features.0.bn0.running_mean'], params['features.0.bn0.running_var'], params['features.0.bn0.weight'], params['features.0.bn0.bias'], momentum=self.momentum, training=True)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, params['features.1.conv1.weight'], params['features.1.conv1.bias'], padding=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(out, params['features.1.bn1.running_mean'], params['features.1.bn1.running_var'], params['features.1.bn1.weight'], params['features.1.bn1.bias'], momentum=self.momentum, training=True)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, params['features.2.conv2.weight'], params['features.2.conv2.bias'], padding=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(out, params['features.2.bn2.running_mean'], params['features.2.bn2.running_var'], params['features.2.bn2.weight'], params['features.2.bn2.bias'], momentum=self.momentum, training=True)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(out, 1)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.linear(out, params['fc.weight'], params['fc.bias'])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "params['features.2.conv2.weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "params['features.2.conv2.bias']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_norm_180": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, params['features.0.conv0.weight'], params['features.0.conv0.bias'], padding=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(out, params['features.0.bn0.running_mean'], params['features.0.bn0.running_var'], params['features.0.bn0.weight'], params['features.0.bn0.bias'], momentum=self.momentum, training=True)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, params['features.1.conv1.weight'], params['features.1.conv1.bias'], padding=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(out, params['features.1.bn1.running_mean'], params['features.1.bn1.running_var'], params['features.1.bn1.weight'], params['features.1.bn1.bias'], momentum=self.momentum, training=True)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, params['features.2.conv2.weight'], params['features.2.conv2.bias'], padding=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(out, params['features.2.bn2.running_mean'], params['features.2.bn2.running_var'], params['features.2.bn2.weight'], params['features.2.bn2.bias'], momentum=self.momentum, training=True)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(out, 1)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.linear(out, params['fc.weight'], params['fc.bias'])",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "params['features.2.bn2.running_mean']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "running_var": {
                    "value": "params['features.2.bn2.running_var']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "params['features.2.bn2.weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "params['features.2.bn2.bias']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_188": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, params['features.0.conv0.weight'], params['features.0.conv0.bias'], padding=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(out, params['features.0.bn0.running_mean'], params['features.0.bn0.running_var'], params['features.0.bn0.weight'], params['features.0.bn0.bias'], momentum=self.momentum, training=True)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, params['features.1.conv1.weight'], params['features.1.conv1.bias'], padding=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(out, params['features.1.bn1.running_mean'], params['features.1.bn1.running_var'], params['features.1.bn1.weight'], params['features.1.bn1.bias'], momentum=self.momentum, training=True)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, params['features.2.conv2.weight'], params['features.2.conv2.bias'], padding=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(out, params['features.2.bn2.running_mean'], params['features.2.bn2.running_var'], params['features.2.bn2.weight'], params['features.2.bn2.bias'], momentum=self.momentum, training=True)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(out, 1)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.linear(out, params['fc.weight'], params['fc.bias'])",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_189": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, params['features.0.conv0.weight'], params['features.0.conv0.bias'], padding=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(out, params['features.0.bn0.running_mean'], params['features.0.bn0.running_var'], params['features.0.bn0.weight'], params['features.0.bn0.bias'], momentum=self.momentum, training=True)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, params['features.1.conv1.weight'], params['features.1.conv1.bias'], padding=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(out, params['features.1.bn1.running_mean'], params['features.1.bn1.running_var'], params['features.1.bn1.weight'], params['features.1.bn1.bias'], momentum=self.momentum, training=True)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, params['features.2.conv2.weight'], params['features.2.conv2.bias'], padding=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(out, params['features.2.bn2.running_mean'], params['features.2.bn2.running_var'], params['features.2.bn2.weight'], params['features.2.bn2.bias'], momentum=self.momentum, training=True)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(out, 1)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.linear(out, params['fc.weight'], params['fc.bias'])",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linear_192": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, params['features.0.conv0.weight'], params['features.0.conv0.bias'], padding=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(out, params['features.0.bn0.running_mean'], params['features.0.bn0.running_var'], params['features.0.bn0.weight'], params['features.0.bn0.bias'], momentum=self.momentum, training=True)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, params['features.1.conv1.weight'], params['features.1.conv1.bias'], padding=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(out, params['features.1.bn1.running_mean'], params['features.1.bn1.running_var'], params['features.1.bn1.weight'], params['features.1.bn1.bias'], momentum=self.momentum, training=True)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, params['features.2.conv2.weight'], params['features.2.conv2.bias'], padding=1)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(out, params['features.2.bn2.running_mean'], params['features.2.bn2.running_var'], params['features.2.bn2.weight'], params['features.2.bn2.bias'], momentum=self.momentum, training=True)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(out, 1)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.linear(out, params['fc.weight'], params['fc.bias'])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "params['fc.weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "params['fc.bias']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_30": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_48": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_51": {
                "num_features": {
                    "value": "196",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_56": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_58": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_72": {
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_73": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_76": {
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_77": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_80": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_81": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_130": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_132": {
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_223": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "K_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_225": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_227": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_228": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_233": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "K_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_235": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_237": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}