{
    "controller.py": {
        "torch": {
            "Linear_11": {
                "variable": {
                    "value": "self.fc1",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_inputs",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_hiddens",
                    "possible_values": []
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.fc2",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_hiddens",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_outputs",
                    "possible_values": []
                }
            },
            "cat_25": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, last_read)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sigmoid_26": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "possible_values": []
                }
            },
            "sigmoid_27": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "possible_values": []
                }
            }
        }
    },
    "memory.py": {
        "torch": {
            "squeeze_140": {
                "variable": {
                    "value": "w",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "possible_values": [
                        [
                            "torch.squeeze(w)",
                            "Call"
                        ],
                        [
                            "self._sharpen(\u0175, \u03b3)",
                            "Call"
                        ],
                        [
                            "F.cosine_similarity(memory, k, -1, 1e-16)",
                            "Call"
                        ],
                        [
                            "F.softmax(\u03b2 * w, dim=-1)",
                            "Call"
                        ],
                        [
                            "\u0175 ** \u03b3",
                            "BinOp"
                        ],
                        [
                            "torch.div(w, torch.sum(w, dim=-1) + 1e-16)",
                            "Call"
                        ],
                        [
                            "self.address(k, \u03b2, g, s, \u03b3, memory, self.w_last[-1])",
                            "Call"
                        ],
                        [
                            "torch.squeeze(w)",
                            "Call"
                        ],
                        [
                            "self.address(k, \u03b2, g, s, \u03b3, memory, self.w_last[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_141": {
                "variable": {
                    "value": "t",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w[-1:], w, w[:1]]",
                    "possible_values": []
                }
            },
            "conv1d_142": {
                "variable": {
                    "value": "c",
                    "possible_values": []
                },
                "input": {
                    "value": "t.view(1, 1, -1)",
                    "possible_values": []
                },
                "weight": {
                    "value": "s.view(1, 1, -1)",
                    "possible_values": []
                }
            },
            "cosine_similarity_36": {
                "variable": {
                    "value": "w",
                    "possible_values": []
                },
                "x1": {
                    "value": "memory",
                    "possible_values": []
                },
                "x2": {
                    "value": "k",
                    "possible_values": [
                        [
                            "F.tanh(k)",
                            "Call"
                        ],
                        [
                            "F.tanh(k)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-16",
                    "possible_values": []
                }
            },
            "softmax_37": {
                "variable": {
                    "value": "w",
                    "possible_values": []
                },
                "input": {
                    "value": "\u03b2 * w",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "zeros_44": {
                "variable": {
                    "value": "result",
                    "possible_values": []
                },
                "*size": {
                    "value": "wg.size()",
                    "possible_values": []
                }
            },
            "div_50": {
                "variable": {
                    "value": "w",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "possible_values": [
                        [
                            "torch.squeeze(w)",
                            "Call"
                        ],
                        [
                            "self._sharpen(\u0175, \u03b3)",
                            "Call"
                        ],
                        [
                            "F.cosine_similarity(memory, k, -1, 1e-16)",
                            "Call"
                        ],
                        [
                            "F.softmax(\u03b2 * w, dim=-1)",
                            "Call"
                        ],
                        [
                            "\u0175 ** \u03b3",
                            "BinOp"
                        ],
                        [
                            "torch.div(w, torch.sum(w, dim=-1) + 1e-16)",
                            "Call"
                        ],
                        [
                            "self.address(k, \u03b2, g, s, \u03b3, memory, self.w_last[-1])",
                            "Call"
                        ],
                        [
                            "torch.squeeze(w)",
                            "Call"
                        ],
                        [
                            "self.address(k, \u03b2, g, s, \u03b3, memory, self.w_last[-1])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.sum(w, dim=-1) + 1e-16",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.fc_read",
                    "possible_values": []
                },
                "in_features": {
                    "value": "controller_out",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.read_lengths",
                    "possible_values": []
                }
            },
            "split_74": {
                "variable": {
                    "value": "(k, \u03b2, g, s, \u03b3)",
                    "possible_values": []
                },
                "tensor": {
                    "value": "param",
                    "possible_values": [
                        [
                            "self.fc_read(x)",
                            "Call"
                        ],
                        [
                            "self.fc_write(x)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[self.N, 1, 1, 3, 1]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "tanh_76": {
                "variable": {
                    "value": "k",
                    "possible_values": []
                },
                "input": {
                    "value": "k",
                    "possible_values": [
                        [
                            "F.tanh(k)",
                            "Call"
                        ],
                        [
                            "F.tanh(k)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_77": {
                "variable": {
                    "value": "\u03b2",
                    "possible_values": []
                },
                "input": {
                    "value": "\u03b2",
                    "possible_values": [
                        [
                            "F.softplus(\u03b2)",
                            "Call"
                        ],
                        [
                            "F.softplus(\u03b2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_78": {
                "variable": {
                    "value": "g",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "possible_values": [
                        [
                            "F.sigmoid(g)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(g)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_79": {
                "variable": {
                    "value": "s",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "possible_values": [
                        [
                            "F.softmax(s, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(s, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Linear_94": {
                "variable": {
                    "value": "self.fc_write",
                    "possible_values": []
                },
                "in_features": {
                    "value": "controller_out",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.write_lengths",
                    "possible_values": []
                }
            },
            "squeeze_104": {
                "variable": {
                    "value": "w",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "possible_values": [
                        [
                            "torch.squeeze(w)",
                            "Call"
                        ],
                        [
                            "self._sharpen(\u0175, \u03b3)",
                            "Call"
                        ],
                        [
                            "F.cosine_similarity(memory, k, -1, 1e-16)",
                            "Call"
                        ],
                        [
                            "F.softmax(\u03b2 * w, dim=-1)",
                            "Call"
                        ],
                        [
                            "\u0175 ** \u03b3",
                            "BinOp"
                        ],
                        [
                            "torch.div(w, torch.sum(w, dim=-1) + 1e-16)",
                            "Call"
                        ],
                        [
                            "self.address(k, \u03b2, g, s, \u03b3, memory, self.w_last[-1])",
                            "Call"
                        ],
                        [
                            "torch.squeeze(w)",
                            "Call"
                        ],
                        [
                            "self.address(k, \u03b2, g, s, \u03b3, memory, self.w_last[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_105": {
                "variable": {
                    "value": "e",
                    "possible_values": []
                },
                "input": {
                    "value": "e",
                    "possible_values": [
                        [
                            "torch.squeeze(e)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(e)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_106": {
                "variable": {
                    "value": "a",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "possible_values": [
                        [
                            "torch.squeeze(a)",
                            "Call"
                        ],
                        [
                            "F.tanh(a)",
                            "Call"
                        ]
                    ]
                }
            },
            "ger_108": {
                "variable": {
                    "value": "erase",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "possible_values": [
                        [
                            "torch.squeeze(w)",
                            "Call"
                        ],
                        [
                            "self._sharpen(\u0175, \u03b3)",
                            "Call"
                        ],
                        [
                            "F.cosine_similarity(memory, k, -1, 1e-16)",
                            "Call"
                        ],
                        [
                            "F.softmax(\u03b2 * w, dim=-1)",
                            "Call"
                        ],
                        [
                            "\u0175 ** \u03b3",
                            "BinOp"
                        ],
                        [
                            "torch.div(w, torch.sum(w, dim=-1) + 1e-16)",
                            "Call"
                        ],
                        [
                            "self.address(k, \u03b2, g, s, \u03b3, memory, self.w_last[-1])",
                            "Call"
                        ],
                        [
                            "torch.squeeze(w)",
                            "Call"
                        ],
                        [
                            "self.address(k, \u03b2, g, s, \u03b3, memory, self.w_last[-1])",
                            "Call"
                        ]
                    ]
                },
                "vec2": {
                    "value": "e",
                    "possible_values": [
                        [
                            "torch.squeeze(e)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(e)",
                            "Call"
                        ]
                    ]
                }
            },
            "ger_109": {
                "variable": {
                    "value": "add",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "possible_values": [
                        [
                            "torch.squeeze(w)",
                            "Call"
                        ],
                        [
                            "self._sharpen(\u0175, \u03b3)",
                            "Call"
                        ],
                        [
                            "F.cosine_similarity(memory, k, -1, 1e-16)",
                            "Call"
                        ],
                        [
                            "F.softmax(\u03b2 * w, dim=-1)",
                            "Call"
                        ],
                        [
                            "\u0175 ** \u03b3",
                            "BinOp"
                        ],
                        [
                            "torch.div(w, torch.sum(w, dim=-1) + 1e-16)",
                            "Call"
                        ],
                        [
                            "self.address(k, \u03b2, g, s, \u03b3, memory, self.w_last[-1])",
                            "Call"
                        ],
                        [
                            "torch.squeeze(w)",
                            "Call"
                        ],
                        [
                            "self.address(k, \u03b2, g, s, \u03b3, memory, self.w_last[-1])",
                            "Call"
                        ]
                    ]
                },
                "vec2": {
                    "value": "a",
                    "possible_values": [
                        [
                            "torch.squeeze(a)",
                            "Call"
                        ],
                        [
                            "F.tanh(a)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_119": {
                "variable": {
                    "value": "(k, \u03b2, g, s, \u03b3, a, e)",
                    "possible_values": []
                },
                "tensor": {
                    "value": "param",
                    "possible_values": [
                        [
                            "self.fc_read(x)",
                            "Call"
                        ],
                        [
                            "self.fc_write(x)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[self.N, 1, 1, 3, 1, self.N, self.N]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "tanh_121": {
                "variable": {
                    "value": "k",
                    "possible_values": []
                },
                "input": {
                    "value": "k",
                    "possible_values": [
                        [
                            "F.tanh(k)",
                            "Call"
                        ],
                        [
                            "F.tanh(k)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_122": {
                "variable": {
                    "value": "\u03b2",
                    "possible_values": []
                },
                "input": {
                    "value": "\u03b2",
                    "possible_values": [
                        [
                            "F.softplus(\u03b2)",
                            "Call"
                        ],
                        [
                            "F.softplus(\u03b2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_123": {
                "variable": {
                    "value": "g",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "possible_values": [
                        [
                            "F.sigmoid(g)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(g)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_124": {
                "variable": {
                    "value": "s",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "possible_values": [
                        [
                            "F.softmax(s, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(s, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "tanh_126": {
                "variable": {
                    "value": "a",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "possible_values": [
                        [
                            "torch.squeeze(a)",
                            "Call"
                        ],
                        [
                            "F.tanh(a)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_127": {
                "variable": {
                    "value": "e",
                    "possible_values": []
                },
                "input": {
                    "value": "e",
                    "possible_values": [
                        [
                            "torch.squeeze(e)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(e)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_70": {
                "input": {
                    "value": "w",
                    "possible_values": [
                        [
                            "torch.squeeze(w)",
                            "Call"
                        ],
                        [
                            "self._sharpen(\u0175, \u03b3)",
                            "Call"
                        ],
                        [
                            "F.cosine_similarity(memory, k, -1, 1e-16)",
                            "Call"
                        ],
                        [
                            "F.softmax(\u03b2 * w, dim=-1)",
                            "Call"
                        ],
                        [
                            "\u0175 ** \u03b3",
                            "BinOp"
                        ],
                        [
                            "torch.div(w, torch.sum(w, dim=-1) + 1e-16)",
                            "Call"
                        ],
                        [
                            "self.address(k, \u03b2, g, s, \u03b3, memory, self.w_last[-1])",
                            "Call"
                        ],
                        [
                            "torch.squeeze(w)",
                            "Call"
                        ],
                        [
                            "self.address(k, \u03b2, g, s, \u03b3, memory, self.w_last[-1])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "memory",
                    "possible_values": []
                }
            },
            "zeros_22": {
                "*size": {
                    "value": "[1, self.M]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "softplus_80": {
                "input": {
                    "value": "\u03b3",
                    "possible_values": [
                        [
                            "1 + F.softplus(\u03b3)",
                            "BinOp"
                        ],
                        [
                            "1 + F.softplus(\u03b3)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softplus_125": {
                "input": {
                    "value": "\u03b3",
                    "possible_values": [
                        [
                            "1 + F.softplus(\u03b3)",
                            "BinOp"
                        ],
                        [
                            "1 + F.softplus(\u03b3)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_50": {
                "input": {
                    "value": "w",
                    "possible_values": [
                        [
                            "torch.squeeze(w)",
                            "Call"
                        ],
                        [
                            "self._sharpen(\u0175, \u03b3)",
                            "Call"
                        ],
                        [
                            "F.cosine_similarity(memory, k, -1, 1e-16)",
                            "Call"
                        ],
                        [
                            "F.softmax(\u03b2 * w, dim=-1)",
                            "Call"
                        ],
                        [
                            "\u0175 ** \u03b3",
                            "BinOp"
                        ],
                        [
                            "torch.div(w, torch.sum(w, dim=-1) + 1e-16)",
                            "Call"
                        ],
                        [
                            "self.address(k, \u03b2, g, s, \u03b3, memory, self.w_last[-1])",
                            "Call"
                        ],
                        [
                            "torch.squeeze(w)",
                            "Call"
                        ],
                        [
                            "self.address(k, \u03b2, g, s, \u03b3, memory, self.w_last[-1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            }
        }
    },
    "ntm.py": {
        "torch": {
            "zeros_19": {
                "variable": {
                    "value": "self.memory",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.M",
                    "possible_values": []
                },
                "out": {
                    "value": "self.N",
                    "possible_values": []
                }
            },
            "zeros_20": {
                "variable": {
                    "value": "self.last_read",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "self.N",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.fc_out",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.num_inputs + N",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_outputs",
                    "possible_values": []
                }
            },
            "cat_37": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(X, self.last_read)",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "sigmoid_38": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_out(out)",
                    "possible_values": []
                }
            },
            "tanh_54": {
                "variable": {
                    "value": "self.last_read",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.randn(1, self.N)",
                    "possible_values": []
                }
            },
            "zeros_32": {
                "variable": {
                    "value": "X",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_inputs",
                    "possible_values": []
                }
            },
            "randn_54": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "self.N",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "DataLoader_81": {
                "variable": {
                    "value": "dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "BinaySeqDataset(args)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "BCELoss_94": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "RMSprop_95": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "possible_values": []
                }
            },
            "from_numpy_21": {
                "variable": {
                    "value": "seq",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "seq",
                    "possible_values": [
                        [
                            "np.random.binomial(1, 0.5, (self.seq_len, self.seq_width))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(seq)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_23": {
                "variable": {
                    "value": "inp",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.seq_len + 2",
                    "possible_values": []
                },
                "out": {
                    "value": "self.seq_width",
                    "possible_values": []
                }
            },
            "zeros_121": {
                "variable": {
                    "value": "y_pred",
                    "possible_values": []
                },
                "*size": {
                    "value": "Y.size()",
                    "possible_values": []
                }
            },
            "load_104": {
                "f": {
                    "value": "args.loadmodel",
                    "possible_values": []
                }
            },
            "save_149": {
                "obj": {
                    "value": "model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "args.savemodel",
                    "possible_values": []
                }
            }
        }
    }
}