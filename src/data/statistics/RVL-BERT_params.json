{
    "external/pytorch_pretrained_bert/modeling.py": {
        "tensorflow": {
            "list_variables_67": {
                "variable": {
                    "value": "init_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_72": {
                "variable": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_110": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_242": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_243": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_244": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_249": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_253": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_279": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_280": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_281": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_283": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_300": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_312": {
                "variable": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_325": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_327": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_355": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_370": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_372": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_404": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(layer) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_427": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_428": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_442": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_463": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bert_model_embedding_weights.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bert_model_embedding_weights.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_467": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(bert_model_embedding_weights.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_488": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_499": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_985": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_986": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_1050": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1051": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_1120": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1121": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_1196": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_124": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_256": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_604": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(serialization_dir, WEIGHTS_NAME)",
                            "Call"
                        ],
                        [
                            "os.path.join(serialization_dir, TF_WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "'cpu' if not torch.cuda.is_available() else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ones_like_712": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_714": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_804": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_867": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_929": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_995": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1064": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1130": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1217": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "erf_120": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_227": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_228": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_306": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_467": {
                "*size": {
                    "value": "bert_model_embedding_weights.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_227": {
                "*size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_228": {
                "*size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sqrt_234": {
                "input": {
                    "value": "s + self.variance_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_604": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "external/pytorch_pretrained_bert/modeling_gpt2.py": {
        "tensorflow": {
            "list_variables_60": {
                "variable": {
                    "value": "init_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.abspath(gpt2_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_65": {
                "variable": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.abspath(gpt2_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "name[6:]",
                            "Subscript"
                        ],
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_96": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_186": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.n_embd",
                            "Attribute"
                        ],
                        [
                            "config.n_embd",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "nf",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_188": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.empty(nx, nf)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k)",
                            "Call"
                        ],
                        [
                            "w / math.sqrt(v.size(-1))",
                            "BinOp"
                        ],
                        [
                            "w * b - 10000000000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "nn.Softmax(dim=-1)(w)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_189": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(nf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "addmm_193": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat1": {
                    "value": "x.view(-1, x.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_212": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_245": {
                "variable": {
                    "value": "present",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(key.transpose(-2, -1), value)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_293": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_309": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_516": {
                "variable": {
                    "value": "self.wte",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_517": {
                "variable": {
                    "value": "self.wpe",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.n_positions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_519": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(block) for _ in range(config.n_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "matmul_220": {
                "input": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.empty(nx, nf)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k)",
                            "Call"
                        ],
                        [
                            "w / math.sqrt(v.size(-1))",
                            "BinOp"
                        ],
                        [
                            "w * b - 10000000000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "nn.Softmax(dim=-1)(w)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_243": {
                "variable": {
                    "value": "key",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_key, key)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_value, value)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_418": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resolved_archive_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cached_path(archive_file, cache_dir=cache_dir)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "'cpu' if not torch.cuda.is_available() else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "arange_531": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "past_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "past[0][0].size(-2)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "input_ids.size(-1) + past_length",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_609": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_677": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_680": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_101": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_189": {
                "*size": {
                    "value": "nf",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tril_204": {
                "input": {
                    "value": "torch.ones(n_ctx, n_ctx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_219": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_204": {
                "*size": {
                    "value": "n_ctx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "n_ctx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pow_101": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.addmm(self.bias, x.view(-1, x.size(-1)), self.weight)",
                            "Call"
                        ],
                        [
                            "x.view(*size_out)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_418": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "external/pytorch_pretrained_bert/modeling_transfo_xl.py": {
        "tensorflow": {
            "list_variables_141": {
                "variable": {
                    "value": "init_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_variable_145": {
                "variable": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "ger_328": {
                "variable": {
                    "value": "sinusoid_inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.arange(klen - 1, -1, -1.0, device=word_emb.device, dtype=word_emb.dtype)",
                            "Call"
                        ],
                        [
                            "torch.arange(klen - 1, -1, -1.0, device=word_emb.device, dtype=word_emb.dtype)",
                            "Call"
                        ]
                    ]
                },
                "vec2": {
                    "value": "self.inv_freq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_329": {
                "variable": {
                    "value": "pos_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sinusoid_inp.sin(), sinusoid_inp.cos()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_345": {
                "variable": {
                    "value": "self.CoreNet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(d_model, d_inner)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_382": {
                "variable": {
                    "value": "self.q_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_383": {
                "variable": {
                    "value": "self.kv_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2 * n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_385": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_386": {
                "variable": {
                    "value": "self.dropatt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropatt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_387": {
                "variable": {
                    "value": "self.o_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "chunk_416": {
                "variable": {
                    "value": "(head_k, head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.kv_net(c)",
                    "type": "Call",
                    "possible_values": []
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_423": {
                "variable": {
                    "value": "attn_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(head_q, head_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_432": {
                "variable": {
                    "value": "attn_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('ibnd,jbnd->ijbn', (head_q, head_k))",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[None, :, :, None], -1e+30).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[:, :, :, None], -1e+30).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_436": {
                "variable": {
                    "value": "attn_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(attn_prob, head_v)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_464": {
                "variable": {
                    "value": "self.qkv_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "3 * n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_466": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_467": {
                "variable": {
                    "value": "self.dropatt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropatt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_468": {
                "variable": {
                    "value": "self.o_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_484": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "triu_486": {
                "variable": {
                    "value": "mask[:m, :m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[:m, :m]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tril_487": {
                "variable": {
                    "value": "mask[-m:, -m:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[-m:, -m:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_514": {
                "variable": {
                    "value": "zero_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "zero_pad_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(x.size(0), 1) + x.size()[2:]",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_515": {
                "variable": {
                    "value": "x_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zero_pad, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_535": {
                "variable": {
                    "value": "self.r_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_head * self.d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_569": {
                "variable": {
                    "value": "AC",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(rw_head_q, w_head_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_572": {
                "variable": {
                    "value": "BD",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(rr_head_q, r_head_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_589": {
                "variable": {
                    "value": "attn_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('ibnd,jbnd->ijbn', (head_q, head_k))",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[None, :, :, None], -1e+30).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[:, :, :, None], -1e+30).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_593": {
                "variable": {
                    "value": "attn_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(attn_prob, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_657": {
                "variable": {
                    "value": "AC",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(rw_head_q, w_head_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_658": {
                "variable": {
                    "value": "B_",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(w_head_q, r_emb)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_674": {
                "variable": {
                    "value": "attn_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('ibnd,jbnd->ijbn', (head_q, head_k))",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[None, :, :, None], -1e+30).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[:, :, :, None], -1e+30).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_678": {
                "variable": {
                    "value": "attn_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(attn_prob, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_768": {
                "variable": {
                    "value": "self.emb_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_769": {
                "variable": {
                    "value": "self.emb_projs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_1035": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_1050": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_174": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "tf_weights[name]",
                            "Subscript"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_396": {
                "variable": {
                    "value": "self.r_r_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_397": {
                "variable": {
                    "value": "self.r_w_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_407": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_477": {
                "variable": {
                    "value": "self.r_r_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_478": {
                "variable": {
                    "value": "self.r_w_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_496": {
                "variable": {
                    "value": "zero_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.size(0), qlen - 1, x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_499": {
                "variable": {
                    "value": "zero_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_503": {
                "variable": {
                    "value": "x_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zero_pad, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_505": {
                "variable": {
                    "value": "x_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, zero_pad]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_523": {
                "variable": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.size(0), x.size(1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_541": {
                "variable": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, w]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_548": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_557": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_624": {
                "variable": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, w]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_629": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_637": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_647": {
                "variable": {
                    "value": "r_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r_emb_pad, r_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_649": {
                "variable": {
                    "value": "r_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r_bias_pad, r_bias]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_791": {
                "variable": {
                    "value": "emb_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[inp_flat.size(0), self.d_proj]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "param.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "param.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_941": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resolved_archive_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cached_path(archive_file, cache_dir=cache_dir)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "'cpu' if not torch.cuda.is_available() else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Parameter_1047": {
                "variable": {
                    "value": "self.r_w_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_1048": {
                "variable": {
                    "value": "self.r_r_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_1165": {
                "variable": {
                    "value": "pos_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "klen - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "word_emb.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "word_emb.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1316": {
                "variable": {
                    "value": "self.out_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.n_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_166": {
                "variable": {
                    "value": "p_i.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "arr_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array[i, ...]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_346": {
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_inner",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4096",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_346": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_347": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_348": {
                "in_features": {
                    "value": "d_inner",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4096",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_349": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linear_787": {
                "variable": {
                    "value": "embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.emb_layers[0](inp)",
                            "Call"
                        ],
                        [
                            "F.linear(embed, self.emb_projs[0])",
                            "Call"
                        ],
                        [
                            "emb_flat.view(embed_shape)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.emb_projs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linear_804": {
                "variable": {
                    "value": "emb_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.emb_layers[i](inp_i)",
                            "Call"
                        ],
                        [
                            "F.linear(emb_i, self.emb_projs[i])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.emb_projs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_1087": {
                "variable": {
                    "value": "self.r_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.n_layer, self.max_klen, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_1089": {
                "variable": {
                    "value": "self.r_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.n_layer, self.max_klen, self.n_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_1112": {
                "variable": {
                    "value": "empty",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.mem_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "data.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "param.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "param.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_1132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_1138": {
                "variable": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems[i], hids[i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_772": {
                "num_embeddings": {
                    "value": "n_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_embed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "sparse": {
                    "value": "sample_softmax > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "triu_1160": {
                "input": {
                    "value": "word_emb.new_ones(qlen, klen)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1 + mlen",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_1192": {
                "variable": {
                    "value": "pos_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "klen - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "word_emb.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "word_emb.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_324": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": []
                },
                "step": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tril_524": {
                "input": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones((x.size(0), x.size(1)))",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "x.size(1) - x.size(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_775": {
                "data": {
                    "value": "torch.Tensor(d_proj, d_embed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_780": {
                "num_embeddings": {
                    "value": "r_idx - l_idx",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_emb_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_embed // div_val ** i",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_781": {
                "data": {
                    "value": "torch.Tensor(d_proj, d_emb_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_1094": {
                "variable": {
                    "value": "self.r_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.n_layer, self.max_klen, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_1372": {
                "input": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sample_logits(self.transformer.word_emb, self.out_layer.bias, target, pred_hid, self.sampler)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_available_941": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "triu_1157": {
                "input": {
                    "value": "all_ones",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "word_emb.new_ones(qlen, klen)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "1 + mlen",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tril_1158": {
                "input": {
                    "value": "all_ones",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "word_emb.new_ones(qlen, klen)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "-mask_shift_len",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1218": {
                "variable": {
                    "value": "cur_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cur_emb_pad, cur_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "common/backbone/resnet/resnet.py": {
        "torch": {
            "Conv2d_32": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_51": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1 if not stride_in_1x1 else stride",
                    "type": "IfExp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_80": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride if not stride_in_1x1 else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_91": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_93": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_94": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_128": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_129": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_130": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_147": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_148": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_161": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_173": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "load_271": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_306": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_341": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_376": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_411": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Conv2d_162": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_164": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "common/callbacks/epoch_end_callbacks/checkpoint.py": {
        "torch": {
            "save_21": {
                "obj": {
                    "value": "checkpoint_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "param_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'{}-{:04d}.model'.format(self.prefix, epoch_num)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_24": {
                "obj": {
                    "value": "checkpoint_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "best_param_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'{}-best.model'.format(self.prefix)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "common/fast_rcnn.py": {
        "torch": {
            "Sequential_110": {
                "variable": {
                    "value": "self.obj_downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Dropout(p=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_262": {
                "variable": {
                    "value": "feats_to_downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(coord_embed.view((coord_embed.shape[0], -1)), feats_to_downsample)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_158": {
                "variable": {
                    "value": "rois",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(boxes, union_boxes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "rois",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros_like(rois)[:, 0].view(-1, 1), rois)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_164": {
                "variable": {
                    "value": "rois",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(box_inds[:, 0, None].type(boxes.dtype), boxes[box_inds[:, 0], box_inds[:, 1]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_33": {
                "variable": {
                    "value": "self.object_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "81",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_74": {
                "variable": {
                    "value": "self.object_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "81",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.roi_head_feature_extractor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_108": {
                "variable": {
                    "value": "self.regularizing_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "81",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_111": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_112": {
                "in_features": {
                    "value": "2 * 2048 + (128 if config.NETWORK.IMAGE_SEMANTIC else 0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "final_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_113": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_123": {
                "variable": {
                    "value": "pretrained_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.pretrained_model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cat_152": {
                "variable": {
                    "value": "img_feats[body4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img_feats['body4']] * box_inds.shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_209": {
                "variable": {
                    "value": "new_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[rels_cand.shape[0], 4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "boxes.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_210": {
                "variable": {
                    "value": "post_roialign",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(box_inds.shape[0], 2048)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "boxes.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_211": {
                "variable": {
                    "value": "post_roialign_raw",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(box_inds.shape[0], 2048, 14, 14)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "boxes.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_250": {
                "tensors": {
                    "value": "(post_roialign, self.object_embed(obj_labels))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_247": {
                "input": {
                    "value": "obj_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.regularizing_predictor(post_roialign)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "obj_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "classes[box_inds[:, 0], box_inds[:, 1]].type(torch.long) if classes is not None else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cat_256": {
                "tensors": {
                    "value": "(boxes[box_inds[:, 0], box_inds[:, 1]], im_info[box_inds[:, 0], :2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_87": {
                "kernel_size": {
                    "value": "7 if not self.c5_dilated else 14",
                    "type": "IfExp",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_160": {
                "input": {
                    "value": "rois",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((boxes, union_boxes))",
                            "Call"
                        ],
                        [
                            "torch.cat((torch.zeros_like(rois)[:, 0].view(-1, 1), rois), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((box_inds[:, 0, None].type(boxes.dtype), boxes[box_inds[:, 0], box_inds[:, 1]]), 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "common/lib/roi_pooling/debug.py": {
        "torch": {
            "device_8": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "arange_10": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "81 * 2 * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_11": {
                "variable": {
                    "value": "rois",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "common/lib/roi_pooling/roi_align.py": {
        "torch": {}
    },
    "common/lib/roi_pooling/roi_pool.py": {
        "torch": {}
    },
    "common/lib/roi_pooling/setup.py": {
        "torch": {
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "common/lr_scheduler.py": {
        "torch": {}
    },
    "common/metrics/composite_eval_metric.py": {
        "torch": {}
    },
    "common/metrics/eval_metric.py": {
        "torch": {
            "tensor_35": {
                "variable": {
                    "value": "self.num_inst",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "variable": {
                    "value": "self.sum_metric",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "common/metrics/pretrain_metrics.py": {
        "torch": {
            "no_grad_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "common/metrics/refcoco_metrics.py": {
        "torch": {
            "arange_29": {
                "variable": {
                    "value": "batch_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "cls_logits.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "common/metrics/spasen_metrics.py": {
        "torch": {
            "arange_29": {
                "variable": {
                    "value": "batch_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "cls_logits.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "round_50": {
                "input": {
                    "value": "cls_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs['label_logits']",
                            "Subscript"
                        ],
                        [
                            "outputs['label_logits']",
                            "Subscript"
                        ],
                        [
                            "cls_logits.view((-1, 2))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "common/metrics/vcr_metrics.py": {
        "torch": {
            "no_grad_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "common/metrics/vqa_metrics.py": {
        "torch": {
            "arange_29": {
                "variable": {
                    "value": "batch_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "cls_logits.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "common/metrics/vrd_metrics.py": {
        "torch": {
            "arange_29": {
                "variable": {
                    "value": "batch_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "cls_logits.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "common/module.py": {
        "torch": {}
    },
    "common/nlp/bert/optimization.py": {
        "torch": {
            "zeros_like_153": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_155": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "common/nlp/bert_encoder_wrapper.py": {
        "torch": {
            "Linear_11": {
                "variable": {
                    "value": "self.input_transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bert_config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_15": {
                "variable": {
                    "value": "self.position_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "bert_config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "bert_config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_17": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "bert_config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_42": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "common/nlp/encoder_base.py": {
        "torch": {
            "arange_64": {
                "variable": {
                    "value": "index_range",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "len(sequence_lengths)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "sequence_lengths.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_150": {
                "variable": {
                    "value": "num_valid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_157": {
                "variable": {
                    "value": "packed_sequence_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sorted_inputs[:num_valid, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "lengths": {
                    "value": "sorted_sequence_lengths[:num_valid].data.tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_238": {
                "tensors": {
                    "value": "[state, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "common/nlp/input_variational_dropout.py": {
        "torch": {
            "dropout_29": {
                "variable": {
                    "value": "dropout_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_tensor.data.new_ones(input_tensor.shape[0], input_tensor.shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "common/nlp/misc.py": {
        "torch": {
            "zeros_27": {
                "variable": {
                    "value": "align_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(l0, l1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_28": {
                "start": {
                    "value": "l1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(aligned_ids)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "common/nlp/roberta/modeling_roberta.py": {
        "torch": {
            "Linear_230": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_233": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_234": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(config.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_311": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_312": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_313": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_319": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dense(features)",
                            "Call"
                        ],
                        [
                            "gelu(x)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x) + self.bias",
                            "BinOp"
                        ],
                        [
                            "features[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_60": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.padding_idx + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "seq_length + self.padding_idx + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_218": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_234": {
                "*size": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_296": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_299": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "common/nlp/roberta/utils.py": {
        "torch": {}
    },
    "common/nlp/time_distributed.py": {
        "torch": {}
    },
    "common/trainer.py": {
        "torch": {
            "clip_grad_norm__145": {
                "variable": {
                    "value": "total_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip_grad_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_grad_norm__148": {
                "variable": {
                    "value": "total_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip_grad_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "common/utils/bbox.py": {
        "torch": {
            "log_25": {
                "variable": {
                    "value": "targets_dw",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_widths / ex_widths.clamp(min=1e-06)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_26": {
                "variable": {
                    "value": "targets_dh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_heights / ex_heights.clamp(min=1e-06)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_28": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(targets_dx.view(-1, 1), targets_dy.view(-1, 1), targets_dw.view(-1, 1), targets_dh.view(-1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "meshgrid_71": {
                "variable": {
                    "value": "(n_mesh, k_mesh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[torch.arange(n_), torch.arange(k_)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_79": {
                "variable": {
                    "value": "xA",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x11",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_80": {
                "variable": {
                    "value": "yA",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y11",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "min_81": {
                "variable": {
                    "value": "xB",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x12",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "min_82": {
                "variable": {
                    "value": "yB",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y12",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_65": {
                "tensors": {
                    "value": "(sin_embedding, cos_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_83": {
                "input": {
                    "value": "yB - yA + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_61": {
                "start": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "boxes.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "boxes.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_71": {
                "start": {
                    "value": "k_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query_boxes.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "common/utils/clip_pad.py": {
        "torch": {
            "as_tensor_12": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(tensor)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(tensor)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(tensor)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_31": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(tensor)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(tensor)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(tensor)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_43": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(tensor)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(tensor)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(tensor)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_52": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(tensor)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(tensor)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(tensor)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_17": {
                "*size": {
                    "value": "(tensor.shape[0], h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "*size": {
                    "value": "(K, d)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_44": {
                "*size": {
                    "value": "(pad_length,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_53": {
                "*size": {
                    "value": "*pad_shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "common/utils/flatten.py": {
        "torch": {}
    },
    "common/utils/load.py": {
        "torch": {
            "load_25": {
                "variable": {
                    "value": "check_point",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'{}-{:04d}.model'.format(model_prefix, config.TRAIN.BEGIN_EPOCH - 1)",
                            "Call"
                        ],
                        [
                            "'{}-{:04d}.model'.format(model_prefix, epoch - 1)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_41": {
                "variable": {
                    "value": "check_point",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'{}-{:04d}.model'.format(model_prefix, config.TRAIN.BEGIN_EPOCH - 1)",
                            "Call"
                        ],
                        [
                            "'{}-{:04d}.model'.format(model_prefix, epoch - 1)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "common/utils/mask.py": {
        "torch": {
            "zeros_15": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "mask_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(14",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "common/utils/masked_softmax.py": {
        "torch": {
            "softmax_20": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_26": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vector * mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "common/utils/misc.py": {
        "torch": {
            "zeros_19": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(sum(rows), sum(cols))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "blocks[0].device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "blocks[0].dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_145": {
                "input": {
                    "value": "input[valid]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_143": {
                "input": {
                    "value": "input[valid]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_148": {
                "input": {
                    "value": "input[valid]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "common/utils/multi_task_dataloader.py": {
        "torch": {}
    },
    "common/utils/pad_sequence.py": {
        "torch": {}
    },
    "common/visual_linguistic_bert.py": {
        "torch": {
            "Embedding_38": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_39": {
                "variable": {
                    "value": "self.end_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_40": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_41": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_43": {
                "variable": {
                    "value": "self.embedding_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_347": {
                "variable": {
                    "value": "(grid_ind, grid_pos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(bs, dtype=torch.long, device=text_vl_embeddings.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(max_length, dtype=torch.long, device=text_vl_embeddings.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_353": {
                "variable": {
                    "value": "_zero_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(bs,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "text_vl_embeddings.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_395": {
                "variable": {
                    "value": "pretrained_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "language_pretrained_model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_534": {
                "variable": {
                    "value": "pretrained_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "language_pretrained_model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Linear_628": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_645": {
                "variable": {
                    "value": "self.region_cls_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.visual_region_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_660": {
                "variable": {
                    "value": "self.caption_image_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.visual_1x1_text",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.visual_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.visual_1x1_object",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.visual_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_58": {
                "variable": {
                    "value": "visual_scale_text",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.as_tensor(self.config.visual_scale_text_init, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_61": {
                "variable": {
                    "value": "visual_scale_object",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.as_tensor(self.config.visual_scale_object_init, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_83": {
                "variable": {
                    "value": "self.special_word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "NUM_SPECIAL_WORDS",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "variable": {
                    "value": "self.obj_feat_downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_99": {
                "variable": {
                    "value": "self.obj_feat_batchnorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "variable": {
                    "value": "self.lan_img_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "variable": {
                    "value": "self.lan_img_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AvgPool2d_104": {
                "variable": {
                    "value": "self.lan_img_avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_322": {
                "variable": {
                    "value": "spo_fused_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "spo_fused_masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(spo_fused_masks)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_92": {
                "variable": {
                    "value": "self.lan_img_conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_94": {
                "variable": {
                    "value": "self.lan_img_conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_95": {
                "variable": {
                    "value": "self.lan_img_conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "arange_347": {
                "start": {
                    "value": "bs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "text_vl_embeddings.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "text_vl_embeddings.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_348": {
                "start": {
                    "value": "max_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(text_mask.sum(1) + object_mask.sum(1)).max() + 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "text_vl_embeddings.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_58": {
                "data": {
                    "value": "self.config.visual_scale_text_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_61": {
                "data": {
                    "value": "self.config.visual_scale_object_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_232": {
                "variable": {
                    "value": "sub_text_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sub_text_emb] * 14",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_233": {
                "variable": {
                    "value": "sub_text_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sub_text_emb] * 14",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_237": {
                "variable": {
                    "value": "obj_text_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obj_text_emb] * 14",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_238": {
                "variable": {
                    "value": "obj_text_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obj_text_emb] * 14",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_243": {
                "variable": {
                    "value": "fused_sub",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fused_sub",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "object_visual_feat[i, 0] + sub_text_emb",
                            "BinOp"
                        ],
                        [
                            "self.lan_img_conv1(fused_sub.unsqueeze(0))",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(fused_sub)",
                            "Call"
                        ],
                        [
                            "object_visual_feat[i, 0] + sub_text_emb",
                            "BinOp"
                        ],
                        [
                            "self.lan_img_conv1(fused_sub.unsqueeze(0))",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(fused_sub)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_245": {
                "variable": {
                    "value": "fused_obj",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fused_obj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "object_visual_feat[i, 0] + obj_text_emb",
                            "BinOp"
                        ],
                        [
                            "self.lan_img_conv2(fused_obj.unsqueeze(0))",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(fused_obj)",
                            "Call"
                        ],
                        [
                            "object_visual_feat[i, 0] + obj_text_emb",
                            "BinOp"
                        ],
                        [
                            "self.lan_img_conv3(fused_obj.unsqueeze(0))",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(fused_obj)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_246": {
                "variable": {
                    "value": "spo_fused",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fused_sub, fused_obj)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_like_254": {
                "variable": {
                    "value": "spo_fused_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spo_fused",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((fused_sub, fused_obj))",
                            "Call"
                        ],
                        [
                            "self.lan_img_conv3(spo_fused).squeeze()",
                            "Call"
                        ],
                        [
                            "torch.cat((fused_sub, fused_pred, fused_obj))",
                            "Call"
                        ],
                        [
                            "self.lan_img_conv4(spo_fused).squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_275": {
                "variable": {
                    "value": "sub_text_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sub_text_emb] * 14",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_276": {
                "variable": {
                    "value": "sub_text_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sub_text_emb] * 14",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_280": {
                "variable": {
                    "value": "pred_text_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pred_text_emb] * 14",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_281": {
                "variable": {
                    "value": "pred_text_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pred_text_emb] * 14",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_285": {
                "variable": {
                    "value": "obj_text_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obj_text_emb] * 14",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "obj_text_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obj_text_emb] * 14",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_290": {
                "variable": {
                    "value": "fused_sub",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fused_sub",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "object_visual_feat[i, 0] + sub_text_emb",
                            "BinOp"
                        ],
                        [
                            "self.lan_img_conv1(fused_sub.unsqueeze(0))",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(fused_sub)",
                            "Call"
                        ],
                        [
                            "object_visual_feat[i, 0] + sub_text_emb",
                            "BinOp"
                        ],
                        [
                            "self.lan_img_conv1(fused_sub.unsqueeze(0))",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(fused_sub)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_292": {
                "variable": {
                    "value": "fused_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fused_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "object_visual_feat[i, 0] + pred_text_emb",
                            "BinOp"
                        ],
                        [
                            "self.lan_img_conv2(fused_pred.unsqueeze(0))",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(fused_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_294": {
                "variable": {
                    "value": "fused_obj",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fused_obj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "object_visual_feat[i, 0] + obj_text_emb",
                            "BinOp"
                        ],
                        [
                            "self.lan_img_conv2(fused_obj.unsqueeze(0))",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(fused_obj)",
                            "Call"
                        ],
                        [
                            "object_visual_feat[i, 0] + obj_text_emb",
                            "BinOp"
                        ],
                        [
                            "self.lan_img_conv3(fused_obj.unsqueeze(0))",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(fused_obj)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_295": {
                "variable": {
                    "value": "spo_fused",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fused_sub, fused_pred, fused_obj)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_like_307": {
                "variable": {
                    "value": "spo_fused_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spo_fused",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((fused_sub, fused_obj))",
                            "Call"
                        ],
                        [
                            "self.lan_img_conv3(spo_fused).squeeze()",
                            "Call"
                        ],
                        [
                            "torch.cat((fused_sub, fused_pred, fused_obj))",
                            "Call"
                        ],
                        [
                            "self.lan_img_conv4(spo_fused).squeeze()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "external/pytorch_pretrained_bert/convert_gpt2_checkpoint_to_pytorch.py": {
        "torch": {
            "save_45": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_weights_dump_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pytorch_dump_folder_path + '/' + WEIGHTS_NAME",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "external/pytorch_pretrained_bert/convert_openai_checkpoint_to_pytorch.py": {
        "torch": {
            "save_45": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_weights_dump_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pytorch_dump_folder_path + '/' + WEIGHTS_NAME",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "external/pytorch_pretrained_bert/convert_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_37": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_dump_path",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "external/pytorch_pretrained_bert/convert_transfo_xl_checkpoint_to_pytorch.py": {
        "torch": {
            "save_59": {
                "obj": {
                    "value": "corpus_vocab_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "corpus.vocab.__dict__",
                            "Attribute"
                        ]
                    ]
                },
                "f": {
                    "value": "pytorch_vocab_dump_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pytorch_dump_folder_path + '/' + VOCAB_NAME",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_65": {
                "obj": {
                    "value": "corpus_dict_no_vocab",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "corpus.__dict__",
                            "Attribute"
                        ]
                    ]
                },
                "f": {
                    "value": "pytorch_dataset_dump_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pytorch_dump_folder_path + '/' + CORPUS_NAME",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_86": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_weights_dump_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(pytorch_dump_folder_path, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "external/pytorch_pretrained_bert/modeling_openai.py": {
        "torch": {
            "from_numpy_72": {
                "variable": {
                    "value": "model.tokens_embed.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "init_params[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_73": {
                "variable": {
                    "value": "model.positions_embed.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "init_params[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_112": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_262": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attn_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_263": {
                "variable": {
                    "value": "self.resid_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_266": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_311": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_346": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_363": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_364": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_590": {
                "variable": {
                    "value": "self.tokens_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_tokens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.vocab_size + config.n_special",
                            "BinOp"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_591": {
                "variable": {
                    "value": "self.positions_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.n_positions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_592": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.embd_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_594": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(block) for _ in range(config.n_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Embedding_607": {
                "variable": {
                    "value": "self.tokens_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.config.total_tokens_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_121": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.addmm(self.bias, x.view(-1, x.size(-1)), self.weight)",
                            "Call"
                        ],
                        [
                            "x.view(*size_out)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_233": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.n_embd",
                            "Attribute"
                        ],
                        [
                            "config.n_embd",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "nf",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_235": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.empty(nx, nf)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k)",
                            "Call"
                        ],
                        [
                            "w / math.sqrt(v.size(-1))",
                            "BinOp"
                        ],
                        [
                            "w * b + -1000000000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "nn.Softmax(dim=-1)(w)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_236": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(nf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "addmm_243": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat1": {
                    "value": "x.view(-1, x.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_276": {
                "input": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.empty(nx, nf)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k)",
                            "Call"
                        ],
                        [
                            "w / math.sqrt(v.size(-1))",
                            "BinOp"
                        ],
                        [
                            "w * b + -1000000000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "nn.Softmax(dim=-1)(w)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_473": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resolved_archive_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cached_path(archive_file, cache_dir=cache_dir)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "'cpu' if not torch.cuda.is_available() else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "arange_620": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "input_ids.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_716": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_803": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_806": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_117": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tril_256": {
                "input": {
                    "value": "torch.ones(n_ctx, n_ctx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_274": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_236": {
                "*size": {
                    "value": "nf",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_256": {
                "*size": {
                    "value": "n_ctx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "n_ctx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pow_117": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.addmm(self.bias, x.view(-1, x.size(-1)), self.weight)",
                            "Call"
                        ],
                        [
                            "x.view(*size_out)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_473": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "external/pytorch_pretrained_bert/modeling_transfo_xl_utilities.py": {
        "torch": {
            "cat_315": {
                "variable": {
                    "value": "all_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[labels.view(-1), neg_samples]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_331": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[true_logits[:, :, None], sample_logits]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_393": {
                "variable": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_vocab",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10000",
                            "Constant"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_394": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_vocab",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10000",
                            "Constant"
                        ]
                    ]
                }
            },
            "ModuleList_52": {
                "variable": {
                    "value": "self.out_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_53": {
                "variable": {
                    "value": "self.out_projs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_49": {
                "variable": {
                    "value": "self.cluster_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.n_clusters, self.d_embed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_50": {
                "variable": {
                    "value": "self.cluster_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.n_clusters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_80": {
                "variable": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(n_vocab)",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_83": {
                "variable": {
                    "value": "proj_hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "proj.t().contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_84": {
                "variable": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_hid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(hidden, proj.t().contiguous())",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(n_vocab)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_145": {
                "variable": {
                    "value": "head_logprob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head_logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._compute_logit(hidden, head_weight, head_bias, head_proj)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, head_weight, head_bias, head_proj)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_240": {
                "variable": {
                    "value": "head_logprob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head_logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._compute_logit(hidden, head_weight, head_bias, head_proj)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, head_weight, head_bias, head_proj)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_273": {
                "variable": {
                    "value": "log_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "range_max + 2.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "multinomial_295": {
                "variable": {
                    "value": "neg_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "n_tries",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 * n_sample",
                            "BinOp"
                        ]
                    ]
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unique_295": {
                "variable": {
                    "value": "neg_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_120": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(hidden, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "F.linear(proj_hid, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_150": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target.view(-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "hidden.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "hidden.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_214": {
                "input": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(hidden, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "F.linear(proj_hid, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_294": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_326": {
                "equation": {
                    "value": "ijk,ijk->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[true_w, inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_328": {
                "equation": {
                    "value": "lk,ijk->ijl",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[sample_w, inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "*size": {
                    "value": "self.n_clusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.d_embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "*size": {
                    "value": "self.n_clusters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "in_features": {
                    "value": "d_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_token",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_134": {
                "variable": {
                    "value": "weight_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weight_i, self.cluster_weight]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_136": {
                "variable": {
                    "value": "bias_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bias_i, self.cluster_bias]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_179": {
                "variable": {
                    "value": "tail_logprob_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tail_logit_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._compute_logit(hidden_i, weight_i, bias_i, proj_i)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, weight_i, bias_i, proj_i)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_228": {
                "variable": {
                    "value": "weight_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weight_i, self.cluster_weight]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_230": {
                "variable": {
                    "value": "bias_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bias_i, self.cluster_bias]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_252": {
                "variable": {
                    "value": "tail_logprob_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tail_logit_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._compute_logit(hidden_i, weight_i, bias_i, proj_i)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, weight_i, bias_i, proj_i)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_71": {
                "data": {
                    "value": "torch.Tensor(d_proj, d_emb_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "in_features": {
                    "value": "d_emb_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_embed // div_val ** i",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "r_idx - l_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_117": {
                "input": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(hidden, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "F.linear(proj_hid, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_117": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "target.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_117": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_59": {
                "data": {
                    "value": "torch.Tensor(d_proj, d_embed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_59": {}
        }
    },
    "external/pytorch_pretrained_bert/optimization.py": {
        "torch": {
            "cos_26": {
                "input": {
                    "value": "math.pi * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_119": {
                "variable": {
                    "value": "state[next_m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_121": {
                "variable": {
                    "value": "state[next_v]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__128": {
                "parameters": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "group['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "external/pytorch_pretrained_bert/optimization_openai.py": {
        "torch": {
            "zeros_like_105": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_107": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_25": {
                "input": {
                    "value": "math.pi * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__116": {
                "parameters": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "group['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "external/pytorch_pretrained_bert/tokenization_transfo_xl.py": {
        "torch": {
            "load_88": {
                "variable": {
                    "value": "vocab_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resolved_vocab_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cached_path(vocab_file, cache_dir=cache_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_529": {
                "variable": {
                    "value": "corpus_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resolved_corpus_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cached_path(corpus_file, cache_dir=cache_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_609": {
                "variable": {
                    "value": "corpus",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fn_pickle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(datadir, 'cache.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_179": {
                "variable": {
                    "value": "encoded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encoded",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_192": {
                "variable": {
                    "value": "encoded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encoded",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_534": {
                "variable": {
                    "value": "corpus.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "corpus.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_536": {
                "variable": {
                    "value": "corpus.valid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "corpus.valid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_538": {
                "variable": {
                    "value": "corpus.test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "corpus.test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_631": {
                "obj": {
                    "value": "corpus",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(fn_pickle)",
                            "Call"
                        ],
                        [
                            "pickle.load(fp)",
                            "Call"
                        ],
                        [
                            "TransfoXLCorpus(datadir, dataset, **kwargs)",
                            "Call"
                        ],
                        [
                            "cls(*inputs, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(datadir, 'cache.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/launch.py": {
        "torch": {}
    },
    "spasen/data/build.py": {
        "torch": {}
    },
    "spasen/data/collate_batch.py": {
        "torch": {
            "as_tensor_44": {
                "variable": {
                    "value": "out[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "ibatch[self.data_names.index(name)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "data": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_57": {
                "tensors": {
                    "value": "tuple(items)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "spasen/data/datasets/spasen.py": {
        "torch": {
            "as_tensor_81": {
                "variable": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.concatenate((full_img_bbox, subj_bbox, union_bbox, obj_bbox))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_84": {
                "variable": {
                    "value": "im_info",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[iw, ih, 1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_96": {
                "variable": {
                    "value": "spo_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "subject_id + predicate_id + object_id",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_97": {
                "variable": {
                    "value": "spo_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[len(subject_id), len(object_id), len(predicate_id)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "spasen/data/datasets/util.py": {
        "torch": {
            "sum_82": {
                "input": {
                    "value": "torch.eq(torch.gt(logits, 0.0).float(), labels).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eq_82": {
                "input": {
                    "value": "torch.gt(logits, 0.0).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gt_82": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "spasen/data/samplers/distributed.py": {
        "torch": {
            "Generator_45": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_47": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_49": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "spasen/data/samplers/grouped_batch_sampler.py": {
        "torch": {
            "as_tensor_29": {
                "variable": {
                    "value": "self.group_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "group_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "as_tensor_41": {
                "variable": {
                    "value": "sampled_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.sampler)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_49": {
                "variable": {
                    "value": "order",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(dataset_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_50": {
                "variable": {
                    "value": "order[sampled_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "len(sampled_ids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_82": {
                "variable": {
                    "value": "first_index_of_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[inv_sampled_ids_map[s] for s in first_element_of_batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "unique_34": {
                "input": {
                    "value": "self.group_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_34": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "spasen/data/transforms/transforms.py": {
        "torch": {
            "as_tensor_83": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "masks.numpy()[:, :, ::-1].tolist()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "spasen/function/test.py": {
        "torch": {
            "load_54": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'{}-best.model'.format(model_prefix)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "no_grad_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_50": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "eval(config.MODULE)(config)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=device_ids).cuda()",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[int(d) for d in config.GPUS.split(',')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "interpolate_150": {
                "variable": {
                    "value": "mask2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[i].unsqueeze(0).unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_150": {
                "variable": {
                    "value": "mask2",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_52": {
                "device": {
                    "value": "device_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_103": {
                "tensors": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[v.item() for v in torch.cat(predictions)]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "spasen/function/train.py": {
        "torch": {
            "stack_285": {
                "variable": {
                    "value": "answers_word_embed_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "answers_word_embed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_330": {
                "variable": {
                    "value": "begin_epoch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "config.TRAIN.BEGIN_EPOCH",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_343": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.SGD(optimizer_grouped_parameters, lr=config.TRAIN.LR * batch_size, momentum=config.TRAIN.MOMENTUM, weight_decay=config.TRAIN.WD)",
                            "Call"
                        ],
                        [
                            "optim.Adam(optimizer_grouped_parameters, lr=config.TRAIN.LR * batch_size, weight_decay=config.TRAIN.WD)",
                            "Call"
                        ],
                        [
                            "optim.SGD(optimizer_grouped_parameters, lr=config.TRAIN.LR * batch_size, momentum=config.TRAIN.MOMENTUM, weight_decay=config.TRAIN.WD)",
                            "Call"
                        ],
                        [
                            "AdamW(optimizer_grouped_parameters, lr=config.TRAIN.LR * batch_size, betas=(0.9, 0.999), eps=1e-06, weight_decay=config.TRAIN.WD, correct_bias=True)",
                            "Call"
                        ],
                        [
                            "optim.Adam(optimizer_grouped_parameters, lr=config.TRAIN.LR * batch_size, weight_decay=config.TRAIN.WD)",
                            "Call"
                        ],
                        [
                            "AdamW(optimizer_grouped_parameters, lr=config.TRAIN.LR * batch_size, betas=(0.9, 0.999), eps=1e-06, weight_decay=config.TRAIN.WD, correct_bias=True)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "max",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "config.TRAIN.LR_FACTOR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "patience": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "rel",
                    "type": "str",
                    "possible_values": []
                },
                "cooldown": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_374": {
                "variable": {
                    "value": "best_epoch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "validation_monitor.best_epoch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_375": {
                "variable": {
                    "value": "best_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "validation_monitor.best_val",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_54": {
                "seed": {
                    "value": "config.RNG_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_55": {
                "seed": {
                    "value": "config.RNG_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_66": {
                "device": {
                    "value": "local_rank",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(os.environ.get('LOCAL_RANK') or 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_81": {
                "device": {
                    "value": "local_rank",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(os.environ.get('LOCAL_RANK') or 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_124": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "optimizer_grouped_parameters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[{'params': [p for (n, p) in model.named_parameters() if _k in n], 'lr': base_lr * _lr_mult} for (_k, _lr_mult) in config.TRAIN.LR_MULT]",
                            "ListComp"
                        ],
                        [
                            "[{'params': [p for (n, p) in model.named_parameters() if _k in n], 'lr': base_lr * _lr_mult} for (_k, _lr_mult) in config.TRAIN.LR_MULT]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "config.TRAIN.LR * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.TRAIN.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.TRAIN.WD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_208": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "eval(config.MODULE)(config)",
                            "Call"
                        ],
                        [
                            "eval(config.MODULE)(config)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "DDP(model, device_ids=[local_rank], output_device=local_rank)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=[int(d) for d in config.GPUS.split(',')]).cuda()",
                            "Call"
                        ],
                        [
                            "Apex_DDP(model, delay_allreduce=True)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[int(d) for d in config.GPUS.split(',')]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "SGD_231": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "optimizer_grouped_parameters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[{'params': [p for (n, p) in model.named_parameters() if _k in n], 'lr': base_lr * _lr_mult} for (_k, _lr_mult) in config.TRAIN.LR_MULT]",
                            "ListComp"
                        ],
                        [
                            "[{'params': [p for (n, p) in model.named_parameters() if _k in n], 'lr': base_lr * _lr_mult} for (_k, _lr_mult) in config.TRAIN.LR_MULT]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "config.TRAIN.LR * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.TRAIN.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.TRAIN.WD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_283": {
                "variable": {
                    "value": "a_word_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[word_embeddings[a_id] for a_id in a_ids]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_283": {
                "variable": {
                    "value": "a_word_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "broadcast_331": {
                "tensor": {
                    "value": "begin_epoch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(config.TRAIN.BEGIN_EPOCH).cuda()",
                            "Call"
                        ]
                    ]
                },
                "src": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "broadcast_376": {
                "tensor": {
                    "value": "best_epoch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(validation_monitor.best_epoch).cuda()",
                            "Call"
                        ]
                    ]
                },
                "src": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "broadcast_377": {
                "tensor": {
                    "value": "best_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(validation_monitor.best_val).cuda()",
                            "Call"
                        ]
                    ]
                },
                "src": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_129": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "optimizer_grouped_parameters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[{'params': [p for (n, p) in model.named_parameters() if _k in n], 'lr': base_lr * _lr_mult} for (_k, _lr_mult) in config.TRAIN.LR_MULT]",
                            "ListComp"
                        ],
                        [
                            "[{'params': [p for (n, p) in model.named_parameters() if _k in n], 'lr': base_lr * _lr_mult} for (_k, _lr_mult) in config.TRAIN.LR_MULT]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "config.TRAIN.LR * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.TRAIN.WD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_210": {
                "device": {
                    "value": "int(config.GPUS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_236": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "optimizer_grouped_parameters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[{'params': [p for (n, p) in model.named_parameters() if _k in n], 'lr': base_lr * _lr_mult} for (_k, _lr_mult) in config.TRAIN.LR_MULT]",
                            "ListComp"
                        ],
                        [
                            "[{'params': [p for (n, p) in model.named_parameters() if _k in n], 'lr': base_lr * _lr_mult} for (_k, _lr_mult) in config.TRAIN.LR_MULT]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "config.TRAIN.LR * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.TRAIN.WD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_251": {
                "f": {
                    "value": "config.NETWORK.PARTIAL_PRETRAIN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "broadcast_371": {
                "tensor": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.state_dict().values()",
                            "Call"
                        ]
                    ]
                },
                "src": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "spasen/function/val.py": {
        "torch": {
            "no_grad_6": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "spasen/modules/resnet_vlbert_for_spasen.py": {
        "torch": {
            "clamp_151": {
                "variable": {
                    "value": "span_tags_fixed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "span_tags",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_180": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "question.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "question.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_181": {
                "variable": {
                    "value": "input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "question.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_182": {
                "variable": {
                    "value": "input_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "question.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "question.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_184": {
                "variable": {
                    "value": "(grid_i, grid_j)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(batch_size, device=question.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(max_len, device=question.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_253": {
                "variable": {
                    "value": "object_vl_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(obj_reps['obj_reps'], object_linguistic_embeddings)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_268": {
                "variable": {
                    "value": "_batch_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "spo_ids.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "spo_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_298": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits * predicate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_301": {
                "variable": {
                    "value": "ans_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.final_mlp(hm)",
                            "Call"
                        ],
                        [
                            "torch.sum(logits * predicate, 1).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(logits)",
                            "Call"
                        ],
                        [
                            "self.final_mlp(hm)",
                            "Call"
                        ],
                        [
                            "torch.sum(logits * predicate, 1).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(logits)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_304": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.final_mlp(hm)",
                            "Call"
                        ],
                        [
                            "torch.sum(logits * predicate, 1).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(logits)",
                            "Call"
                        ],
                        [
                            "self.final_mlp(hm)",
                            "Call"
                        ],
                        [
                            "torch.sum(logits * predicate, 1).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_385": {
                "variable": {
                    "value": "object_vl_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(obj_reps['obj_reps'], object_linguistic_embeddings)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_400": {
                "variable": {
                    "value": "_batch_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "spo_ids.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "spo_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_430": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits * predicate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_432": {
                "variable": {
                    "value": "ans_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.final_mlp(hm)",
                            "Call"
                        ],
                        [
                            "torch.sum(logits * predicate, 1).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(logits)",
                            "Call"
                        ],
                        [
                            "self.final_mlp(hm)",
                            "Call"
                        ],
                        [
                            "torch.sum(logits * predicate, 1).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(logits)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_435": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.final_mlp(hm)",
                            "Call"
                        ],
                        [
                            "torch.sum(logits * predicate, 1).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(logits)",
                            "Call"
                        ],
                        [
                            "self.final_mlp(hm)",
                            "Call"
                        ],
                        [
                            "torch.sum(logits * predicate, 1).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.final_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Dropout(config.NETWORK.CLASSIFIER_DROPOUT, inplace=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.spa_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.NETWORK.VLBERT.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.NETWORK.VLBERT.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_96": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.NETWORK.CLASSIFIER_DROPOUT",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_122": {
                "variable": {
                    "value": "language_pretrained",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.language_pretrained_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_284": {
                "variable": {
                    "value": "hm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden_states[_batch_inds, ans_pos]",
                            "Subscript"
                        ],
                        [
                            "hm * (1 - self.spa_feat_weight) + spa_feat * self.spa_feat_weight",
                            "BinOp"
                        ],
                        [
                            "self.spa_fusion_linear(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.dropout(hm)",
                            "Call"
                        ],
                        [
                            "torch.cat((hm, spa_feat), dim=1)",
                            "Call"
                        ],
                        [
                            "self.spa_linear_hidden(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.spa_linear(hm)",
                            "Call"
                        ],
                        [
                            "hidden_states[_batch_inds, ans_pos]",
                            "Subscript"
                        ],
                        [
                            "hm * (1 - self.spa_feat_weight) + spa_feat * self.spa_feat_weight",
                            "BinOp"
                        ],
                        [
                            "self.spa_fusion_linear(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "torch.cat((hm, spa_feat), dim=1)",
                            "Call"
                        ],
                        [
                            "self.spa_linear_hidden(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.spa_linear(hm)",
                            "Call"
                        ]
                    ]
                }
            },
            "round_310": {
                "variable": {
                    "value": "rounded_14x14_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes * 14",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_417": {
                "variable": {
                    "value": "hm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden_states[_batch_inds, ans_pos]",
                            "Subscript"
                        ],
                        [
                            "hm * (1 - self.spa_feat_weight) + spa_feat * self.spa_feat_weight",
                            "BinOp"
                        ],
                        [
                            "self.spa_fusion_linear(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.dropout(hm)",
                            "Call"
                        ],
                        [
                            "torch.cat((hm, spa_feat), dim=1)",
                            "Call"
                        ],
                        [
                            "self.spa_linear_hidden(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.spa_linear(hm)",
                            "Call"
                        ],
                        [
                            "hidden_states[_batch_inds, ans_pos]",
                            "Subscript"
                        ],
                        [
                            "hm * (1 - self.spa_feat_weight) + spa_feat * self.spa_feat_weight",
                            "BinOp"
                        ],
                        [
                            "self.spa_fusion_linear(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "torch.cat((hm, spa_feat), dim=1)",
                            "Call"
                        ],
                        [
                            "self.spa_linear_hidden(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.spa_linear(hm)",
                            "Call"
                        ]
                    ]
                }
            },
            "round_442": {
                "variable": {
                    "value": "rounded_14x14_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes * 14",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_29": {
                "variable": {
                    "value": "self.object_linguistic_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "81",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.NETWORK.VLBERT.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.final_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Dropout(config.NETWORK.CLASSIFIER_DROPOUT, inplace=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_92": {
                "variable": {
                    "value": "self.spa_fusion_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.NETWORK.VLBERT.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.NETWORK.VLBERT.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_100": {
                "variable": {
                    "value": "self.spa_linear_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.NETWORK.VLBERT.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.NETWORK.VLBERT.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_153": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "row_id.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "row_id.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_184": {
                "start": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "question.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_185": {
                "start": {
                    "value": "max_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(question_mask.sum(1) + answer_mask.sum(1)).max() + 2",
                            "BinOp"
                        ],
                        [
                            "(question_mask.sum(1) + answer_mask.sum(1)).max() + 3",
                            "BinOp"
                        ],
                        [
                            "int(box_mask.sum(1).max().item())",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "question.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_289": {
                "variable": {
                    "value": "hm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden_states[_batch_inds, ans_pos]",
                            "Subscript"
                        ],
                        [
                            "hm * (1 - self.spa_feat_weight) + spa_feat * self.spa_feat_weight",
                            "BinOp"
                        ],
                        [
                            "self.spa_fusion_linear(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.dropout(hm)",
                            "Call"
                        ],
                        [
                            "torch.cat((hm, spa_feat), dim=1)",
                            "Call"
                        ],
                        [
                            "self.spa_linear_hidden(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.spa_linear(hm)",
                            "Call"
                        ],
                        [
                            "hidden_states[_batch_inds, ans_pos]",
                            "Subscript"
                        ],
                        [
                            "hm * (1 - self.spa_feat_weight) + spa_feat * self.spa_feat_weight",
                            "BinOp"
                        ],
                        [
                            "self.spa_fusion_linear(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "torch.cat((hm, spa_feat), dim=1)",
                            "Call"
                        ],
                        [
                            "self.spa_linear_hidden(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.spa_linear(hm)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_421": {
                "variable": {
                    "value": "hm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden_states[_batch_inds, ans_pos]",
                            "Subscript"
                        ],
                        [
                            "hm * (1 - self.spa_feat_weight) + spa_feat * self.spa_feat_weight",
                            "BinOp"
                        ],
                        [
                            "self.spa_fusion_linear(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.dropout(hm)",
                            "Call"
                        ],
                        [
                            "torch.cat((hm, spa_feat), dim=1)",
                            "Call"
                        ],
                        [
                            "self.spa_linear_hidden(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.spa_linear(hm)",
                            "Call"
                        ],
                        [
                            "hidden_states[_batch_inds, ans_pos]",
                            "Subscript"
                        ],
                        [
                            "hm * (1 - self.spa_feat_weight) + spa_feat * self.spa_feat_weight",
                            "BinOp"
                        ],
                        [
                            "self.spa_fusion_linear(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "torch.cat((hm, spa_feat), dim=1)",
                            "Call"
                        ],
                        [
                            "self.spa_linear_hidden(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.spa_linear(hm)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_31": {
                "variable": {
                    "value": "self.object_linguistic_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.NETWORK.VLBERT.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_58": {
                "p": {
                    "value": "config.NETWORK.CLASSIFIER_DROPOUT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.NETWORK.VLBERT.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "config.NETWORK.CLASSIFIER_HIDDEN_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_61": {
                "p": {
                    "value": "config.NETWORK.CLASSIFIER_DROPOUT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "in_features": {
                    "value": "config.NETWORK.CLASSIFIER_HIDDEN_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.DATASET.ANSWER_VOCAB_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "linear",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.NETWORK.VLBERT.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.DATASET.ANSWER_VOCAB_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.final_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "transform",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_94": {
                "variable": {
                    "value": "self.spa_fusion_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.NETWORK.VLBERT.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.NETWORK.VLBERT.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_282": {
                "variable": {
                    "value": "hm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(hm, spa_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mse_loss_319": {
                "variable": {
                    "value": "mask_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spo_fused_masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "spo_fused_masks.view(-1, 3, 14, 14)",
                            "Call"
                        ],
                        [
                            "spo_fused_masks.view(-1, 3, 14, 14)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "boxes_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "boxes.new_zeros(size=(boxes.shape[0], boxes.shape[1] - 1, 14, 14))",
                            "Call"
                        ],
                        [
                            "boxes.new_zeros(size=(boxes.shape[0], boxes.shape[1] - 1, 14, 14))",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_321": {
                "variable": {
                    "value": "mask_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spo_fused_masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "spo_fused_masks.view(-1, 3, 14, 14)",
                            "Call"
                        ],
                        [
                            "spo_fused_masks.view(-1, 3, 14, 14)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "boxes_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "boxes.new_zeros(size=(boxes.shape[0], boxes.shape[1] - 1, 14, 14))",
                            "Call"
                        ],
                        [
                            "boxes.new_zeros(size=(boxes.shape[0], boxes.shape[1] - 1, 14, 14))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_415": {
                "variable": {
                    "value": "hm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(hm, spa_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mse_loss_451": {
                "variable": {
                    "value": "mask_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spo_fused_masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "spo_fused_masks.view(-1, 3, 14, 14)",
                            "Call"
                        ],
                        [
                            "spo_fused_masks.view(-1, 3, 14, 14)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "boxes_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "boxes.new_zeros(size=(boxes.shape[0], boxes.shape[1] - 1, 14, 14))",
                            "Call"
                        ],
                        [
                            "boxes.new_zeros(size=(boxes.shape[0], boxes.shape[1] - 1, 14, 14))",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_453": {
                "variable": {
                    "value": "mask_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spo_fused_masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "spo_fused_masks.view(-1, 3, 14, 14)",
                            "Call"
                        ],
                        [
                            "spo_fused_masks.view(-1, 3, 14, 14)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "boxes_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "boxes.new_zeros(size=(boxes.shape[0], boxes.shape[1] - 1, 14, 14))",
                            "Call"
                        ],
                        [
                            "boxes.new_zeros(size=(boxes.shape[0], boxes.shape[1] - 1, 14, 14))",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_66": {
                "p": {
                    "value": "config.NETWORK.CLASSIFIER_DROPOUT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_67": {
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.NETWORK.VLBERT.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "config.DATASET.ANSWER_VOCAB_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_317": {
                "input": {
                    "value": "spo_fused_masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "spo_fused_masks.view(-1, 3, 14, 14)",
                            "Call"
                        ],
                        [
                            "spo_fused_masks.view(-1, 3, 14, 14)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "boxes_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "boxes.new_zeros(size=(boxes.shape[0], boxes.shape[1] - 1, 14, 14))",
                            "Call"
                        ],
                        [
                            "boxes.new_zeros(size=(boxes.shape[0], boxes.shape[1] - 1, 14, 14))",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_449": {
                "input": {
                    "value": "spo_fused_masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "spo_fused_masks.view(-1, 3, 14, 14)",
                            "Call"
                        ],
                        [
                            "spo_fused_masks.view(-1, 3, 14, 14)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "boxes_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "boxes.new_zeros(size=(boxes.shape[0], boxes.shape[1] - 1, 14, 14))",
                            "Call"
                        ],
                        [
                            "boxes.new_zeros(size=(boxes.shape[0], boxes.shape[1] - 1, 14, 14))",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_74": {
                "p": {
                    "value": "config.NETWORK.CLASSIFIER_DROPOUT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "spasen/modules/simple_spatial_model.py": {
        "torch": {
            "Linear_10": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "feature_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_11": {
                "variable": {
                    "value": "self.batchnorm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "feature_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "feature_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_13": {
                "variable": {
                    "value": "self.batchnorm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "feature_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.linear4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feature_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "feature_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_15": {
                "variable": {
                    "value": "self.batchnorm4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "feature_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.linear5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feature_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "feature_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_22": {
                "variable": {
                    "value": "subj_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "subj_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.linear1(subj)",
                            "Call"
                        ],
                        [
                            "self.batchnorm1(subj_feature)",
                            "Call"
                        ],
                        [
                            "F.relu(subj_feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_26": {
                "variable": {
                    "value": "obj_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.linear2(obj)",
                            "Call"
                        ],
                        [
                            "self.batchnorm2(obj_feature)",
                            "Call"
                        ],
                        [
                            "F.relu(obj_feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_31": {
                "variable": {
                    "value": "fused_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fused_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "subj_feature + obj_feature",
                            "BinOp"
                        ],
                        [
                            "self.linear4(fused_feature)",
                            "Call"
                        ],
                        [
                            "self.batchnorm4(fused_feature)",
                            "Call"
                        ],
                        [
                            "F.relu(fused_feature)",
                            "Call"
                        ],
                        [
                            "self.linear5(fused_feature)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "spasen/train_end2end.py": {
        "torch": {
            "device_count_40": {
                "variable": {
                    "value": "num_gpus",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "vrd/data/build.py": {
        "torch": {}
    },
    "vrd/data/collate_batch.py": {
        "torch": {
            "as_tensor_47": {
                "variable": {
                    "value": "out[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "ibatch[self.data_names.index(name)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "data": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_61": {
                "tensors": {
                    "value": "tuple(items)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "vrd/data/datasets/util.py": {
        "torch": {
            "sum_82": {
                "input": {
                    "value": "torch.eq(torch.gt(logits, 0.0).float(), labels).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eq_82": {
                "input": {
                    "value": "torch.gt(logits, 0.0).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gt_82": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "vrd/data/datasets/vrd.py": {
        "torch": {
            "zeros_129": {
                "variable": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(nb_of_rels, 4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_130": {
                "variable": {
                    "value": "spo_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(nb_of_rels, 20)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_131": {
                "variable": {
                    "value": "spo_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(nb_of_rels, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_132": {
                "variable": {
                    "value": "im_info",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[iw, ih, 1.0, 1.0] for _ in range(nb_of_rels)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_135": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(annot['annot']), 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_136": {
                "variable": {
                    "value": "labels_so_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(annot['annot']), 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_137": {
                "variable": {
                    "value": "subj_obj_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(annot['rels_cand']), 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_185": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(annot['annot']), 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_148": {
                "variable": {
                    "value": "boxes[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "np.concatenate((full_img_bbox, subj_bbox, union_bbox, obj_bbox))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_156": {
                "variable": {
                    "value": "spo_ids[i, :spo_id_len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "subject_id + object_id",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_157": {
                "variable": {
                    "value": "spo_lens[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[len(subject_id), len(object_id)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_195": {
                "variable": {
                    "value": "boxes[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "np.concatenate((full_img_bbox, subj_bbox, union_bbox, obj_bbox))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_203": {
                "variable": {
                    "value": "spo_ids[i, :spo_id_len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "subject_id + object_id",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_204": {
                "variable": {
                    "value": "spo_lens[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[len(subject_id), len(object_id)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_165": {
                "input": {
                    "value": "spo_lens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((nb_of_rels, 2), dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_208": {
                "input": {
                    "value": "spo_lens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((nb_of_rels, 2), dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "vrd/data/samplers/distributed.py": {
        "torch": {
            "Generator_45": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_47": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_49": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "vrd/data/samplers/grouped_batch_sampler.py": {
        "torch": {
            "as_tensor_29": {
                "variable": {
                    "value": "self.group_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "group_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "as_tensor_41": {
                "variable": {
                    "value": "sampled_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.sampler)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_49": {
                "variable": {
                    "value": "order",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(dataset_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_50": {
                "variable": {
                    "value": "order[sampled_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "len(sampled_ids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_82": {
                "variable": {
                    "value": "first_index_of_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[inv_sampled_ids_map[s] for s in first_element_of_batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "unique_34": {
                "input": {
                    "value": "self.group_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_34": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "vrd/data/transforms/transforms.py": {
        "torch": {
            "as_tensor_84": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "masks.numpy()[:, :, ::-1].tolist()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "vrd/function/test.py": {
        "torch": {
            "load_60": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'{}-best.model'.format(model_prefix)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "no_grad_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_56": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "eval(config.MODULE)(config)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=device_ids).cuda()",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[int(d) for d in config.GPUS.split(',')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "interpolate_161": {
                "variable": {
                    "value": "mask2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[i].unsqueeze(0).unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_161": {
                "variable": {
                    "value": "mask2",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_58": {
                "device": {
                    "value": "device_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "vrd/function/train.py": {
        "torch": {
            "stack_353": {
                "variable": {
                    "value": "answers_word_embed_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "answers_word_embed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_406": {
                "variable": {
                    "value": "begin_epoch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "config.TRAIN.BEGIN_EPOCH",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_419": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.SGD(optimizer_grouped_parameters, lr=config.TRAIN.LR * batch_size, momentum=config.TRAIN.MOMENTUM, weight_decay=config.TRAIN.WD)",
                            "Call"
                        ],
                        [
                            "optim.SGD(optimizer_grouped_parameters, lr=config.TRAIN.LR * batch_size, momentum=config.TRAIN.MOMENTUM, weight_decay=config.TRAIN.WD)",
                            "Call"
                        ],
                        [
                            "optim.Adam(optimizer_grouped_parameters, lr=config.TRAIN.LR * batch_size, weight_decay=config.TRAIN.WD)",
                            "Call"
                        ],
                        [
                            "optim.Adam(optimizer_grouped_parameters, lr=config.TRAIN.LR * batch_size, weight_decay=config.TRAIN.WD)",
                            "Call"
                        ],
                        [
                            "AdamW(optimizer_grouped_parameters, lr=config.TRAIN.LR * batch_size, betas=(0.9, 0.999), eps=1e-06, weight_decay=config.TRAIN.WD, correct_bias=True)",
                            "Call"
                        ],
                        [
                            "AdamW(optimizer_grouped_parameters, lr=config.TRAIN.LR * batch_size, betas=(0.9, 0.999), eps=1e-06, weight_decay=config.TRAIN.WD, correct_bias=True)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "max",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "config.TRAIN.LR_FACTOR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "patience": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "rel",
                    "type": "str",
                    "possible_values": []
                },
                "cooldown": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_450": {
                "variable": {
                    "value": "best_epoch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "validation_monitor.best_epoch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_451": {
                "variable": {
                    "value": "best_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "validation_monitor.best_val",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_54": {
                "seed": {
                    "value": "config.RNG_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_55": {
                "seed": {
                    "value": "config.RNG_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_68": {
                "device": {
                    "value": "local_rank",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(os.environ.get('LOCAL_RANK') or 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_83": {
                "device": {
                    "value": "local_rank",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(os.environ.get('LOCAL_RANK') or 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_180": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "optimizer_grouped_parameters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[{'params': [p for (n, p) in model.named_parameters() if _k in n], 'lr': base_lr * _lr_mult} for (_k, _lr_mult) in config.TRAIN.LR_MULT]",
                            "ListComp"
                        ],
                        [
                            "[{'params': [p for (n, p) in model.named_parameters() if _k in n], 'lr': base_lr * _lr_mult} for (_k, _lr_mult) in config.TRAIN.LR_MULT]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "config.TRAIN.LR * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.TRAIN.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.TRAIN.WD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_276": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "eval(config.MODULE)(config)",
                            "Call"
                        ],
                        [
                            "eval(config.MODULE)(config)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "DDP(model, device_ids=[local_rank], output_device=local_rank)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=[int(d) for d in config.GPUS.split(',')]).cuda()",
                            "Call"
                        ],
                        [
                            "Apex_DDP(model, delay_allreduce=True)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[int(d) for d in config.GPUS.split(',')]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "SGD_299": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "optimizer_grouped_parameters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[{'params': [p for (n, p) in model.named_parameters() if _k in n], 'lr': base_lr * _lr_mult} for (_k, _lr_mult) in config.TRAIN.LR_MULT]",
                            "ListComp"
                        ],
                        [
                            "[{'params': [p for (n, p) in model.named_parameters() if _k in n], 'lr': base_lr * _lr_mult} for (_k, _lr_mult) in config.TRAIN.LR_MULT]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "config.TRAIN.LR * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.TRAIN.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.TRAIN.WD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_351": {
                "variable": {
                    "value": "a_word_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[word_embeddings[a_id] for a_id in a_ids]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_351": {
                "variable": {
                    "value": "a_word_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "broadcast_407": {
                "tensor": {
                    "value": "begin_epoch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(config.TRAIN.BEGIN_EPOCH).cuda()",
                            "Call"
                        ]
                    ]
                },
                "src": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "broadcast_452": {
                "tensor": {
                    "value": "best_epoch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(validation_monitor.best_epoch).cuda()",
                            "Call"
                        ]
                    ]
                },
                "src": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "broadcast_453": {
                "tensor": {
                    "value": "best_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(validation_monitor.best_val).cuda()",
                            "Call"
                        ]
                    ]
                },
                "src": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_185": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "optimizer_grouped_parameters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[{'params': [p for (n, p) in model.named_parameters() if _k in n], 'lr': base_lr * _lr_mult} for (_k, _lr_mult) in config.TRAIN.LR_MULT]",
                            "ListComp"
                        ],
                        [
                            "[{'params': [p for (n, p) in model.named_parameters() if _k in n], 'lr': base_lr * _lr_mult} for (_k, _lr_mult) in config.TRAIN.LR_MULT]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "config.TRAIN.LR * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.TRAIN.WD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_278": {
                "device": {
                    "value": "int(config.GPUS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_304": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "optimizer_grouped_parameters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[{'params': [p for (n, p) in model.named_parameters() if _k in n], 'lr': base_lr * _lr_mult} for (_k, _lr_mult) in config.TRAIN.LR_MULT]",
                            "ListComp"
                        ],
                        [
                            "[{'params': [p for (n, p) in model.named_parameters() if _k in n], 'lr': base_lr * _lr_mult} for (_k, _lr_mult) in config.TRAIN.LR_MULT]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "config.TRAIN.LR * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.TRAIN.WD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_319": {
                "f": {
                    "value": "config.NETWORK.PARTIAL_PRETRAIN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "broadcast_447": {
                "tensor": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.state_dict().values()",
                            "Call"
                        ]
                    ]
                },
                "src": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "vrd/function/val.py": {
        "torch": {
            "no_grad_6": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "vrd/modules/resnet_vlbert_for_vrd.py": {
        "torch": {
            "clamp_191": {
                "variable": {
                    "value": "span_tags_fixed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "span_tags",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_224": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "question.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "question.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_225": {
                "variable": {
                    "value": "input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "question.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_226": {
                "variable": {
                    "value": "input_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "question.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "question.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_228": {
                "variable": {
                    "value": "(grid_i, grid_j)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(batch_size, device=question.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(max_len, device=question.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_251": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img for _ in range(boxes.shape[0])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_298": {
                "variable": {
                    "value": "object_vl_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(obj_reps['obj_reps'], object_linguistic_embeddings)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_313": {
                "variable": {
                    "value": "_batch_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "spo_ids.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "spo_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_389": {
                "variable": {
                    "value": "ans_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.final_mlp(hm)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim=1)",
                            "Call"
                        ],
                        [
                            "self.final_mlp(hm)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_392": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.final_mlp(hm)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim=1)",
                            "Call"
                        ],
                        [
                            "self.final_mlp(hm)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_434": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img for _ in range(boxes.shape[0])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_477": {
                "variable": {
                    "value": "object_vl_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(obj_reps['obj_reps'], object_linguistic_embeddings)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_492": {
                "variable": {
                    "value": "_batch_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "spo_ids.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "spo_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_563": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.final_mlp(hm)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim=1)",
                            "Call"
                        ],
                        [
                            "self.final_mlp(hm)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "self.final_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Dropout(config.NETWORK.CLASSIFIER_DROPOUT, inplace=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_110": {
                "variable": {
                    "value": "self.spa_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.NETWORK.VLBERT.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.NETWORK.VLBERT.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_111": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.NETWORK.CLASSIFIER_DROPOUT",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_132": {
                "variable": {
                    "value": "self.union_vec_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.NETWORK.VLBERT.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.NETWORK.VLBERT.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_142": {
                "variable": {
                    "value": "self.uvt_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.NETWORK.VLBERT.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.NETWORK.VLBERT.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_143": {
                "variable": {
                    "value": "self.dropout_uvt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.NETWORK.CLASSIFIER_DROPOUT",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_162": {
                "variable": {
                    "value": "language_pretrained",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.language_pretrained_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_355": {
                "variable": {
                    "value": "hm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden_states[_batch_inds, ans_pos]",
                            "Subscript"
                        ],
                        [
                            "hm * (1 - self.uvt_feat_weight) + union_vec * self.uvt_feat_weight",
                            "BinOp"
                        ],
                        [
                            "self.uvt_fusion_linear(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.dropout_uvt(hm)",
                            "Call"
                        ],
                        [
                            "self.uvt_linear(hm)",
                            "Call"
                        ],
                        [
                            "torch.cat((hm, union_vec), dim=1)",
                            "Call"
                        ],
                        [
                            "hm * (1 - self.spa_feat_weight) + spa_feat * self.spa_feat_weight",
                            "BinOp"
                        ],
                        [
                            "self.spa_fusion_linear(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.dropout(hm)",
                            "Call"
                        ],
                        [
                            "torch.cat((hm, spa_feat), dim=1)",
                            "Call"
                        ],
                        [
                            "self.spa_linear_hidden(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.spa_linear(hm)",
                            "Call"
                        ],
                        [
                            "hidden_states[_batch_inds, ans_pos]",
                            "Subscript"
                        ],
                        [
                            "hm * (1 - self.uvt_feat_weight) + union_vec * self.uvt_feat_weight",
                            "BinOp"
                        ],
                        [
                            "self.uvt_fusion_linear(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.dropout_uvt(hm)",
                            "Call"
                        ],
                        [
                            "self.uvt_linear(hm)",
                            "Call"
                        ],
                        [
                            "torch.cat((hm, union_vec), dim=1)",
                            "Call"
                        ],
                        [
                            "hm * (1 - self.spa_feat_weight) + spa_feat * self.spa_feat_weight",
                            "BinOp"
                        ],
                        [
                            "self.spa_fusion_linear(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.dropout(hm)",
                            "Call"
                        ],
                        [
                            "torch.cat((hm, spa_feat), dim=1)",
                            "Call"
                        ],
                        [
                            "self.spa_linear_hidden(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.spa_linear(hm)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_367": {
                "variable": {
                    "value": "union_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "union_vec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "obj_reps['obj_reps'][:, 2] - obj_reps['obj_reps'][:, 1] - obj_reps['obj_reps'][:, 3]",
                            "BinOp"
                        ],
                        [
                            "self.union_vec_fc(union_vec)",
                            "Call"
                        ],
                        [
                            "F.relu(union_vec)",
                            "Call"
                        ],
                        [
                            "obj_reps['obj_reps'][:, 2] - obj_reps['obj_reps'][:, 1] - obj_reps['obj_reps'][:, 3]",
                            "BinOp"
                        ],
                        [
                            "self.union_vec_fc(union_vec)",
                            "Call"
                        ],
                        [
                            "F.relu(union_vec)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_375": {
                "variable": {
                    "value": "hm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden_states[_batch_inds, ans_pos]",
                            "Subscript"
                        ],
                        [
                            "hm * (1 - self.uvt_feat_weight) + union_vec * self.uvt_feat_weight",
                            "BinOp"
                        ],
                        [
                            "self.uvt_fusion_linear(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.dropout_uvt(hm)",
                            "Call"
                        ],
                        [
                            "self.uvt_linear(hm)",
                            "Call"
                        ],
                        [
                            "torch.cat((hm, union_vec), dim=1)",
                            "Call"
                        ],
                        [
                            "hm * (1 - self.spa_feat_weight) + spa_feat * self.spa_feat_weight",
                            "BinOp"
                        ],
                        [
                            "self.spa_fusion_linear(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.dropout(hm)",
                            "Call"
                        ],
                        [
                            "torch.cat((hm, spa_feat), dim=1)",
                            "Call"
                        ],
                        [
                            "self.spa_linear_hidden(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.spa_linear(hm)",
                            "Call"
                        ],
                        [
                            "hidden_states[_batch_inds, ans_pos]",
                            "Subscript"
                        ],
                        [
                            "hm * (1 - self.uvt_feat_weight) + union_vec * self.uvt_feat_weight",
                            "BinOp"
                        ],
                        [
                            "self.uvt_fusion_linear(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.dropout_uvt(hm)",
                            "Call"
                        ],
                        [
                            "self.uvt_linear(hm)",
                            "Call"
                        ],
                        [
                            "torch.cat((hm, union_vec), dim=1)",
                            "Call"
                        ],
                        [
                            "hm * (1 - self.spa_feat_weight) + spa_feat * self.spa_feat_weight",
                            "BinOp"
                        ],
                        [
                            "self.spa_fusion_linear(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.dropout(hm)",
                            "Call"
                        ],
                        [
                            "torch.cat((hm, spa_feat), dim=1)",
                            "Call"
                        ],
                        [
                            "self.spa_linear_hidden(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.spa_linear(hm)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_399": {
                "variable": {
                    "value": "boxes_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spo_fused_masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "spo_fused_masks.view(-1, nb_of_tokens, 14, 14)",
                            "Call"
                        ],
                        [
                            "spo_fused_masks.view(-1, nb_of_tokens, 14, 14)",
                            "Call"
                        ]
                    ]
                }
            },
            "round_400": {
                "variable": {
                    "value": "rounded_14x14_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes * 14",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_534": {
                "variable": {
                    "value": "hm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden_states[_batch_inds, ans_pos]",
                            "Subscript"
                        ],
                        [
                            "hm * (1 - self.uvt_feat_weight) + union_vec * self.uvt_feat_weight",
                            "BinOp"
                        ],
                        [
                            "self.uvt_fusion_linear(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.dropout_uvt(hm)",
                            "Call"
                        ],
                        [
                            "self.uvt_linear(hm)",
                            "Call"
                        ],
                        [
                            "torch.cat((hm, union_vec), dim=1)",
                            "Call"
                        ],
                        [
                            "hm * (1 - self.spa_feat_weight) + spa_feat * self.spa_feat_weight",
                            "BinOp"
                        ],
                        [
                            "self.spa_fusion_linear(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.dropout(hm)",
                            "Call"
                        ],
                        [
                            "torch.cat((hm, spa_feat), dim=1)",
                            "Call"
                        ],
                        [
                            "self.spa_linear_hidden(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.spa_linear(hm)",
                            "Call"
                        ],
                        [
                            "hidden_states[_batch_inds, ans_pos]",
                            "Subscript"
                        ],
                        [
                            "hm * (1 - self.uvt_feat_weight) + union_vec * self.uvt_feat_weight",
                            "BinOp"
                        ],
                        [
                            "self.uvt_fusion_linear(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.dropout_uvt(hm)",
                            "Call"
                        ],
                        [
                            "self.uvt_linear(hm)",
                            "Call"
                        ],
                        [
                            "torch.cat((hm, union_vec), dim=1)",
                            "Call"
                        ],
                        [
                            "hm * (1 - self.spa_feat_weight) + spa_feat * self.spa_feat_weight",
                            "BinOp"
                        ],
                        [
                            "self.spa_fusion_linear(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.dropout(hm)",
                            "Call"
                        ],
                        [
                            "torch.cat((hm, spa_feat), dim=1)",
                            "Call"
                        ],
                        [
                            "self.spa_linear_hidden(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.spa_linear(hm)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_546": {
                "variable": {
                    "value": "union_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "union_vec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "obj_reps['obj_reps'][:, 2] - obj_reps['obj_reps'][:, 1] - obj_reps['obj_reps'][:, 3]",
                            "BinOp"
                        ],
                        [
                            "self.union_vec_fc(union_vec)",
                            "Call"
                        ],
                        [
                            "F.relu(union_vec)",
                            "Call"
                        ],
                        [
                            "obj_reps['obj_reps'][:, 2] - obj_reps['obj_reps'][:, 1] - obj_reps['obj_reps'][:, 3]",
                            "BinOp"
                        ],
                        [
                            "self.union_vec_fc(union_vec)",
                            "Call"
                        ],
                        [
                            "F.relu(union_vec)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_554": {
                "variable": {
                    "value": "hm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden_states[_batch_inds, ans_pos]",
                            "Subscript"
                        ],
                        [
                            "hm * (1 - self.uvt_feat_weight) + union_vec * self.uvt_feat_weight",
                            "BinOp"
                        ],
                        [
                            "self.uvt_fusion_linear(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.dropout_uvt(hm)",
                            "Call"
                        ],
                        [
                            "self.uvt_linear(hm)",
                            "Call"
                        ],
                        [
                            "torch.cat((hm, union_vec), dim=1)",
                            "Call"
                        ],
                        [
                            "hm * (1 - self.spa_feat_weight) + spa_feat * self.spa_feat_weight",
                            "BinOp"
                        ],
                        [
                            "self.spa_fusion_linear(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.dropout(hm)",
                            "Call"
                        ],
                        [
                            "torch.cat((hm, spa_feat), dim=1)",
                            "Call"
                        ],
                        [
                            "self.spa_linear_hidden(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.spa_linear(hm)",
                            "Call"
                        ],
                        [
                            "hidden_states[_batch_inds, ans_pos]",
                            "Subscript"
                        ],
                        [
                            "hm * (1 - self.uvt_feat_weight) + union_vec * self.uvt_feat_weight",
                            "BinOp"
                        ],
                        [
                            "self.uvt_fusion_linear(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.dropout_uvt(hm)",
                            "Call"
                        ],
                        [
                            "self.uvt_linear(hm)",
                            "Call"
                        ],
                        [
                            "torch.cat((hm, union_vec), dim=1)",
                            "Call"
                        ],
                        [
                            "hm * (1 - self.spa_feat_weight) + spa_feat * self.spa_feat_weight",
                            "BinOp"
                        ],
                        [
                            "self.spa_fusion_linear(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.dropout(hm)",
                            "Call"
                        ],
                        [
                            "torch.cat((hm, spa_feat), dim=1)",
                            "Call"
                        ],
                        [
                            "self.spa_linear_hidden(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.spa_linear(hm)",
                            "Call"
                        ]
                    ]
                }
            },
            "round_571": {
                "variable": {
                    "value": "rounded_14x14_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes * 14",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_30": {
                "variable": {
                    "value": "self.object_linguistic_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "81",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.NETWORK.VLBERT.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.final_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Dropout(config.NETWORK.CLASSIFIER_DROPOUT, inplace=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_89": {
                "variable": {
                    "value": "self.loc_fcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2 * 5 + 9, config.NETWORK.VLBERT.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_104": {
                "variable": {
                    "value": "self.spa_fusion_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.NETWORK.VLBERT.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.NETWORK.VLBERT.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_115": {
                "variable": {
                    "value": "self.spa_linear_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.NETWORK.VLBERT.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.NETWORK.VLBERT.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_139": {
                "variable": {
                    "value": "self.uvt_fusion_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.NETWORK.VLBERT.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.NETWORK.VLBERT.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_193": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "row_id.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "row_id.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_228": {
                "start": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "question.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_229": {
                "start": {
                    "value": "max_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(question_mask.sum(1) + answer_mask.sum(1)).max() + 2",
                            "BinOp"
                        ],
                        [
                            "(question_mask.sum(1) + answer_mask.sum(1)).max() + 3",
                            "BinOp"
                        ],
                        [
                            "int(box_mask.sum(1).max().item())",
                            "Call"
                        ],
                        [
                            "int(box_mask.sum(1).max().item())",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "question.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_320": {
                "variable": {
                    "value": "spa_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(boxes.shape[0], 5 * 2 + 9)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "boxes.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "boxes.layout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "boxes.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_360": {
                "variable": {
                    "value": "hm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden_states[_batch_inds, ans_pos]",
                            "Subscript"
                        ],
                        [
                            "hm * (1 - self.uvt_feat_weight) + union_vec * self.uvt_feat_weight",
                            "BinOp"
                        ],
                        [
                            "self.uvt_fusion_linear(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.dropout_uvt(hm)",
                            "Call"
                        ],
                        [
                            "self.uvt_linear(hm)",
                            "Call"
                        ],
                        [
                            "torch.cat((hm, union_vec), dim=1)",
                            "Call"
                        ],
                        [
                            "hm * (1 - self.spa_feat_weight) + spa_feat * self.spa_feat_weight",
                            "BinOp"
                        ],
                        [
                            "self.spa_fusion_linear(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.dropout(hm)",
                            "Call"
                        ],
                        [
                            "torch.cat((hm, spa_feat), dim=1)",
                            "Call"
                        ],
                        [
                            "self.spa_linear_hidden(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.spa_linear(hm)",
                            "Call"
                        ],
                        [
                            "hidden_states[_batch_inds, ans_pos]",
                            "Subscript"
                        ],
                        [
                            "hm * (1 - self.uvt_feat_weight) + union_vec * self.uvt_feat_weight",
                            "BinOp"
                        ],
                        [
                            "self.uvt_fusion_linear(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.dropout_uvt(hm)",
                            "Call"
                        ],
                        [
                            "self.uvt_linear(hm)",
                            "Call"
                        ],
                        [
                            "torch.cat((hm, union_vec), dim=1)",
                            "Call"
                        ],
                        [
                            "hm * (1 - self.spa_feat_weight) + spa_feat * self.spa_feat_weight",
                            "BinOp"
                        ],
                        [
                            "self.spa_fusion_linear(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.dropout(hm)",
                            "Call"
                        ],
                        [
                            "torch.cat((hm, spa_feat), dim=1)",
                            "Call"
                        ],
                        [
                            "self.spa_linear_hidden(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.spa_linear(hm)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_499": {
                "variable": {
                    "value": "spa_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(boxes.shape[0], 5 * 2 + 9)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "boxes.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "boxes.layout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "boxes.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_539": {
                "variable": {
                    "value": "hm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden_states[_batch_inds, ans_pos]",
                            "Subscript"
                        ],
                        [
                            "hm * (1 - self.uvt_feat_weight) + union_vec * self.uvt_feat_weight",
                            "BinOp"
                        ],
                        [
                            "self.uvt_fusion_linear(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.dropout_uvt(hm)",
                            "Call"
                        ],
                        [
                            "self.uvt_linear(hm)",
                            "Call"
                        ],
                        [
                            "torch.cat((hm, union_vec), dim=1)",
                            "Call"
                        ],
                        [
                            "hm * (1 - self.spa_feat_weight) + spa_feat * self.spa_feat_weight",
                            "BinOp"
                        ],
                        [
                            "self.spa_fusion_linear(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.dropout(hm)",
                            "Call"
                        ],
                        [
                            "torch.cat((hm, spa_feat), dim=1)",
                            "Call"
                        ],
                        [
                            "self.spa_linear_hidden(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.spa_linear(hm)",
                            "Call"
                        ],
                        [
                            "hidden_states[_batch_inds, ans_pos]",
                            "Subscript"
                        ],
                        [
                            "hm * (1 - self.uvt_feat_weight) + union_vec * self.uvt_feat_weight",
                            "BinOp"
                        ],
                        [
                            "self.uvt_fusion_linear(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.dropout_uvt(hm)",
                            "Call"
                        ],
                        [
                            "self.uvt_linear(hm)",
                            "Call"
                        ],
                        [
                            "torch.cat((hm, union_vec), dim=1)",
                            "Call"
                        ],
                        [
                            "hm * (1 - self.spa_feat_weight) + spa_feat * self.spa_feat_weight",
                            "BinOp"
                        ],
                        [
                            "self.spa_fusion_linear(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.dropout(hm)",
                            "Call"
                        ],
                        [
                            "torch.cat((hm, spa_feat), dim=1)",
                            "Call"
                        ],
                        [
                            "self.spa_linear_hidden(hm)",
                            "Call"
                        ],
                        [
                            "F.relu(hm)",
                            "Call"
                        ],
                        [
                            "self.spa_linear(hm)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_32": {
                "variable": {
                    "value": "self.object_linguistic_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.NETWORK.VLBERT.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_59": {
                "p": {
                    "value": "config.NETWORK.CLASSIFIER_DROPOUT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.NETWORK.VLBERT.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "config.NETWORK.CLASSIFIER_HIDDEN_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_62": {
                "p": {
                    "value": "config.NETWORK.CLASSIFIER_DROPOUT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "in_features": {
                    "value": "config.NETWORK.CLASSIFIER_HIDDEN_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.DATASET.ANSWER_VOCAB_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "linear",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.NETWORK.VLBERT.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.DATASET.ANSWER_VOCAB_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "self.final_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "transform",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_141": {
                "variable": {
                    "value": "self.uvt_fusion_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.NETWORK.VLBERT.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.NETWORK.VLBERT.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_323": {
                "variable": {
                    "value": "subj",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[boxes[i, 1, 0] / im_info[i, 0], boxes[i, 1, 1] / im_info[i, 1], boxes[i, 1, 2] / im_info[i, 0], boxes[i, 1, 3] / im_info[i, 1], area_subj_ratio]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_334": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[(x_s - x_o) / w_o, (y_s - y_o) / h_o, torch.log(w_s / w_o), torch.log(h_s / h_o), (x_o - x_s) / w_s, (y_o - y_s) / h_s, torch.log(w_o / w_s), torch.log(h_o / h_s), area_pred_ratio]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_337": {
                "variable": {
                    "value": "obj",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[boxes[i, 3, 0] / im_info[i, 0], boxes[i, 3, 1] / im_info[i, 1], boxes[i, 3, 2] / im_info[i, 0], boxes[i, 3, 3] / im_info[i, 1], area_obj_ratio]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_339": {
                "variable": {
                    "value": "spa_feat[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(subj, pred, obj)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_339": {
                "variable": {
                    "value": "spa_feat[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_353": {
                "variable": {
                    "value": "hm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(hm, spa_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_372": {
                "variable": {
                    "value": "hm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(hm, union_vec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mse_loss_409": {
                "variable": {
                    "value": "mask_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spo_fused_masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "spo_fused_masks.view(-1, nb_of_tokens, 14, 14)",
                            "Call"
                        ],
                        [
                            "spo_fused_masks.view(-1, nb_of_tokens, 14, 14)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "boxes_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(spo_fused_masks)",
                            "Call"
                        ],
                        [
                            "boxes.new_zeros(size=(boxes.shape[0], nb_of_tokens, 14, 14))",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_411": {
                "variable": {
                    "value": "mask_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spo_fused_masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "spo_fused_masks.view(-1, nb_of_tokens, 14, 14)",
                            "Call"
                        ],
                        [
                            "spo_fused_masks.view(-1, nb_of_tokens, 14, 14)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "boxes_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(spo_fused_masks)",
                            "Call"
                        ],
                        [
                            "boxes.new_zeros(size=(boxes.shape[0], nb_of_tokens, 14, 14))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_502": {
                "variable": {
                    "value": "subj",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[boxes[i, 1, 0] / im_info[i, 0], boxes[i, 1, 1] / im_info[i, 1], boxes[i, 1, 2] / im_info[i, 0], boxes[i, 1, 3] / im_info[i, 1], area_subj_ratio]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_513": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[(x_s - x_o) / w_o, (y_s - y_o) / h_o, torch.log(w_s / w_o), torch.log(h_s / h_o), (x_o - x_s) / w_s, (y_o - y_s) / h_s, torch.log(w_o / w_s), torch.log(h_o / h_s), area_pred_ratio]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_516": {
                "variable": {
                    "value": "obj",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[boxes[i, 3, 0] / im_info[i, 0], boxes[i, 3, 1] / im_info[i, 1], boxes[i, 3, 2] / im_info[i, 0], boxes[i, 3, 3] / im_info[i, 1], area_obj_ratio]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_518": {
                "variable": {
                    "value": "spa_feat[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(subj, pred, obj)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_518": {
                "variable": {
                    "value": "spa_feat[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_532": {
                "variable": {
                    "value": "hm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(hm, spa_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_551": {
                "variable": {
                    "value": "hm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(hm, union_vec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mse_loss_580": {
                "variable": {
                    "value": "mask_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spo_fused_masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "spo_fused_masks.view(-1, nb_of_tokens, 14, 14)",
                            "Call"
                        ],
                        [
                            "spo_fused_masks.view(-1, nb_of_tokens, 14, 14)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "boxes_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(spo_fused_masks)",
                            "Call"
                        ],
                        [
                            "boxes.new_zeros(size=(boxes.shape[0], nb_of_tokens, 14, 14))",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_584": {
                "variable": {
                    "value": "mask_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spo_fused_masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "spo_fused_masks.view(-1, nb_of_tokens, 14, 14)",
                            "Call"
                        ],
                        [
                            "spo_fused_masks.view(-1, nb_of_tokens, 14, 14)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "boxes_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(spo_fused_masks)",
                            "Call"
                        ],
                        [
                            "boxes.new_zeros(size=(boxes.shape[0], nb_of_tokens, 14, 14))",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_67": {
                "p": {
                    "value": "config.NETWORK.CLASSIFIER_DROPOUT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.NETWORK.VLBERT.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "config.DATASET.ANSWER_VOCAB_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_90": {
                "in_features": {
                    "value": "2 * 5 + 9",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.NETWORK.VLBERT.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_91": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_92": {
                "in_features": {
                    "value": "config.NETWORK.VLBERT.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.NETWORK.VLBERT.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_107": {
                "variable": {
                    "value": "self.spa_fusion_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.NETWORK.VLBERT.hidden_size + config.NETWORK.VLBERT.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.NETWORK.VLBERT.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_109": {
                "variable": {
                    "value": "self.spa_fusion_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.NETWORK.VLBERT.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.NETWORK.VLBERT.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_407": {
                "input": {
                    "value": "spo_fused_masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "spo_fused_masks.view(-1, nb_of_tokens, 14, 14)",
                            "Call"
                        ],
                        [
                            "spo_fused_masks.view(-1, nb_of_tokens, 14, 14)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "boxes_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(spo_fused_masks)",
                            "Call"
                        ],
                        [
                            "boxes.new_zeros(size=(boxes.shape[0], nb_of_tokens, 14, 14))",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_578": {
                "input": {
                    "value": "spo_fused_masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "spo_fused_masks.view(-1, nb_of_tokens, 14, 14)",
                            "Call"
                        ],
                        [
                            "spo_fused_masks.view(-1, nb_of_tokens, 14, 14)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "boxes_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(spo_fused_masks)",
                            "Call"
                        ],
                        [
                            "boxes.new_zeros(size=(boxes.shape[0], nb_of_tokens, 14, 14))",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_75": {
                "p": {
                    "value": "config.NETWORK.CLASSIFIER_DROPOUT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_334": {
                "input": {
                    "value": "h_o / h_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_513": {
                "input": {
                    "value": "h_o / h_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "vrd/modules/simple_spatial_model.py": {
        "torch": {
            "Linear_10": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "feature_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_11": {
                "variable": {
                    "value": "self.batchnorm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "feature_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "feature_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_13": {
                "variable": {
                    "value": "self.batchnorm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "feature_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.linear4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feature_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "feature_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_15": {
                "variable": {
                    "value": "self.batchnorm4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "feature_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.linear5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feature_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "feature_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_17": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_21": {
                "variable": {
                    "value": "subj_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "subj_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.linear1(subj)",
                            "Call"
                        ],
                        [
                            "F.relu(subj_feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_24": {
                "variable": {
                    "value": "obj_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.linear2(obj)",
                            "Call"
                        ],
                        [
                            "F.relu(obj_feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_28": {
                "variable": {
                    "value": "fused_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fused_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "subj_feature + obj_feature",
                            "BinOp"
                        ],
                        [
                            "self.linear4(fused_feature)",
                            "Call"
                        ],
                        [
                            "F.relu(fused_feature)",
                            "Call"
                        ],
                        [
                            "self.dropout(fused_feature)",
                            "Call"
                        ],
                        [
                            "self.linear5(fused_feature)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "vrd/train_end2end.py": {
        "torch": {
            "device_count_40": {
                "variable": {
                    "value": "num_gpus",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}