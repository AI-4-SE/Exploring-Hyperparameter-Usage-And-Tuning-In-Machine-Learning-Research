{
    "kgcvae_swda.py": {
        "tensorflow": {
            "DEFINE_string_16": {
                "name": {
                    "value": "word2vec_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The path to word2vec. Can be None.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_17": {
                "name": {
                    "value": "data_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "data/full_swda_clean_42da_sentiment_dialog_corpus.p",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Raw data directory.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_18": {
                "name": {
                    "value": "work_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "working",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Experiment results directory.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_19": {
                "name": {
                    "value": "equal_batch",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "Make each batch has similar length.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_20": {
                "name": {
                    "value": "resume",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "Resume from previous",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_21": {
                "name": {
                    "value": "forward_only",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "Only do decoding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_22": {
                "name": {
                    "value": "save_model",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "Create checkpoints",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_23": {
                "name": {
                    "value": "test_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "run1500783422",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "the dir to load checkpoint for forward only",
                    "type": "str",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_65": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "minval": {
                    "value": "-1.0 * config.init_w",
                    "type": "BinOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "config.init_w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_89": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "ckp_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(log_dir, 'checkpoints')",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_67": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'model'",
                            "str"
                        ]
                    ]
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(-1.0 * config.init_w, config.init_w)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'model'",
                            "str"
                        ]
                    ]
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(-1.0 * config.init_w, config.init_w)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_71": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'model'",
                            "str"
                        ]
                    ]
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(-1.0 * config.init_w, config.init_w)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/decoder_fn_lib.py": {
        "tensorflow": {
            "convert_to_tensor_46": {
                "variable": {
                    "value": "start_of_sequence_id",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "start_of_sequence_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(start_of_sequence_id, dtype)",
                            "Call"
                        ],
                        [
                            "start_of_sequence_id",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtypes.int32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_47": {
                "variable": {
                    "value": "end_of_sequence_id",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "end_of_sequence_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(end_of_sequence_id, dtype)",
                            "Call"
                        ],
                        [
                            "end_of_sequence_id",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtypes.int32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_49": {
                "variable": {
                    "value": "maximum_length",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "maximum_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(maximum_length, dtype)",
                            "Call"
                        ],
                        [
                            "maximum_length",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtypes.int32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_50": {
                "variable": {
                    "value": "num_decoder_symbols",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "num_decoder_symbols",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(num_decoder_symbols, dtype)",
                            "Call"
                        ],
                        [
                            "num_decoder_symbols",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtypes.int32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_42": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_135": {
                "variable": {
                    "value": "next_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embeddings",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "next_input_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.ones([batch_size], dtype=dtype) * start_of_sequence_id",
                            "BinOp"
                        ],
                        [
                            "math_ops.cast(tf.argmax(tf.subtract(cell_output, matrix_U), dimension=1), dtype=dtype)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(math_ops.argmax(cell_output, 1), dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_139": {
                "variable": {
                    "value": "done",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "math_ops.greater(time, maximum_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : array_ops.ones([batch_size], dtype=dtypes.bool)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : done",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "name_scope_148": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_51": {
                "structure": {
                    "value": "encoder_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_state",
                            "Method Argument"
                        ],
                        [
                            "encoder_state",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_99": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_109": {
                "variable": {
                    "value": "done",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_111": {
                "variable": {
                    "value": "cell_output",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_decoder_symbols]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_113": {
                "variable": {
                    "value": "context_state",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, maxium_length_int)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_128": {
                "variable": {
                    "value": "done",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "next_input_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.ones([batch_size], dtype=dtype) * start_of_sequence_id",
                            "BinOp"
                        ],
                        [
                            "math_ops.cast(tf.argmax(tf.subtract(cell_output, matrix_U), dimension=1), dtype=dtype)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(math_ops.argmax(cell_output, 1), dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "end_of_sequence_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(end_of_sequence_id, dtype)",
                            "Call"
                        ],
                        [
                            "end_of_sequence_id",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_130": {
                "variable": {
                    "value": "expanded_next_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_input_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.ones([batch_size], dtype=dtype) * start_of_sequence_id",
                            "BinOp"
                        ],
                        [
                            "math_ops.cast(tf.argmax(tf.subtract(cell_output, matrix_U), dimension=1), dtype=dtype)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(math_ops.argmax(cell_output, 1), dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_131": {
                "variable": {
                    "value": "sliced_context_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "context_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros((batch_size, maxium_length_int), dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.concat([expanded_next_input, sliced_context_state], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_state, [batch_size, maxium_length_int])",
                            "Call"
                        ],
                        [
                            "context_state",
                            "Method Argument"
                        ],
                        [
                            "context_state",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, maxium_length_int - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_132": {
                "variable": {
                    "value": "context_state",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[expanded_next_input, sliced_context_state]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "variable": {
                    "value": "context_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros((batch_size, maxium_length_int), dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.concat([expanded_next_input, sliced_context_state], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_state, [batch_size, maxium_length_int])",
                            "Call"
                        ],
                        [
                            "context_state",
                            "Method Argument"
                        ],
                        [
                            "context_state",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, maxium_length_int]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_137": {
                "variable": {
                    "value": "next_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[next_input, context_vector]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_182": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_186": {
                "variable": {
                    "value": "cell_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cell_input, context_vector]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_56": {
                "input": {
                    "value": "encoder_info",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.flatten(encoder_state)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cast_120": {
                "variable": {
                    "value": "next_input_id",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(tf.subtract(cell_output, matrix_U), dimension=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtypes.int32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "greater_139": {
                "x": {
                    "value": "time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "time",
                            "Method Argument"
                        ],
                        [
                            "time",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "maximum_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(maximum_length, dtype)",
                            "Call"
                        ],
                        [
                            "maximum_length",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_107": {
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtypes.int32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_123": {
                "variable": {
                    "value": "next_input_id",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "math_ops.argmax(cell_output, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtypes.int32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_140": {
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_118": {
                "x": {
                    "value": "-1.0 * tf.log(tf.random_uniform(tf.shape(cell_output), minval=0.0, maxval=1.0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_121": {
                "input": {
                    "value": "tf.subtract(cell_output, matrix_U)",
                    "type": "Call",
                    "possible_values": []
                },
                "dimension": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "subtract_121": {
                "x": {
                    "value": "cell_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.zeros([num_decoder_symbols], dtype=dtypes.float32)",
                            "Call"
                        ],
                        [
                            "output_fn(cell_output)",
                            "Call"
                        ],
                        [
                            "cell_output",
                            "Method Argument"
                        ],
                        [
                            "cell_output",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "matrix_U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1.0 * tf.log(-1.0 * tf.log(tf.random_uniform(tf.shape(cell_output), minval=0.0, maxval=1.0)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_124": {
                "input": {
                    "value": "cell_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.zeros([num_decoder_symbols], dtype=dtypes.float32)",
                            "Call"
                        ],
                        [
                            "output_fn(cell_output)",
                            "Call"
                        ],
                        [
                            "cell_output",
                            "Method Argument"
                        ],
                        [
                            "cell_output",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_119": {
                "x": {
                    "value": "tf.random_uniform(tf.shape(cell_output), minval=0.0, maxval=1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_119": {
                "input": {
                    "value": "cell_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.zeros([num_decoder_symbols], dtype=dtypes.float32)",
                            "Call"
                        ],
                        [
                            "output_fn(cell_output)",
                            "Call"
                        ],
                        [
                            "cell_output",
                            "Method Argument"
                        ],
                        [
                            "cell_output",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models/seq2seq.py": {
        "tensorflow": {
            "raw_rnn_211": {
                "variable": {
                    "value": "(outputs_ta, final_state, final_loop_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cell",
                            "Method Argument"
                        ]
                    ]
                },
                "loop_fn": {
                    "value": "loop_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loop_fn",
                            "Call"
                        ]
                    ]
                },
                "parallel_iterations": {
                    "value": "parallel_iterations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "swap_memory": {
                    "value": "swap_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_131": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_136": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.transpose(inputs, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TensorArray_155": {
                "variable": {
                    "value": "inputs_ta",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "size": {
                    "value": "max_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.get_shape()[0].value",
                            "Attribute"
                        ],
                        [
                            "array_ops.shape(inputs)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_224": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs_ta.stack()",
                            "Call"
                        ],
                        [
                            "array_ops.transpose(outputs, perm=[1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_145": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.transpose(inputs, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_184": {
                "variable": {
                    "value": "next_cell_input",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "math_ops.equal(time, max_time)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : array_ops.zeros([batch_size, input_depth], dtype=dtype)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : inputs_ta.read(time)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "shape_153": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.transpose(inputs, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_185": {
                "x": {
                    "value": "time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "time",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "max_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.get_shape()[0].value",
                            "Attribute"
                        ],
                        [
                            "array_ops.shape(inputs)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_183": {
                "input": {
                    "value": "done",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loop_state",
                            "variable"
                        ]
                    ]
                }
            },
            "zeros_186": {
                "shape": {
                    "value": "[batch_size, input_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.dtype",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "models/utils.py": {
        "tensorflow": {
            "exp_33": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dynamic_rnn_60": {
                "variable": {
                    "value": "(_, encoded_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cell",
                            "Method Argument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "length_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.sign(tf.reduce_max(tf.abs(embedding), reduction_indices=2)), reduction_indices=1)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(length_mask)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.sign(tf.reduce_max(tf.abs(embedding), reduction_indices=2)), reduction_indices=1)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(length_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_74": {
                "variable": {
                    "value": "(_, encoded_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "f_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f_cell",
                            "Method Argument"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "b_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b_cell",
                            "Method Argument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "length_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.sign(tf.reduce_max(tf.abs(embedding), reduction_indices=2)), reduction_indices=1)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(length_mask)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.sign(tf.reduce_max(tf.abs(embedding), reduction_indices=2)), reduction_indices=1)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(length_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_75": {
                "variable": {
                    "value": "encoded_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "encoded_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dynamic_rnn(cell, embedding, sequence_length=length_mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.bidirectional_dynamic_rnn(f_cell, b_cell, embedding, sequence_length=length_mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat(encoded_input, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_21": {
                "input_tensor": {
                    "value": "1 + (recog_logvar - prior_logvar) - tf.div(tf.pow(prior_mu - recog_mu, 2), tf.exp(prior_logvar)) - tf.div(tf.exp(recog_logvar), tf.exp(prior_logvar))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_28": {
                "input_tensor": {
                    "value": "tf.log(2 * np.pi) + logvar + tf.div(tf.pow(x - mu, 2), tf.exp(logvar))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_32": {
                "input": {
                    "value": "logvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logvar",
                            "Method Argument"
                        ],
                        [
                            "logvar",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_34": {
                "x": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(0.5 * logvar)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal(tf.shape(logvar), name='epsilon')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "RnnEncoding",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_58": {
                "variable": {
                    "value": "length_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.sign(tf.reduce_max(tf.abs(embedding), reduction_indices=2))",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_int32_59": {
                "variable": {
                    "value": "length_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "length_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.sign(tf.reduce_max(tf.abs(embedding), reduction_indices=2)), reduction_indices=1)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(length_mask)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.sign(tf.reduce_max(tf.abs(embedding), reduction_indices=2)), reduction_indices=1)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(length_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_70": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "RnnEncoding",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_72": {
                "variable": {
                    "value": "length_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.sign(tf.reduce_max(tf.abs(embedding), reduction_indices=2))",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_int32_73": {
                "variable": {
                    "value": "length_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "length_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.sign(tf.reduce_max(tf.abs(embedding), reduction_indices=2)), reduction_indices=1)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(length_mask)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.sign(tf.reduce_max(tf.abs(embedding), reduction_indices=2)), reduction_indices=1)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(length_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_45": {
                "input_tensor": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction_indices": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_47": {
                "input_tensor": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction_indices": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "div_23": {
                "x": {
                    "value": "tf.exp(recog_logvar)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.exp(prior_logvar)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_28": {
                "x": {
                    "value": "tf.pow(x - mu, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.exp(logvar)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sign_58": {
                "x": {
                    "value": "tf.reduce_max(tf.abs(embedding), reduction_indices=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sign_72": {
                "x": {
                    "value": "tf.reduce_max(tf.abs(embedding), reduction_indices=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_22": {
                "x": {
                    "value": "tf.pow(prior_mu - recog_mu, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.exp(prior_logvar)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_23": {
                "x": {
                    "value": "prior_logvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prior_logvar",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_28": {
                "x": {
                    "value": "2 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_28": {
                "x": {
                    "value": "x - mu",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_28": {
                "x": {
                    "value": "logvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logvar",
                            "Method Argument"
                        ],
                        [
                            "logvar",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_58": {
                "input_tensor": {
                    "value": "tf.abs(embedding)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_72": {
                "input_tensor": {
                    "value": "tf.abs(embedding)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_22": {
                "x": {
                    "value": "prior_mu - recog_mu",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_22": {
                "x": {
                    "value": "prior_logvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prior_logvar",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_58": {
                "x": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_72": {
                "x": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}